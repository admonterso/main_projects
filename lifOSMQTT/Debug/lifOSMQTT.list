
lifOSMQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d7c  08005d7c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d7c  08005d7c  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d7c  08005d7c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08005d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000013c  08005ec0  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08005ec0  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc7c  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268d  00000000  00000000  0002dde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a17  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c02  00000000  00000000  0004aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d64  00000000  00000000  0005b6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e340d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  000e3460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000013c 	.word	0x2000013c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800596c 	.word	0x0800596c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000140 	.word	0x20000140
 8000148:	0800596c 	.word	0x0800596c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <printMzadVar>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(4);
	HD44780_PrintStr("!");
}

void printMzadVar(uint8_t row, uint8_t column){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	460a      	mov	r2, r1
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800016c:	f000 fce4 	bl	8000b38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, mGeo);
 8000170:	493c      	ldr	r1, [pc, #240]	; (8000264 <printMzadVar+0x108>)
 8000172:	2001      	movs	r0, #1
 8000174:	f000 fd3e 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 8000178:	79fa      	ldrb	r2, [r7, #7]
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	4611      	mov	r1, r2
 800017e:	4618      	mov	r0, r3
 8000180:	f000 fcf0 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000184:	2001      	movs	r0, #1
 8000186:	f000 fd5e 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, zGeo);
 800018a:	4937      	ldr	r1, [pc, #220]	; (8000268 <printMzadVar+0x10c>)
 800018c:	2002      	movs	r0, #2
 800018e:	f000 fd31 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	3301      	adds	r3, #1
 8000196:	b2db      	uxtb	r3, r3
 8000198:	79fa      	ldrb	r2, [r7, #7]
 800019a:	4611      	mov	r1, r2
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fce1 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80001a2:	2002      	movs	r0, #2
 80001a4:	f000 fd4f 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, aGeo);
 80001a8:	4930      	ldr	r1, [pc, #192]	; (800026c <printMzadVar+0x110>)
 80001aa:	2003      	movs	r0, #3
 80001ac:	f000 fd22 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	3302      	adds	r3, #2
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	79fa      	ldrb	r2, [r7, #7]
 80001b8:	4611      	mov	r1, r2
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fcd2 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 80001c0:	2003      	movs	r0, #3
 80001c2:	f000 fd40 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 80001c6:	492a      	ldr	r1, [pc, #168]	; (8000270 <printMzadVar+0x114>)
 80001c8:	2004      	movs	r0, #4
 80001ca:	f000 fd13 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	3303      	adds	r3, #3
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	79fa      	ldrb	r2, [r7, #7]
 80001d6:	4611      	mov	r1, r2
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fcc3 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 80001de:	2004      	movs	r0, #4
 80001e0:	f000 fd31 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, vGeo);
 80001e4:	4923      	ldr	r1, [pc, #140]	; (8000274 <printMzadVar+0x118>)
 80001e6:	2005      	movs	r0, #5
 80001e8:	f000 fd04 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	3305      	adds	r3, #5
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fcb4 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 80001fc:	2005      	movs	r0, #5
 80001fe:	f000 fd22 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+6, row);
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	3306      	adds	r3, #6
 8000206:	b2db      	uxtb	r3, r3
 8000208:	79fa      	ldrb	r2, [r7, #7]
 800020a:	4611      	mov	r1, r2
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fca9 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 8000212:	2003      	movs	r0, #3
 8000214:	f000 fd17 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, rGeo);
 8000218:	4917      	ldr	r1, [pc, #92]	; (8000278 <printMzadVar+0x11c>)
 800021a:	2006      	movs	r0, #6
 800021c:	f000 fcea 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 8000220:	79bb      	ldrb	r3, [r7, #6]
 8000222:	3307      	adds	r3, #7
 8000224:	b2db      	uxtb	r3, r3
 8000226:	79fa      	ldrb	r2, [r7, #7]
 8000228:	4611      	mov	r1, r2
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fc9a 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 8000230:	2006      	movs	r0, #6
 8000232:	f000 fd08 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+8, row);
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	3308      	adds	r3, #8
 800023a:	b2db      	uxtb	r3, r3
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	4611      	mov	r1, r2
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fc8f 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 8000246:	480d      	ldr	r0, [pc, #52]	; (800027c <printMzadVar+0x120>)
 8000248:	f000 fd0a 	bl	8000c60 <HD44780_PrintStr>
	HD44780_SetCursor(6, 1);
 800024c:	2101      	movs	r1, #1
 800024e:	2006      	movs	r0, #6
 8000250:	f000 fc88 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintStr("-_-");
 8000254:	480a      	ldr	r0, [pc, #40]	; (8000280 <printMzadVar+0x124>)
 8000256:	f000 fd03 	bl	8000c60 <HD44780_PrintStr>
}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000060 	.word	0x20000060
 8000268:	20000068 	.word	0x20000068
 800026c:	20000020 	.word	0x20000020
 8000270:	20000018 	.word	0x20000018
 8000274:	20000070 	.word	0x20000070
 8000278:	20000078 	.word	0x20000078
 800027c:	08005984 	.word	0x08005984
 8000280:	08005988 	.word	0x08005988

08000284 <printUcxoBaratia>:
void printUcxoBaratia(uint8_t row, uint8_t column){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 8000294:	f000 fc50 	bl	8000b38 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 8000298:	494e      	ldr	r1, [pc, #312]	; (80003d4 <printUcxoBaratia+0x150>)
 800029a:	2001      	movs	r0, #1
 800029c:	f000 fcaa 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 80002a0:	79fa      	ldrb	r2, [r7, #7]
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	4611      	mov	r1, r2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fc5c 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 fcca 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 80002b2:	4949      	ldr	r1, [pc, #292]	; (80003d8 <printUcxoBaratia+0x154>)
 80002b4:	2002      	movs	r0, #2
 80002b6:	f000 fc9d 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	3301      	adds	r3, #1
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	79fa      	ldrb	r2, [r7, #7]
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fc4d 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 80002ca:	2002      	movs	r0, #2
 80002cc:	f000 fcbb 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 80002d0:	4942      	ldr	r1, [pc, #264]	; (80003dc <printUcxoBaratia+0x158>)
 80002d2:	2003      	movs	r0, #3
 80002d4:	f000 fc8e 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	3302      	adds	r3, #2
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	79fa      	ldrb	r2, [r7, #7]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fc3e 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 80002e8:	2003      	movs	r0, #3
 80002ea:	f000 fcac 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 80002ee:	493c      	ldr	r1, [pc, #240]	; (80003e0 <printUcxoBaratia+0x15c>)
 80002f0:	2004      	movs	r0, #4
 80002f2:	f000 fc7f 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	3303      	adds	r3, #3
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	79fa      	ldrb	r2, [r7, #7]
 80002fe:	4611      	mov	r1, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fc2f 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 8000306:	2004      	movs	r0, #4
 8000308:	f000 fc9d 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800030c:	4935      	ldr	r1, [pc, #212]	; (80003e4 <printUcxoBaratia+0x160>)
 800030e:	2005      	movs	r0, #5
 8000310:	f000 fc70 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	3305      	adds	r3, #5
 8000318:	b2db      	uxtb	r3, r3
 800031a:	79fa      	ldrb	r2, [r7, #7]
 800031c:	4611      	mov	r1, r2
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fc20 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 8000324:	2005      	movs	r0, #5
 8000326:	f000 fc8e 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	3306      	adds	r3, #6
 800032e:	b2db      	uxtb	r3, r3
 8000330:	79fa      	ldrb	r2, [r7, #7]
 8000332:	4611      	mov	r1, r2
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fc15 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800033a:	2004      	movs	r0, #4
 800033c:	f000 fc83 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 8000340:	4929      	ldr	r1, [pc, #164]	; (80003e8 <printUcxoBaratia+0x164>)
 8000342:	2006      	movs	r0, #6
 8000344:	f000 fc56 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	3307      	adds	r3, #7
 800034c:	b2db      	uxtb	r3, r3
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fc06 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 8000358:	2006      	movs	r0, #6
 800035a:	f000 fc74 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3308      	adds	r3, #8
 8000362:	b2db      	uxtb	r3, r3
 8000364:	79fa      	ldrb	r2, [r7, #7]
 8000366:	4611      	mov	r1, r2
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fbfb 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800036e:	2004      	movs	r0, #4
 8000370:	f000 fc69 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 8000374:	491d      	ldr	r1, [pc, #116]	; (80003ec <printUcxoBaratia+0x168>)
 8000376:	2007      	movs	r0, #7
 8000378:	f000 fc3c 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	3309      	adds	r3, #9
 8000380:	b2db      	uxtb	r3, r3
 8000382:	79fa      	ldrb	r2, [r7, #7]
 8000384:	4611      	mov	r1, r2
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fbec 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800038c:	2007      	movs	r0, #7
 800038e:	f000 fc5a 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 8000392:	4917      	ldr	r1, [pc, #92]	; (80003f0 <printUcxoBaratia+0x16c>)
 8000394:	2008      	movs	r0, #8
 8000396:	f000 fc2d 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	330a      	adds	r3, #10
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	79fa      	ldrb	r2, [r7, #7]
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fbdd 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 80003aa:	2008      	movs	r0, #8
 80003ac:	f000 fc4b 	bl	8000c46 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	330b      	adds	r3, #11
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fbd2 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 80003c0:	2004      	movs	r0, #4
 80003c2:	f000 fc40 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 80003c6:	480b      	ldr	r0, [pc, #44]	; (80003f4 <printUcxoBaratia+0x170>)
 80003c8:	f000 fc4a 	bl	8000c60 <HD44780_PrintStr>

}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000008 	.word	0x20000008
 80003d8:	20000010 	.word	0x20000010
 80003dc:	20000070 	.word	0x20000070
 80003e0:	20000020 	.word	0x20000020
 80003e4:	20000030 	.word	0x20000030
 80003e8:	20000078 	.word	0x20000078
 80003ec:	20000058 	.word	0x20000058
 80003f0:	20000038 	.word	0x20000038
 80003f4:	08005984 	.word	0x08005984

080003f8 <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 8000408:	f000 fb96 	bl	8000b38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800040c:	4948      	ldr	r1, [pc, #288]	; (8000530 <printBlansiAraa+0x138>)
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fbf0 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 8000414:	79fa      	ldrb	r2, [r7, #7]
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fba2 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fc10 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 8000426:	4943      	ldr	r1, [pc, #268]	; (8000534 <printBlansiAraa+0x13c>)
 8000428:	2002      	movs	r0, #2
 800042a:	f000 fbe3 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800042e:	79bb      	ldrb	r3, [r7, #6]
 8000430:	3301      	adds	r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fb93 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800043e:	2002      	movs	r0, #2
 8000440:	f000 fc01 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 8000444:	493c      	ldr	r1, [pc, #240]	; (8000538 <printBlansiAraa+0x140>)
 8000446:	2003      	movs	r0, #3
 8000448:	f000 fbd4 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	3302      	adds	r3, #2
 8000450:	b2db      	uxtb	r3, r3
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fb84 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800045c:	2003      	movs	r0, #3
 800045e:	f000 fbf2 	bl	8000c46 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 8000462:	79bb      	ldrb	r3, [r7, #6]
 8000464:	3303      	adds	r3, #3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	79fa      	ldrb	r2, [r7, #7]
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fb79 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 8000472:	2002      	movs	r0, #2
 8000474:	f000 fbe7 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 8000478:	4930      	ldr	r1, [pc, #192]	; (800053c <printBlansiAraa+0x144>)
 800047a:	2004      	movs	r0, #4
 800047c:	f000 fbba 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	3304      	adds	r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4611      	mov	r1, r2
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fb6a 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 8000490:	2004      	movs	r0, #4
 8000492:	f000 fbd8 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 8000496:	492a      	ldr	r1, [pc, #168]	; (8000540 <printBlansiAraa+0x148>)
 8000498:	2005      	movs	r0, #5
 800049a:	f000 fbab 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	3305      	adds	r3, #5
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fb5b 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 80004ae:	2005      	movs	r0, #5
 80004b0:	f000 fbc9 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 80004b4:	4923      	ldr	r1, [pc, #140]	; (8000544 <printBlansiAraa+0x14c>)
 80004b6:	2006      	movs	r0, #6
 80004b8:	f000 fb9c 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	3306      	adds	r3, #6
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	79fa      	ldrb	r2, [r7, #7]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fb4c 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 80004cc:	2006      	movs	r0, #6
 80004ce:	f000 fbba 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	3308      	adds	r3, #8
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	79fa      	ldrb	r2, [r7, #7]
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fb41 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f000 fbaf 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 80004e8:	4917      	ldr	r1, [pc, #92]	; (8000548 <printBlansiAraa+0x150>)
 80004ea:	2007      	movs	r0, #7
 80004ec:	f000 fb82 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	3309      	adds	r3, #9
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	79fa      	ldrb	r2, [r7, #7]
 80004f8:	4611      	mov	r1, r2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fb32 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 8000500:	2007      	movs	r0, #7
 8000502:	f000 fba0 	bl	8000c46 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	330a      	adds	r3, #10
 800050a:	b2db      	uxtb	r3, r3
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fb27 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fb95 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fb92 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <printBlansiAraa+0x154>)
 8000524:	f000 fb9c 	bl	8000c60 <HD44780_PrintStr>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000030 	.word	0x20000030
 8000534:	20000020 	.word	0x20000020
 8000538:	20000040 	.word	0x20000040
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000038 	.word	0x20000038
 8000548:	20000078 	.word	0x20000078
 800054c:	08005984 	.word	0x08005984

08000550 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	4613      	mov	r3, r2
 800055e:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 8000560:	f000 faea 	bl	8000b38 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 8000564:	4959      	ldr	r1, [pc, #356]	; (80006cc <printMiadetBarati+0x17c>)
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fb44 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800056c:	79fa      	ldrb	r2, [r7, #7]
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f000 faf6 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fb64 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800057e:	4954      	ldr	r1, [pc, #336]	; (80006d0 <printMiadetBarati+0x180>)
 8000580:	2002      	movs	r0, #2
 8000582:	f000 fb37 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	3301      	adds	r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	79fa      	ldrb	r2, [r7, #7]
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fae7 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 8000596:	2002      	movs	r0, #2
 8000598:	f000 fb55 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800059c:	494d      	ldr	r1, [pc, #308]	; (80006d4 <printMiadetBarati+0x184>)
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 fb28 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	3302      	adds	r3, #2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fad8 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 fb46 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 80005ba:	4947      	ldr	r1, [pc, #284]	; (80006d8 <printMiadetBarati+0x188>)
 80005bc:	2004      	movs	r0, #4
 80005be:	f000 fb19 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	3303      	adds	r3, #3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fac9 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 80005d2:	2004      	movs	r0, #4
 80005d4:	f000 fb37 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 80005d8:	4940      	ldr	r1, [pc, #256]	; (80006dc <printMiadetBarati+0x18c>)
 80005da:	2005      	movs	r0, #5
 80005dc:	f000 fb0a 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	3304      	adds	r3, #4
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	79fa      	ldrb	r2, [r7, #7]
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 faba 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 80005f0:	2005      	movs	r0, #5
 80005f2:	f000 fb28 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 80005f6:	493a      	ldr	r1, [pc, #232]	; (80006e0 <printMiadetBarati+0x190>)
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 fafb 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	3305      	adds	r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	79fa      	ldrb	r2, [r7, #7]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f000 faab 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800060e:	2006      	movs	r0, #6
 8000610:	f000 fb19 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 8000614:	4933      	ldr	r1, [pc, #204]	; (80006e4 <printMiadetBarati+0x194>)
 8000616:	2007      	movs	r0, #7
 8000618:	f000 faec 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	3307      	adds	r3, #7
 8000620:	b2db      	uxtb	r3, r3
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fa9c 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800062c:	2007      	movs	r0, #7
 800062e:	f000 fb0a 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	3308      	adds	r3, #8
 8000636:	b2db      	uxtb	r3, r3
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fa91 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 faff 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 8000648:	4927      	ldr	r1, [pc, #156]	; (80006e8 <printMiadetBarati+0x198>)
 800064a:	2008      	movs	r0, #8
 800064c:	f000 fad2 	bl	8000bf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	3309      	adds	r3, #9
 8000654:	b2db      	uxtb	r3, r3
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fa82 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 8000660:	2008      	movs	r0, #8
 8000662:	f000 faf0 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	330a      	adds	r3, #10
 800066a:	b2db      	uxtb	r3, r3
 800066c:	79fa      	ldrb	r2, [r7, #7]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fa77 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 8000676:	2003      	movs	r0, #3
 8000678:	f000 fae5 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	330b      	adds	r3, #11
 8000680:	b2db      	uxtb	r3, r3
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fa6c 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800068c:	2006      	movs	r0, #6
 800068e:	f000 fada 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	330c      	adds	r3, #12
 8000696:	b2db      	uxtb	r3, r3
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fa61 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 facf 	bl	8000c46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	3302      	adds	r3, #2
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	4610      	mov	r0, r2
 80006b8:	f000 fa54 	bl	8000b64 <HD44780_SetCursor>
		HD44780_PrintStr("0.18 GEL");
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <printMiadetBarati+0x19c>)
 80006be:	f000 facf 	bl	8000c60 <HD44780_PrintStr>


}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000060 	.word	0x20000060
 80006d0:	20000038 	.word	0x20000038
 80006d4:	20000020 	.word	0x20000020
 80006d8:	20000018 	.word	0x20000018
 80006dc:	20000080 	.word	0x20000080
 80006e0:	20000058 	.word	0x20000058
 80006e4:	20000030 	.word	0x20000030
 80006e8:	20000078 	.word	0x20000078
 80006ec:	0800598c 	.word	0x0800598c

080006f0 <printShecdoma>:
void printShecdoma(uint8_t row, uint8_t column){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 8000700:	f000 fa1a 	bl	8000b38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, SGeo);
 8000704:	493a      	ldr	r1, [pc, #232]	; (80007f0 <printShecdoma+0x100>)
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fa74 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fa26 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fa94 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, eGeo);
 800071e:	4935      	ldr	r1, [pc, #212]	; (80007f4 <printShecdoma+0x104>)
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fa67 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	3301      	adds	r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fa17 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 8000736:	2002      	movs	r0, #2
 8000738:	f000 fa85 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, cGeo);
 800073c:	492e      	ldr	r1, [pc, #184]	; (80007f8 <printShecdoma+0x108>)
 800073e:	2003      	movs	r0, #3
 8000740:	f000 fa58 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	3302      	adds	r3, #2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fa08 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 fa76 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800075a:	4928      	ldr	r1, [pc, #160]	; (80007fc <printShecdoma+0x10c>)
 800075c:	2004      	movs	r0, #4
 800075e:	f000 fa49 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	3303      	adds	r3, #3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f9f9 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 8000772:	2004      	movs	r0, #4
 8000774:	f000 fa67 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, oGeo);
 8000778:	4921      	ldr	r1, [pc, #132]	; (8000800 <printShecdoma+0x110>)
 800077a:	2005      	movs	r0, #5
 800077c:	f000 fa3a 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	3304      	adds	r3, #4
 8000784:	b2db      	uxtb	r3, r3
 8000786:	79fa      	ldrb	r2, [r7, #7]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f9ea 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 8000790:	2005      	movs	r0, #5
 8000792:	f000 fa58 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, mGeo);
 8000796:	491b      	ldr	r1, [pc, #108]	; (8000804 <printShecdoma+0x114>)
 8000798:	2006      	movs	r0, #6
 800079a:	f000 fa2b 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	3305      	adds	r3, #5
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f9db 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 80007ae:	2006      	movs	r0, #6
 80007b0:	f000 fa49 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, aGeo);
 80007b4:	4914      	ldr	r1, [pc, #80]	; (8000808 <printShecdoma+0x118>)
 80007b6:	2007      	movs	r0, #7
 80007b8:	f000 fa1c 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	3306      	adds	r3, #6
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f9cc 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 80007cc:	2007      	movs	r0, #7
 80007ce:	f000 fa3a 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+7, row);
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	3307      	adds	r3, #7
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f9c1 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <printShecdoma+0x11c>)
 80007e4:	f000 fa3c 	bl	8000c60 <HD44780_PrintStr>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000028 	.word	0x20000028
 80007f4:	20000080 	.word	0x20000080
 80007f8:	20000048 	.word	0x20000048
 80007fc:	20000018 	.word	0x20000018
 8000800:	20000050 	.word	0x20000050
 8000804:	20000060 	.word	0x20000060
 8000808:	20000020 	.word	0x20000020
 800080c:	08005984 	.word	0x08005984

08000810 <printDaicadet>:

void printDaicadet(uint8_t row, uint8_t column){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 8000820:	f000 f98a 	bl	8000b38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 8000824:	493a      	ldr	r1, [pc, #232]	; (8000910 <printDaicadet+0x100>)
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f9e4 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f996 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fa04 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800083e:	4935      	ldr	r1, [pc, #212]	; (8000914 <printDaicadet+0x104>)
 8000840:	2002      	movs	r0, #2
 8000842:	f000 f9d7 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	3301      	adds	r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f987 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 8000856:	2002      	movs	r0, #2
 8000858:	f000 f9f5 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800085c:	492e      	ldr	r1, [pc, #184]	; (8000918 <printDaicadet+0x108>)
 800085e:	2003      	movs	r0, #3
 8000860:	f000 f9c8 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	3302      	adds	r3, #2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f978 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f9e6 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800087a:	4928      	ldr	r1, [pc, #160]	; (800091c <printDaicadet+0x10c>)
 800087c:	2004      	movs	r0, #4
 800087e:	f000 f9b9 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	3303      	adds	r3, #3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f969 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 8000892:	2004      	movs	r0, #4
 8000894:	f000 f9d7 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	3304      	adds	r3, #4
 800089c:	b2db      	uxtb	r3, r3
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f95e 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80008a8:	2002      	movs	r0, #2
 80008aa:	f000 f9cc 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	3305      	adds	r3, #5
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f953 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 f9c1 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 80008c4:	4916      	ldr	r1, [pc, #88]	; (8000920 <printDaicadet+0x110>)
 80008c6:	2005      	movs	r0, #5
 80008c8:	f000 f994 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	3306      	adds	r3, #6
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f944 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 80008dc:	2005      	movs	r0, #5
 80008de:	f000 f9b2 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <printDaicadet+0x114>)
 80008e4:	2006      	movs	r0, #6
 80008e6:	f000 f985 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	3307      	adds	r3, #7
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f935 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 80008fa:	2006      	movs	r0, #6
 80008fc:	f000 f9a3 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <printDaicadet+0x118>)
 8000902:	f000 f9ad 	bl	8000c60 <HD44780_PrintStr>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000018 	.word	0x20000018
 8000914:	20000020 	.word	0x20000020
 8000918:	20000038 	.word	0x20000038
 800091c:	20000048 	.word	0x20000048
 8000920:	20000080 	.word	0x20000080
 8000924:	20000058 	.word	0x20000058
 8000928:	08005984 	.word	0x08005984

0800092c <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800093c:	f000 f8fc 	bl	8000b38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 8000940:	4934      	ldr	r1, [pc, #208]	; (8000a14 <printBalansi+0xe8>)
 8000942:	2001      	movs	r0, #1
 8000944:	f000 f956 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f908 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 f976 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800095a:	492f      	ldr	r1, [pc, #188]	; (8000a18 <printBalansi+0xec>)
 800095c:	2002      	movs	r0, #2
 800095e:	f000 f949 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	3301      	adds	r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8f9 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 8000972:	2002      	movs	r0, #2
 8000974:	f000 f967 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 8000978:	4928      	ldr	r1, [pc, #160]	; (8000a1c <printBalansi+0xf0>)
 800097a:	2003      	movs	r0, #3
 800097c:	f000 f93a 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	3302      	adds	r3, #2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f8ea 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f958 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 8000996:	2002      	movs	r0, #2
 8000998:	f000 f955 	bl	8000c46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	3303      	adds	r3, #3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f8dc 	bl	8000b64 <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 80009ac:	491c      	ldr	r1, [pc, #112]	; (8000a20 <printBalansi+0xf4>)
 80009ae:	2005      	movs	r0, #5
 80009b0:	f000 f920 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	3304      	adds	r3, #4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f8d0 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 80009c4:	2005      	movs	r0, #5
 80009c6:	f000 f93e 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 80009ca:	4916      	ldr	r1, [pc, #88]	; (8000a24 <printBalansi+0xf8>)
 80009cc:	2006      	movs	r0, #6
 80009ce:	f000 f911 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	3305      	adds	r3, #5
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f8c1 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 80009e2:	2006      	movs	r0, #6
 80009e4:	f000 f92f 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 80009e8:	490f      	ldr	r1, [pc, #60]	; (8000a28 <printBalansi+0xfc>)
 80009ea:	2007      	movs	r0, #7
 80009ec:	f000 f902 	bl	8000bf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	3306      	adds	r3, #6
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f8b2 	bl	8000b64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 8000a00:	2007      	movs	r0, #7
 8000a02:	f000 f920 	bl	8000c46 <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <printBalansi+0x100>)
 8000a08:	f000 f92a 	bl	8000c60 <HD44780_PrintStr>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000030 	.word	0x20000030
 8000a18:	20000020 	.word	0x20000020
 8000a1c:	20000040 	.word	0x20000040
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000038 	.word	0x20000038
 8000a2c:	08005998 	.word	0x08005998

08000a30 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000a3a:	4a38      	ldr	r2, [pc, #224]	; (8000b1c <HD44780_Init+0xec>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HD44780_Init+0xf0>)
 8000a42:	2208      	movs	r2, #8
 8000a44:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HD44780_Init+0xf4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <HD44780_Init+0xec>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d907      	bls.n	8000a64 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <HD44780_Init+0xf4>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <HD44780_Init+0xf4>)
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e006      	b.n	8000a72 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <HD44780_Init+0xf4>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HD44780_Init+0xf4>)
 8000a70:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000a72:	f000 f993 	bl	8000d9c <DelayInit>
  HAL_Delay(50);
 8000a76:	2032      	movs	r0, #50	; 0x32
 8000a78:	f001 fe14 	bl	80026a4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <HD44780_Init+0xf0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f951 	bl	8000d28 <ExpanderWrite>
  HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f001 fe0b 	bl	80026a4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000a8e:	2030      	movs	r0, #48	; 0x30
 8000a90:	f000 f938 	bl	8000d04 <Write4Bits>
  DelayUS(4500);
 8000a94:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a98:	f000 f9a8 	bl	8000dec <DelayUS>

  Write4Bits(0x03 << 4);
 8000a9c:	2030      	movs	r0, #48	; 0x30
 8000a9e:	f000 f931 	bl	8000d04 <Write4Bits>
  DelayUS(4500);
 8000aa2:	f241 1094 	movw	r0, #4500	; 0x1194
 8000aa6:	f000 f9a1 	bl	8000dec <DelayUS>

  Write4Bits(0x03 << 4);
 8000aaa:	2030      	movs	r0, #48	; 0x30
 8000aac:	f000 f92a 	bl	8000d04 <Write4Bits>
  DelayUS(4500);
 8000ab0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000ab4:	f000 f99a 	bl	8000dec <DelayUS>

  Write4Bits(0x02 << 4);
 8000ab8:	2020      	movs	r0, #32
 8000aba:	f000 f923 	bl	8000d04 <Write4Bits>
  DelayUS(100);
 8000abe:	2064      	movs	r0, #100	; 0x64
 8000ac0:	f000 f994 	bl	8000dec <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HD44780_Init+0xf4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f043 0320 	orr.w	r3, r3, #32
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f8db 	bl	8000c8a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HD44780_Init+0xf8>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000ada:	f000 f875 	bl	8000bc8 <HD44780_Display>
  HD44780_Clear();
 8000ade:	f000 f82b 	bl	8000b38 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HD44780_Init+0xfc>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HD44780_Init+0xfc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f8c9 	bl	8000c8a <SendCommand>
  DelayUS(4500);
 8000af8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000afc:	f000 f976 	bl	8000dec <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000b00:	490b      	ldr	r1, [pc, #44]	; (8000b30 <HD44780_Init+0x100>)
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f876 	bl	8000bf4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <HD44780_Init+0x104>)
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 f872 	bl	8000bf4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000b10:	f000 f81d 	bl	8000b4e <HD44780_Home>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000015b 	.word	0x2000015b
 8000b20:	2000015c 	.word	0x2000015c
 8000b24:	20000158 	.word	0x20000158
 8000b28:	20000159 	.word	0x20000159
 8000b2c:	2000015a 	.word	0x2000015a
 8000b30:	20000088 	.word	0x20000088
 8000b34:	20000090 	.word	0x20000090

08000b38 <HD44780_Clear>:

void HD44780_Clear()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 f8a4 	bl	8000c8a <SendCommand>
  DelayUS(2000);
 8000b42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b46:	f000 f951 	bl	8000dec <DelayUS>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HD44780_Home>:

void HD44780_Home()
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 f899 	bl	8000c8a <SendCommand>
  DelayUS(2000);
 8000b58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b5c:	f000 f946 	bl	8000dec <DelayUS>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HD44780_SetCursor+0x5c>)
 8000b76:	f107 0408 	add.w	r4, r7, #8
 8000b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HD44780_SetCursor+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	79ba      	ldrb	r2, [r7, #6]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d303      	bcc.n	8000b92 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HD44780_SetCursor+0x60>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	3318      	adds	r3, #24
 8000b98:	443b      	add	r3, r7
 8000b9a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f86a 	bl	8000c8a <SendCommand>
}
 8000bb6:	bf00      	nop
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	0800599c 	.word	0x0800599c
 8000bc4:	2000015b 	.word	0x2000015b

08000bc8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HD44780_Display+0x28>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HD44780_Display+0x28>)
 8000bd8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HD44780_Display+0x28>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f850 	bl	8000c8a <SendCommand>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000159 	.word	0x20000159

08000bf4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f837 	bl	8000c8a <SendCommand>
  for (int i=0; i<8; i++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e009      	b.n	8000c36 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f83b 	bl	8000ca6 <SendChar>
  for (int i=0; i<8; i++)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	ddf2      	ble.n	8000c22 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f827 	bl	8000ca6 <SendChar>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000c68:	e006      	b.n	8000c78 <HD44780_PrintStr+0x18>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f817 	bl	8000ca6 <SendChar>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f4      	bne.n	8000c6a <HD44780_PrintStr+0xa>
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f812 	bl	8000cc2 <Send>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f804 	bl	8000cc2 <Send>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	460a      	mov	r2, r1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f023 030f 	bic.w	r3, r3, #15
 8000cd8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000ce0:	7bfa      	ldrb	r2, [r7, #15]
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f80b 	bl	8000d04 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000cee:	7bba      	ldrb	r2, [r7, #14]
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f804 	bl	8000d04 <Write4Bits>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f809 	bl	8000d28 <ExpanderWrite>
  PulseEnable(value);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f821 	bl	8000d60 <PulseEnable>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <ExpanderWrite+0x30>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000d3e:	f107 020f 	add.w	r2, r7, #15
 8000d42:	230a      	movs	r3, #10
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	214e      	movs	r1, #78	; 0x4e
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <ExpanderWrite+0x34>)
 8000d4c:	f002 f9a0 	bl	8003090 <HAL_I2C_Master_Transmit>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000015c 	.word	0x2000015c
 8000d5c:	20000358 	.word	0x20000358

08000d60 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffd8 	bl	8000d28 <ExpanderWrite>
  DelayUS(20);
 8000d78:	2014      	movs	r0, #20
 8000d7a:	f000 f837 	bl	8000dec <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f023 0304 	bic.w	r3, r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ffce 	bl	8000d28 <ExpanderWrite>
  DelayUS(20);
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 f82d 	bl	8000dec <DelayUS>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <DelayInit>:

static void DelayInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <DelayInit+0x48>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <DelayInit+0x48>)
 8000da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000daa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <DelayInit+0x48>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <DelayInit+0x48>)
 8000db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000db6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <DelayInit+0x4c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <DelayInit+0x4c>)
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <DelayInit+0x4c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <DelayInit+0x4c>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <DelayInit+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000dd6:	bf00      	nop
  __ASM volatile ("NOP");
 8000dd8:	bf00      	nop
  __ASM volatile ("NOP");
 8000dda:	bf00      	nop
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	e000edf0 	.word	0xe000edf0
 8000de8:	e0001000 	.word	0xe0001000

08000dec <DelayUS>:

static void DelayUS(uint32_t us) {
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <DelayUS+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <DelayUS+0x44>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9a      	lsrs	r2, r3, #18
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <DelayUS+0x48>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <DelayUS+0x48>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f6      	bhi.n	8000e0e <DelayUS+0x22>
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	200000cc 	.word	0x200000cc
 8000e30:	431bde83 	.word	0x431bde83
 8000e34:	e0001000 	.word	0xe0001000

08000e38 <HAL_UART_RxCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

	if(count >= 124){
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_RxCpltCallback+0x50>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b7b      	cmp	r3, #123	; 0x7b
 8000e46:	dd02      	ble.n	8000e4e <HAL_UART_RxCpltCallback+0x16>
		count = 0;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_UART_RxCpltCallback+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
	}

	if(buffer[count] != '!'){
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_UART_RxCpltCallback+0x50>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_UART_RxCpltCallback+0x54>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	2b21      	cmp	r3, #33	; 0x21
 8000e58:	d00e      	beq.n	8000e78 <HAL_UART_RxCpltCallback+0x40>

		count++;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_UART_RxCpltCallback+0x50>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_UART_RxCpltCallback+0x50>)
 8000e62:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_UART_RxCpltCallback+0x50>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_UART_RxCpltCallback+0x54>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <HAL_UART_RxCpltCallback+0x58>)
 8000e72:	f003 fbd8 	bl	8004626 <HAL_UART_Receive_IT>
	}
	else{
		readSatus = 1;
	}

}
 8000e76:	e002      	b.n	8000e7e <HAL_UART_RxCpltCallback+0x46>
		readSatus = 1;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_UART_RxCpltCallback+0x5c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000354 	.word	0x20000354
 8000e8c:	20000270 	.word	0x20000270
 8000e90:	20000404 	.word	0x20000404
 8000e94:	2000016c 	.word	0x2000016c

08000e98 <takeStatus>:
void cardOperation(uint8_t* finalData, uint8_t* p);
void led(uint8_t n);
void readCardData(uint8_t* finalData);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

int takeStatus(uint8_t* data, int length){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =5; i< length; i++){
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e008      	b.n	8000eba <takeStatus+0x22>
	  if(data[i] == '<')
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b3c      	cmp	r3, #60	; 0x3c
 8000eb2:	d007      	beq.n	8000ec4 <takeStatus+0x2c>
	for(i =5; i< length; i++){
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dbf2      	blt.n	8000ea8 <takeStatus+0x10>
 8000ec2:	e000      	b.n	8000ec6 <takeStatus+0x2e>
	  {
		  break;
 8000ec4:	bf00      	nop
	  }
	}

	STATUSSTR[0] = data[i+1];
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3303      	adds	r3, #3
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	73bb      	strb	r3, [r7, #14]
	int Status = atoi((char*)STATUSSTR);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fff2 	bl	8004ed8 <atoi>
 8000ef4:	6138      	str	r0, [r7, #16]
	return Status;
 8000ef6:	693b      	ldr	r3, [r7, #16]

}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <takeData>:
void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	int i,j,l;
	for(i =5; i< length; i++){
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	e008      	b.n	8000f24 <takeData+0x24>
	  if(data[i] == '<')
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b3c      	cmp	r3, #60	; 0x3c
 8000f1c:	d007      	beq.n	8000f2e <takeData+0x2e>
	for(i =5; i< length; i++){
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fa      	ldr	r2, [r7, #28]
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf2      	blt.n	8000f12 <takeData+0x12>
 8000f2c:	e000      	b.n	8000f30 <takeData+0x30>
	  {
		  break;
 8000f2e:	bf00      	nop
	  }
	}
	for(j = i; j< length; j++){
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	e008      	b.n	8000f48 <takeData+0x48>
	  if(data[j] == ',')
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f40:	d007      	beq.n	8000f52 <takeData+0x52>
	for(j = i; j< length; j++){
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf2      	blt.n	8000f36 <takeData+0x36>
 8000f50:	e000      	b.n	8000f54 <takeData+0x54>
		 {
			  break;
 8000f52:	bf00      	nop
		 }
	}

	for(l = j; l< length; l++){
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e008      	b.n	8000f6c <takeData+0x6c>
	  if(data[l] == '!')
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b21      	cmp	r3, #33	; 0x21
 8000f64:	d007      	beq.n	8000f76 <takeData+0x76>
	for(l = j; l< length; l++){
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf2      	blt.n	8000f5a <takeData+0x5a>
 8000f74:	e000      	b.n	8000f78 <takeData+0x78>
		 {
			  break;
 8000f76:	bf00      	nop
		 }
	}

	strncpy((char *)dataToDisplay, (char *)data + j + 1, l - j - 1);
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	18d1      	adds	r1, r2, r3
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	461a      	mov	r2, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f004 f808 	bl	8004fa0 <strncpy>


}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000f9e:	f001 fb1f 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 fa45 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 fb41 	bl	800162c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000faa:	f000 fa87 	bl	80014bc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fae:	f000 fab3 	bl	8001518 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000fb2:	f000 fae7 	bl	8001584 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fb6:	f000 fb0f 	bl	80015d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fd38 	bl	8000a30 <HD44780_Init>
  //HAL_Delay(16000);
  printMzadVar(0, 3);
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff f8ca 	bl	800015c <printMzadVar>
  HD44780_SetCursor(0, 1);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fdca 	bl	8000b64 <HD44780_SetCursor>
//  for(int i = 0;i<2; i++){
//	  quectelInit();
//  }


  MFRC522_Init();
 8000fd0:	f000 fecd 	bl	8001d6e <MFRC522_Init>


  	led(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f001 f875 	bl	80020c4 <led>
  	led(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 f872 	bl	80020c4 <led>
  	led(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f001 f86f 	bl	80020c4 <led>
  	uint8_t cardRead = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	int CardTime;


  	//uint8_t stat = checkMQTTCon(buffer);

  	uint32_t version = *(__IO uint32_t *)versionAdress; // for version check
 8000fec:	4bb0      	ldr	r3, [pc, #704]	; (80012b0 <main+0x318>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"164522982240839\",\"firmwareVersion\":%lx}}", version);
 8000ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff4:	49af      	ldr	r1, [pc, #700]	; (80012b4 <main+0x31c>)
 8000ff6:	48b0      	ldr	r0, [pc, #704]	; (80012b8 <main+0x320>)
 8000ff8:	f003 ffb2 	bl	8004f60 <siprintf>
//  	HAL_UART_Receive(&huart1, buffer1, 125, 1000);
//  	int lengthOfCheckData = strlen((char*)buffer1);
//  	int StatusCheck = takeStatus(buffer1, lengthOfCheckData);
//
//  	if(StatusCheck != 200)HAL_NVIC_SystemReset();
  	HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 8000ffc:	4baf      	ldr	r3, [pc, #700]	; (80012bc <main+0x324>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4aaf      	ldr	r2, [pc, #700]	; (80012c0 <main+0x328>)
 8001002:	4413      	add	r3, r2
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	48ae      	ldr	r0, [pc, #696]	; (80012c4 <main+0x32c>)
 800100a:	f003 fb0c 	bl	8004626 <HAL_UART_Receive_IT>
  	T = HAL_GetTick();
 800100e:	f001 fb3f 	bl	8002690 <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	4aac      	ldr	r2, [pc, #688]	; (80012c8 <main+0x330>)
 8001016:	6013      	str	r3, [r2, #0]
  	 printMiadetBarati(0, 2);
 8001018:	2102      	movs	r1, #2
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fa98 	bl	8000550 <printMiadetBarati>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cardRead == 1){
 8001020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001024:	2b01      	cmp	r3, #1
 8001026:	d117      	bne.n	8001058 <main+0xc0>
		  if(HAL_GetTick() - CardTime >= 20000){
 8001028:	f001 fb32 	bl	8002690 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001036:	4293      	cmp	r3, r2
 8001038:	d90e      	bls.n	8001058 <main+0xc0>
			  printShecdoma(0, 4);
 800103a:	2104      	movs	r1, #4
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fb57 	bl	80006f0 <printShecdoma>
			  HAL_Delay(3000);
 8001042:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001046:	f001 fb2d 	bl	80026a4 <HAL_Delay>
			  printMiadetBarati(0, 2);
 800104a:	2102      	movs	r1, #2
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fa7f 	bl	8000550 <printMiadetBarati>
			  cardRead = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }

	  }
	  if(HAL_GetTick() - T >=(10000) && cardRead == 0){
 8001058:	f001 fb1a 	bl	8002690 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	4b9a      	ldr	r3, [pc, #616]	; (80012c8 <main+0x330>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f242 720f 	movw	r2, #9999	; 0x270f
 8001068:	4293      	cmp	r3, r2
 800106a:	d925      	bls.n	80010b8 <main+0x120>
 800106c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001070:	2b00      	cmp	r3, #0
 8001072:	d121      	bne.n	80010b8 <main+0x120>

		  if(temp >= check)HAL_NVIC_SystemReset();
 8001074:	4b95      	ldr	r3, [pc, #596]	; (80012cc <main+0x334>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b95      	ldr	r3, [pc, #596]	; (80012d0 <main+0x338>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	db01      	blt.n	8001084 <main+0xec>
 8001080:	f001 fc4b 	bl	800291a <HAL_NVIC_SystemReset>
		  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 8001084:	488c      	ldr	r0, [pc, #560]	; (80012b8 <main+0x320>)
 8001086:	f7ff f861 	bl	800014c <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fb55 	bl	800173c <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 8001092:	4889      	ldr	r0, [pc, #548]	; (80012b8 <main+0x320>)
 8001094:	f7ff f85a 	bl	800014c <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	2332      	movs	r3, #50	; 0x32
 800109e:	4986      	ldr	r1, [pc, #536]	; (80012b8 <main+0x320>)
 80010a0:	4888      	ldr	r0, [pc, #544]	; (80012c4 <main+0x32c>)
 80010a2:	f003 fa2e 	bl	8004502 <HAL_UART_Transmit>
		  T = HAL_GetTick();
 80010a6:	f001 faf3 	bl	8002690 <HAL_GetTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a86      	ldr	r2, [pc, #536]	; (80012c8 <main+0x330>)
 80010ae:	6013      	str	r3, [r2, #0]
		  temp = check;
 80010b0:	4b87      	ldr	r3, [pc, #540]	; (80012d0 <main+0x338>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a85      	ldr	r2, [pc, #532]	; (80012cc <main+0x334>)
 80010b6:	6013      	str	r3, [r2, #0]
	  }

	  if(readSatus){
 80010b8:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <main+0x33c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 813d 	beq.w	800133c <main+0x3a4>
		  int Status = takeStatus(buffer, count);
 80010c2:	4b7e      	ldr	r3, [pc, #504]	; (80012bc <main+0x324>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	487d      	ldr	r0, [pc, #500]	; (80012c0 <main+0x328>)
 80010ca:	f7ff fee5 	bl	8000e98 <takeStatus>
 80010ce:	63b8      	str	r0, [r7, #56]	; 0x38
		  uint8_t dispData[50];

		  switch(Status){
 80010d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010d6:	f280 80ff 	bge.w	80012d8 <main+0x340>
 80010da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010dc:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80010e0:	dc06      	bgt.n	80010f0 <main+0x158>
 80010e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e4:	2bc8      	cmp	r3, #200	; 0xc8
 80010e6:	d01f      	beq.n	8001128 <main+0x190>
 80010e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ea:	2bc9      	cmp	r3, #201	; 0xc9
 80010ec:	d026      	beq.n	800113c <main+0x1a4>
 80010ee:	e0f3      	b.n	80012d8 <main+0x340>
 80010f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f2:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	f200 80ee 	bhi.w	80012d8 <main+0x340>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <main+0x16c>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	080011b9 	.word	0x080011b9
 8001108:	080012d9 	.word	0x080012d9
 800110c:	0800117b 	.word	0x0800117b
 8001110:	080012d9 	.word	0x080012d9
 8001114:	080012d9 	.word	0x080012d9
 8001118:	080011f7 	.word	0x080011f7
 800111c:	08001235 	.word	0x08001235
 8001120:	080012d9 	.word	0x080012d9
 8001124:	08001273 	.word	0x08001273
		  	  	case 200:
		  	  		//AppruveSound();
		  	  		printUcxoBaratia(0, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff f8aa 	bl	8000284 <printUcxoBaratia>
		  	  		check++;
 8001130:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <main+0x338>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a66      	ldr	r2, [pc, #408]	; (80012d0 <main+0x338>)
 8001138:	6013      	str	r3, [r2, #0]
		  	  		break;
 800113a:	e0e5      	b.n	8001308 <main+0x370>
		  	  	case 201:
					AppruveSound();
 800113c:	f001 f978 	bl	8002430 <AppruveSound>
					takeData(buffer, count, dispData);
 8001140:	4b5e      	ldr	r3, [pc, #376]	; (80012bc <main+0x324>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1d3a      	adds	r2, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	485d      	ldr	r0, [pc, #372]	; (80012c0 <main+0x328>)
 800114a:	f7ff fed9 	bl	8000f00 <takeData>
					printBalansi(0, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fbeb 	bl	800092c <printBalansi>
					HD44780_PrintStr((char*) dispData);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd81 	bl	8000c60 <HD44780_PrintStr>
					RelaySwitch();
 800115e:	f001 f997 	bl	8002490 <RelaySwitch>
					HAL_Delay(2000);
 8001162:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001166:	f001 fa9d 	bl	80026a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800116a:	2102      	movs	r1, #2
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff f9ef 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8001178:	e0c6      	b.n	8001308 <main+0x370>
				case 293:
					takeData(buffer, count, dispData);
 800117a:	4b50      	ldr	r3, [pc, #320]	; (80012bc <main+0x324>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	484f      	ldr	r0, [pc, #316]	; (80012c0 <main+0x328>)
 8001184:	f7ff febc 	bl	8000f00 <takeData>
					HD44780_Clear();
 8001188:	f7ff fcd6 	bl	8000b38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800118c:	2100      	movs	r1, #0
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fce8 	bl	8000b64 <HD44780_SetCursor>
					printUcxoBaratia(0,0);
 8001194:	2100      	movs	r1, #0
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff f874 	bl	8000284 <printUcxoBaratia>
					ErrorSound();
 800119c:	f001 f98a 	bl	80024b4 <ErrorSound>
					HAL_Delay(1000);
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	f001 fa7e 	bl	80026a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 80011a8:	2102      	movs	r1, #2
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff f9d0 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 80011b6:	e0a7      	b.n	8001308 <main+0x370>
				case 291:
					takeData(buffer, count, dispData);
 80011b8:	4b40      	ldr	r3, [pc, #256]	; (80012bc <main+0x324>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1d3a      	adds	r2, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	483f      	ldr	r0, [pc, #252]	; (80012c0 <main+0x328>)
 80011c2:	f7ff fe9d 	bl	8000f00 <takeData>
					HD44780_Clear();
 80011c6:	f7ff fcb7 	bl	8000b38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fcc9 	bl	8000b64 <HD44780_SetCursor>
					printBlansiAraa(0, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff f90f 	bl	80003f8 <printBlansiAraa>
					ErrorSound();
 80011da:	f001 f96b 	bl	80024b4 <ErrorSound>
					HAL_Delay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e2:	f001 fa5f 	bl	80026a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 80011e6:	2102      	movs	r1, #2
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff f9b1 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 80011f4:	e088      	b.n	8001308 <main+0x370>
				case 296:
					takeData(buffer, count, dispData);
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <main+0x324>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1d3a      	adds	r2, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <main+0x328>)
 8001200:	f7ff fe7e 	bl	8000f00 <takeData>
					HD44780_Clear();
 8001204:	f7ff fc98 	bl	8000b38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 8001208:	2100      	movs	r1, #0
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fcaa 	bl	8000b64 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd24 	bl	8000c60 <HD44780_PrintStr>
					ErrorSound();
 8001218:	f001 f94c 	bl	80024b4 <ErrorSound>
					HAL_Delay(3000);
 800121c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001220:	f001 fa40 	bl	80026a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 8001224:	2102      	movs	r1, #2
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff f992 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8001232:	e069      	b.n	8001308 <main+0x370>
				case 297:
					takeData(buffer, count, dispData);
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <main+0x324>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1d3a      	adds	r2, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4820      	ldr	r0, [pc, #128]	; (80012c0 <main+0x328>)
 800123e:	f7ff fe5f 	bl	8000f00 <takeData>
					HD44780_Clear();
 8001242:	f7ff fc79 	bl	8000b38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fc8b 	bl	8000b64 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd05 	bl	8000c60 <HD44780_PrintStr>
					ErrorSound();
 8001256:	f001 f92d 	bl	80024b4 <ErrorSound>
					HAL_Delay(3000);
 800125a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800125e:	f001 fa21 	bl	80026a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 8001262:	2102      	movs	r1, #2
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff f973 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8001270:	e04a      	b.n	8001308 <main+0x370>
				case 299:
					takeData(buffer, count, dispData);
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <main+0x324>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1d3a      	adds	r2, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <main+0x328>)
 800127c:	f7ff fe40 	bl	8000f00 <takeData>
					HD44780_Clear();
 8001280:	f7ff fc5a 	bl	8000b38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fc6c 	bl	8000b64 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fce6 	bl	8000c60 <HD44780_PrintStr>
					ErrorSound();
 8001294:	f001 f90e 	bl	80024b4 <ErrorSound>
					HAL_Delay(3000);
 8001298:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800129c:	f001 fa02 	bl	80026a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 80012a0:	2102      	movs	r1, #2
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff f954 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 80012ae:	e02b      	b.n	8001308 <main+0x370>
 80012b0:	0800bff0 	.word	0x0800bff0
 80012b4:	080059e4 	.word	0x080059e4
 80012b8:	200002f0 	.word	0x200002f0
 80012bc:	20000354 	.word	0x20000354
 80012c0:	20000270 	.word	0x20000270
 80012c4:	20000404 	.word	0x20000404
 80012c8:	20000160 	.word	0x20000160
 80012cc:	20000164 	.word	0x20000164
 80012d0:	20000098 	.word	0x20000098
 80012d4:	2000016c 	.word	0x2000016c
				default:
					memset(buffer, 0, sizeof(buffer));
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	2100      	movs	r1, #0
 80012dc:	484e      	ldr	r0, [pc, #312]	; (8001418 <main+0x480>)
 80012de:	f003 fe37 	bl	8004f50 <memset>
				    memset(dispData, 0, sizeof(dispData));
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2232      	movs	r2, #50	; 0x32
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fe31 	bl	8004f50 <memset>
					readSatus = 0;
 80012ee:	4b4b      	ldr	r3, [pc, #300]	; (800141c <main+0x484>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
					count = 0;
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <main+0x488>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
					printMiadetBarati(0, 2);
 80012fa:	2102      	movs	r1, #2
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff f927 	bl	8000550 <printMiadetBarati>
					cardRead = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }
		  memset(buffer, 0, sizeof(buffer));
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	2100      	movs	r1, #0
 800130c:	4842      	ldr	r0, [pc, #264]	; (8001418 <main+0x480>)
 800130e:	f003 fe1f 	bl	8004f50 <memset>
		  memset(dispData, 0, sizeof(dispData));
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2232      	movs	r2, #50	; 0x32
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fe19 	bl	8004f50 <memset>
		  readSatus = 0;
 800131e:	4b3f      	ldr	r3, [pc, #252]	; (800141c <main+0x484>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		  count = 0;
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <main+0x488>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <main+0x488>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <main+0x480>)
 8001330:	4413      	add	r3, r2
 8001332:	2201      	movs	r2, #1
 8001334:	4619      	mov	r1, r3
 8001336:	483b      	ldr	r0, [pc, #236]	; (8001424 <main+0x48c>)
 8001338:	f003 f975 	bl	8004626 <HAL_UART_Receive_IT>
		 }

	 uint8_t catStat = cardOperationWithBlockedSector(postData);
 800133c:	483a      	ldr	r0, [pc, #232]	; (8001428 <main+0x490>)
 800133e:	f000 fd57 	bl	8001df0 <cardOperationWithBlockedSector>
 8001342:	4603      	mov	r3, r0
 8001344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if(catStat == 1 && cardRead == 0){
 8001348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800134c:	2b01      	cmp	r3, #1
 800134e:	f47f ae67 	bne.w	8001020 <main+0x88>
 8001352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001356:	2b00      	cmp	r3, #0
 8001358:	f47f ae62 	bne.w	8001020 <main+0x88>
		 uint8_t bpundCount = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 uint8_t postEnable = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		 LENGTH = strlen((char*)postData);
 8001368:	482f      	ldr	r0, [pc, #188]	; (8001428 <main+0x490>)
 800136a:	f7fe feef 	bl	800014c <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <main+0x494>)
 8001374:	601a      	str	r2, [r3, #0]

		 for(int i = 0; i< LENGTH+5; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	643b      	str	r3, [r7, #64]	; 0x40
 800137a:	e013      	b.n	80013a4 <main+0x40c>

			 if(postData[i]== '{' || postData[i] == '}'){
 800137c:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <main+0x490>)
 800137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b7b      	cmp	r3, #123	; 0x7b
 8001386:	d005      	beq.n	8001394 <main+0x3fc>
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <main+0x490>)
 800138a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b7d      	cmp	r3, #125	; 0x7d
 8001392:	d104      	bne.n	800139e <main+0x406>
				 bpundCount++;
 8001394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001398:	3301      	adds	r3, #1
 800139a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 for(int i = 0; i< LENGTH+5; i++){
 800139e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a0:	3301      	adds	r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <main+0x494>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3304      	adds	r3, #4
 80013aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dde5      	ble.n	800137c <main+0x3e4>
			 }

		 }
		 if(bpundCount != 4){
 80013b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d007      	beq.n	80013c8 <main+0x430>
		 	postEnable = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		 	memset(postData, 0, sizeof(postData));
 80013be:	22ff      	movs	r2, #255	; 0xff
 80013c0:	2100      	movs	r1, #0
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <main+0x490>)
 80013c4:	f003 fdc4 	bl	8004f50 <memset>
		  }

		 if(postEnable == 0){
 80013c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f47f ae27 	bne.w	8001020 <main+0x88>
			 CardReadSound();
 80013d2:	f001 f891 	bl	80024f8 <CardReadSound>
			 printDaicadet(0, 3);
 80013d6:	2103      	movs	r1, #3
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fa19 	bl	8000810 <printDaicadet>
			 MQTTPubToTopic(LENGTH);
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <main+0x494>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f9aa 	bl	800173c <MQTTPubToTopic>
			 HAL_Delay(50);
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f001 f95b 	bl	80026a4 <HAL_Delay>

			 HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <main+0x494>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <main+0x490>)
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <main+0x48c>)
 80013fa:	f003 f882 	bl	8004502 <HAL_UART_Transmit>

			 memset(postData, 0, sizeof(postData));
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	2100      	movs	r1, #0
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <main+0x490>)
 8001404:	f003 fda4 	bl	8004f50 <memset>
			 cardRead = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 CardTime = HAL_GetTick();
 800140e:	f001 f93f 	bl	8002690 <HAL_GetTick>
 8001412:	4603      	mov	r3, r0
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
  {
 8001416:	e603      	b.n	8001020 <main+0x88>
 8001418:	20000270 	.word	0x20000270
 800141c:	2000016c 	.word	0x2000016c
 8001420:	20000354 	.word	0x20000354
 8001424:	20000404 	.word	0x20000404
 8001428:	20000170 	.word	0x20000170
 800142c:	20000168 	.word	0x20000168

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b090      	sub	sp, #64	; 0x40
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	2228      	movs	r2, #40	; 0x28
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fd86 	bl	8004f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001460:	2301      	movs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800146e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f90f 	bl	800369c <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001484:	f000 f954 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2302      	movs	r3, #2
 800148e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2102      	movs	r1, #2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fb7c 	bl	8003ba0 <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014ae:	f000 f93f 	bl	8001730 <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3740      	adds	r7, #64	; 0x40
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C1_Init+0x50>)
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <MX_I2C1_Init+0x54>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_I2C1_Init+0x50>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_I2C1_Init+0x58>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C1_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C1_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_I2C1_Init+0x50>)
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C1_Init+0x50>)
 80014fa:	f001 fc85 	bl	8002e08 <HAL_I2C_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001504:	f000 f914 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000358 	.word	0x20000358
 8001510:	40005400 	.word	0x40005400
 8001514:	000186a0 	.word	0x000186a0

08001518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_SPI1_Init+0x64>)
 800151e:	4a18      	ldr	r2, [pc, #96]	; (8001580 <MX_SPI1_Init+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_SPI1_Init+0x64>)
 8001524:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_SPI1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_SPI1_Init+0x64>)
 8001544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_SPI1_Init+0x64>)
 800154c:	2218      	movs	r2, #24
 800154e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_SPI1_Init+0x64>)
 8001564:	220a      	movs	r2, #10
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_SPI1_Init+0x64>)
 800156a:	f002 fcb1 	bl	8003ed0 <HAL_SPI_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001574:	f000 f8dc 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200003ac 	.word	0x200003ac
 8001580:	40013000 	.word	0x40013000

08001584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART1_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015bc:	f002 ff54 	bl	8004468 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8b3 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000404 	.word	0x20000404
 80015d4:	40013800 	.word	0x40013800

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_USART2_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001610:	f002 ff2a 	bl	8004468 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 f889 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000448 	.word	0x20000448
 8001628:	40004400 	.word	0x40004400

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b37      	ldr	r3, [pc, #220]	; (8001720 <MX_GPIO_Init+0xf4>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a36      	ldr	r2, [pc, #216]	; (8001720 <MX_GPIO_Init+0xf4>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <MX_GPIO_Init+0xf4>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	4b31      	ldr	r3, [pc, #196]	; (8001720 <MX_GPIO_Init+0xf4>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a30      	ldr	r2, [pc, #192]	; (8001720 <MX_GPIO_Init+0xf4>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <MX_GPIO_Init+0xf4>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <MX_GPIO_Init+0xf4>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <MX_GPIO_Init+0xf4>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_GPIO_Init+0xf4>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_GPIO_Init+0xf4>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a24      	ldr	r2, [pc, #144]	; (8001720 <MX_GPIO_Init+0xf4>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MX_GPIO_Init+0xf4>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <MX_GPIO_Init+0xf8>)
 80016a8:	f001 fb7c 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2110      	movs	r1, #16
 80016b0:	481d      	ldr	r0, [pc, #116]	; (8001728 <MX_GPIO_Init+0xfc>)
 80016b2:	f001 fb77 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2103      	movs	r1, #3
 80016ba:	481c      	ldr	r0, [pc, #112]	; (800172c <MX_GPIO_Init+0x100>)
 80016bc:	f001 fb72 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_GPIO_Init+0xf8>)
 80016da:	f001 f9df 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016de:	2310      	movs	r3, #16
 80016e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_GPIO_Init+0xfc>)
 80016f6:	f001 f9d1 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 80016fa:	2303      	movs	r3, #3
 80016fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_GPIO_Init+0x100>)
 8001712:	f001 f9c3 	bl	8002a9c <HAL_GPIO_Init>

}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	40011000 	.word	0x40011000
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <MQTTPubToTopic>:
//			break;
//		}
//	}
}

void MQTTPubToTopic(int length){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\"liftos08765546789\",%d\r\n", (length));
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <MQTTPubToTopic+0x2c>)
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <MQTTPubToTopic+0x30>)
 800174a:	f003 fc09 	bl	8004f60 <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800174e:	2364      	movs	r3, #100	; 0x64
 8001750:	222e      	movs	r2, #46	; 0x2e
 8001752:	4906      	ldr	r1, [pc, #24]	; (800176c <MQTTPubToTopic+0x30>)
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <MQTTPubToTopic+0x34>)
 8001756:	f002 fed4 	bl	8004502 <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800175a:	201e      	movs	r0, #30
 800175c:	f000 ffa2 	bl	80026a4 <HAL_Delay>

}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08005a94 	.word	0x08005a94
 800176c:	2000009c 	.word	0x2000009c
 8001770:	20000404 	.word	0x20000404

08001774 <SPI1SendByte>:
extern void MFRC522_Halt(void);
extern void cardOperation(uint8_t* finalData, uint8_t* p);
extern void led(uint8_t n);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

uint8_t SPI1SendByte(uint8_t data) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001782:	f107 0208 	add.w	r2, r7, #8
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	230a      	movs	r3, #10
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <SPI1SendByte+0x2c>)
 8001792:	f002 fc21 	bl	8003fd8 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001796:	7a3b      	ldrb	r3, [r7, #8]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200003ac 	.word	0x200003ac

080017a4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80017b4:	2200      	movs	r2, #0
 80017b6:	2110      	movs	r1, #16
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <SPI1_WriteReg+0x3c>)
 80017ba:	f001 faf3 	bl	8002da4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ffd7 	bl	8001774 <SPI1SendByte>
	SPI1SendByte(value);
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ffd3 	bl	8001774 <SPI1SendByte>
	cs_set();
 80017ce:	2201      	movs	r2, #1
 80017d0:	2110      	movs	r1, #16
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <SPI1_WriteReg+0x3c>)
 80017d4:	f001 fae6 	bl	8002da4 <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010800 	.word	0x40010800

080017e4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 80017ee:	2200      	movs	r2, #0
 80017f0:	2110      	movs	r1, #16
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <SPI1_ReadReg+0x3c>)
 80017f4:	f001 fad6 	bl	8002da4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ffba 	bl	8001774 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff ffb7 	bl	8001774 <SPI1SendByte>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <SPI1_ReadReg+0x3c>)
 8001810:	f001 fac8 	bl	8002da4 <HAL_GPIO_WritePin>
	return val;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40010800 	.word	0x40010800

08001824 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800183e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffac 	bl	80017a4 <SPI1_WriteReg>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	b25b      	sxtb	r3, r3
 8001864:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186e:	b25b      	sxtb	r3, r3
 8001870:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ffb5 	bl	80017e4 <SPI1_ReadReg>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
	return val;	
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffda 	bl	8001854 <MFRC522_ReadRegister>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffb8 	bl	8001824 <MFRC522_WriteRegister>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffc0 	bl	8001854 <MFRC522_ReadRegister>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018dc:	43db      	mvns	r3, r3
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4013      	ands	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff9a 	bl	8001824 <MFRC522_WriteRegister>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001904:	2107      	movs	r1, #7
 8001906:	200d      	movs	r0, #13
 8001908:	f7ff ff8c 	bl	8001824 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	200c      	movs	r0, #12
 8001920:	f000 f80f 	bl	8001942 <MFRC522_ToCard>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <MFRC522_Request+0x3c>
 800192e:	89bb      	ldrh	r3, [r7, #12]
 8001930:	2b10      	cmp	r3, #16
 8001932:	d001      	beq.n	8001938 <MFRC522_Request+0x40>
 8001934:	2302      	movs	r3, #2
 8001936:	73fb      	strb	r3, [r7, #15]
	return status;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001942:	b590      	push	{r4, r7, lr}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	4613      	mov	r3, r2
 8001952:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001954:	2302      	movs	r3, #2
 8001956:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001958:	2300      	movs	r3, #0
 800195a:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800195c:	2300      	movs	r3, #0
 800195e:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d006      	beq.n	8001974 <MFRC522_ToCard+0x32>
 8001966:	2b0e      	cmp	r3, #14
 8001968:	d109      	bne.n	800197e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800196a:	2312      	movs	r3, #18
 800196c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800196e:	2310      	movs	r3, #16
 8001970:	757b      	strb	r3, [r7, #21]
			break;
 8001972:	e005      	b.n	8001980 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001974:	2377      	movs	r3, #119	; 0x77
 8001976:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001978:	2330      	movs	r3, #48	; 0x30
 800197a:	757b      	strb	r3, [r7, #21]
			break;
 800197c:	e000      	b.n	8001980 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800197e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001980:	7dbb      	ldrb	r3, [r7, #22]
 8001982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4619      	mov	r1, r3
 800198a:	2002      	movs	r0, #2
 800198c:	f7ff ff4a 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	2004      	movs	r0, #4
 8001994:	f7ff ff92 	bl	80018bc <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	200a      	movs	r0, #10
 800199c:	f7ff ff74 	bl	8001888 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff ff3e 	bl	8001824 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80019a8:	2300      	movs	r3, #0
 80019aa:	827b      	strh	r3, [r7, #18]
 80019ac:	e00a      	b.n	80019c4 <MFRC522_ToCard+0x82>
 80019ae:	8a7b      	ldrh	r3, [r7, #18]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	2009      	movs	r0, #9
 80019ba:	f7ff ff33 	bl	8001824 <MFRC522_WriteRegister>
 80019be:	8a7b      	ldrh	r3, [r7, #18]
 80019c0:	3301      	adds	r3, #1
 80019c2:	827b      	strh	r3, [r7, #18]
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	8a7a      	ldrh	r2, [r7, #18]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3ef      	bcc.n	80019ae <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4619      	mov	r1, r3
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff ff26 	bl	8001824 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d103      	bne.n	80019e6 <MFRC522_ToCard+0xa4>
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	200d      	movs	r0, #13
 80019e2:	f7ff ff51 	bl	8001888 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80019e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019ea:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80019ec:	2004      	movs	r0, #4
 80019ee:	f7ff ff31 	bl	8001854 <MFRC522_ReadRegister>
 80019f2:	4603      	mov	r3, r0
 80019f4:	753b      	strb	r3, [r7, #20]
		i--;
 80019f6:	8a7b      	ldrh	r3, [r7, #18]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80019fc:	8a7b      	ldrh	r3, [r7, #18]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <MFRC522_ToCard+0xd6>
 8001a02:	7d3b      	ldrb	r3, [r7, #20]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <MFRC522_ToCard+0xd6>
 8001a0c:	7d3a      	ldrb	r2, [r7, #20]
 8001a0e:	7d7b      	ldrb	r3, [r7, #21]
 8001a10:	4013      	ands	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0e9      	beq.n	80019ec <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	200d      	movs	r0, #13
 8001a1c:	f7ff ff4e 	bl	80018bc <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001a20:	8a7b      	ldrh	r3, [r7, #18]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d057      	beq.n	8001ad6 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001a26:	2006      	movs	r0, #6
 8001a28:	f7ff ff14 	bl	8001854 <MFRC522_ReadRegister>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 031b 	and.w	r3, r3, #27
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d14d      	bne.n	8001ad2 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001a3a:	7d3a      	ldrb	r2, [r7, #20]
 8001a3c:	7dbb      	ldrb	r3, [r7, #22]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MFRC522_ToCard+0x10c>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	d140      	bne.n	8001ad6 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001a54:	200a      	movs	r0, #10
 8001a56:	f7ff fefd 	bl	8001854 <MFRC522_ReadRegister>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001a5e:	200c      	movs	r0, #12
 8001a60:	f7ff fef8 	bl	8001854 <MFRC522_ReadRegister>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001a6c:	7c7b      	ldrb	r3, [r7, #17]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <MFRC522_ToCard+0x148>
 8001a72:	7d3b      	ldrb	r3, [r7, #20]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	7c7b      	ldrb	r3, [r7, #17]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	801a      	strh	r2, [r3, #0]
 8001a88:	e005      	b.n	8001a96 <MFRC522_ToCard+0x154>
 8001a8a:	7d3b      	ldrb	r3, [r7, #20]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a94:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001a96:	7d3b      	ldrb	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <MFRC522_ToCard+0x15e>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d901      	bls.n	8001aaa <MFRC522_ToCard+0x168>
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001aaa:	2300      	movs	r3, #0
 8001aac:	827b      	strh	r3, [r7, #18]
 8001aae:	e00a      	b.n	8001ac6 <MFRC522_ToCard+0x184>
 8001ab0:	8a7b      	ldrh	r3, [r7, #18]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	18d4      	adds	r4, r2, r3
 8001ab6:	2009      	movs	r0, #9
 8001ab8:	f7ff fecc 	bl	8001854 <MFRC522_ReadRegister>
 8001abc:	4603      	mov	r3, r0
 8001abe:	7023      	strb	r3, [r4, #0]
 8001ac0:	8a7b      	ldrh	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	827b      	strh	r3, [r7, #18]
 8001ac6:	7d3b      	ldrb	r3, [r7, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	8a7a      	ldrh	r2, [r7, #18]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3ef      	bcc.n	8001ab0 <MFRC522_ToCard+0x16e>
 8001ad0:	e001      	b.n	8001ad6 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001aec:	2100      	movs	r1, #0
 8001aee:	200d      	movs	r0, #13
 8001af0:	f7ff fe98 	bl	8001824 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2293      	movs	r2, #147	; 0x93
 8001af8:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3301      	adds	r3, #1
 8001afe:	2220      	movs	r2, #32
 8001b00:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001b02:	f107 030a 	add.w	r3, r7, #10
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	200c      	movs	r0, #12
 8001b10:	f7ff ff17 	bl	8001942 <MFRC522_ToCard>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73bb      	strb	r3, [r7, #14]
 8001b22:	e009      	b.n	8001b38 <MFRC522_Anticoll+0x58>
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	4053      	eors	r3, r2
 8001b30:	737b      	strb	r3, [r7, #13]
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	3301      	adds	r3, #1
 8001b36:	73bb      	strb	r3, [r7, #14]
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d9f2      	bls.n	8001b24 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	7b7a      	ldrb	r2, [r7, #13]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <MFRC522_Anticoll+0x70>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	460b      	mov	r3, r1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001b68:	2104      	movs	r1, #4
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f7ff fea6 	bl	80018bc <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	200a      	movs	r0, #10
 8001b74:	f7ff fe88 	bl	8001888 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001b78:	2300      	movs	r3, #0
 8001b7a:	75fb      	strb	r3, [r7, #23]
 8001b7c:	e00a      	b.n	8001b94 <MFRC522_CalculateCRC+0x3a>
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	2009      	movs	r0, #9
 8001b8a:	f7ff fe4b 	bl	8001824 <MFRC522_WriteRegister>
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	3301      	adds	r3, #1
 8001b92:	75fb      	strb	r3, [r7, #23]
 8001b94:	7dfa      	ldrb	r2, [r7, #23]
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3f0      	bcc.n	8001b7e <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7ff fe40 	bl	8001824 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001ba4:	23ff      	movs	r3, #255	; 0xff
 8001ba6:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001ba8:	2005      	movs	r0, #5
 8001baa:	f7ff fe53 	bl	8001854 <MFRC522_ReadRegister>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75bb      	strb	r3, [r7, #22]
		i--;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <MFRC522_CalculateCRC+0x6e>
 8001bbe:	7dbb      	ldrb	r3, [r7, #22]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ef      	beq.n	8001ba8 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001bc8:	2022      	movs	r0, #34	; 0x22
 8001bca:	f7ff fe43 	bl	8001854 <MFRC522_ReadRegister>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1c5c      	adds	r4, r3, #1
 8001bda:	2021      	movs	r0, #33	; 0x21
 8001bdc:	f7ff fe3a 	bl	8001854 <MFRC522_ReadRegister>
 8001be0:	4603      	mov	r3, r0
 8001be2:	7023      	strb	r3, [r4, #0]
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 8001bf4:	2393      	movs	r3, #147	; 0x93
 8001bf6:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 8001bf8:	2370      	movs	r3, #112	; 0x70
 8001bfa:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	75fb      	strb	r3, [r7, #23]
 8001c00:	e00c      	b.n	8001c1c <MFRC522_SelectTag+0x30>
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	441a      	add	r2, r3
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	3318      	adds	r3, #24
 8001c10:	443b      	add	r3, r7
 8001c12:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	75fb      	strb	r3, [r7, #23]
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d9ef      	bls.n	8001c02 <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	1dda      	adds	r2, r3, #7
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	2107      	movs	r1, #7
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff93 	bl	8001b5a <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	f107 0108 	add.w	r1, r7, #8
 8001c3c:	f107 0312 	add.w	r3, r7, #18
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	2209      	movs	r2, #9
 8001c46:	200c      	movs	r0, #12
 8001c48:	f7ff fe7b 	bl	8001942 <MFRC522_ToCard>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 8001c50:	7d7b      	ldrb	r3, [r7, #21]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <MFRC522_SelectTag+0x76>
 8001c56:	8a7b      	ldrh	r3, [r7, #18]
 8001c58:	2b18      	cmp	r3, #24
 8001c5a:	d102      	bne.n	8001c62 <MFRC522_SelectTag+0x76>
 8001c5c:	7a3b      	ldrb	r3, [r7, #8]
 8001c5e:	75bb      	strb	r3, [r7, #22]
 8001c60:	e001      	b.n	8001c66 <MFRC522_SelectTag+0x7a>
 8001c62:	2300      	movs	r3, #0
 8001c64:	75bb      	strb	r3, [r7, #22]
	return size;
 8001c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	77bb      	strb	r3, [r7, #30]
 8001c8e:	e00c      	b.n	8001caa <MFRC522_Auth+0x3a>
 8001c90:	7fbb      	ldrb	r3, [r7, #30]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	441a      	add	r2, r3
 8001c96:	7fbb      	ldrb	r3, [r7, #30]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	3320      	adds	r3, #32
 8001c9e:	443b      	add	r3, r7
 8001ca0:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001ca4:	7fbb      	ldrb	r3, [r7, #30]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	77bb      	strb	r3, [r7, #30]
 8001caa:	7fbb      	ldrb	r3, [r7, #30]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d9ef      	bls.n	8001c90 <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	77bb      	strb	r3, [r7, #30]
 8001cb4:	e00c      	b.n	8001cd0 <MFRC522_Auth+0x60>
 8001cb6:	7fbb      	ldrb	r3, [r7, #30]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	441a      	add	r2, r3
 8001cbc:	7fbb      	ldrb	r3, [r7, #30]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	443b      	add	r3, r7
 8001cc6:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001cca:	7fbb      	ldrb	r3, [r7, #30]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	77bb      	strb	r3, [r7, #30]
 8001cd0:	7fbb      	ldrb	r3, [r7, #30]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d9ef      	bls.n	8001cb6 <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	f107 0110 	add.w	r1, r7, #16
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	200e      	movs	r0, #14
 8001cea:	f7ff fe2a 	bl	8001942 <MFRC522_ToCard>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <MFRC522_Auth+0x98>
 8001cf8:	2008      	movs	r0, #8
 8001cfa:	f7ff fdab 	bl	8001854 <MFRC522_ReadRegister>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <MFRC522_Auth+0x9c>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	77fb      	strb	r3, [r7, #31]
	return status;
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af02      	add	r7, sp, #8
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	6039      	str	r1, [r7, #0]
 8001d20:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2230      	movs	r2, #48	; 0x30
 8001d26:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	79fa      	ldrb	r2, [r7, #7]
 8001d2e:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3302      	adds	r3, #2
 8001d34:	461a      	mov	r2, r3
 8001d36:	2102      	movs	r1, #2
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f7ff ff0e 	bl	8001b5a <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	200c      	movs	r0, #12
 8001d4c:	f7ff fdf9 	bl	8001942 <MFRC522_ToCard>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <MFRC522_Read+0x4a>
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	2b90      	cmp	r3, #144	; 0x90
 8001d5e:	d001      	beq.n	8001d64 <MFRC522_Read+0x4e>
 8001d60:	2302      	movs	r3, #2
 8001d62:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001d72:	f000 f820 	bl	8001db6 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001d76:	218d      	movs	r1, #141	; 0x8d
 8001d78:	202a      	movs	r0, #42	; 0x2a
 8001d7a:	f7ff fd53 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001d7e:	213e      	movs	r1, #62	; 0x3e
 8001d80:	202b      	movs	r0, #43	; 0x2b
 8001d82:	f7ff fd4f 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001d86:	211e      	movs	r1, #30
 8001d88:	202d      	movs	r0, #45	; 0x2d
 8001d8a:	f7ff fd4b 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	f7ff fd47 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001d96:	2170      	movs	r1, #112	; 0x70
 8001d98:	2026      	movs	r0, #38	; 0x26
 8001d9a:	f7ff fd43 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001d9e:	2140      	movs	r1, #64	; 0x40
 8001da0:	2015      	movs	r0, #21
 8001da2:	f7ff fd3f 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001da6:	213d      	movs	r1, #61	; 0x3d
 8001da8:	2011      	movs	r0, #17
 8001daa:	f7ff fd3b 	bl	8001824 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001dae:	f000 f80a 	bl	8001dc6 <MFRC522_AntennaOn>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001dba:	210f      	movs	r1, #15
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fd31 	bl	8001824 <MFRC522_WriteRegister>
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001dcc:	2014      	movs	r0, #20
 8001dce:	f7ff fd41 	bl	8001854 <MFRC522_ReadRegister>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <MFRC522_AntennaOn+0x22>
 8001de0:	2103      	movs	r1, #3
 8001de2:	2014      	movs	r0, #20
 8001de4:	f7ff fd50 	bl	8001888 <MFRC522_SetBitMask>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b0f1      	sub	sp, #452	; 0x1c4
 8001df4:	af0e      	add	r7, sp, #56	; 0x38
 8001df6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dfa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001dfe:	6018      	str	r0, [r3, #0]
	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 8001e00:	4aad      	ldr	r2, [pc, #692]	; (80020b8 <cardOperationWithBlockedSector+0x2c8>)
 8001e02:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e0a:	6018      	str	r0, [r3, #0]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 8001e1c:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d13b      	bne.n	8001e9c <cardOperationWithBlockedSector+0xac>
	     MFRC522_Init();
 8001e24:	f7ff ffa3 	bl	8001d6e <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 8001e28:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2026      	movs	r0, #38	; 0x26
 8001e30:	f7ff fd62 	bl	80018f8 <MFRC522_Request>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d130      	bne.n	8001e9c <cardOperationWithBlockedSector+0xac>
	       if (!MFRC522_Anticoll(str)) {
 8001e3a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fe4e 	bl	8001ae0 <MFRC522_Anticoll>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d128      	bne.n	8001e9c <cardOperationWithBlockedSector+0xac>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\"164522975789130\",\"cardID\":\"%x%x%x%x\",", str[0],str[1], str[2], str[3]);
 8001e4a:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8001e54:	461c      	mov	r4, r3
 8001e56:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8001e5a:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8001e5e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001e62:	9201      	str	r2, [sp, #4]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4623      	mov	r3, r4
 8001e68:	460a      	mov	r2, r1
 8001e6a:	4994      	ldr	r1, [pc, #592]	; (80020bc <cardOperationWithBlockedSector+0x2cc>)
 8001e6c:	f003 f878 	bl	8004f60 <siprintf>

	         l = strlen((char*)IDBuff);
 8001e70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe f969 	bl	800014c <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 8001e80:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8001e84:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001e88:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f003 f84f 	bl	8004f34 <memcpy>

	         cardIDStatus = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 8001e9c:	2014      	movs	r0, #20
 8001e9e:	f000 fc01 	bl	80026a4 <HAL_Delay>
	  MFRC522_Init();
 8001ea2:	f7ff ff64 	bl	8001d6e <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 8001ea6:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	f040 80ed 	bne.w	800208a <cardOperationWithBlockedSector+0x29a>
 8001eb0:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 80e8 	bne.w	800208a <cardOperationWithBlockedSector+0x29a>
	    MFRC522_Init();
 8001eba:	f7ff ff58 	bl	8001d6e <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 8001ebe:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2026      	movs	r0, #38	; 0x26
 8001ec6:	f7ff fd17 	bl	80018f8 <MFRC522_Request>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 8001ed0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 80ce 	bne.w	8002076 <cardOperationWithBlockedSector+0x286>
	      status = MFRC522_Anticoll(str);
 8001eda:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fdfe 	bl	8001ae0 <MFRC522_Anticoll>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 8001eea:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 80b7 	bne.w	8002062 <cardOperationWithBlockedSector+0x272>
	        status = MFRC522_SelectTag(str);
 8001ef4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fe77 	bl	8001bec <MFRC522_SelectTag>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 8001f04:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a0 	beq.w	800204e <cardOperationWithBlockedSector+0x25e>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 8001f0e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f12:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001f16:	2102      	movs	r1, #2
 8001f18:	2061      	movs	r0, #97	; 0x61
 8001f1a:	f7ff fea9 	bl	8001c70 <MFRC522_Auth>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 8001f24:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f040 8086 	bne.w	800203a <cardOperationWithBlockedSector+0x24a>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 8001f2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f32:	4619      	mov	r1, r3
 8001f34:	2002      	movs	r0, #2
 8001f36:	f7ff feee 	bl	8001d16 <MFRC522_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 8001f40:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d16e      	bne.n	8002026 <cardOperationWithBlockedSector+0x236>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 8001f48:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001f4c:	469c      	mov	ip, r3
 8001f4e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8001f52:	469e      	mov	lr, r3
 8001f54:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8001f58:	461c      	mov	r4, r3
 8001f5a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001f5e:	461d      	mov	r5, r3
 8001f60:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8001f64:	461e      	mov	r6, r3
 8001f66:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001fa6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001faa:	930d      	str	r3, [sp, #52]	; 0x34
 8001fac:	920c      	str	r2, [sp, #48]	; 0x30
 8001fae:	910b      	str	r1, [sp, #44]	; 0x2c
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	920a      	str	r2, [sp, #40]	; 0x28
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	9208      	str	r2, [sp, #32]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	9207      	str	r2, [sp, #28]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	9206      	str	r2, [sp, #24]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	9205      	str	r2, [sp, #20]
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	9204      	str	r2, [sp, #16]
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	9303      	str	r3, [sp, #12]
 8001fd0:	9602      	str	r6, [sp, #8]
 8001fd2:	9501      	str	r5, [sp, #4]
 8001fd4:	9400      	str	r4, [sp, #0]
 8001fd6:	4673      	mov	r3, lr
 8001fd8:	4662      	mov	r2, ip
 8001fda:	4939      	ldr	r1, [pc, #228]	; (80020c0 <cardOperationWithBlockedSector+0x2d0>)
 8001fdc:	f002 ffc0 	bl	8004f60 <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 8001fe0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8001fe4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001fe8:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	18d4      	adds	r4, r2, r3
 8001ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f8a9 	bl	800014c <strlen>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002000:	4619      	mov	r1, r3
 8002002:	4620      	mov	r0, r4
 8002004:	f002 ff96 	bl	8004f34 <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 8002008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe f89d 	bl	800014c <strlen>
 8002012:	4603      	mov	r3, r0
 8002014:	b2da      	uxtb	r2, r3
 8002016:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800201a:	4413      	add	r3, r2
 800201c:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 8002026:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800202a:	2b02      	cmp	r3, #2
 800202c:	d105      	bne.n	800203a <cardOperationWithBlockedSector+0x24a>
	              led(READ_ERR);
 800202e:	2005      	movs	r0, #5
 8002030:	f000 f848 	bl	80020c4 <led>
	              cardIDStatus = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800203a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <cardOperationWithBlockedSector+0x25e>
	            led(AUTH_ERR);
 8002042:	2004      	movs	r0, #4
 8002044:	f000 f83e 	bl	80020c4 <led>
	            cardIDStatus = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800204e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <cardOperationWithBlockedSector+0x272>
	          led(TAG_SELECT_ERR);
 8002056:	2003      	movs	r0, #3
 8002058:	f000 f834 	bl	80020c4 <led>
	          cardIDStatus = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 8002062:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <cardOperationWithBlockedSector+0x286>
	        led(ANTICOL_ERR);
 800206a:	2002      	movs	r0, #2
 800206c:	f000 f82a 	bl	80020c4 <led>
	        cardIDStatus = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 8002076:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <cardOperationWithBlockedSector+0x29a>
	      led(REQUEST_ERR);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 f820 	bl	80020c4 <led>
	      cardIDStatus = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800208a:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10b      	bne.n	80020aa <cardOperationWithBlockedSector+0x2ba>
 8002092:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <cardOperationWithBlockedSector+0x2ba>

	      cardIDStatus = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <cardOperationWithBlockedSector+0x2bc>
	    }
	  return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	08005b60 	.word	0x08005b60
 80020bc:	08005ad4 	.word	0x08005ad4
 80020c0:	08005b30 	.word	0x08005b30

080020c4 <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e014      	b.n	80020fe <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <led+0x4c>)
 80020dc:	f000 fe62 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80020e0:	2064      	movs	r0, #100	; 0x64
 80020e2:	f000 fadf 	bl	80026a4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <led+0x4c>)
 80020ee:	f000 fe59 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80020f2:	2064      	movs	r0, #100	; 0x64
 80020f4:	f000 fad6 	bl	80026a4 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3301      	adds	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3e6      	bcc.n	80020d4 <led+0x10>
	}
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40011000 	.word	0x40011000

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_MspInit+0x5c>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_MspInit+0x5c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6193      	str	r3, [r2, #24]
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_MspInit+0x5c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x5c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x5c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x5c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_MspInit+0x60>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_MspInit+0x60>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000

08002178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_I2C_MspInit+0x70>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d123      	bne.n	80021e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_I2C_MspInit+0x74>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_I2C_MspInit+0x74>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_I2C_MspInit+0x74>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b4:	2312      	movs	r3, #18
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <HAL_I2C_MspInit+0x78>)
 80021c4:	f000 fc6a 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_I2C_MspInit+0x74>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_I2C_MspInit+0x74>)
 80021ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d2:	61d3      	str	r3, [r2, #28]
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_I2C_MspInit+0x74>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40005400 	.word	0x40005400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010c00 	.word	0x40010c00

080021f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1b      	ldr	r2, [pc, #108]	; (800227c <HAL_SPI_MspInit+0x88>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d12f      	bne.n	8002274 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_SPI_MspInit+0x8c>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_SPI_MspInit+0x8c>)
 800221a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_SPI_MspInit+0x8c>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_SPI_MspInit+0x8c>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_SPI_MspInit+0x8c>)
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_SPI_MspInit+0x8c>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002244:	23a0      	movs	r3, #160	; 0xa0
 8002246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4619      	mov	r1, r3
 8002256:	480b      	ldr	r0, [pc, #44]	; (8002284 <HAL_SPI_MspInit+0x90>)
 8002258:	f000 fc20 	bl	8002a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800225c:	2340      	movs	r3, #64	; 0x40
 800225e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <HAL_SPI_MspInit+0x90>)
 8002270:	f000 fc14 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013000 	.word	0x40013000
 8002280:	40021000 	.word	0x40021000
 8002284:	40010800 	.word	0x40010800

08002288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <HAL_UART_MspInit+0x108>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d13a      	bne.n	800231e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a8:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_UART_MspInit+0x10c>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_UART_MspInit+0x10c>)
 80022ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_UART_MspInit+0x10c>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_UART_MspInit+0x10c>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a33      	ldr	r2, [pc, #204]	; (8002394 <HAL_UART_MspInit+0x10c>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_UART_MspInit+0x10c>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0318 	add.w	r3, r7, #24
 80022ea:	4619      	mov	r1, r3
 80022ec:	482a      	ldr	r0, [pc, #168]	; (8002398 <HAL_UART_MspInit+0x110>)
 80022ee:	f000 fbd5 	bl	8002a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0318 	add.w	r3, r7, #24
 8002304:	4619      	mov	r1, r3
 8002306:	4824      	ldr	r0, [pc, #144]	; (8002398 <HAL_UART_MspInit+0x110>)
 8002308:	f000 fbc8 	bl	8002a9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2025      	movs	r0, #37	; 0x25
 8002312:	f000 fad8 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002316:	2025      	movs	r0, #37	; 0x25
 8002318:	f000 faf1 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800231c:	e034      	b.n	8002388 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_UART_MspInit+0x114>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d12f      	bne.n	8002388 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_UART_MspInit+0x10c>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_UART_MspInit+0x10c>)
 800232e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002332:	61d3      	str	r3, [r2, #28]
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_UART_MspInit+0x10c>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_UART_MspInit+0x10c>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a13      	ldr	r2, [pc, #76]	; (8002394 <HAL_UART_MspInit+0x10c>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_UART_MspInit+0x10c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002358:	2304      	movs	r3, #4
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0318 	add.w	r3, r7, #24
 8002368:	4619      	mov	r1, r3
 800236a:	480b      	ldr	r0, [pc, #44]	; (8002398 <HAL_UART_MspInit+0x110>)
 800236c:	f000 fb96 	bl	8002a9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002370:	2308      	movs	r3, #8
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	4619      	mov	r1, r3
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <HAL_UART_MspInit+0x110>)
 8002384:	f000 fb8a 	bl	8002a9c <HAL_GPIO_Init>
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	40010800 	.word	0x40010800
 800239c:	40004400 	.word	0x40004400

080023a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023a4:	f3bf 8f4f 	dsb	sy
}
 80023a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <__NVIC_SystemReset+0x24>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023b2:	4904      	ldr	r1, [pc, #16]	; (80023c4 <__NVIC_SystemReset+0x24>)
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_SystemReset+0x28>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ba:	f3bf 8f4f 	dsb	sy
}
 80023be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <__NVIC_SystemReset+0x20>
 80023c4:	e000ed00 	.word	0xe000ed00
 80023c8:	05fa0004 	.word	0x05fa0004

080023cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <NMI_Handler+0x4>

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80023d6:	f7ff ffe3 	bl	80023a0 <__NVIC_SystemReset>

080023da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <MemManage_Handler+0x4>

080023e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <BusFault_Handler+0x4>

080023e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <UsageFault_Handler+0x4>

080023ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002414:	f000 f92a 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <USART1_IRQHandler+0x10>)
 8002422:	f002 f931 	bl	8004688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000404 	.word	0x20000404

08002430 <AppruveSound>:

#include "stm32f1xx_hal.h"
#include "switchSounds.h"
#include "main.h"

void AppruveSound() {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 8002434:	2101      	movs	r1, #1
 8002436:	4815      	ldr	r0, [pc, #84]	; (800248c <AppruveSound+0x5c>)
 8002438:	f000 fccc 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800243c:	2050      	movs	r0, #80	; 0x50
 800243e:	f000 f931 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 8002442:	2101      	movs	r1, #1
 8002444:	4811      	ldr	r0, [pc, #68]	; (800248c <AppruveSound+0x5c>)
 8002446:	f000 fcc5 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800244a:	2050      	movs	r0, #80	; 0x50
 800244c:	f000 f92a 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 8002450:	2101      	movs	r1, #1
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <AppruveSound+0x5c>)
 8002454:	f000 fcbe 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8002458:	2050      	movs	r0, #80	; 0x50
 800245a:	f000 f923 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800245e:	2101      	movs	r1, #1
 8002460:	480a      	ldr	r0, [pc, #40]	; (800248c <AppruveSound+0x5c>)
 8002462:	f000 fcb7 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8002466:	2050      	movs	r0, #80	; 0x50
 8002468:	f000 f91c 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800246c:	2101      	movs	r1, #1
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <AppruveSound+0x5c>)
 8002470:	f000 fcb0 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8002474:	2050      	movs	r0, #80	; 0x50
 8002476:	f000 f915 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800247a:	2101      	movs	r1, #1
 800247c:	4803      	ldr	r0, [pc, #12]	; (800248c <AppruveSound+0x5c>)
 800247e:	f000 fca9 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8002482:	2050      	movs	r0, #80	; 0x50
 8002484:	f000 f90e 	bl	80026a4 <HAL_Delay>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40010c00 	.word	0x40010c00

08002490 <RelaySwitch>:
void RelaySwitch() {
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 8002494:	2102      	movs	r1, #2
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <RelaySwitch+0x20>)
 8002498:	f000 fc9c 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800249c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a0:	f000 f900 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 80024a4:	2102      	movs	r1, #2
 80024a6:	4802      	ldr	r0, [pc, #8]	; (80024b0 <RelaySwitch+0x20>)
 80024a8:	f000 fc94 	bl	8002dd4 <HAL_GPIO_TogglePin>

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40010c00 	.word	0x40010c00

080024b4 <ErrorSound>:
void ErrorSound() {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 80024b8:	2101      	movs	r1, #1
 80024ba:	480e      	ldr	r0, [pc, #56]	; (80024f4 <ErrorSound+0x40>)
 80024bc:	f000 fc8a 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80024c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c4:	f000 f8ee 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 80024c8:	2101      	movs	r1, #1
 80024ca:	480a      	ldr	r0, [pc, #40]	; (80024f4 <ErrorSound+0x40>)
 80024cc:	f000 fc82 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80024d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024d4:	f000 f8e6 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 80024d8:	2101      	movs	r1, #1
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <ErrorSound+0x40>)
 80024dc:	f000 fc7a 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e4:	f000 f8de 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 80024e8:	2101      	movs	r1, #1
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <ErrorSound+0x40>)
 80024ec:	f000 fc72 	bl	8002dd4 <HAL_GPIO_TogglePin>

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40010c00 	.word	0x40010c00

080024f8 <CardReadSound>:
void CardReadSound() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 80024fc:	2101      	movs	r1, #1
 80024fe:	4806      	ldr	r0, [pc, #24]	; (8002518 <CardReadSound+0x20>)
 8002500:	f000 fc68 	bl	8002dd4 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 8002504:	2032      	movs	r0, #50	; 0x32
 8002506:	f000 f8cd 	bl	80026a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800250a:	2101      	movs	r1, #1
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <CardReadSound+0x20>)
 800250e:	f000 fc61 	bl	8002dd4 <HAL_GPIO_TogglePin>

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40010c00 	.word	0x40010c00

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f002 fcc8 	bl	8004ee0 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20005000 	.word	0x20005000
 800257c:	00000400 	.word	0x00000400
 8002580:	2000048c 	.word	0x2000048c
 8002584:	200004a8 	.word	0x200004a8

08002588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002596:	490d      	ldr	r1, [pc, #52]	; (80025cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025ac:	4c0a      	ldr	r4, [pc, #40]	; (80025d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ba:	f7ff ffe5 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025be:	f002 fc95 	bl	8004eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025c2:	f7fe fce9 	bl	8000f98 <main>
  bx lr
 80025c6:	4770      	bx	lr
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 80025d0:	08005d84 	.word	0x08005d84
  ldr r2, =_sbss
 80025d4:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 80025d8:	200004a4 	.word	0x200004a4

080025dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC1_2_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_Init+0x28>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_Init+0x28>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 f95d 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	200f      	movs	r0, #15
 80025f8:	f000 f808 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7ff fd8a 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x54>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f979 	bl	8002922 <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f000 f93d 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_InitTick+0x5c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200000cc 	.word	0x200000cc
 8002664:	200000d4 	.word	0x200000d4
 8002668:	200000d0 	.word	0x200000d0

0800266c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_IncTick+0x1c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_IncTick+0x20>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_IncTick+0x20>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	200000d4 	.word	0x200000d4
 800268c:	20000490 	.word	0x20000490

08002690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <HAL_GetTick+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000490 	.word	0x20000490

080026a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff fff0 	bl	8002690 <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d005      	beq.n	80026ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_Delay+0x44>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ca:	bf00      	nop
 80026cc:	f7ff ffe0 	bl	8002690 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d8f7      	bhi.n	80026cc <HAL_Delay+0x28>
  {
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200000d4 	.word	0x200000d4

080026ec <__NVIC_SetPriorityGrouping>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4906      	ldr	r1, [pc, #24]	; (8002784 <__NVIC_EnableIRQ+0x34>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <__NVIC_SystemReset>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002844:	f3bf 8f4f 	dsb	sy
}
 8002848:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <__NVIC_SystemReset+0x24>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <__NVIC_SystemReset+0x24>)
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <__NVIC_SystemReset+0x28>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800285a:	f3bf 8f4f 	dsb	sy
}
 800285e:	bf00      	nop
    __NOP();
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <__NVIC_SystemReset+0x20>
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	05fa0004 	.word	0x05fa0004

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff7a 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff17 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff2c 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff7a 	bl	80027dc <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff49 	bl	8002788 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff1f 	bl	8002750 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800291e:	f7ff ff8f 	bl	8002840 <__NVIC_SystemReset>

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff9e 	bl	800286c <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800294c:	2b02      	cmp	r3, #2
 800294e:	d008      	beq.n	8002962 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e020      	b.n	80029a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 020e 	bic.w	r2, r2, #14
 8002970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d005      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2204      	movs	r2, #4
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e051      	b.n	8002a76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 020e 	bic.w	r2, r2, #14
 80029e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <HAL_DMA_Abort_IT+0xd0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d029      	beq.n	8002a50 <HAL_DMA_Abort_IT+0xa0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <HAL_DMA_Abort_IT+0xd4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x9c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_DMA_Abort_IT+0xd8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01a      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x96>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_DMA_Abort_IT+0xdc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d012      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x90>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_DMA_Abort_IT+0xe0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00a      	beq.n	8002a3a <HAL_DMA_Abort_IT+0x8a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_DMA_Abort_IT+0xe4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d102      	bne.n	8002a34 <HAL_DMA_Abort_IT+0x84>
 8002a2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a32:	e00e      	b.n	8002a52 <HAL_DMA_Abort_IT+0xa2>
 8002a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a38:	e00b      	b.n	8002a52 <HAL_DMA_Abort_IT+0xa2>
 8002a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3e:	e008      	b.n	8002a52 <HAL_DMA_Abort_IT+0xa2>
 8002a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a44:	e005      	b.n	8002a52 <HAL_DMA_Abort_IT+0xa2>
 8002a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a4a:	e002      	b.n	8002a52 <HAL_DMA_Abort_IT+0xa2>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	e000      	b.n	8002a52 <HAL_DMA_Abort_IT+0xa2>
 8002a50:	2301      	movs	r3, #1
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_DMA_Abort_IT+0xe8>)
 8002a54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
    } 
  }
  return status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020008 	.word	0x40020008
 8002a84:	4002001c 	.word	0x4002001c
 8002a88:	40020030 	.word	0x40020030
 8002a8c:	40020044 	.word	0x40020044
 8002a90:	40020058 	.word	0x40020058
 8002a94:	4002006c 	.word	0x4002006c
 8002a98:	40020000 	.word	0x40020000

08002a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b08b      	sub	sp, #44	; 0x2c
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aae:	e169      	b.n	8002d84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f040 8158 	bne.w	8002d7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a9a      	ldr	r2, [pc, #616]	; (8002d3c <HAL_GPIO_Init+0x2a0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d05e      	beq.n	8002b96 <HAL_GPIO_Init+0xfa>
 8002ad8:	4a98      	ldr	r2, [pc, #608]	; (8002d3c <HAL_GPIO_Init+0x2a0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d875      	bhi.n	8002bca <HAL_GPIO_Init+0x12e>
 8002ade:	4a98      	ldr	r2, [pc, #608]	; (8002d40 <HAL_GPIO_Init+0x2a4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d058      	beq.n	8002b96 <HAL_GPIO_Init+0xfa>
 8002ae4:	4a96      	ldr	r2, [pc, #600]	; (8002d40 <HAL_GPIO_Init+0x2a4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d86f      	bhi.n	8002bca <HAL_GPIO_Init+0x12e>
 8002aea:	4a96      	ldr	r2, [pc, #600]	; (8002d44 <HAL_GPIO_Init+0x2a8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d052      	beq.n	8002b96 <HAL_GPIO_Init+0xfa>
 8002af0:	4a94      	ldr	r2, [pc, #592]	; (8002d44 <HAL_GPIO_Init+0x2a8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d869      	bhi.n	8002bca <HAL_GPIO_Init+0x12e>
 8002af6:	4a94      	ldr	r2, [pc, #592]	; (8002d48 <HAL_GPIO_Init+0x2ac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d04c      	beq.n	8002b96 <HAL_GPIO_Init+0xfa>
 8002afc:	4a92      	ldr	r2, [pc, #584]	; (8002d48 <HAL_GPIO_Init+0x2ac>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d863      	bhi.n	8002bca <HAL_GPIO_Init+0x12e>
 8002b02:	4a92      	ldr	r2, [pc, #584]	; (8002d4c <HAL_GPIO_Init+0x2b0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d046      	beq.n	8002b96 <HAL_GPIO_Init+0xfa>
 8002b08:	4a90      	ldr	r2, [pc, #576]	; (8002d4c <HAL_GPIO_Init+0x2b0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d85d      	bhi.n	8002bca <HAL_GPIO_Init+0x12e>
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d82a      	bhi.n	8002b68 <HAL_GPIO_Init+0xcc>
 8002b12:	2b12      	cmp	r3, #18
 8002b14:	d859      	bhi.n	8002bca <HAL_GPIO_Init+0x12e>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_GPIO_Init+0x80>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b97 	.word	0x08002b97
 8002b20:	08002b71 	.word	0x08002b71
 8002b24:	08002b83 	.word	0x08002b83
 8002b28:	08002bc5 	.word	0x08002bc5
 8002b2c:	08002bcb 	.word	0x08002bcb
 8002b30:	08002bcb 	.word	0x08002bcb
 8002b34:	08002bcb 	.word	0x08002bcb
 8002b38:	08002bcb 	.word	0x08002bcb
 8002b3c:	08002bcb 	.word	0x08002bcb
 8002b40:	08002bcb 	.word	0x08002bcb
 8002b44:	08002bcb 	.word	0x08002bcb
 8002b48:	08002bcb 	.word	0x08002bcb
 8002b4c:	08002bcb 	.word	0x08002bcb
 8002b50:	08002bcb 	.word	0x08002bcb
 8002b54:	08002bcb 	.word	0x08002bcb
 8002b58:	08002bcb 	.word	0x08002bcb
 8002b5c:	08002bcb 	.word	0x08002bcb
 8002b60:	08002b79 	.word	0x08002b79
 8002b64:	08002b8d 	.word	0x08002b8d
 8002b68:	4a79      	ldr	r2, [pc, #484]	; (8002d50 <HAL_GPIO_Init+0x2b4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b6e:	e02c      	b.n	8002bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	623b      	str	r3, [r7, #32]
          break;
 8002b76:	e029      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	623b      	str	r3, [r7, #32]
          break;
 8002b80:	e024      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	3308      	adds	r3, #8
 8002b88:	623b      	str	r3, [r7, #32]
          break;
 8002b8a:	e01f      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	330c      	adds	r3, #12
 8002b92:	623b      	str	r3, [r7, #32]
          break;
 8002b94:	e01a      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	623b      	str	r3, [r7, #32]
          break;
 8002ba2:	e013      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bac:	2308      	movs	r3, #8
 8002bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	611a      	str	r2, [r3, #16]
          break;
 8002bb6:	e009      	b.n	8002bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb8:	2308      	movs	r3, #8
 8002bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	615a      	str	r2, [r3, #20]
          break;
 8002bc2:	e003      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
          break;
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x130>
          break;
 8002bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2bff      	cmp	r3, #255	; 0xff
 8002bd0:	d801      	bhi.n	8002bd6 <HAL_GPIO_Init+0x13a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	e001      	b.n	8002bda <HAL_GPIO_Init+0x13e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2bff      	cmp	r3, #255	; 0xff
 8002be0:	d802      	bhi.n	8002be8 <HAL_GPIO_Init+0x14c>
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	e002      	b.n	8002bee <HAL_GPIO_Init+0x152>
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	3b08      	subs	r3, #8
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	210f      	movs	r1, #15
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	6a39      	ldr	r1, [r7, #32]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80b1 	beq.w	8002d7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	; (8002d54 <HAL_GPIO_Init+0x2b8>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4a4c      	ldr	r2, [pc, #304]	; (8002d54 <HAL_GPIO_Init+0x2b8>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6193      	str	r3, [r2, #24]
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <HAL_GPIO_Init+0x2b8>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c34:	4a48      	ldr	r2, [pc, #288]	; (8002d58 <HAL_GPIO_Init+0x2bc>)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <HAL_GPIO_Init+0x2c0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_GPIO_Init+0x1ec>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3f      	ldr	r2, [pc, #252]	; (8002d60 <HAL_GPIO_Init+0x2c4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00d      	beq.n	8002c84 <HAL_GPIO_Init+0x1e8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3e      	ldr	r2, [pc, #248]	; (8002d64 <HAL_GPIO_Init+0x2c8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d007      	beq.n	8002c80 <HAL_GPIO_Init+0x1e4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3d      	ldr	r2, [pc, #244]	; (8002d68 <HAL_GPIO_Init+0x2cc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_GPIO_Init+0x1e0>
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e006      	b.n	8002c8a <HAL_GPIO_Init+0x1ee>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e004      	b.n	8002c8a <HAL_GPIO_Init+0x1ee>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e002      	b.n	8002c8a <HAL_GPIO_Init+0x1ee>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_GPIO_Init+0x1ee>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	f002 0203 	and.w	r2, r2, #3
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	4093      	lsls	r3, r2
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c9a:	492f      	ldr	r1, [pc, #188]	; (8002d58 <HAL_GPIO_Init+0x2bc>)
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb4:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	492c      	ldr	r1, [pc, #176]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4928      	ldr	r1, [pc, #160]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	4922      	ldr	r1, [pc, #136]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	491e      	ldr	r1, [pc, #120]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4918      	ldr	r1, [pc, #96]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	4914      	ldr	r1, [pc, #80]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d021      	beq.n	8002d70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	490e      	ldr	r1, [pc, #56]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60cb      	str	r3, [r1, #12]
 8002d38:	e021      	b.n	8002d7e <HAL_GPIO_Init+0x2e2>
 8002d3a:	bf00      	nop
 8002d3c:	10320000 	.word	0x10320000
 8002d40:	10310000 	.word	0x10310000
 8002d44:	10220000 	.word	0x10220000
 8002d48:	10210000 	.word	0x10210000
 8002d4c:	10120000 	.word	0x10120000
 8002d50:	10110000 	.word	0x10110000
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	40010800 	.word	0x40010800
 8002d60:	40010c00 	.word	0x40010c00
 8002d64:	40011000 	.word	0x40011000
 8002d68:	40011400 	.word	0x40011400
 8002d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_GPIO_Init+0x304>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4909      	ldr	r1, [pc, #36]	; (8002da0 <HAL_GPIO_Init+0x304>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f ae8e 	bne.w	8002ab0 <HAL_GPIO_Init+0x14>
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	372c      	adds	r7, #44	; 0x2c
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43d9      	mvns	r1, r3
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	400b      	ands	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	611a      	str	r2, [r3, #16]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e12b      	b.n	8003072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff f9a2 	bl	8002178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f000 ffea 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8002e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a81      	ldr	r2, [pc, #516]	; (800307c <HAL_I2C_Init+0x274>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d807      	bhi.n	8002e8c <HAL_I2C_Init+0x84>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a80      	ldr	r2, [pc, #512]	; (8003080 <HAL_I2C_Init+0x278>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	bf94      	ite	ls
 8002e84:	2301      	movls	r3, #1
 8002e86:	2300      	movhi	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e006      	b.n	8002e9a <HAL_I2C_Init+0x92>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a7d      	ldr	r2, [pc, #500]	; (8003084 <HAL_I2C_Init+0x27c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0e7      	b.n	8003072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a78      	ldr	r2, [pc, #480]	; (8003088 <HAL_I2C_Init+0x280>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0c9b      	lsrs	r3, r3, #18
 8002eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_I2C_Init+0x274>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d802      	bhi.n	8002edc <HAL_I2C_Init+0xd4>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	e009      	b.n	8002ef0 <HAL_I2C_Init+0xe8>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	4a69      	ldr	r2, [pc, #420]	; (800308c <HAL_I2C_Init+0x284>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	3301      	adds	r3, #1
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	495c      	ldr	r1, [pc, #368]	; (800307c <HAL_I2C_Init+0x274>)
 8002f0c:	428b      	cmp	r3, r1
 8002f0e:	d819      	bhi.n	8002f44 <HAL_I2C_Init+0x13c>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e59      	subs	r1, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f24:	400b      	ands	r3, r1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_I2C_Init+0x138>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1e59      	subs	r1, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3e:	e051      	b.n	8002fe4 <HAL_I2C_Init+0x1dc>
 8002f40:	2304      	movs	r3, #4
 8002f42:	e04f      	b.n	8002fe4 <HAL_I2C_Init+0x1dc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <HAL_I2C_Init+0x168>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	440b      	add	r3, r1
 8002f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e012      	b.n	8002f96 <HAL_I2C_Init+0x18e>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Init+0x196>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e022      	b.n	8002fe4 <HAL_I2C_Init+0x1dc>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_I2C_Init+0x1bc>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1e58      	subs	r0, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	440b      	add	r3, r1
 8002fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Init+0x1dc>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e58      	subs	r0, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	0099      	lsls	r1, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	6809      	ldr	r1, [r1, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6911      	ldr	r1, [r2, #16]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	430b      	orrs	r3, r1
 8003026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	000186a0 	.word	0x000186a0
 8003080:	001e847f 	.word	0x001e847f
 8003084:	003d08ff 	.word	0x003d08ff
 8003088:	431bde83 	.word	0x431bde83
 800308c:	10624dd3 	.word	0x10624dd3

08003090 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
 80030a0:	4613      	mov	r3, r2
 80030a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff faf4 	bl	8002690 <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	f040 80e0 	bne.w	8003278 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2319      	movs	r3, #25
 80030be:	2201      	movs	r2, #1
 80030c0:	4970      	ldr	r1, [pc, #448]	; (8003284 <HAL_I2C_Master_Transmit+0x1f4>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f964 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	e0d3      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_I2C_Master_Transmit+0x50>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0cc      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ea>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d007      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2210      	movs	r2, #16
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a50      	ldr	r2, [pc, #320]	; (8003288 <HAL_I2C_Master_Transmit+0x1f8>)
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f89c 	bl	800328c <I2C_MasterRequestWrite>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e08d      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003174:	e066      	b.n	8003244 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9de 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b04      	cmp	r3, #4
 800318c:	d107      	bne.n	800319e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e06b      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d11b      	bne.n	8003218 <HAL_I2C_Master_Transmit+0x188>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d017      	beq.n	8003218 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	6a39      	ldr	r1, [r7, #32]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f9ce 	bl	80035be <I2C_WaitOnBTFFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2b04      	cmp	r3, #4
 800322e:	d107      	bne.n	8003240 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e01a      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d194      	bne.n	8003176 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	00100002 	.word	0x00100002
 8003288:	ffff0000 	.word	0xffff0000

0800328c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	460b      	mov	r3, r1
 800329a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d006      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d003      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b4:	d108      	bne.n	80032c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e00b      	b.n	80032e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d107      	bne.n	80032e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f84f 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d103      	bne.n	8003310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e035      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e01b      	b.n	8003368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	11db      	asrs	r3, r3, #7
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0306 	and.w	r3, r3, #6
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f063 030f 	orn	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <I2C_MasterRequestWrite+0xfc>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f875 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e010      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <I2C_MasterRequestWrite+0x100>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f865 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010008 	.word	0x00010008
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	e025      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7ff f971 	bl	8002690 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e023      	b.n	8003436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10d      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	e00c      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	429a      	cmp	r2, r3
 8003432:	d0b6      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344c:	e051      	b.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d123      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e046      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7ff f8ef 	bl	8002690 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e020      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10c      	bne.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e00b      	b.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d18d      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	e02d      	b.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f878 	bl	8003640 <I2C_IsAcknowledgeFailed>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e02d      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d021      	beq.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7ff f895 	bl	8002690 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d116      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d1ca      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ca:	e02d      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f837 	bl	8003640 <I2C_IsAcknowledgeFailed>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e02d      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d021      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7ff f854 	bl	8002690 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d1ca      	bne.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d11b      	bne.n	8003690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e272      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8087 	beq.w	80037ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036bc:	4b92      	ldr	r3, [pc, #584]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d00c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c8:	4b8f      	ldr	r3, [pc, #572]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d112      	bne.n	80036fa <HAL_RCC_OscConfig+0x5e>
 80036d4:	4b8c      	ldr	r3, [pc, #560]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d10b      	bne.n	80036fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e2:	4b89      	ldr	r3, [pc, #548]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d06c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x12c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d168      	bne.n	80037c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e24c      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x76>
 8003704:	4b80      	ldr	r3, [pc, #512]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a7f      	ldr	r2, [pc, #508]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e02e      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x98>
 800371a:	4b7b      	ldr	r3, [pc, #492]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7a      	ldr	r2, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b78      	ldr	r3, [pc, #480]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0xbc>
 800373e:	4b72      	ldr	r3, [pc, #456]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a71      	ldr	r2, [pc, #452]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b6f      	ldr	r3, [pc, #444]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6e      	ldr	r2, [pc, #440]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003758:	4b6b      	ldr	r3, [pc, #428]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b68      	ldr	r3, [pc, #416]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a67      	ldr	r2, [pc, #412]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe ff8a 	bl	8002690 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe ff86 	bl	8002690 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e200      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b5d      	ldr	r3, [pc, #372]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xe4>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe ff76 	bl	8002690 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe ff72 	bl	8002690 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1ec      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x10c>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d063      	beq.n	800389e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d6:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x18c>
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x176>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1c0      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4939      	ldr	r1, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e03a      	b.n	800389e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b36      	ldr	r3, [pc, #216]	; (800390c <HAL_RCC_OscConfig+0x270>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe ff2b 	bl	8002690 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fe ff27 	bl	8002690 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1a1      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4927      	ldr	r1, [pc, #156]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <HAL_RCC_OscConfig+0x270>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe ff0a 	bl	8002690 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7fe ff06 	bl	8002690 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e180      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03a      	beq.n	8003920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d019      	beq.n	80038e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b17      	ldr	r3, [pc, #92]	; (8003910 <HAL_RCC_OscConfig+0x274>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fe feea 	bl	8002690 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe fee6 	bl	8002690 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e160      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038de:	2001      	movs	r0, #1
 80038e0:	f000 fad8 	bl	8003e94 <RCC_Delay>
 80038e4:	e01c      	b.n	8003920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_RCC_OscConfig+0x274>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fe fed0 	bl	8002690 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f2:	e00f      	b.n	8003914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fecc 	bl	8002690 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d908      	bls.n	8003914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e146      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	42420000 	.word	0x42420000
 8003910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	4b92      	ldr	r3, [pc, #584]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e9      	bne.n	80038f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a6 	beq.w	8003a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b8b      	ldr	r3, [pc, #556]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4a87      	ldr	r2, [pc, #540]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	61d3      	str	r3, [r2, #28]
 800394a:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d118      	bne.n	8003998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003966:	4b7f      	ldr	r3, [pc, #508]	; (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7e      	ldr	r2, [pc, #504]	; (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003972:	f7fe fe8d 	bl	8002690 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fe fe89 	bl	8002690 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e103      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b75      	ldr	r3, [pc, #468]	; (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x312>
 80039a0:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4a6e      	ldr	r2, [pc, #440]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6213      	str	r3, [r2, #32]
 80039ac:	e02d      	b.n	8003a0a <HAL_RCC_OscConfig+0x36e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x334>
 80039b6:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a69      	ldr	r2, [pc, #420]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a66      	ldr	r2, [pc, #408]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	e01c      	b.n	8003a0a <HAL_RCC_OscConfig+0x36e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x356>
 80039d8:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a60      	ldr	r2, [pc, #384]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	4b5e      	ldr	r3, [pc, #376]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a5d      	ldr	r2, [pc, #372]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_OscConfig+0x36e>
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a12:	f7fe fe3d 	bl	8002690 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe fe39 	bl	8002690 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0b1      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCC_OscConfig+0x37e>
 8003a3c:	e014      	b.n	8003a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe fe27 	bl	8002690 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe fe23 	bl	8002690 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e09b      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	4b40      	ldr	r3, [pc, #256]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ee      	bne.n	8003a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8087 	beq.w	8003b92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d061      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d146      	bne.n	8003b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a98:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fdf7 	bl	8002690 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe fdf3 	bl	8002690 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e06d      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4921      	ldr	r1, [pc, #132]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a19      	ldr	r1, [r3, #32]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	430b      	orrs	r3, r1
 8003af2:	491b      	ldr	r1, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x4cc>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fdc7 	bl	8002690 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fdc3 	bl	8002690 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e03d      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x46a>
 8003b24:	e035      	b.n	8003b92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_OscConfig+0x4cc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fdb0 	bl	8002690 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fdac 	bl	8002690 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e026      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x498>
 8003b52:	e01e      	b.n	8003b92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e019      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
 8003b68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x500>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0d0      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d910      	bls.n	8003be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b67      	ldr	r3, [pc, #412]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 0207 	bic.w	r2, r3, #7
 8003bca:	4965      	ldr	r1, [pc, #404]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b8      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bfc:	4b59      	ldr	r3, [pc, #356]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c14:	4b53      	ldr	r3, [pc, #332]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a52      	ldr	r2, [pc, #328]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c20:	4b50      	ldr	r3, [pc, #320]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	494d      	ldr	r1, [pc, #308]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d040      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d115      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e07f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e073      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06b      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4936      	ldr	r1, [pc, #216]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c90:	f7fe fcfe 	bl	8002690 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fe fcfa 	bl	8002690 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e053      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d210      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0207 	bic.w	r2, r3, #7
 8003cd6:	4922      	ldr	r1, [pc, #136]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e032      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4916      	ldr	r1, [pc, #88]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	490e      	ldr	r1, [pc, #56]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d2e:	f000 f821 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	490a      	ldr	r1, [pc, #40]	; (8003d68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	5ccb      	ldrb	r3, [r1, r3]
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <HAL_RCC_ClockConfig+0x1cc>)
 8003d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_ClockConfig+0x1d0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fc5c 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40022000 	.word	0x40022000
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08005c30 	.word	0x08005c30
 8003d6c:	200000cc 	.word	0x200000cc
 8003d70:	200000d0 	.word	0x200000d0

08003d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d74:	b490      	push	{r4, r7}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d7c:	1d3c      	adds	r4, r7, #4
 8003d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d84:	f240 2301 	movw	r3, #513	; 0x201
 8003d88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x46>
 8003db2:	e02b      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003db6:	623b      	str	r3, [r7, #32]
      break;
 8003db8:	e02b      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	0c9b      	lsrs	r3, r3, #18
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	3328      	adds	r3, #40	; 0x28
 8003dc4:	443b      	add	r3, r7
 8003dc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	0c5b      	lsrs	r3, r3, #17
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	3328      	adds	r3, #40	; 0x28
 8003de2:	443b      	add	r3, r7
 8003de4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003de8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dee:	fb03 f202 	mul.w	r2, r3, r2
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	e004      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4a0b      	ldr	r2, [pc, #44]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	623b      	str	r3, [r7, #32]
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e0e:	623b      	str	r3, [r7, #32]
      break;
 8003e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e12:	6a3b      	ldr	r3, [r7, #32]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3728      	adds	r7, #40	; 0x28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc90      	pop	{r4, r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	08005c20 	.word	0x08005c20
 8003e24:	40021000 	.word	0x40021000
 8003e28:	007a1200 	.word	0x007a1200
 8003e2c:	003d0900 	.word	0x003d0900

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	200000cc 	.word	0x200000cc

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e48:	f7ff fff2 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08005c40 	.word	0x08005c40

08003e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e70:	f7ff ffde 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	0adb      	lsrs	r3, r3, #11
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08005c40 	.word	0x08005c40

08003e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <RCC_Delay+0x34>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <RCC_Delay+0x38>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0a5b      	lsrs	r3, r3, #9
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb0:	bf00      	nop
  }
  while (Delay --);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	60fa      	str	r2, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f9      	bne.n	8003eb0 <RCC_Delay+0x1c>
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	200000cc 	.word	0x200000cc
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e076      	b.n	8003fd0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d108      	bne.n	8003efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef2:	d009      	beq.n	8003f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	61da      	str	r2, [r3, #28]
 8003efa:	e005      	b.n	8003f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe f966 	bl	80021f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	ea42 0103 	orr.w	r1, r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	0c1a      	lsrs	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f002 0204 	and.w	r2, r2, #4
 8003fae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x26>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e18a      	b.n	8004314 <HAL_SPI_TransmitReceive+0x33c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004006:	f7fe fb43 	bl	8002690 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004024:	2b01      	cmp	r3, #1
 8004026:	d00f      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x70>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d107      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x68>
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800403c:	2b04      	cmp	r3, #4
 800403e:	d003      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004040:	2302      	movs	r3, #2
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004046:	e15b      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_SPI_TransmitReceive+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_SPI_TransmitReceive+0x82>
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d103      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004060:	e14e      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2205      	movs	r2, #5
 8004072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d007      	beq.n	80040ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d178      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0x10a>
 80040dc:	8b7b      	ldrh	r3, [r7, #26]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d166      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	1c9a      	adds	r2, r3, #2
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004106:	e053      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d11b      	bne.n	800414e <HAL_SPI_TransmitReceive+0x176>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d016      	beq.n	800414e <HAL_SPI_TransmitReceive+0x176>
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d113      	bne.n	800414e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d119      	bne.n	8004190 <HAL_SPI_TransmitReceive+0x1b8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d014      	beq.n	8004190 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	b292      	uxth	r2, r2
 8004172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800418c:	2301      	movs	r3, #1
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004190:	f7fe fa7e 	bl	8002690 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419c:	429a      	cmp	r2, r3
 800419e:	d807      	bhi.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d003      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041ae:	e0a7      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1a6      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x130>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1a1      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x130>
 80041c4:	e07c      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x1fc>
 80041ce:	8b7b      	ldrh	r3, [r7, #26]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d16b      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fa:	e057      	b.n	80042ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d11c      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x26c>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x26c>
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d114      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d119      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x2ae>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d014      	beq.n	8004286 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004282:	2301      	movs	r3, #1
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004286:	f7fe fa03 	bl	8002690 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_TransmitReceive+0x2c6>
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x2cc>
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042aa:	e029      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1a2      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x224>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d19d      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f8b1 	bl	800442c <SPI_EndRxTxTransaction>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042dc:	e010      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	e000      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004314:	4618      	mov	r0, r3
 8004316:	3730      	adds	r7, #48	; 0x30
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800432c:	f7fe f9b0 	bl	8002690 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4413      	add	r3, r2
 800433a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800433c:	f7fe f9a8 	bl	8002690 <HAL_GetTick>
 8004340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	015b      	lsls	r3, r3, #5
 8004348:	0d1b      	lsrs	r3, r3, #20
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004352:	e054      	b.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d050      	beq.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800435c:	f7fe f998 	bl	8002690 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	429a      	cmp	r2, r3
 800436a:	d902      	bls.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d13d      	bne.n	80043ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d111      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	d004      	beq.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d107      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b8:	d10f      	bne.n	80043da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e017      	b.n	800441e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d19b      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200000cc 	.word	0x200000cc

0800442c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2200      	movs	r2, #0
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7ff ff6a 	bl	800431c <SPI_WaitFlagStateUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e000      	b.n	8004460 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e03f      	b.n	80044fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fefa 	bl	8002288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fc85 	bl	8004dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	; 0x28
 8004506:	af02      	add	r7, sp, #8
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b20      	cmp	r3, #32
 8004520:	d17c      	bne.n	800461c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_UART_Transmit+0x2c>
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e075      	b.n	800461e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_UART_Transmit+0x3e>
 800453c:	2302      	movs	r3, #2
 800453e:	e06e      	b.n	800461e <HAL_UART_Transmit+0x11c>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2221      	movs	r2, #33	; 0x21
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004556:	f7fe f89b 	bl	8002690 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	88fa      	ldrh	r2, [r7, #6]
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d108      	bne.n	8004584 <HAL_UART_Transmit+0x82>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004594:	e02a      	b.n	80045ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa38 	bl	8004a16 <UART_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e036      	b.n	800461e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	3302      	adds	r3, #2
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e007      	b.n	80045de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1cf      	bne.n	8004596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fa08 	bl	8004a16 <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e006      	b.n	800461e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b20      	cmp	r3, #32
 800463e:	d11d      	bne.n	800467c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Receive_IT+0x26>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e016      	b.n	800467e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Receive_IT+0x38>
 800465a:	2302      	movs	r3, #2
 800465c:	e00f      	b.n	800467e <HAL_UART_Receive_IT+0x58>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	461a      	mov	r2, r3
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fa19 	bl	8004aaa <UART_Start_Receive_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	e000      	b.n	800467e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x52>
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fac9 	bl	8004c6a <UART_Receive_IT>
      return;
 80046d8:	e17b      	b.n	80049d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80b1 	beq.w	8004844 <HAL_UART_IRQHandler+0x1bc>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_UART_IRQHandler+0x70>
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a6 	beq.w	8004844 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_UART_IRQHandler+0x90>
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f043 0201 	orr.w	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_UART_IRQHandler+0xb0>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0202 	orr.w	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_UART_IRQHandler+0xd0>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00f      	beq.n	8004782 <HAL_UART_IRQHandler+0xfa>
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_UART_IRQHandler+0xee>
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0208 	orr.w	r2, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 811e 	beq.w	80049c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_UART_IRQHandler+0x11e>
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fa62 	bl	8004c6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <HAL_UART_IRQHandler+0x146>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d031      	beq.n	8004832 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9a4 	bl	8004b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d023      	beq.n	800482a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d013      	beq.n	8004822 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	4a76      	ldr	r2, [pc, #472]	; (80049d8 <HAL_UART_IRQHandler+0x350>)
 8004800:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe f8d2 	bl	80029b0 <HAL_DMA_Abort_IT>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800481c:	4610      	mov	r0, r2
 800481e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	e00e      	b.n	8004840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8e3 	bl	80049ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	e00a      	b.n	8004840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8df 	bl	80049ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e006      	b.n	8004840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f8db 	bl	80049ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800483e:	e0c3      	b.n	80049c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	bf00      	nop
    return;
 8004842:	e0c1      	b.n	80049c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	2b01      	cmp	r3, #1
 800484a:	f040 80a1 	bne.w	8004990 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 809b 	beq.w	8004990 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8095 	beq.w	8004990 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04e      	beq.n	8004928 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004894:	8a3b      	ldrh	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8098 	beq.w	80049cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048a0:	8a3a      	ldrh	r2, [r7, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	f080 8092 	bcs.w	80049cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8a3a      	ldrh	r2, [r7, #16]
 80048ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d02b      	beq.n	8004910 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0210 	bic.w	r2, r2, #16
 8004904:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe f815 	bl	800293a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f86d 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004926:	e051      	b.n	80049cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004930:	b29b      	uxth	r3, r3
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d047      	beq.n	80049d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004940:	8a7b      	ldrh	r3, [r7, #18]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d044      	beq.n	80049d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004954:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0210 	bic.w	r2, r2, #16
 8004982:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004984:	8a7b      	ldrh	r3, [r7, #18]
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f839 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800498e:	e01f      	b.n	80049d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_UART_IRQHandler+0x324>
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8f9 	bl	8004b9c <UART_Transmit_IT>
    return;
 80049aa:	e012      	b.n	80049d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <HAL_UART_IRQHandler+0x34a>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f93a 	bl	8004c3a <UART_EndTransmit_IT>
    return;
 80049c6:	e004      	b.n	80049d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80049c8:	bf00      	nop
 80049ca:	e002      	b.n	80049d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80049d0:	bf00      	nop
  }
}
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	08004b75 	.word	0x08004b75

080049dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	e02c      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d028      	beq.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	f7fd fe2b 	bl	8002690 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d21d      	bcs.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e00f      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d0c3      	beq.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2222      	movs	r2, #34	; 0x22
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0220 	orr.w	r2, r2, #32
 8004b0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0210 	bic.w	r2, r2, #16
 8004b5a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff2d 	bl	80049ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b21      	cmp	r3, #33	; 0x21
 8004bae:	d13e      	bne.n	8004c2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb8:	d114      	bne.n	8004be4 <UART_Transmit_IT+0x48>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d110      	bne.n	8004be4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	1c9a      	adds	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]
 8004be2:	e008      	b.n	8004bf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	1c59      	adds	r1, r3, #1
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6211      	str	r1, [r2, #32]
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4619      	mov	r1, r3
 8004c04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff febe 	bl	80049dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b22      	cmp	r3, #34	; 0x22
 8004c7c:	f040 8099 	bne.w	8004db2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d117      	bne.n	8004cba <UART_Receive_IT+0x50>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d113      	bne.n	8004cba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb8:	e026      	b.n	8004d08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ccc:	d007      	beq.n	8004cde <UART_Receive_IT+0x74>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <UART_Receive_IT+0x82>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e008      	b.n	8004cfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4619      	mov	r1, r3
 8004d16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d148      	bne.n	8004dae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0220 	bic.w	r2, r2, #32
 8004d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d123      	bne.n	8004da4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0210 	bic.w	r2, r2, #16
 8004d70:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d10a      	bne.n	8004d96 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fe2f 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
 8004da2:	e002      	b.n	8004daa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc f847 	bl	8000e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e002      	b.n	8004db4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004df6:	f023 030c 	bic.w	r3, r3, #12
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	430b      	orrs	r3, r1
 8004e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2c      	ldr	r2, [pc, #176]	; (8004ed0 <UART_SetConfig+0x114>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7ff f822 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	e002      	b.n	8004e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7ff f80a 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8004e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <UART_SetConfig+0x118>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	0119      	lsls	r1, r3, #4
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009a      	lsls	r2, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <UART_SetConfig+0x118>)
 8004e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2064      	movs	r0, #100	; 0x64
 8004e72:	fb00 f303 	mul.w	r3, r0, r3
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	3332      	adds	r3, #50	; 0x32
 8004e7c:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <UART_SetConfig+0x118>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e88:	4419      	add	r1, r3
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <UART_SetConfig+0x118>)
 8004ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2064      	movs	r0, #100	; 0x64
 8004eaa:	fb00 f303 	mul.w	r3, r0, r3
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	3332      	adds	r3, #50	; 0x32
 8004eb4:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <UART_SetConfig+0x118>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	f003 020f 	and.w	r2, r3, #15
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40013800 	.word	0x40013800
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <atoi>:
 8004ed8:	220a      	movs	r2, #10
 8004eda:	2100      	movs	r1, #0
 8004edc:	f000 b8f0 	b.w	80050c0 <strtol>

08004ee0 <__errno>:
 8004ee0:	4b01      	ldr	r3, [pc, #4]	; (8004ee8 <__errno+0x8>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	200000d8 	.word	0x200000d8

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	2600      	movs	r6, #0
 8004ef0:	4d0c      	ldr	r5, [pc, #48]	; (8004f24 <__libc_init_array+0x38>)
 8004ef2:	4c0d      	ldr	r4, [pc, #52]	; (8004f28 <__libc_init_array+0x3c>)
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	42a6      	cmp	r6, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	f000 fd36 	bl	800596c <_init>
 8004f00:	2600      	movs	r6, #0
 8004f02:	4d0a      	ldr	r5, [pc, #40]	; (8004f2c <__libc_init_array+0x40>)
 8004f04:	4c0a      	ldr	r4, [pc, #40]	; (8004f30 <__libc_init_array+0x44>)
 8004f06:	1b64      	subs	r4, r4, r5
 8004f08:	10a4      	asrs	r4, r4, #2
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f14:	4798      	blx	r3
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1e:	4798      	blx	r3
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	08005d7c 	.word	0x08005d7c
 8004f28:	08005d7c 	.word	0x08005d7c
 8004f2c:	08005d7c 	.word	0x08005d7c
 8004f30:	08005d80 	.word	0x08005d80

08004f34 <memcpy>:
 8004f34:	440a      	add	r2, r1
 8004f36:	4291      	cmp	r1, r2
 8004f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f3c:	d100      	bne.n	8004f40 <memcpy+0xc>
 8004f3e:	4770      	bx	lr
 8004f40:	b510      	push	{r4, lr}
 8004f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f46:	4291      	cmp	r1, r2
 8004f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f4c:	d1f9      	bne.n	8004f42 <memcpy+0xe>
 8004f4e:	bd10      	pop	{r4, pc}

08004f50 <memset>:
 8004f50:	4603      	mov	r3, r0
 8004f52:	4402      	add	r2, r0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d100      	bne.n	8004f5a <memset+0xa>
 8004f58:	4770      	bx	lr
 8004f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5e:	e7f9      	b.n	8004f54 <memset+0x4>

08004f60 <siprintf>:
 8004f60:	b40e      	push	{r1, r2, r3}
 8004f62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f66:	b500      	push	{lr}
 8004f68:	b09c      	sub	sp, #112	; 0x70
 8004f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f6c:	9002      	str	r0, [sp, #8]
 8004f6e:	9006      	str	r0, [sp, #24]
 8004f70:	9107      	str	r1, [sp, #28]
 8004f72:	9104      	str	r1, [sp, #16]
 8004f74:	4808      	ldr	r0, [pc, #32]	; (8004f98 <siprintf+0x38>)
 8004f76:	4909      	ldr	r1, [pc, #36]	; (8004f9c <siprintf+0x3c>)
 8004f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f7c:	9105      	str	r1, [sp, #20]
 8004f7e:	6800      	ldr	r0, [r0, #0]
 8004f80:	a902      	add	r1, sp, #8
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	f000 f902 	bl	800518c <_svfiprintf_r>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9b02      	ldr	r3, [sp, #8]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	b01c      	add	sp, #112	; 0x70
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b003      	add	sp, #12
 8004f96:	4770      	bx	lr
 8004f98:	200000d8 	.word	0x200000d8
 8004f9c:	ffff0208 	.word	0xffff0208

08004fa0 <strncpy>:
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	3901      	subs	r1, #1
 8004fa6:	b132      	cbz	r2, 8004fb6 <strncpy+0x16>
 8004fa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004fac:	3a01      	subs	r2, #1
 8004fae:	f803 4b01 	strb.w	r4, [r3], #1
 8004fb2:	2c00      	cmp	r4, #0
 8004fb4:	d1f7      	bne.n	8004fa6 <strncpy+0x6>
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	441a      	add	r2, r3
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d100      	bne.n	8004fc0 <strncpy+0x20>
 8004fbe:	bd10      	pop	{r4, pc}
 8004fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc4:	e7f9      	b.n	8004fba <strncpy+0x1a>
	...

08004fc8 <_strtol_l.constprop.0>:
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fce:	4680      	mov	r8, r0
 8004fd0:	d001      	beq.n	8004fd6 <_strtol_l.constprop.0+0xe>
 8004fd2:	2b24      	cmp	r3, #36	; 0x24
 8004fd4:	d906      	bls.n	8004fe4 <_strtol_l.constprop.0+0x1c>
 8004fd6:	f7ff ff83 	bl	8004ee0 <__errno>
 8004fda:	2316      	movs	r3, #22
 8004fdc:	6003      	str	r3, [r0, #0]
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	4f35      	ldr	r7, [pc, #212]	; (80050bc <_strtol_l.constprop.0+0xf4>)
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fee:	5de6      	ldrb	r6, [r4, r7]
 8004ff0:	f016 0608 	ands.w	r6, r6, #8
 8004ff4:	d1f8      	bne.n	8004fe8 <_strtol_l.constprop.0+0x20>
 8004ff6:	2c2d      	cmp	r4, #45	; 0x2d
 8004ff8:	d12f      	bne.n	800505a <_strtol_l.constprop.0+0x92>
 8004ffa:	2601      	movs	r6, #1
 8004ffc:	782c      	ldrb	r4, [r5, #0]
 8004ffe:	1c85      	adds	r5, r0, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d057      	beq.n	80050b4 <_strtol_l.constprop.0+0xec>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d109      	bne.n	800501c <_strtol_l.constprop.0+0x54>
 8005008:	2c30      	cmp	r4, #48	; 0x30
 800500a:	d107      	bne.n	800501c <_strtol_l.constprop.0+0x54>
 800500c:	7828      	ldrb	r0, [r5, #0]
 800500e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005012:	2858      	cmp	r0, #88	; 0x58
 8005014:	d149      	bne.n	80050aa <_strtol_l.constprop.0+0xe2>
 8005016:	2310      	movs	r3, #16
 8005018:	786c      	ldrb	r4, [r5, #1]
 800501a:	3502      	adds	r5, #2
 800501c:	2700      	movs	r7, #0
 800501e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005022:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005026:	fbbe f9f3 	udiv	r9, lr, r3
 800502a:	4638      	mov	r0, r7
 800502c:	fb03 ea19 	mls	sl, r3, r9, lr
 8005030:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005034:	f1bc 0f09 	cmp.w	ip, #9
 8005038:	d814      	bhi.n	8005064 <_strtol_l.constprop.0+0x9c>
 800503a:	4664      	mov	r4, ip
 800503c:	42a3      	cmp	r3, r4
 800503e:	dd22      	ble.n	8005086 <_strtol_l.constprop.0+0xbe>
 8005040:	2f00      	cmp	r7, #0
 8005042:	db1d      	blt.n	8005080 <_strtol_l.constprop.0+0xb8>
 8005044:	4581      	cmp	r9, r0
 8005046:	d31b      	bcc.n	8005080 <_strtol_l.constprop.0+0xb8>
 8005048:	d101      	bne.n	800504e <_strtol_l.constprop.0+0x86>
 800504a:	45a2      	cmp	sl, r4
 800504c:	db18      	blt.n	8005080 <_strtol_l.constprop.0+0xb8>
 800504e:	2701      	movs	r7, #1
 8005050:	fb00 4003 	mla	r0, r0, r3, r4
 8005054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005058:	e7ea      	b.n	8005030 <_strtol_l.constprop.0+0x68>
 800505a:	2c2b      	cmp	r4, #43	; 0x2b
 800505c:	bf04      	itt	eq
 800505e:	782c      	ldrbeq	r4, [r5, #0]
 8005060:	1c85      	addeq	r5, r0, #2
 8005062:	e7cd      	b.n	8005000 <_strtol_l.constprop.0+0x38>
 8005064:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005068:	f1bc 0f19 	cmp.w	ip, #25
 800506c:	d801      	bhi.n	8005072 <_strtol_l.constprop.0+0xaa>
 800506e:	3c37      	subs	r4, #55	; 0x37
 8005070:	e7e4      	b.n	800503c <_strtol_l.constprop.0+0x74>
 8005072:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005076:	f1bc 0f19 	cmp.w	ip, #25
 800507a:	d804      	bhi.n	8005086 <_strtol_l.constprop.0+0xbe>
 800507c:	3c57      	subs	r4, #87	; 0x57
 800507e:	e7dd      	b.n	800503c <_strtol_l.constprop.0+0x74>
 8005080:	f04f 37ff 	mov.w	r7, #4294967295
 8005084:	e7e6      	b.n	8005054 <_strtol_l.constprop.0+0x8c>
 8005086:	2f00      	cmp	r7, #0
 8005088:	da07      	bge.n	800509a <_strtol_l.constprop.0+0xd2>
 800508a:	2322      	movs	r3, #34	; 0x22
 800508c:	4670      	mov	r0, lr
 800508e:	f8c8 3000 	str.w	r3, [r8]
 8005092:	2a00      	cmp	r2, #0
 8005094:	d0a4      	beq.n	8004fe0 <_strtol_l.constprop.0+0x18>
 8005096:	1e69      	subs	r1, r5, #1
 8005098:	e005      	b.n	80050a6 <_strtol_l.constprop.0+0xde>
 800509a:	b106      	cbz	r6, 800509e <_strtol_l.constprop.0+0xd6>
 800509c:	4240      	negs	r0, r0
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d09e      	beq.n	8004fe0 <_strtol_l.constprop.0+0x18>
 80050a2:	2f00      	cmp	r7, #0
 80050a4:	d1f7      	bne.n	8005096 <_strtol_l.constprop.0+0xce>
 80050a6:	6011      	str	r1, [r2, #0]
 80050a8:	e79a      	b.n	8004fe0 <_strtol_l.constprop.0+0x18>
 80050aa:	2430      	movs	r4, #48	; 0x30
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1b5      	bne.n	800501c <_strtol_l.constprop.0+0x54>
 80050b0:	2308      	movs	r3, #8
 80050b2:	e7b3      	b.n	800501c <_strtol_l.constprop.0+0x54>
 80050b4:	2c30      	cmp	r4, #48	; 0x30
 80050b6:	d0a9      	beq.n	800500c <_strtol_l.constprop.0+0x44>
 80050b8:	230a      	movs	r3, #10
 80050ba:	e7af      	b.n	800501c <_strtol_l.constprop.0+0x54>
 80050bc:	08005c49 	.word	0x08005c49

080050c0 <strtol>:
 80050c0:	4613      	mov	r3, r2
 80050c2:	460a      	mov	r2, r1
 80050c4:	4601      	mov	r1, r0
 80050c6:	4802      	ldr	r0, [pc, #8]	; (80050d0 <strtol+0x10>)
 80050c8:	6800      	ldr	r0, [r0, #0]
 80050ca:	f7ff bf7d 	b.w	8004fc8 <_strtol_l.constprop.0>
 80050ce:	bf00      	nop
 80050d0:	200000d8 	.word	0x200000d8

080050d4 <__ssputs_r>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	688e      	ldr	r6, [r1, #8]
 80050da:	4682      	mov	sl, r0
 80050dc:	429e      	cmp	r6, r3
 80050de:	460c      	mov	r4, r1
 80050e0:	4690      	mov	r8, r2
 80050e2:	461f      	mov	r7, r3
 80050e4:	d838      	bhi.n	8005158 <__ssputs_r+0x84>
 80050e6:	898a      	ldrh	r2, [r1, #12]
 80050e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050ec:	d032      	beq.n	8005154 <__ssputs_r+0x80>
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	6909      	ldr	r1, [r1, #16]
 80050f2:	3301      	adds	r3, #1
 80050f4:	eba5 0901 	sub.w	r9, r5, r1
 80050f8:	6965      	ldr	r5, [r4, #20]
 80050fa:	444b      	add	r3, r9
 80050fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005104:	106d      	asrs	r5, r5, #1
 8005106:	429d      	cmp	r5, r3
 8005108:	bf38      	it	cc
 800510a:	461d      	movcc	r5, r3
 800510c:	0553      	lsls	r3, r2, #21
 800510e:	d531      	bpl.n	8005174 <__ssputs_r+0xa0>
 8005110:	4629      	mov	r1, r5
 8005112:	f000 fb61 	bl	80057d8 <_malloc_r>
 8005116:	4606      	mov	r6, r0
 8005118:	b950      	cbnz	r0, 8005130 <__ssputs_r+0x5c>
 800511a:	230c      	movs	r3, #12
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	f8ca 3000 	str.w	r3, [sl]
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	464a      	mov	r2, r9
 8005132:	6921      	ldr	r1, [r4, #16]
 8005134:	f7ff fefe 	bl	8004f34 <memcpy>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	6126      	str	r6, [r4, #16]
 8005146:	444e      	add	r6, r9
 8005148:	6026      	str	r6, [r4, #0]
 800514a:	463e      	mov	r6, r7
 800514c:	6165      	str	r5, [r4, #20]
 800514e:	eba5 0509 	sub.w	r5, r5, r9
 8005152:	60a5      	str	r5, [r4, #8]
 8005154:	42be      	cmp	r6, r7
 8005156:	d900      	bls.n	800515a <__ssputs_r+0x86>
 8005158:	463e      	mov	r6, r7
 800515a:	4632      	mov	r2, r6
 800515c:	4641      	mov	r1, r8
 800515e:	6820      	ldr	r0, [r4, #0]
 8005160:	f000 fab8 	bl	80056d4 <memmove>
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	2000      	movs	r0, #0
 8005168:	1b9b      	subs	r3, r3, r6
 800516a:	60a3      	str	r3, [r4, #8]
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	4433      	add	r3, r6
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	e7db      	b.n	800512c <__ssputs_r+0x58>
 8005174:	462a      	mov	r2, r5
 8005176:	f000 fba3 	bl	80058c0 <_realloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1e1      	bne.n	8005144 <__ssputs_r+0x70>
 8005180:	4650      	mov	r0, sl
 8005182:	6921      	ldr	r1, [r4, #16]
 8005184:	f000 fac0 	bl	8005708 <_free_r>
 8005188:	e7c7      	b.n	800511a <__ssputs_r+0x46>
	...

0800518c <_svfiprintf_r>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4698      	mov	r8, r3
 8005192:	898b      	ldrh	r3, [r1, #12]
 8005194:	4607      	mov	r7, r0
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	460d      	mov	r5, r1
 800519a:	4614      	mov	r4, r2
 800519c:	b09d      	sub	sp, #116	; 0x74
 800519e:	d50e      	bpl.n	80051be <_svfiprintf_r+0x32>
 80051a0:	690b      	ldr	r3, [r1, #16]
 80051a2:	b963      	cbnz	r3, 80051be <_svfiprintf_r+0x32>
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	f000 fb17 	bl	80057d8 <_malloc_r>
 80051aa:	6028      	str	r0, [r5, #0]
 80051ac:	6128      	str	r0, [r5, #16]
 80051ae:	b920      	cbnz	r0, 80051ba <_svfiprintf_r+0x2e>
 80051b0:	230c      	movs	r3, #12
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	e0d1      	b.n	800535e <_svfiprintf_r+0x1d2>
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	616b      	str	r3, [r5, #20]
 80051be:	2300      	movs	r3, #0
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	2320      	movs	r3, #32
 80051c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c8:	2330      	movs	r3, #48	; 0x30
 80051ca:	f04f 0901 	mov.w	r9, #1
 80051ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005378 <_svfiprintf_r+0x1ec>
 80051d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051da:	4623      	mov	r3, r4
 80051dc:	469a      	mov	sl, r3
 80051de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e2:	b10a      	cbz	r2, 80051e8 <_svfiprintf_r+0x5c>
 80051e4:	2a25      	cmp	r2, #37	; 0x25
 80051e6:	d1f9      	bne.n	80051dc <_svfiprintf_r+0x50>
 80051e8:	ebba 0b04 	subs.w	fp, sl, r4
 80051ec:	d00b      	beq.n	8005206 <_svfiprintf_r+0x7a>
 80051ee:	465b      	mov	r3, fp
 80051f0:	4622      	mov	r2, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ff6d 	bl	80050d4 <__ssputs_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	f000 80aa 	beq.w	8005354 <_svfiprintf_r+0x1c8>
 8005200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005202:	445a      	add	r2, fp
 8005204:	9209      	str	r2, [sp, #36]	; 0x24
 8005206:	f89a 3000 	ldrb.w	r3, [sl]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80a2 	beq.w	8005354 <_svfiprintf_r+0x1c8>
 8005210:	2300      	movs	r3, #0
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800521a:	f10a 0a01 	add.w	sl, sl, #1
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005226:	931a      	str	r3, [sp, #104]	; 0x68
 8005228:	4654      	mov	r4, sl
 800522a:	2205      	movs	r2, #5
 800522c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005230:	4851      	ldr	r0, [pc, #324]	; (8005378 <_svfiprintf_r+0x1ec>)
 8005232:	f000 fa41 	bl	80056b8 <memchr>
 8005236:	9a04      	ldr	r2, [sp, #16]
 8005238:	b9d8      	cbnz	r0, 8005272 <_svfiprintf_r+0xe6>
 800523a:	06d0      	lsls	r0, r2, #27
 800523c:	bf44      	itt	mi
 800523e:	2320      	movmi	r3, #32
 8005240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005244:	0711      	lsls	r1, r2, #28
 8005246:	bf44      	itt	mi
 8005248:	232b      	movmi	r3, #43	; 0x2b
 800524a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524e:	f89a 3000 	ldrb.w	r3, [sl]
 8005252:	2b2a      	cmp	r3, #42	; 0x2a
 8005254:	d015      	beq.n	8005282 <_svfiprintf_r+0xf6>
 8005256:	4654      	mov	r4, sl
 8005258:	2000      	movs	r0, #0
 800525a:	f04f 0c0a 	mov.w	ip, #10
 800525e:	9a07      	ldr	r2, [sp, #28]
 8005260:	4621      	mov	r1, r4
 8005262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005266:	3b30      	subs	r3, #48	; 0x30
 8005268:	2b09      	cmp	r3, #9
 800526a:	d94e      	bls.n	800530a <_svfiprintf_r+0x17e>
 800526c:	b1b0      	cbz	r0, 800529c <_svfiprintf_r+0x110>
 800526e:	9207      	str	r2, [sp, #28]
 8005270:	e014      	b.n	800529c <_svfiprintf_r+0x110>
 8005272:	eba0 0308 	sub.w	r3, r0, r8
 8005276:	fa09 f303 	lsl.w	r3, r9, r3
 800527a:	4313      	orrs	r3, r2
 800527c:	46a2      	mov	sl, r4
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	e7d2      	b.n	8005228 <_svfiprintf_r+0x9c>
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	9103      	str	r1, [sp, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbb      	ittet	lt
 800528e:	425b      	neglt	r3, r3
 8005290:	f042 0202 	orrlt.w	r2, r2, #2
 8005294:	9307      	strge	r3, [sp, #28]
 8005296:	9307      	strlt	r3, [sp, #28]
 8005298:	bfb8      	it	lt
 800529a:	9204      	strlt	r2, [sp, #16]
 800529c:	7823      	ldrb	r3, [r4, #0]
 800529e:	2b2e      	cmp	r3, #46	; 0x2e
 80052a0:	d10c      	bne.n	80052bc <_svfiprintf_r+0x130>
 80052a2:	7863      	ldrb	r3, [r4, #1]
 80052a4:	2b2a      	cmp	r3, #42	; 0x2a
 80052a6:	d135      	bne.n	8005314 <_svfiprintf_r+0x188>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	3402      	adds	r4, #2
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	9203      	str	r2, [sp, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bfb8      	it	lt
 80052b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800537c <_svfiprintf_r+0x1f0>
 80052c0:	2203      	movs	r2, #3
 80052c2:	4650      	mov	r0, sl
 80052c4:	7821      	ldrb	r1, [r4, #0]
 80052c6:	f000 f9f7 	bl	80056b8 <memchr>
 80052ca:	b140      	cbz	r0, 80052de <_svfiprintf_r+0x152>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	eba0 000a 	sub.w	r0, r0, sl
 80052d2:	fa03 f000 	lsl.w	r0, r3, r0
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	3401      	adds	r4, #1
 80052da:	4303      	orrs	r3, r0
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e2:	2206      	movs	r2, #6
 80052e4:	4826      	ldr	r0, [pc, #152]	; (8005380 <_svfiprintf_r+0x1f4>)
 80052e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ea:	f000 f9e5 	bl	80056b8 <memchr>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d038      	beq.n	8005364 <_svfiprintf_r+0x1d8>
 80052f2:	4b24      	ldr	r3, [pc, #144]	; (8005384 <_svfiprintf_r+0x1f8>)
 80052f4:	bb1b      	cbnz	r3, 800533e <_svfiprintf_r+0x1b2>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	3307      	adds	r3, #7
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	3308      	adds	r3, #8
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005304:	4433      	add	r3, r6
 8005306:	9309      	str	r3, [sp, #36]	; 0x24
 8005308:	e767      	b.n	80051da <_svfiprintf_r+0x4e>
 800530a:	460c      	mov	r4, r1
 800530c:	2001      	movs	r0, #1
 800530e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005312:	e7a5      	b.n	8005260 <_svfiprintf_r+0xd4>
 8005314:	2300      	movs	r3, #0
 8005316:	f04f 0c0a 	mov.w	ip, #10
 800531a:	4619      	mov	r1, r3
 800531c:	3401      	adds	r4, #1
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	4620      	mov	r0, r4
 8005322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005326:	3a30      	subs	r2, #48	; 0x30
 8005328:	2a09      	cmp	r2, #9
 800532a:	d903      	bls.n	8005334 <_svfiprintf_r+0x1a8>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0c5      	beq.n	80052bc <_svfiprintf_r+0x130>
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	e7c3      	b.n	80052bc <_svfiprintf_r+0x130>
 8005334:	4604      	mov	r4, r0
 8005336:	2301      	movs	r3, #1
 8005338:	fb0c 2101 	mla	r1, ip, r1, r2
 800533c:	e7f0      	b.n	8005320 <_svfiprintf_r+0x194>
 800533e:	ab03      	add	r3, sp, #12
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	462a      	mov	r2, r5
 8005344:	4638      	mov	r0, r7
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <_svfiprintf_r+0x1fc>)
 8005348:	a904      	add	r1, sp, #16
 800534a:	f3af 8000 	nop.w
 800534e:	1c42      	adds	r2, r0, #1
 8005350:	4606      	mov	r6, r0
 8005352:	d1d6      	bne.n	8005302 <_svfiprintf_r+0x176>
 8005354:	89ab      	ldrh	r3, [r5, #12]
 8005356:	065b      	lsls	r3, r3, #25
 8005358:	f53f af2c 	bmi.w	80051b4 <_svfiprintf_r+0x28>
 800535c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800535e:	b01d      	add	sp, #116	; 0x74
 8005360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	462a      	mov	r2, r5
 800536a:	4638      	mov	r0, r7
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <_svfiprintf_r+0x1fc>)
 800536e:	a904      	add	r1, sp, #16
 8005370:	f000 f87c 	bl	800546c <_printf_i>
 8005374:	e7eb      	b.n	800534e <_svfiprintf_r+0x1c2>
 8005376:	bf00      	nop
 8005378:	08005d49 	.word	0x08005d49
 800537c:	08005d4f 	.word	0x08005d4f
 8005380:	08005d53 	.word	0x08005d53
 8005384:	00000000 	.word	0x00000000
 8005388:	080050d5 	.word	0x080050d5

0800538c <_printf_common>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	4616      	mov	r6, r2
 8005392:	4699      	mov	r9, r3
 8005394:	688a      	ldr	r2, [r1, #8]
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	4607      	mov	r7, r0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfb8      	it	lt
 800539e:	4613      	movlt	r3, r2
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a6:	460c      	mov	r4, r1
 80053a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053ac:	b10a      	cbz	r2, 80053b2 <_printf_common+0x26>
 80053ae:	3301      	adds	r3, #1
 80053b0:	6033      	str	r3, [r6, #0]
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	0699      	lsls	r1, r3, #26
 80053b6:	bf42      	ittt	mi
 80053b8:	6833      	ldrmi	r3, [r6, #0]
 80053ba:	3302      	addmi	r3, #2
 80053bc:	6033      	strmi	r3, [r6, #0]
 80053be:	6825      	ldr	r5, [r4, #0]
 80053c0:	f015 0506 	ands.w	r5, r5, #6
 80053c4:	d106      	bne.n	80053d4 <_printf_common+0x48>
 80053c6:	f104 0a19 	add.w	sl, r4, #25
 80053ca:	68e3      	ldr	r3, [r4, #12]
 80053cc:	6832      	ldr	r2, [r6, #0]
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	dc28      	bgt.n	8005426 <_printf_common+0x9a>
 80053d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d8:	1e13      	subs	r3, r2, #0
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	bf18      	it	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	0692      	lsls	r2, r2, #26
 80053e2:	d42d      	bmi.n	8005440 <_printf_common+0xb4>
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ec:	47c0      	blx	r8
 80053ee:	3001      	adds	r0, #1
 80053f0:	d020      	beq.n	8005434 <_printf_common+0xa8>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	68e5      	ldr	r5, [r4, #12]
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	bf18      	it	ne
 80053fe:	2500      	movne	r5, #0
 8005400:	6832      	ldr	r2, [r6, #0]
 8005402:	f04f 0600 	mov.w	r6, #0
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	bf08      	it	eq
 800540a:	1aad      	subeq	r5, r5, r2
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	bf08      	it	eq
 8005410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005414:	4293      	cmp	r3, r2
 8005416:	bfc4      	itt	gt
 8005418:	1a9b      	subgt	r3, r3, r2
 800541a:	18ed      	addgt	r5, r5, r3
 800541c:	341a      	adds	r4, #26
 800541e:	42b5      	cmp	r5, r6
 8005420:	d11a      	bne.n	8005458 <_printf_common+0xcc>
 8005422:	2000      	movs	r0, #0
 8005424:	e008      	b.n	8005438 <_printf_common+0xac>
 8005426:	2301      	movs	r3, #1
 8005428:	4652      	mov	r2, sl
 800542a:	4649      	mov	r1, r9
 800542c:	4638      	mov	r0, r7
 800542e:	47c0      	blx	r8
 8005430:	3001      	adds	r0, #1
 8005432:	d103      	bne.n	800543c <_printf_common+0xb0>
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	3501      	adds	r5, #1
 800543e:	e7c4      	b.n	80053ca <_printf_common+0x3e>
 8005440:	2030      	movs	r0, #48	; 0x30
 8005442:	18e1      	adds	r1, r4, r3
 8005444:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800544e:	4422      	add	r2, r4
 8005450:	3302      	adds	r3, #2
 8005452:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005456:	e7c5      	b.n	80053e4 <_printf_common+0x58>
 8005458:	2301      	movs	r3, #1
 800545a:	4622      	mov	r2, r4
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d0e6      	beq.n	8005434 <_printf_common+0xa8>
 8005466:	3601      	adds	r6, #1
 8005468:	e7d9      	b.n	800541e <_printf_common+0x92>
	...

0800546c <_printf_i>:
 800546c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	7e0f      	ldrb	r7, [r1, #24]
 8005472:	4691      	mov	r9, r2
 8005474:	2f78      	cmp	r7, #120	; 0x78
 8005476:	4680      	mov	r8, r0
 8005478:	460c      	mov	r4, r1
 800547a:	469a      	mov	sl, r3
 800547c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800547e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005482:	d807      	bhi.n	8005494 <_printf_i+0x28>
 8005484:	2f62      	cmp	r7, #98	; 0x62
 8005486:	d80a      	bhi.n	800549e <_printf_i+0x32>
 8005488:	2f00      	cmp	r7, #0
 800548a:	f000 80d9 	beq.w	8005640 <_printf_i+0x1d4>
 800548e:	2f58      	cmp	r7, #88	; 0x58
 8005490:	f000 80a4 	beq.w	80055dc <_printf_i+0x170>
 8005494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800549c:	e03a      	b.n	8005514 <_printf_i+0xa8>
 800549e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054a2:	2b15      	cmp	r3, #21
 80054a4:	d8f6      	bhi.n	8005494 <_printf_i+0x28>
 80054a6:	a101      	add	r1, pc, #4	; (adr r1, 80054ac <_printf_i+0x40>)
 80054a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054ac:	08005505 	.word	0x08005505
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005495 	.word	0x08005495
 80054b8:	08005495 	.word	0x08005495
 80054bc:	08005495 	.word	0x08005495
 80054c0:	08005495 	.word	0x08005495
 80054c4:	08005519 	.word	0x08005519
 80054c8:	08005495 	.word	0x08005495
 80054cc:	08005495 	.word	0x08005495
 80054d0:	08005495 	.word	0x08005495
 80054d4:	08005495 	.word	0x08005495
 80054d8:	08005627 	.word	0x08005627
 80054dc:	08005549 	.word	0x08005549
 80054e0:	08005609 	.word	0x08005609
 80054e4:	08005495 	.word	0x08005495
 80054e8:	08005495 	.word	0x08005495
 80054ec:	08005649 	.word	0x08005649
 80054f0:	08005495 	.word	0x08005495
 80054f4:	08005549 	.word	0x08005549
 80054f8:	08005495 	.word	0x08005495
 80054fc:	08005495 	.word	0x08005495
 8005500:	08005611 	.word	0x08005611
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	602a      	str	r2, [r5, #0]
 800550c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005514:	2301      	movs	r3, #1
 8005516:	e0a4      	b.n	8005662 <_printf_i+0x1f6>
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	6829      	ldr	r1, [r5, #0]
 800551c:	0606      	lsls	r6, r0, #24
 800551e:	f101 0304 	add.w	r3, r1, #4
 8005522:	d50a      	bpl.n	800553a <_printf_i+0xce>
 8005524:	680e      	ldr	r6, [r1, #0]
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	2e00      	cmp	r6, #0
 800552a:	da03      	bge.n	8005534 <_printf_i+0xc8>
 800552c:	232d      	movs	r3, #45	; 0x2d
 800552e:	4276      	negs	r6, r6
 8005530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005534:	230a      	movs	r3, #10
 8005536:	485e      	ldr	r0, [pc, #376]	; (80056b0 <_printf_i+0x244>)
 8005538:	e019      	b.n	800556e <_printf_i+0x102>
 800553a:	680e      	ldr	r6, [r1, #0]
 800553c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	bf18      	it	ne
 8005544:	b236      	sxthne	r6, r6
 8005546:	e7ef      	b.n	8005528 <_printf_i+0xbc>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	1d19      	adds	r1, r3, #4
 800554e:	6029      	str	r1, [r5, #0]
 8005550:	0601      	lsls	r1, r0, #24
 8005552:	d501      	bpl.n	8005558 <_printf_i+0xec>
 8005554:	681e      	ldr	r6, [r3, #0]
 8005556:	e002      	b.n	800555e <_printf_i+0xf2>
 8005558:	0646      	lsls	r6, r0, #25
 800555a:	d5fb      	bpl.n	8005554 <_printf_i+0xe8>
 800555c:	881e      	ldrh	r6, [r3, #0]
 800555e:	2f6f      	cmp	r7, #111	; 0x6f
 8005560:	bf0c      	ite	eq
 8005562:	2308      	moveq	r3, #8
 8005564:	230a      	movne	r3, #10
 8005566:	4852      	ldr	r0, [pc, #328]	; (80056b0 <_printf_i+0x244>)
 8005568:	2100      	movs	r1, #0
 800556a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800556e:	6865      	ldr	r5, [r4, #4]
 8005570:	2d00      	cmp	r5, #0
 8005572:	bfa8      	it	ge
 8005574:	6821      	ldrge	r1, [r4, #0]
 8005576:	60a5      	str	r5, [r4, #8]
 8005578:	bfa4      	itt	ge
 800557a:	f021 0104 	bicge.w	r1, r1, #4
 800557e:	6021      	strge	r1, [r4, #0]
 8005580:	b90e      	cbnz	r6, 8005586 <_printf_i+0x11a>
 8005582:	2d00      	cmp	r5, #0
 8005584:	d04d      	beq.n	8005622 <_printf_i+0x1b6>
 8005586:	4615      	mov	r5, r2
 8005588:	fbb6 f1f3 	udiv	r1, r6, r3
 800558c:	fb03 6711 	mls	r7, r3, r1, r6
 8005590:	5dc7      	ldrb	r7, [r0, r7]
 8005592:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005596:	4637      	mov	r7, r6
 8005598:	42bb      	cmp	r3, r7
 800559a:	460e      	mov	r6, r1
 800559c:	d9f4      	bls.n	8005588 <_printf_i+0x11c>
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d10b      	bne.n	80055ba <_printf_i+0x14e>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	07de      	lsls	r6, r3, #31
 80055a6:	d508      	bpl.n	80055ba <_printf_i+0x14e>
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	6861      	ldr	r1, [r4, #4]
 80055ac:	4299      	cmp	r1, r3
 80055ae:	bfde      	ittt	le
 80055b0:	2330      	movle	r3, #48	; 0x30
 80055b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055ba:	1b52      	subs	r2, r2, r5
 80055bc:	6122      	str	r2, [r4, #16]
 80055be:	464b      	mov	r3, r9
 80055c0:	4621      	mov	r1, r4
 80055c2:	4640      	mov	r0, r8
 80055c4:	f8cd a000 	str.w	sl, [sp]
 80055c8:	aa03      	add	r2, sp, #12
 80055ca:	f7ff fedf 	bl	800538c <_printf_common>
 80055ce:	3001      	adds	r0, #1
 80055d0:	d14c      	bne.n	800566c <_printf_i+0x200>
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	b004      	add	sp, #16
 80055d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055dc:	4834      	ldr	r0, [pc, #208]	; (80056b0 <_printf_i+0x244>)
 80055de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055e2:	6829      	ldr	r1, [r5, #0]
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80055ea:	6029      	str	r1, [r5, #0]
 80055ec:	061d      	lsls	r5, r3, #24
 80055ee:	d514      	bpl.n	800561a <_printf_i+0x1ae>
 80055f0:	07df      	lsls	r7, r3, #31
 80055f2:	bf44      	itt	mi
 80055f4:	f043 0320 	orrmi.w	r3, r3, #32
 80055f8:	6023      	strmi	r3, [r4, #0]
 80055fa:	b91e      	cbnz	r6, 8005604 <_printf_i+0x198>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	f023 0320 	bic.w	r3, r3, #32
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	2310      	movs	r3, #16
 8005606:	e7af      	b.n	8005568 <_printf_i+0xfc>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	f043 0320 	orr.w	r3, r3, #32
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	2378      	movs	r3, #120	; 0x78
 8005612:	4828      	ldr	r0, [pc, #160]	; (80056b4 <_printf_i+0x248>)
 8005614:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005618:	e7e3      	b.n	80055e2 <_printf_i+0x176>
 800561a:	0659      	lsls	r1, r3, #25
 800561c:	bf48      	it	mi
 800561e:	b2b6      	uxthmi	r6, r6
 8005620:	e7e6      	b.n	80055f0 <_printf_i+0x184>
 8005622:	4615      	mov	r5, r2
 8005624:	e7bb      	b.n	800559e <_printf_i+0x132>
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	6826      	ldr	r6, [r4, #0]
 800562a:	1d18      	adds	r0, r3, #4
 800562c:	6961      	ldr	r1, [r4, #20]
 800562e:	6028      	str	r0, [r5, #0]
 8005630:	0635      	lsls	r5, r6, #24
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	d501      	bpl.n	800563a <_printf_i+0x1ce>
 8005636:	6019      	str	r1, [r3, #0]
 8005638:	e002      	b.n	8005640 <_printf_i+0x1d4>
 800563a:	0670      	lsls	r0, r6, #25
 800563c:	d5fb      	bpl.n	8005636 <_printf_i+0x1ca>
 800563e:	8019      	strh	r1, [r3, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	4615      	mov	r5, r2
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	e7ba      	b.n	80055be <_printf_i+0x152>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	2100      	movs	r1, #0
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	602a      	str	r2, [r5, #0]
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	6862      	ldr	r2, [r4, #4]
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f82f 	bl	80056b8 <memchr>
 800565a:	b108      	cbz	r0, 8005660 <_printf_i+0x1f4>
 800565c:	1b40      	subs	r0, r0, r5
 800565e:	6060      	str	r0, [r4, #4]
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	6123      	str	r3, [r4, #16]
 8005664:	2300      	movs	r3, #0
 8005666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566a:	e7a8      	b.n	80055be <_printf_i+0x152>
 800566c:	462a      	mov	r2, r5
 800566e:	4649      	mov	r1, r9
 8005670:	4640      	mov	r0, r8
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	47d0      	blx	sl
 8005676:	3001      	adds	r0, #1
 8005678:	d0ab      	beq.n	80055d2 <_printf_i+0x166>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	079b      	lsls	r3, r3, #30
 800567e:	d413      	bmi.n	80056a8 <_printf_i+0x23c>
 8005680:	68e0      	ldr	r0, [r4, #12]
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	4298      	cmp	r0, r3
 8005686:	bfb8      	it	lt
 8005688:	4618      	movlt	r0, r3
 800568a:	e7a4      	b.n	80055d6 <_printf_i+0x16a>
 800568c:	2301      	movs	r3, #1
 800568e:	4632      	mov	r2, r6
 8005690:	4649      	mov	r1, r9
 8005692:	4640      	mov	r0, r8
 8005694:	47d0      	blx	sl
 8005696:	3001      	adds	r0, #1
 8005698:	d09b      	beq.n	80055d2 <_printf_i+0x166>
 800569a:	3501      	adds	r5, #1
 800569c:	68e3      	ldr	r3, [r4, #12]
 800569e:	9903      	ldr	r1, [sp, #12]
 80056a0:	1a5b      	subs	r3, r3, r1
 80056a2:	42ab      	cmp	r3, r5
 80056a4:	dcf2      	bgt.n	800568c <_printf_i+0x220>
 80056a6:	e7eb      	b.n	8005680 <_printf_i+0x214>
 80056a8:	2500      	movs	r5, #0
 80056aa:	f104 0619 	add.w	r6, r4, #25
 80056ae:	e7f5      	b.n	800569c <_printf_i+0x230>
 80056b0:	08005d5a 	.word	0x08005d5a
 80056b4:	08005d6b 	.word	0x08005d6b

080056b8 <memchr>:
 80056b8:	4603      	mov	r3, r0
 80056ba:	b510      	push	{r4, lr}
 80056bc:	b2c9      	uxtb	r1, r1
 80056be:	4402      	add	r2, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	d101      	bne.n	80056ca <memchr+0x12>
 80056c6:	2000      	movs	r0, #0
 80056c8:	e003      	b.n	80056d2 <memchr+0x1a>
 80056ca:	7804      	ldrb	r4, [r0, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	428c      	cmp	r4, r1
 80056d0:	d1f6      	bne.n	80056c0 <memchr+0x8>
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <memmove>:
 80056d4:	4288      	cmp	r0, r1
 80056d6:	b510      	push	{r4, lr}
 80056d8:	eb01 0402 	add.w	r4, r1, r2
 80056dc:	d902      	bls.n	80056e4 <memmove+0x10>
 80056de:	4284      	cmp	r4, r0
 80056e0:	4623      	mov	r3, r4
 80056e2:	d807      	bhi.n	80056f4 <memmove+0x20>
 80056e4:	1e43      	subs	r3, r0, #1
 80056e6:	42a1      	cmp	r1, r4
 80056e8:	d008      	beq.n	80056fc <memmove+0x28>
 80056ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056f2:	e7f8      	b.n	80056e6 <memmove+0x12>
 80056f4:	4601      	mov	r1, r0
 80056f6:	4402      	add	r2, r0
 80056f8:	428a      	cmp	r2, r1
 80056fa:	d100      	bne.n	80056fe <memmove+0x2a>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005706:	e7f7      	b.n	80056f8 <memmove+0x24>

08005708 <_free_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4605      	mov	r5, r0
 800570c:	2900      	cmp	r1, #0
 800570e:	d040      	beq.n	8005792 <_free_r+0x8a>
 8005710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005714:	1f0c      	subs	r4, r1, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfb8      	it	lt
 800571a:	18e4      	addlt	r4, r4, r3
 800571c:	f000 f910 	bl	8005940 <__malloc_lock>
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <_free_r+0x8c>)
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	b933      	cbnz	r3, 8005734 <_free_r+0x2c>
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	6014      	str	r4, [r2, #0]
 800572a:	4628      	mov	r0, r5
 800572c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005730:	f000 b90c 	b.w	800594c <__malloc_unlock>
 8005734:	42a3      	cmp	r3, r4
 8005736:	d908      	bls.n	800574a <_free_r+0x42>
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	1821      	adds	r1, r4, r0
 800573c:	428b      	cmp	r3, r1
 800573e:	bf01      	itttt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	1809      	addeq	r1, r1, r0
 8005746:	6021      	streq	r1, [r4, #0]
 8005748:	e7ed      	b.n	8005726 <_free_r+0x1e>
 800574a:	461a      	mov	r2, r3
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	b10b      	cbz	r3, 8005754 <_free_r+0x4c>
 8005750:	42a3      	cmp	r3, r4
 8005752:	d9fa      	bls.n	800574a <_free_r+0x42>
 8005754:	6811      	ldr	r1, [r2, #0]
 8005756:	1850      	adds	r0, r2, r1
 8005758:	42a0      	cmp	r0, r4
 800575a:	d10b      	bne.n	8005774 <_free_r+0x6c>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	4401      	add	r1, r0
 8005760:	1850      	adds	r0, r2, r1
 8005762:	4283      	cmp	r3, r0
 8005764:	6011      	str	r1, [r2, #0]
 8005766:	d1e0      	bne.n	800572a <_free_r+0x22>
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4401      	add	r1, r0
 800576e:	6011      	str	r1, [r2, #0]
 8005770:	6053      	str	r3, [r2, #4]
 8005772:	e7da      	b.n	800572a <_free_r+0x22>
 8005774:	d902      	bls.n	800577c <_free_r+0x74>
 8005776:	230c      	movs	r3, #12
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	e7d6      	b.n	800572a <_free_r+0x22>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	1821      	adds	r1, r4, r0
 8005780:	428b      	cmp	r3, r1
 8005782:	bf01      	itttt	eq
 8005784:	6819      	ldreq	r1, [r3, #0]
 8005786:	685b      	ldreq	r3, [r3, #4]
 8005788:	1809      	addeq	r1, r1, r0
 800578a:	6021      	streq	r1, [r4, #0]
 800578c:	6063      	str	r3, [r4, #4]
 800578e:	6054      	str	r4, [r2, #4]
 8005790:	e7cb      	b.n	800572a <_free_r+0x22>
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20000494 	.word	0x20000494

08005798 <sbrk_aligned>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4e0e      	ldr	r6, [pc, #56]	; (80057d4 <sbrk_aligned+0x3c>)
 800579c:	460c      	mov	r4, r1
 800579e:	6831      	ldr	r1, [r6, #0]
 80057a0:	4605      	mov	r5, r0
 80057a2:	b911      	cbnz	r1, 80057aa <sbrk_aligned+0x12>
 80057a4:	f000 f8bc 	bl	8005920 <_sbrk_r>
 80057a8:	6030      	str	r0, [r6, #0]
 80057aa:	4621      	mov	r1, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 f8b7 	bl	8005920 <_sbrk_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d00a      	beq.n	80057cc <sbrk_aligned+0x34>
 80057b6:	1cc4      	adds	r4, r0, #3
 80057b8:	f024 0403 	bic.w	r4, r4, #3
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d007      	beq.n	80057d0 <sbrk_aligned+0x38>
 80057c0:	1a21      	subs	r1, r4, r0
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f8ac 	bl	8005920 <_sbrk_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d101      	bne.n	80057d0 <sbrk_aligned+0x38>
 80057cc:	f04f 34ff 	mov.w	r4, #4294967295
 80057d0:	4620      	mov	r0, r4
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	20000498 	.word	0x20000498

080057d8 <_malloc_r>:
 80057d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057dc:	1ccd      	adds	r5, r1, #3
 80057de:	f025 0503 	bic.w	r5, r5, #3
 80057e2:	3508      	adds	r5, #8
 80057e4:	2d0c      	cmp	r5, #12
 80057e6:	bf38      	it	cc
 80057e8:	250c      	movcc	r5, #12
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	4607      	mov	r7, r0
 80057ee:	db01      	blt.n	80057f4 <_malloc_r+0x1c>
 80057f0:	42a9      	cmp	r1, r5
 80057f2:	d905      	bls.n	8005800 <_malloc_r+0x28>
 80057f4:	230c      	movs	r3, #12
 80057f6:	2600      	movs	r6, #0
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4630      	mov	r0, r6
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	4e2e      	ldr	r6, [pc, #184]	; (80058bc <_malloc_r+0xe4>)
 8005802:	f000 f89d 	bl	8005940 <__malloc_lock>
 8005806:	6833      	ldr	r3, [r6, #0]
 8005808:	461c      	mov	r4, r3
 800580a:	bb34      	cbnz	r4, 800585a <_malloc_r+0x82>
 800580c:	4629      	mov	r1, r5
 800580e:	4638      	mov	r0, r7
 8005810:	f7ff ffc2 	bl	8005798 <sbrk_aligned>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	4604      	mov	r4, r0
 8005818:	d14d      	bne.n	80058b6 <_malloc_r+0xde>
 800581a:	6834      	ldr	r4, [r6, #0]
 800581c:	4626      	mov	r6, r4
 800581e:	2e00      	cmp	r6, #0
 8005820:	d140      	bne.n	80058a4 <_malloc_r+0xcc>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	4631      	mov	r1, r6
 8005826:	4638      	mov	r0, r7
 8005828:	eb04 0803 	add.w	r8, r4, r3
 800582c:	f000 f878 	bl	8005920 <_sbrk_r>
 8005830:	4580      	cmp	r8, r0
 8005832:	d13a      	bne.n	80058aa <_malloc_r+0xd2>
 8005834:	6821      	ldr	r1, [r4, #0]
 8005836:	3503      	adds	r5, #3
 8005838:	1a6d      	subs	r5, r5, r1
 800583a:	f025 0503 	bic.w	r5, r5, #3
 800583e:	3508      	adds	r5, #8
 8005840:	2d0c      	cmp	r5, #12
 8005842:	bf38      	it	cc
 8005844:	250c      	movcc	r5, #12
 8005846:	4638      	mov	r0, r7
 8005848:	4629      	mov	r1, r5
 800584a:	f7ff ffa5 	bl	8005798 <sbrk_aligned>
 800584e:	3001      	adds	r0, #1
 8005850:	d02b      	beq.n	80058aa <_malloc_r+0xd2>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	442b      	add	r3, r5
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	e00e      	b.n	8005878 <_malloc_r+0xa0>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	1b52      	subs	r2, r2, r5
 800585e:	d41e      	bmi.n	800589e <_malloc_r+0xc6>
 8005860:	2a0b      	cmp	r2, #11
 8005862:	d916      	bls.n	8005892 <_malloc_r+0xba>
 8005864:	1961      	adds	r1, r4, r5
 8005866:	42a3      	cmp	r3, r4
 8005868:	6025      	str	r5, [r4, #0]
 800586a:	bf18      	it	ne
 800586c:	6059      	strne	r1, [r3, #4]
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	bf08      	it	eq
 8005872:	6031      	streq	r1, [r6, #0]
 8005874:	5162      	str	r2, [r4, r5]
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	4638      	mov	r0, r7
 800587a:	f104 060b 	add.w	r6, r4, #11
 800587e:	f000 f865 	bl	800594c <__malloc_unlock>
 8005882:	f026 0607 	bic.w	r6, r6, #7
 8005886:	1d23      	adds	r3, r4, #4
 8005888:	1af2      	subs	r2, r6, r3
 800588a:	d0b6      	beq.n	80057fa <_malloc_r+0x22>
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	50a3      	str	r3, [r4, r2]
 8005890:	e7b3      	b.n	80057fa <_malloc_r+0x22>
 8005892:	6862      	ldr	r2, [r4, #4]
 8005894:	42a3      	cmp	r3, r4
 8005896:	bf0c      	ite	eq
 8005898:	6032      	streq	r2, [r6, #0]
 800589a:	605a      	strne	r2, [r3, #4]
 800589c:	e7ec      	b.n	8005878 <_malloc_r+0xa0>
 800589e:	4623      	mov	r3, r4
 80058a0:	6864      	ldr	r4, [r4, #4]
 80058a2:	e7b2      	b.n	800580a <_malloc_r+0x32>
 80058a4:	4634      	mov	r4, r6
 80058a6:	6876      	ldr	r6, [r6, #4]
 80058a8:	e7b9      	b.n	800581e <_malloc_r+0x46>
 80058aa:	230c      	movs	r3, #12
 80058ac:	4638      	mov	r0, r7
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	f000 f84c 	bl	800594c <__malloc_unlock>
 80058b4:	e7a1      	b.n	80057fa <_malloc_r+0x22>
 80058b6:	6025      	str	r5, [r4, #0]
 80058b8:	e7de      	b.n	8005878 <_malloc_r+0xa0>
 80058ba:	bf00      	nop
 80058bc:	20000494 	.word	0x20000494

080058c0 <_realloc_r>:
 80058c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c4:	4680      	mov	r8, r0
 80058c6:	4614      	mov	r4, r2
 80058c8:	460e      	mov	r6, r1
 80058ca:	b921      	cbnz	r1, 80058d6 <_realloc_r+0x16>
 80058cc:	4611      	mov	r1, r2
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f7ff bf81 	b.w	80057d8 <_malloc_r>
 80058d6:	b92a      	cbnz	r2, 80058e4 <_realloc_r+0x24>
 80058d8:	f7ff ff16 	bl	8005708 <_free_r>
 80058dc:	4625      	mov	r5, r4
 80058de:	4628      	mov	r0, r5
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	f000 f838 	bl	8005958 <_malloc_usable_size_r>
 80058e8:	4284      	cmp	r4, r0
 80058ea:	4607      	mov	r7, r0
 80058ec:	d802      	bhi.n	80058f4 <_realloc_r+0x34>
 80058ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058f2:	d812      	bhi.n	800591a <_realloc_r+0x5a>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4640      	mov	r0, r8
 80058f8:	f7ff ff6e 	bl	80057d8 <_malloc_r>
 80058fc:	4605      	mov	r5, r0
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0ed      	beq.n	80058de <_realloc_r+0x1e>
 8005902:	42bc      	cmp	r4, r7
 8005904:	4622      	mov	r2, r4
 8005906:	4631      	mov	r1, r6
 8005908:	bf28      	it	cs
 800590a:	463a      	movcs	r2, r7
 800590c:	f7ff fb12 	bl	8004f34 <memcpy>
 8005910:	4631      	mov	r1, r6
 8005912:	4640      	mov	r0, r8
 8005914:	f7ff fef8 	bl	8005708 <_free_r>
 8005918:	e7e1      	b.n	80058de <_realloc_r+0x1e>
 800591a:	4635      	mov	r5, r6
 800591c:	e7df      	b.n	80058de <_realloc_r+0x1e>
	...

08005920 <_sbrk_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	2300      	movs	r3, #0
 8005924:	4d05      	ldr	r5, [pc, #20]	; (800593c <_sbrk_r+0x1c>)
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	f7fc fdf6 	bl	800251c <_sbrk>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_sbrk_r+0x1a>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_sbrk_r+0x1a>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	2000049c 	.word	0x2000049c

08005940 <__malloc_lock>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__malloc_lock+0x8>)
 8005942:	f000 b811 	b.w	8005968 <__retarget_lock_acquire_recursive>
 8005946:	bf00      	nop
 8005948:	200004a0 	.word	0x200004a0

0800594c <__malloc_unlock>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__malloc_unlock+0x8>)
 800594e:	f000 b80c 	b.w	800596a <__retarget_lock_release_recursive>
 8005952:	bf00      	nop
 8005954:	200004a0 	.word	0x200004a0

08005958 <_malloc_usable_size_r>:
 8005958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595c:	1f18      	subs	r0, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	bfbc      	itt	lt
 8005962:	580b      	ldrlt	r3, [r1, r0]
 8005964:	18c0      	addlt	r0, r0, r3
 8005966:	4770      	bx	lr

08005968 <__retarget_lock_acquire_recursive>:
 8005968:	4770      	bx	lr

0800596a <__retarget_lock_release_recursive>:
 800596a:	4770      	bx	lr

0800596c <_init>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr

08005978 <_fini>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr
