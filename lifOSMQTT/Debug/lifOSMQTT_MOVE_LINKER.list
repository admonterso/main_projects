
lifOSMQTT_MOVE_LINKER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  0800c10c  0800c10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08011984  08011984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d7c  08011d7c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08011d7c  08011d7c  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011d7c  08011d7c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d7c  08011d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d80  08011d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08011d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000013c  08011ec0  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08011ec0  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc7c  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268d  00000000  00000000  0002dde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a17  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c02  00000000  00000000  0004aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d4c  00000000  00000000  0005b6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e33f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  000e3448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c10c <__do_global_dtors_aux>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4c05      	ldr	r4, [pc, #20]	; (800c124 <__do_global_dtors_aux+0x18>)
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	b933      	cbnz	r3, 800c122 <__do_global_dtors_aux+0x16>
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__do_global_dtors_aux+0x1c>)
 800c116:	b113      	cbz	r3, 800c11e <__do_global_dtors_aux+0x12>
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <__do_global_dtors_aux+0x20>)
 800c11a:	f3af 8000 	nop.w
 800c11e:	2301      	movs	r3, #1
 800c120:	7023      	strb	r3, [r4, #0]
 800c122:	bd10      	pop	{r4, pc}
 800c124:	2000013c 	.word	0x2000013c
 800c128:	00000000 	.word	0x00000000
 800c12c:	0801196c 	.word	0x0801196c

0800c130 <frame_dummy>:
 800c130:	b508      	push	{r3, lr}
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <frame_dummy+0x10>)
 800c134:	b11b      	cbz	r3, 800c13e <frame_dummy+0xe>
 800c136:	4903      	ldr	r1, [pc, #12]	; (800c144 <frame_dummy+0x14>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <frame_dummy+0x18>)
 800c13a:	f3af 8000 	nop.w
 800c13e:	bd08      	pop	{r3, pc}
 800c140:	00000000 	.word	0x00000000
 800c144:	20000140 	.word	0x20000140
 800c148:	0801196c 	.word	0x0801196c

0800c14c <strlen>:
 800c14c:	4603      	mov	r3, r0
 800c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c152:	2a00      	cmp	r2, #0
 800c154:	d1fb      	bne.n	800c14e <strlen+0x2>
 800c156:	1a18      	subs	r0, r3, r0
 800c158:	3801      	subs	r0, #1
 800c15a:	4770      	bx	lr

0800c15c <printMzadVar>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(4);
	HD44780_PrintStr("!");
}

void printMzadVar(uint8_t row, uint8_t column){
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	460a      	mov	r2, r1
 800c166:	71fb      	strb	r3, [r7, #7]
 800c168:	4613      	mov	r3, r2
 800c16a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c16c:	f000 fce4 	bl	800cb38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, mGeo);
 800c170:	493c      	ldr	r1, [pc, #240]	; (800c264 <printMzadVar+0x108>)
 800c172:	2001      	movs	r0, #1
 800c174:	f000 fd3e 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	79bb      	ldrb	r3, [r7, #6]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fcf0 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c184:	2001      	movs	r0, #1
 800c186:	f000 fd5e 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, zGeo);
 800c18a:	4937      	ldr	r1, [pc, #220]	; (800c268 <printMzadVar+0x10c>)
 800c18c:	2002      	movs	r0, #2
 800c18e:	f000 fd31 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c192:	79bb      	ldrb	r3, [r7, #6]
 800c194:	3301      	adds	r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fce1 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c1a2:	2002      	movs	r0, #2
 800c1a4:	f000 fd4f 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, aGeo);
 800c1a8:	4930      	ldr	r1, [pc, #192]	; (800c26c <printMzadVar+0x110>)
 800c1aa:	2003      	movs	r0, #3
 800c1ac:	f000 fd22 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c1b0:	79bb      	ldrb	r3, [r7, #6]
 800c1b2:	3302      	adds	r3, #2
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	79fa      	ldrb	r2, [r7, #7]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fcd2 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	f000 fd40 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800c1c6:	492a      	ldr	r1, [pc, #168]	; (800c270 <printMzadVar+0x114>)
 800c1c8:	2004      	movs	r0, #4
 800c1ca:	f000 fd13 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c1ce:	79bb      	ldrb	r3, [r7, #6]
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fcc3 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c1de:	2004      	movs	r0, #4
 800c1e0:	f000 fd31 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, vGeo);
 800c1e4:	4923      	ldr	r1, [pc, #140]	; (800c274 <printMzadVar+0x118>)
 800c1e6:	2005      	movs	r0, #5
 800c1e8:	f000 fd04 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c1ec:	79bb      	ldrb	r3, [r7, #6]
 800c1ee:	3305      	adds	r3, #5
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	79fa      	ldrb	r2, [r7, #7]
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fcb4 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c1fc:	2005      	movs	r0, #5
 800c1fe:	f000 fd22 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c202:	79bb      	ldrb	r3, [r7, #6]
 800c204:	3306      	adds	r3, #6
 800c206:	b2db      	uxtb	r3, r3
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fca9 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c212:	2003      	movs	r0, #3
 800c214:	f000 fd17 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, rGeo);
 800c218:	4917      	ldr	r1, [pc, #92]	; (800c278 <printMzadVar+0x11c>)
 800c21a:	2006      	movs	r0, #6
 800c21c:	f000 fcea 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c220:	79bb      	ldrb	r3, [r7, #6]
 800c222:	3307      	adds	r3, #7
 800c224:	b2db      	uxtb	r3, r3
 800c226:	79fa      	ldrb	r2, [r7, #7]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fc9a 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c230:	2006      	movs	r0, #6
 800c232:	f000 fd08 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+8, row);
 800c236:	79bb      	ldrb	r3, [r7, #6]
 800c238:	3308      	adds	r3, #8
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	79fa      	ldrb	r2, [r7, #7]
 800c23e:	4611      	mov	r1, r2
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fc8f 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 800c246:	480d      	ldr	r0, [pc, #52]	; (800c27c <printMzadVar+0x120>)
 800c248:	f000 fd0a 	bl	800cc60 <HD44780_PrintStr>
	HD44780_SetCursor(6, 1);
 800c24c:	2101      	movs	r1, #1
 800c24e:	2006      	movs	r0, #6
 800c250:	f000 fc88 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintStr("-_-");
 800c254:	480a      	ldr	r0, [pc, #40]	; (800c280 <printMzadVar+0x124>)
 800c256:	f000 fd03 	bl	800cc60 <HD44780_PrintStr>
}
 800c25a:	bf00      	nop
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20000060 	.word	0x20000060
 800c268:	20000068 	.word	0x20000068
 800c26c:	20000020 	.word	0x20000020
 800c270:	20000018 	.word	0x20000018
 800c274:	20000070 	.word	0x20000070
 800c278:	20000078 	.word	0x20000078
 800c27c:	08011984 	.word	0x08011984
 800c280:	08011988 	.word	0x08011988

0800c284 <printUcxoBaratia>:
void printUcxoBaratia(uint8_t row, uint8_t column){
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	460a      	mov	r2, r1
 800c28e:	71fb      	strb	r3, [r7, #7]
 800c290:	4613      	mov	r3, r2
 800c292:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c294:	f000 fc50 	bl	800cb38 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 800c298:	494e      	ldr	r1, [pc, #312]	; (800c3d4 <printUcxoBaratia+0x150>)
 800c29a:	2001      	movs	r0, #1
 800c29c:	f000 fcaa 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c2a0:	79fa      	ldrb	r2, [r7, #7]
 800c2a2:	79bb      	ldrb	r3, [r7, #6]
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fc5c 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c2ac:	2001      	movs	r0, #1
 800c2ae:	f000 fcca 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 800c2b2:	4949      	ldr	r1, [pc, #292]	; (800c3d8 <printUcxoBaratia+0x154>)
 800c2b4:	2002      	movs	r0, #2
 800c2b6:	f000 fc9d 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c2ba:	79bb      	ldrb	r3, [r7, #6]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	79fa      	ldrb	r2, [r7, #7]
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 fc4d 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c2ca:	2002      	movs	r0, #2
 800c2cc:	f000 fcbb 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 800c2d0:	4942      	ldr	r1, [pc, #264]	; (800c3dc <printUcxoBaratia+0x158>)
 800c2d2:	2003      	movs	r0, #3
 800c2d4:	f000 fc8e 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c2d8:	79bb      	ldrb	r3, [r7, #6]
 800c2da:	3302      	adds	r3, #2
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	79fa      	ldrb	r2, [r7, #7]
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 fc3e 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c2e8:	2003      	movs	r0, #3
 800c2ea:	f000 fcac 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 800c2ee:	493c      	ldr	r1, [pc, #240]	; (800c3e0 <printUcxoBaratia+0x15c>)
 800c2f0:	2004      	movs	r0, #4
 800c2f2:	f000 fc7f 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c2f6:	79bb      	ldrb	r3, [r7, #6]
 800c2f8:	3303      	adds	r3, #3
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	79fa      	ldrb	r2, [r7, #7]
 800c2fe:	4611      	mov	r1, r2
 800c300:	4618      	mov	r0, r3
 800c302:	f000 fc2f 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c306:	2004      	movs	r0, #4
 800c308:	f000 fc9d 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800c30c:	4935      	ldr	r1, [pc, #212]	; (800c3e4 <printUcxoBaratia+0x160>)
 800c30e:	2005      	movs	r0, #5
 800c310:	f000 fc70 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c314:	79bb      	ldrb	r3, [r7, #6]
 800c316:	3305      	adds	r3, #5
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	79fa      	ldrb	r2, [r7, #7]
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fc20 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c324:	2005      	movs	r0, #5
 800c326:	f000 fc8e 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800c32a:	79bb      	ldrb	r3, [r7, #6]
 800c32c:	3306      	adds	r3, #6
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	79fa      	ldrb	r2, [r7, #7]
 800c332:	4611      	mov	r1, r2
 800c334:	4618      	mov	r0, r3
 800c336:	f000 fc15 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c33a:	2004      	movs	r0, #4
 800c33c:	f000 fc83 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 800c340:	4929      	ldr	r1, [pc, #164]	; (800c3e8 <printUcxoBaratia+0x164>)
 800c342:	2006      	movs	r0, #6
 800c344:	f000 fc56 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c348:	79bb      	ldrb	r3, [r7, #6]
 800c34a:	3307      	adds	r3, #7
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	79fa      	ldrb	r2, [r7, #7]
 800c350:	4611      	mov	r1, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fc06 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c358:	2006      	movs	r0, #6
 800c35a:	f000 fc74 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800c35e:	79bb      	ldrb	r3, [r7, #6]
 800c360:	3308      	adds	r3, #8
 800c362:	b2db      	uxtb	r3, r3
 800c364:	79fa      	ldrb	r2, [r7, #7]
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fbfb 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c36e:	2004      	movs	r0, #4
 800c370:	f000 fc69 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 800c374:	491d      	ldr	r1, [pc, #116]	; (800c3ec <printUcxoBaratia+0x168>)
 800c376:	2007      	movs	r0, #7
 800c378:	f000 fc3c 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c37c:	79bb      	ldrb	r3, [r7, #6]
 800c37e:	3309      	adds	r3, #9
 800c380:	b2db      	uxtb	r3, r3
 800c382:	79fa      	ldrb	r2, [r7, #7]
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fbec 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c38c:	2007      	movs	r0, #7
 800c38e:	f000 fc5a 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 800c392:	4917      	ldr	r1, [pc, #92]	; (800c3f0 <printUcxoBaratia+0x16c>)
 800c394:	2008      	movs	r0, #8
 800c396:	f000 fc2d 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c39a:	79bb      	ldrb	r3, [r7, #6]
 800c39c:	330a      	adds	r3, #10
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	79fa      	ldrb	r2, [r7, #7]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 fbdd 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c3aa:	2008      	movs	r0, #8
 800c3ac:	f000 fc4b 	bl	800cc46 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 800c3b0:	79bb      	ldrb	r3, [r7, #6]
 800c3b2:	330b      	adds	r3, #11
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	79fa      	ldrb	r2, [r7, #7]
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fbd2 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c3c0:	2004      	movs	r0, #4
 800c3c2:	f000 fc40 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c3c6:	480b      	ldr	r0, [pc, #44]	; (800c3f4 <printUcxoBaratia+0x170>)
 800c3c8:	f000 fc4a 	bl	800cc60 <HD44780_PrintStr>

}
 800c3cc:	bf00      	nop
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20000008 	.word	0x20000008
 800c3d8:	20000010 	.word	0x20000010
 800c3dc:	20000070 	.word	0x20000070
 800c3e0:	20000020 	.word	0x20000020
 800c3e4:	20000030 	.word	0x20000030
 800c3e8:	20000078 	.word	0x20000078
 800c3ec:	20000058 	.word	0x20000058
 800c3f0:	20000038 	.word	0x20000038
 800c3f4:	08011984 	.word	0x08011984

0800c3f8 <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	460a      	mov	r2, r1
 800c402:	71fb      	strb	r3, [r7, #7]
 800c404:	4613      	mov	r3, r2
 800c406:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 800c408:	f000 fb96 	bl	800cb38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800c40c:	4948      	ldr	r1, [pc, #288]	; (800c530 <printBlansiAraa+0x138>)
 800c40e:	2001      	movs	r0, #1
 800c410:	f000 fbf0 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c414:	79fa      	ldrb	r2, [r7, #7]
 800c416:	79bb      	ldrb	r3, [r7, #6]
 800c418:	4611      	mov	r1, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fba2 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c420:	2001      	movs	r0, #1
 800c422:	f000 fc10 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 800c426:	4943      	ldr	r1, [pc, #268]	; (800c534 <printBlansiAraa+0x13c>)
 800c428:	2002      	movs	r0, #2
 800c42a:	f000 fbe3 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c42e:	79bb      	ldrb	r3, [r7, #6]
 800c430:	3301      	adds	r3, #1
 800c432:	b2db      	uxtb	r3, r3
 800c434:	79fa      	ldrb	r2, [r7, #7]
 800c436:	4611      	mov	r1, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fb93 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c43e:	2002      	movs	r0, #2
 800c440:	f000 fc01 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 800c444:	493c      	ldr	r1, [pc, #240]	; (800c538 <printBlansiAraa+0x140>)
 800c446:	2003      	movs	r0, #3
 800c448:	f000 fbd4 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c44c:	79bb      	ldrb	r3, [r7, #6]
 800c44e:	3302      	adds	r3, #2
 800c450:	b2db      	uxtb	r3, r3
 800c452:	79fa      	ldrb	r2, [r7, #7]
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f000 fb84 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c45c:	2003      	movs	r0, #3
 800c45e:	f000 fbf2 	bl	800cc46 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 800c462:	79bb      	ldrb	r3, [r7, #6]
 800c464:	3303      	adds	r3, #3
 800c466:	b2db      	uxtb	r3, r3
 800c468:	79fa      	ldrb	r2, [r7, #7]
 800c46a:	4611      	mov	r1, r2
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fb79 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c472:	2002      	movs	r0, #2
 800c474:	f000 fbe7 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 800c478:	4930      	ldr	r1, [pc, #192]	; (800c53c <printBlansiAraa+0x144>)
 800c47a:	2004      	movs	r0, #4
 800c47c:	f000 fbba 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c480:	79bb      	ldrb	r3, [r7, #6]
 800c482:	3304      	adds	r3, #4
 800c484:	b2db      	uxtb	r3, r3
 800c486:	79fa      	ldrb	r2, [r7, #7]
 800c488:	4611      	mov	r1, r2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 fb6a 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c490:	2004      	movs	r0, #4
 800c492:	f000 fbd8 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 800c496:	492a      	ldr	r1, [pc, #168]	; (800c540 <printBlansiAraa+0x148>)
 800c498:	2005      	movs	r0, #5
 800c49a:	f000 fbab 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c49e:	79bb      	ldrb	r3, [r7, #6]
 800c4a0:	3305      	adds	r3, #5
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	79fa      	ldrb	r2, [r7, #7]
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 fb5b 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c4ae:	2005      	movs	r0, #5
 800c4b0:	f000 fbc9 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 800c4b4:	4923      	ldr	r1, [pc, #140]	; (800c544 <printBlansiAraa+0x14c>)
 800c4b6:	2006      	movs	r0, #6
 800c4b8:	f000 fb9c 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c4bc:	79bb      	ldrb	r3, [r7, #6]
 800c4be:	3306      	adds	r3, #6
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	79fa      	ldrb	r2, [r7, #7]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fb4c 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c4cc:	2006      	movs	r0, #6
 800c4ce:	f000 fbba 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 800c4d2:	79bb      	ldrb	r3, [r7, #6]
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	79fa      	ldrb	r2, [r7, #7]
 800c4da:	4611      	mov	r1, r2
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fb41 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c4e2:	2002      	movs	r0, #2
 800c4e4:	f000 fbaf 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 800c4e8:	4917      	ldr	r1, [pc, #92]	; (800c548 <printBlansiAraa+0x150>)
 800c4ea:	2007      	movs	r0, #7
 800c4ec:	f000 fb82 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 800c4f0:	79bb      	ldrb	r3, [r7, #6]
 800c4f2:	3309      	adds	r3, #9
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	79fa      	ldrb	r2, [r7, #7]
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 fb32 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c500:	2007      	movs	r0, #7
 800c502:	f000 fba0 	bl	800cc46 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 800c506:	79bb      	ldrb	r3, [r7, #6]
 800c508:	330a      	adds	r3, #10
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	79fa      	ldrb	r2, [r7, #7]
 800c50e:	4611      	mov	r1, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f000 fb27 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c516:	2002      	movs	r0, #2
 800c518:	f000 fb95 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c51c:	2002      	movs	r0, #2
 800c51e:	f000 fb92 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c522:	480a      	ldr	r0, [pc, #40]	; (800c54c <printBlansiAraa+0x154>)
 800c524:	f000 fb9c 	bl	800cc60 <HD44780_PrintStr>
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20000030 	.word	0x20000030
 800c534:	20000020 	.word	0x20000020
 800c538:	20000040 	.word	0x20000040
 800c53c:	20000000 	.word	0x20000000
 800c540:	20000008 	.word	0x20000008
 800c544:	20000038 	.word	0x20000038
 800c548:	20000078 	.word	0x20000078
 800c54c:	08011984 	.word	0x08011984

0800c550 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	4603      	mov	r3, r0
 800c558:	460a      	mov	r2, r1
 800c55a:	71fb      	strb	r3, [r7, #7]
 800c55c:	4613      	mov	r3, r2
 800c55e:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c560:	f000 faea 	bl	800cb38 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 800c564:	4959      	ldr	r1, [pc, #356]	; (800c6cc <printMiadetBarati+0x17c>)
 800c566:	2001      	movs	r0, #1
 800c568:	f000 fb44 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c56c:	79fa      	ldrb	r2, [r7, #7]
 800c56e:	79bb      	ldrb	r3, [r7, #6]
 800c570:	4611      	mov	r1, r2
 800c572:	4618      	mov	r0, r3
 800c574:	f000 faf6 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c578:	2001      	movs	r0, #1
 800c57a:	f000 fb64 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800c57e:	4954      	ldr	r1, [pc, #336]	; (800c6d0 <printMiadetBarati+0x180>)
 800c580:	2002      	movs	r0, #2
 800c582:	f000 fb37 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c586:	79bb      	ldrb	r3, [r7, #6]
 800c588:	3301      	adds	r3, #1
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	79fa      	ldrb	r2, [r7, #7]
 800c58e:	4611      	mov	r1, r2
 800c590:	4618      	mov	r0, r3
 800c592:	f000 fae7 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c596:	2002      	movs	r0, #2
 800c598:	f000 fb55 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800c59c:	494d      	ldr	r1, [pc, #308]	; (800c6d4 <printMiadetBarati+0x184>)
 800c59e:	2003      	movs	r0, #3
 800c5a0:	f000 fb28 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c5a4:	79bb      	ldrb	r3, [r7, #6]
 800c5a6:	3302      	adds	r3, #2
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	79fa      	ldrb	r2, [r7, #7]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fad8 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c5b4:	2003      	movs	r0, #3
 800c5b6:	f000 fb46 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 800c5ba:	4947      	ldr	r1, [pc, #284]	; (800c6d8 <printMiadetBarati+0x188>)
 800c5bc:	2004      	movs	r0, #4
 800c5be:	f000 fb19 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c5c2:	79bb      	ldrb	r3, [r7, #6]
 800c5c4:	3303      	adds	r3, #3
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	79fa      	ldrb	r2, [r7, #7]
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fac9 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c5d2:	2004      	movs	r0, #4
 800c5d4:	f000 fb37 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 800c5d8:	4940      	ldr	r1, [pc, #256]	; (800c6dc <printMiadetBarati+0x18c>)
 800c5da:	2005      	movs	r0, #5
 800c5dc:	f000 fb0a 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 800c5e0:	79bb      	ldrb	r3, [r7, #6]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	79fa      	ldrb	r2, [r7, #7]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 faba 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c5f0:	2005      	movs	r0, #5
 800c5f2:	f000 fb28 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 800c5f6:	493a      	ldr	r1, [pc, #232]	; (800c6e0 <printMiadetBarati+0x190>)
 800c5f8:	2006      	movs	r0, #6
 800c5fa:	f000 fafb 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c5fe:	79bb      	ldrb	r3, [r7, #6]
 800c600:	3305      	adds	r3, #5
 800c602:	b2db      	uxtb	r3, r3
 800c604:	79fa      	ldrb	r2, [r7, #7]
 800c606:	4611      	mov	r1, r2
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 faab 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c60e:	2006      	movs	r0, #6
 800c610:	f000 fb19 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 800c614:	4933      	ldr	r1, [pc, #204]	; (800c6e4 <printMiadetBarati+0x194>)
 800c616:	2007      	movs	r0, #7
 800c618:	f000 faec 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c61c:	79bb      	ldrb	r3, [r7, #6]
 800c61e:	3307      	adds	r3, #7
 800c620:	b2db      	uxtb	r3, r3
 800c622:	79fa      	ldrb	r2, [r7, #7]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fa9c 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c62c:	2007      	movs	r0, #7
 800c62e:	f000 fb0a 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 800c632:	79bb      	ldrb	r3, [r7, #6]
 800c634:	3308      	adds	r3, #8
 800c636:	b2db      	uxtb	r3, r3
 800c638:	79fa      	ldrb	r2, [r7, #7]
 800c63a:	4611      	mov	r1, r2
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fa91 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c642:	2003      	movs	r0, #3
 800c644:	f000 faff 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 800c648:	4927      	ldr	r1, [pc, #156]	; (800c6e8 <printMiadetBarati+0x198>)
 800c64a:	2008      	movs	r0, #8
 800c64c:	f000 fad2 	bl	800cbf4 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c650:	79bb      	ldrb	r3, [r7, #6]
 800c652:	3309      	adds	r3, #9
 800c654:	b2db      	uxtb	r3, r3
 800c656:	79fa      	ldrb	r2, [r7, #7]
 800c658:	4611      	mov	r1, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fa82 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c660:	2008      	movs	r0, #8
 800c662:	f000 faf0 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c666:	79bb      	ldrb	r3, [r7, #6]
 800c668:	330a      	adds	r3, #10
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	79fa      	ldrb	r2, [r7, #7]
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f000 fa77 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c676:	2003      	movs	r0, #3
 800c678:	f000 fae5 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800c67c:	79bb      	ldrb	r3, [r7, #6]
 800c67e:	330b      	adds	r3, #11
 800c680:	b2db      	uxtb	r3, r3
 800c682:	79fa      	ldrb	r2, [r7, #7]
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fa6c 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c68c:	2006      	movs	r0, #6
 800c68e:	f000 fada 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 800c692:	79bb      	ldrb	r3, [r7, #6]
 800c694:	330c      	adds	r3, #12
 800c696:	b2db      	uxtb	r3, r3
 800c698:	79fa      	ldrb	r2, [r7, #7]
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fa61 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c6a2:	2002      	movs	r0, #2
 800c6a4:	f000 facf 	bl	800cc46 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 800c6a8:	79bb      	ldrb	r3, [r7, #6]
 800c6aa:	3302      	adds	r3, #2
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f000 fa54 	bl	800cb64 <HD44780_SetCursor>
		HD44780_PrintStr("0.18 GEL");
 800c6bc:	480b      	ldr	r0, [pc, #44]	; (800c6ec <printMiadetBarati+0x19c>)
 800c6be:	f000 facf 	bl	800cc60 <HD44780_PrintStr>


}
 800c6c2:	bf00      	nop
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20000060 	.word	0x20000060
 800c6d0:	20000038 	.word	0x20000038
 800c6d4:	20000020 	.word	0x20000020
 800c6d8:	20000018 	.word	0x20000018
 800c6dc:	20000080 	.word	0x20000080
 800c6e0:	20000058 	.word	0x20000058
 800c6e4:	20000030 	.word	0x20000030
 800c6e8:	20000078 	.word	0x20000078
 800c6ec:	0801198c 	.word	0x0801198c

0800c6f0 <printShecdoma>:
void printShecdoma(uint8_t row, uint8_t column){
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	460a      	mov	r2, r1
 800c6fa:	71fb      	strb	r3, [r7, #7]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c700:	f000 fa1a 	bl	800cb38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, SGeo);
 800c704:	493a      	ldr	r1, [pc, #232]	; (800c7f0 <printShecdoma+0x100>)
 800c706:	2001      	movs	r0, #1
 800c708:	f000 fa74 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c70c:	79fa      	ldrb	r2, [r7, #7]
 800c70e:	79bb      	ldrb	r3, [r7, #6]
 800c710:	4611      	mov	r1, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fa26 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c718:	2001      	movs	r0, #1
 800c71a:	f000 fa94 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, eGeo);
 800c71e:	4935      	ldr	r1, [pc, #212]	; (800c7f4 <printShecdoma+0x104>)
 800c720:	2002      	movs	r0, #2
 800c722:	f000 fa67 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c726:	79bb      	ldrb	r3, [r7, #6]
 800c728:	3301      	adds	r3, #1
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	79fa      	ldrb	r2, [r7, #7]
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fa17 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c736:	2002      	movs	r0, #2
 800c738:	f000 fa85 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, cGeo);
 800c73c:	492e      	ldr	r1, [pc, #184]	; (800c7f8 <printShecdoma+0x108>)
 800c73e:	2003      	movs	r0, #3
 800c740:	f000 fa58 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c744:	79bb      	ldrb	r3, [r7, #6]
 800c746:	3302      	adds	r3, #2
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	79fa      	ldrb	r2, [r7, #7]
 800c74c:	4611      	mov	r1, r2
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fa08 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c754:	2003      	movs	r0, #3
 800c756:	f000 fa76 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800c75a:	4928      	ldr	r1, [pc, #160]	; (800c7fc <printShecdoma+0x10c>)
 800c75c:	2004      	movs	r0, #4
 800c75e:	f000 fa49 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c762:	79bb      	ldrb	r3, [r7, #6]
 800c764:	3303      	adds	r3, #3
 800c766:	b2db      	uxtb	r3, r3
 800c768:	79fa      	ldrb	r2, [r7, #7]
 800c76a:	4611      	mov	r1, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 f9f9 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c772:	2004      	movs	r0, #4
 800c774:	f000 fa67 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, oGeo);
 800c778:	4921      	ldr	r1, [pc, #132]	; (800c800 <printShecdoma+0x110>)
 800c77a:	2005      	movs	r0, #5
 800c77c:	f000 fa3a 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c780:	79bb      	ldrb	r3, [r7, #6]
 800c782:	3304      	adds	r3, #4
 800c784:	b2db      	uxtb	r3, r3
 800c786:	79fa      	ldrb	r2, [r7, #7]
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f9ea 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c790:	2005      	movs	r0, #5
 800c792:	f000 fa58 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, mGeo);
 800c796:	491b      	ldr	r1, [pc, #108]	; (800c804 <printShecdoma+0x114>)
 800c798:	2006      	movs	r0, #6
 800c79a:	f000 fa2b 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c79e:	79bb      	ldrb	r3, [r7, #6]
 800c7a0:	3305      	adds	r3, #5
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	79fa      	ldrb	r2, [r7, #7]
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 f9db 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c7ae:	2006      	movs	r0, #6
 800c7b0:	f000 fa49 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, aGeo);
 800c7b4:	4914      	ldr	r1, [pc, #80]	; (800c808 <printShecdoma+0x118>)
 800c7b6:	2007      	movs	r0, #7
 800c7b8:	f000 fa1c 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c7bc:	79bb      	ldrb	r3, [r7, #6]
 800c7be:	3306      	adds	r3, #6
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	79fa      	ldrb	r2, [r7, #7]
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f9cc 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c7cc:	2007      	movs	r0, #7
 800c7ce:	f000 fa3a 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c7d2:	79bb      	ldrb	r3, [r7, #6]
 800c7d4:	3307      	adds	r3, #7
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	79fa      	ldrb	r2, [r7, #7]
 800c7da:	4611      	mov	r1, r2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 f9c1 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 800c7e2:	480a      	ldr	r0, [pc, #40]	; (800c80c <printShecdoma+0x11c>)
 800c7e4:	f000 fa3c 	bl	800cc60 <HD44780_PrintStr>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20000028 	.word	0x20000028
 800c7f4:	20000080 	.word	0x20000080
 800c7f8:	20000048 	.word	0x20000048
 800c7fc:	20000018 	.word	0x20000018
 800c800:	20000050 	.word	0x20000050
 800c804:	20000060 	.word	0x20000060
 800c808:	20000020 	.word	0x20000020
 800c80c:	08011984 	.word	0x08011984

0800c810 <printDaicadet>:

void printDaicadet(uint8_t row, uint8_t column){
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	4603      	mov	r3, r0
 800c818:	460a      	mov	r2, r1
 800c81a:	71fb      	strb	r3, [r7, #7]
 800c81c:	4613      	mov	r3, r2
 800c81e:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c820:	f000 f98a 	bl	800cb38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 800c824:	493a      	ldr	r1, [pc, #232]	; (800c910 <printDaicadet+0x100>)
 800c826:	2001      	movs	r0, #1
 800c828:	f000 f9e4 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c82c:	79fa      	ldrb	r2, [r7, #7]
 800c82e:	79bb      	ldrb	r3, [r7, #6]
 800c830:	4611      	mov	r1, r2
 800c832:	4618      	mov	r0, r3
 800c834:	f000 f996 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c838:	2001      	movs	r0, #1
 800c83a:	f000 fa04 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800c83e:	4935      	ldr	r1, [pc, #212]	; (800c914 <printDaicadet+0x104>)
 800c840:	2002      	movs	r0, #2
 800c842:	f000 f9d7 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c846:	79bb      	ldrb	r3, [r7, #6]
 800c848:	3301      	adds	r3, #1
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	79fa      	ldrb	r2, [r7, #7]
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f000 f987 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c856:	2002      	movs	r0, #2
 800c858:	f000 f9f5 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800c85c:	492e      	ldr	r1, [pc, #184]	; (800c918 <printDaicadet+0x108>)
 800c85e:	2003      	movs	r0, #3
 800c860:	f000 f9c8 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c864:	79bb      	ldrb	r3, [r7, #6]
 800c866:	3302      	adds	r3, #2
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	79fa      	ldrb	r2, [r7, #7]
 800c86c:	4611      	mov	r1, r2
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 f978 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c874:	2003      	movs	r0, #3
 800c876:	f000 f9e6 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800c87a:	4928      	ldr	r1, [pc, #160]	; (800c91c <printDaicadet+0x10c>)
 800c87c:	2004      	movs	r0, #4
 800c87e:	f000 f9b9 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c882:	79bb      	ldrb	r3, [r7, #6]
 800c884:	3303      	adds	r3, #3
 800c886:	b2db      	uxtb	r3, r3
 800c888:	79fa      	ldrb	r2, [r7, #7]
 800c88a:	4611      	mov	r1, r2
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f969 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c892:	2004      	movs	r0, #4
 800c894:	f000 f9d7 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c898:	79bb      	ldrb	r3, [r7, #6]
 800c89a:	3304      	adds	r3, #4
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	79fa      	ldrb	r2, [r7, #7]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f95e 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c8a8:	2002      	movs	r0, #2
 800c8aa:	f000 f9cc 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c8ae:	79bb      	ldrb	r3, [r7, #6]
 800c8b0:	3305      	adds	r3, #5
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	79fa      	ldrb	r2, [r7, #7]
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 f953 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c8be:	2001      	movs	r0, #1
 800c8c0:	f000 f9c1 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 800c8c4:	4916      	ldr	r1, [pc, #88]	; (800c920 <printDaicadet+0x110>)
 800c8c6:	2005      	movs	r0, #5
 800c8c8:	f000 f994 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c8cc:	79bb      	ldrb	r3, [r7, #6]
 800c8ce:	3306      	adds	r3, #6
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	79fa      	ldrb	r2, [r7, #7]
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 f944 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c8dc:	2005      	movs	r0, #5
 800c8de:	f000 f9b2 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 800c8e2:	4910      	ldr	r1, [pc, #64]	; (800c924 <printDaicadet+0x114>)
 800c8e4:	2006      	movs	r0, #6
 800c8e6:	f000 f985 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c8ea:	79bb      	ldrb	r3, [r7, #6]
 800c8ec:	3307      	adds	r3, #7
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	79fa      	ldrb	r2, [r7, #7]
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 f935 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c8fa:	2006      	movs	r0, #6
 800c8fc:	f000 f9a3 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c900:	4809      	ldr	r0, [pc, #36]	; (800c928 <printDaicadet+0x118>)
 800c902:	f000 f9ad 	bl	800cc60 <HD44780_PrintStr>
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20000018 	.word	0x20000018
 800c914:	20000020 	.word	0x20000020
 800c918:	20000038 	.word	0x20000038
 800c91c:	20000048 	.word	0x20000048
 800c920:	20000080 	.word	0x20000080
 800c924:	20000058 	.word	0x20000058
 800c928:	08011984 	.word	0x08011984

0800c92c <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	460a      	mov	r2, r1
 800c936:	71fb      	strb	r3, [r7, #7]
 800c938:	4613      	mov	r3, r2
 800c93a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c93c:	f000 f8fc 	bl	800cb38 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 800c940:	4934      	ldr	r1, [pc, #208]	; (800ca14 <printBalansi+0xe8>)
 800c942:	2001      	movs	r0, #1
 800c944:	f000 f956 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c948:	79fa      	ldrb	r2, [r7, #7]
 800c94a:	79bb      	ldrb	r3, [r7, #6]
 800c94c:	4611      	mov	r1, r2
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 f908 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c954:	2001      	movs	r0, #1
 800c956:	f000 f976 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800c95a:	492f      	ldr	r1, [pc, #188]	; (800ca18 <printBalansi+0xec>)
 800c95c:	2002      	movs	r0, #2
 800c95e:	f000 f949 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c962:	79bb      	ldrb	r3, [r7, #6]
 800c964:	3301      	adds	r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	79fa      	ldrb	r2, [r7, #7]
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 f8f9 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c972:	2002      	movs	r0, #2
 800c974:	f000 f967 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 800c978:	4928      	ldr	r1, [pc, #160]	; (800ca1c <printBalansi+0xf0>)
 800c97a:	2003      	movs	r0, #3
 800c97c:	f000 f93a 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c980:	79bb      	ldrb	r3, [r7, #6]
 800c982:	3302      	adds	r3, #2
 800c984:	b2db      	uxtb	r3, r3
 800c986:	79fa      	ldrb	r2, [r7, #7]
 800c988:	4611      	mov	r1, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 f8ea 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c990:	2003      	movs	r0, #3
 800c992:	f000 f958 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c996:	2002      	movs	r0, #2
 800c998:	f000 f955 	bl	800cc46 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c99c:	79bb      	ldrb	r3, [r7, #6]
 800c99e:	3303      	adds	r3, #3
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	79fa      	ldrb	r2, [r7, #7]
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f8dc 	bl	800cb64 <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 800c9ac:	491c      	ldr	r1, [pc, #112]	; (800ca20 <printBalansi+0xf4>)
 800c9ae:	2005      	movs	r0, #5
 800c9b0:	f000 f920 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c9b4:	79bb      	ldrb	r3, [r7, #6]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	79fa      	ldrb	r2, [r7, #7]
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f8d0 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c9c4:	2005      	movs	r0, #5
 800c9c6:	f000 f93e 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 800c9ca:	4916      	ldr	r1, [pc, #88]	; (800ca24 <printBalansi+0xf8>)
 800c9cc:	2006      	movs	r0, #6
 800c9ce:	f000 f911 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c9d2:	79bb      	ldrb	r3, [r7, #6]
 800c9d4:	3305      	adds	r3, #5
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	79fa      	ldrb	r2, [r7, #7]
 800c9da:	4611      	mov	r1, r2
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 f8c1 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c9e2:	2006      	movs	r0, #6
 800c9e4:	f000 f92f 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 800c9e8:	490f      	ldr	r1, [pc, #60]	; (800ca28 <printBalansi+0xfc>)
 800c9ea:	2007      	movs	r0, #7
 800c9ec:	f000 f902 	bl	800cbf4 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c9f0:	79bb      	ldrb	r3, [r7, #6]
 800c9f2:	3306      	adds	r3, #6
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	79fa      	ldrb	r2, [r7, #7]
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 f8b2 	bl	800cb64 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800ca00:	2007      	movs	r0, #7
 800ca02:	f000 f920 	bl	800cc46 <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 800ca06:	4809      	ldr	r0, [pc, #36]	; (800ca2c <printBalansi+0x100>)
 800ca08:	f000 f92a 	bl	800cc60 <HD44780_PrintStr>
}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20000030 	.word	0x20000030
 800ca18:	20000020 	.word	0x20000020
 800ca1c:	20000040 	.word	0x20000040
 800ca20:	20000000 	.word	0x20000000
 800ca24:	20000008 	.word	0x20000008
 800ca28:	20000038 	.word	0x20000038
 800ca2c:	08011998 	.word	0x08011998

0800ca30 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800ca3a:	4a38      	ldr	r2, [pc, #224]	; (800cb1c <HD44780_Init+0xec>)
 800ca3c:	79fb      	ldrb	r3, [r7, #7]
 800ca3e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800ca40:	4b37      	ldr	r3, [pc, #220]	; (800cb20 <HD44780_Init+0xf0>)
 800ca42:	2208      	movs	r2, #8
 800ca44:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800ca46:	4b37      	ldr	r3, [pc, #220]	; (800cb24 <HD44780_Init+0xf4>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800ca4c:	4b33      	ldr	r3, [pc, #204]	; (800cb1c <HD44780_Init+0xec>)
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d907      	bls.n	800ca64 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800ca54:	4b33      	ldr	r3, [pc, #204]	; (800cb24 <HD44780_Init+0xf4>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	f043 0308 	orr.w	r3, r3, #8
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	4b31      	ldr	r3, [pc, #196]	; (800cb24 <HD44780_Init+0xf4>)
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	e006      	b.n	800ca72 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800ca64:	4b2f      	ldr	r3, [pc, #188]	; (800cb24 <HD44780_Init+0xf4>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f043 0304 	orr.w	r3, r3, #4
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	4b2d      	ldr	r3, [pc, #180]	; (800cb24 <HD44780_Init+0xf4>)
 800ca70:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800ca72:	f000 f993 	bl	800cd9c <DelayInit>
  HAL_Delay(50);
 800ca76:	2032      	movs	r0, #50	; 0x32
 800ca78:	f001 fe14 	bl	800e6a4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800ca7c:	4b28      	ldr	r3, [pc, #160]	; (800cb20 <HD44780_Init+0xf0>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 f951 	bl	800cd28 <ExpanderWrite>
  HAL_Delay(1000);
 800ca86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ca8a:	f001 fe0b 	bl	800e6a4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800ca8e:	2030      	movs	r0, #48	; 0x30
 800ca90:	f000 f938 	bl	800cd04 <Write4Bits>
  DelayUS(4500);
 800ca94:	f241 1094 	movw	r0, #4500	; 0x1194
 800ca98:	f000 f9a8 	bl	800cdec <DelayUS>

  Write4Bits(0x03 << 4);
 800ca9c:	2030      	movs	r0, #48	; 0x30
 800ca9e:	f000 f931 	bl	800cd04 <Write4Bits>
  DelayUS(4500);
 800caa2:	f241 1094 	movw	r0, #4500	; 0x1194
 800caa6:	f000 f9a1 	bl	800cdec <DelayUS>

  Write4Bits(0x03 << 4);
 800caaa:	2030      	movs	r0, #48	; 0x30
 800caac:	f000 f92a 	bl	800cd04 <Write4Bits>
  DelayUS(4500);
 800cab0:	f241 1094 	movw	r0, #4500	; 0x1194
 800cab4:	f000 f99a 	bl	800cdec <DelayUS>

  Write4Bits(0x02 << 4);
 800cab8:	2020      	movs	r0, #32
 800caba:	f000 f923 	bl	800cd04 <Write4Bits>
  DelayUS(100);
 800cabe:	2064      	movs	r0, #100	; 0x64
 800cac0:	f000 f994 	bl	800cdec <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800cac4:	4b17      	ldr	r3, [pc, #92]	; (800cb24 <HD44780_Init+0xf4>)
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	f043 0320 	orr.w	r3, r3, #32
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 f8db 	bl	800cc8a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800cad4:	4b14      	ldr	r3, [pc, #80]	; (800cb28 <HD44780_Init+0xf8>)
 800cad6:	2204      	movs	r2, #4
 800cad8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800cada:	f000 f875 	bl	800cbc8 <HD44780_Display>
  HD44780_Clear();
 800cade:	f000 f82b 	bl	800cb38 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800cae2:	4b12      	ldr	r3, [pc, #72]	; (800cb2c <HD44780_Init+0xfc>)
 800cae4:	2202      	movs	r2, #2
 800cae6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800cae8:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <HD44780_Init+0xfc>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	f043 0304 	orr.w	r3, r3, #4
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 f8c9 	bl	800cc8a <SendCommand>
  DelayUS(4500);
 800caf8:	f241 1094 	movw	r0, #4500	; 0x1194
 800cafc:	f000 f976 	bl	800cdec <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800cb00:	490b      	ldr	r1, [pc, #44]	; (800cb30 <HD44780_Init+0x100>)
 800cb02:	2000      	movs	r0, #0
 800cb04:	f000 f876 	bl	800cbf4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800cb08:	490a      	ldr	r1, [pc, #40]	; (800cb34 <HD44780_Init+0x104>)
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	f000 f872 	bl	800cbf4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800cb10:	f000 f81d 	bl	800cb4e <HD44780_Home>
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	2000015b 	.word	0x2000015b
 800cb20:	2000015c 	.word	0x2000015c
 800cb24:	20000158 	.word	0x20000158
 800cb28:	20000159 	.word	0x20000159
 800cb2c:	2000015a 	.word	0x2000015a
 800cb30:	20000088 	.word	0x20000088
 800cb34:	20000090 	.word	0x20000090

0800cb38 <HD44780_Clear>:

void HD44780_Clear()
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	f000 f8a4 	bl	800cc8a <SendCommand>
  DelayUS(2000);
 800cb42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb46:	f000 f951 	bl	800cdec <DelayUS>
}
 800cb4a:	bf00      	nop
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <HD44780_Home>:

void HD44780_Home()
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800cb52:	2002      	movs	r0, #2
 800cb54:	f000 f899 	bl	800cc8a <SendCommand>
  DelayUS(2000);
 800cb58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb5c:	f000 f946 	bl	800cdec <DelayUS>
}
 800cb60:	bf00      	nop
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	71fb      	strb	r3, [r7, #7]
 800cb70:	4613      	mov	r3, r2
 800cb72:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800cb74:	4b12      	ldr	r3, [pc, #72]	; (800cbc0 <HD44780_SetCursor+0x5c>)
 800cb76:	f107 0408 	add.w	r4, r7, #8
 800cb7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800cb80:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <HD44780_SetCursor+0x60>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	79ba      	ldrb	r2, [r7, #6]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d303      	bcc.n	800cb92 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800cb8a:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <HD44780_SetCursor+0x60>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800cb92:	79bb      	ldrb	r3, [r7, #6]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	3318      	adds	r3, #24
 800cb98:	443b      	add	r3, r7
 800cb9a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	4413      	add	r3, r2
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	b25b      	sxtb	r3, r3
 800cba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbac:	b25b      	sxtb	r3, r3
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f86a 	bl	800cc8a <SendCommand>
}
 800cbb6:	bf00      	nop
 800cbb8:	371c      	adds	r7, #28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0801199c 	.word	0x0801199c
 800cbc4:	2000015b 	.word	0x2000015b

0800cbc8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800cbcc:	4b08      	ldr	r3, [pc, #32]	; (800cbf0 <HD44780_Display+0x28>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	f043 0304 	orr.w	r3, r3, #4
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <HD44780_Display+0x28>)
 800cbd8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800cbda:	4b05      	ldr	r3, [pc, #20]	; (800cbf0 <HD44780_Display+0x28>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	f043 0308 	orr.w	r3, r3, #8
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 f850 	bl	800cc8a <SendCommand>
}
 800cbea:	bf00      	nop
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000159 	.word	0x20000159

0800cbf4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	b25b      	sxtb	r3, r3
 800cc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc12:	b25b      	sxtb	r3, r3
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f837 	bl	800cc8a <SendCommand>
  for (int i=0; i<8; i++)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60fb      	str	r3, [r7, #12]
 800cc20:	e009      	b.n	800cc36 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	4413      	add	r3, r2
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 f83b 	bl	800cca6 <SendChar>
  for (int i=0; i<8; i++)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3301      	adds	r3, #1
 800cc34:	60fb      	str	r3, [r7, #12]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b07      	cmp	r3, #7
 800cc3a:	ddf2      	ble.n	800cc22 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800cc3c:	bf00      	nop
 800cc3e:	bf00      	nop
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 f827 	bl	800cca6 <SendChar>
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800cc68:	e006      	b.n	800cc78 <HD44780_PrintStr+0x18>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 f817 	bl	800cca6 <SendChar>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1f4      	bne.n	800cc6a <HD44780_PrintStr+0xa>
}
 800cc80:	bf00      	nop
 800cc82:	bf00      	nop
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b082      	sub	sp, #8
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	4603      	mov	r3, r0
 800cc92:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	2100      	movs	r1, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f812 	bl	800ccc2 <Send>
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <SendChar>:

static void SendChar(uint8_t ch)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	4603      	mov	r3, r0
 800ccae:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f804 	bl	800ccc2 <Send>
}
 800ccba:	bf00      	nop
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	4603      	mov	r3, r0
 800ccca:	460a      	mov	r2, r1
 800cccc:	71fb      	strb	r3, [r7, #7]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	f023 030f 	bic.w	r3, r3, #15
 800ccd8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800ccda:	79fb      	ldrb	r3, [r7, #7]
 800ccdc:	011b      	lsls	r3, r3, #4
 800ccde:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800cce0:	7bfa      	ldrb	r2, [r7, #15]
 800cce2:	79bb      	ldrb	r3, [r7, #6]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 f80b 	bl	800cd04 <Write4Bits>
  Write4Bits((lownib)|mode);
 800ccee:	7bba      	ldrb	r2, [r7, #14]
 800ccf0:	79bb      	ldrb	r3, [r7, #6]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 f804 	bl	800cd04 <Write4Bits>
}
 800ccfc:	bf00      	nop
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 f809 	bl	800cd28 <ExpanderWrite>
  PulseEnable(value);
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 f821 	bl	800cd60 <PulseEnable>
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	4603      	mov	r3, r0
 800cd30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800cd32:	4b09      	ldr	r3, [pc, #36]	; (800cd58 <ExpanderWrite+0x30>)
 800cd34:	781a      	ldrb	r2, [r3, #0]
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800cd3e:	f107 020f 	add.w	r2, r7, #15
 800cd42:	230a      	movs	r3, #10
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	2301      	movs	r3, #1
 800cd48:	214e      	movs	r1, #78	; 0x4e
 800cd4a:	4804      	ldr	r0, [pc, #16]	; (800cd5c <ExpanderWrite+0x34>)
 800cd4c:	f002 f9a0 	bl	800f090 <HAL_I2C_Master_Transmit>
}
 800cd50:	bf00      	nop
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	2000015c 	.word	0x2000015c
 800cd5c:	20000358 	.word	0x20000358

0800cd60 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	4603      	mov	r3, r0
 800cd68:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	f043 0304 	orr.w	r3, r3, #4
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7ff ffd8 	bl	800cd28 <ExpanderWrite>
  DelayUS(20);
 800cd78:	2014      	movs	r0, #20
 800cd7a:	f000 f837 	bl	800cdec <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	f023 0304 	bic.w	r3, r3, #4
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff ffce 	bl	800cd28 <ExpanderWrite>
  DelayUS(20);
 800cd8c:	2014      	movs	r0, #20
 800cd8e:	f000 f82d 	bl	800cdec <DelayUS>
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
	...

0800cd9c <DelayInit>:

static void DelayInit(void)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800cda0:	4b10      	ldr	r3, [pc, #64]	; (800cde4 <DelayInit+0x48>)
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	4a0f      	ldr	r2, [pc, #60]	; (800cde4 <DelayInit+0x48>)
 800cda6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cdaa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800cdac:	4b0d      	ldr	r3, [pc, #52]	; (800cde4 <DelayInit+0x48>)
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	4a0c      	ldr	r2, [pc, #48]	; (800cde4 <DelayInit+0x48>)
 800cdb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdb6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800cdb8:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <DelayInit+0x4c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a0a      	ldr	r2, [pc, #40]	; (800cde8 <DelayInit+0x4c>)
 800cdbe:	f023 0301 	bic.w	r3, r3, #1
 800cdc2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800cdc4:	4b08      	ldr	r3, [pc, #32]	; (800cde8 <DelayInit+0x4c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a07      	ldr	r2, [pc, #28]	; (800cde8 <DelayInit+0x4c>)
 800cdca:	f043 0301 	orr.w	r3, r3, #1
 800cdce:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800cdd0:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <DelayInit+0x4c>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800cdd6:	bf00      	nop
  __ASM volatile ("NOP");
 800cdd8:	bf00      	nop
  __ASM volatile ("NOP");
 800cdda:	bf00      	nop
}
 800cddc:	bf00      	nop
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bc80      	pop	{r7}
 800cde2:	4770      	bx	lr
 800cde4:	e000edf0 	.word	0xe000edf0
 800cde8:	e0001000 	.word	0xe0001000

0800cdec <DelayUS>:

static void DelayUS(uint32_t us) {
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800cdf4:	4b0d      	ldr	r3, [pc, #52]	; (800ce2c <DelayUS+0x40>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a0d      	ldr	r2, [pc, #52]	; (800ce30 <DelayUS+0x44>)
 800cdfa:	fba2 2303 	umull	r2, r3, r2, r3
 800cdfe:	0c9a      	lsrs	r2, r3, #18
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	fb02 f303 	mul.w	r3, r2, r3
 800ce06:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <DelayUS+0x48>)
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800ce0e:	4b09      	ldr	r3, [pc, #36]	; (800ce34 <DelayUS+0x48>)
 800ce10:	685a      	ldr	r2, [r3, #4]
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d8f6      	bhi.n	800ce0e <DelayUS+0x22>
}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	371c      	adds	r7, #28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bc80      	pop	{r7}
 800ce2a:	4770      	bx	lr
 800ce2c:	200000cc 	.word	0x200000cc
 800ce30:	431bde83 	.word	0x431bde83
 800ce34:	e0001000 	.word	0xe0001000

0800ce38 <HAL_UART_RxCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]

	if(count >= 124){
 800ce40:	4b11      	ldr	r3, [pc, #68]	; (800ce88 <HAL_UART_RxCpltCallback+0x50>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b7b      	cmp	r3, #123	; 0x7b
 800ce46:	dd02      	ble.n	800ce4e <HAL_UART_RxCpltCallback+0x16>
		count = 0;
 800ce48:	4b0f      	ldr	r3, [pc, #60]	; (800ce88 <HAL_UART_RxCpltCallback+0x50>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
	}

	if(buffer[count] != '!'){
 800ce4e:	4b0e      	ldr	r3, [pc, #56]	; (800ce88 <HAL_UART_RxCpltCallback+0x50>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a0e      	ldr	r2, [pc, #56]	; (800ce8c <HAL_UART_RxCpltCallback+0x54>)
 800ce54:	5cd3      	ldrb	r3, [r2, r3]
 800ce56:	2b21      	cmp	r3, #33	; 0x21
 800ce58:	d00e      	beq.n	800ce78 <HAL_UART_RxCpltCallback+0x40>

		count++;
 800ce5a:	4b0b      	ldr	r3, [pc, #44]	; (800ce88 <HAL_UART_RxCpltCallback+0x50>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	4a09      	ldr	r2, [pc, #36]	; (800ce88 <HAL_UART_RxCpltCallback+0x50>)
 800ce62:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <HAL_UART_RxCpltCallback+0x50>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <HAL_UART_RxCpltCallback+0x54>)
 800ce6a:	4413      	add	r3, r2
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4807      	ldr	r0, [pc, #28]	; (800ce90 <HAL_UART_RxCpltCallback+0x58>)
 800ce72:	f003 fbd8 	bl	8010626 <HAL_UART_Receive_IT>
	}
	else{
		readSatus = 1;
	}

}
 800ce76:	e002      	b.n	800ce7e <HAL_UART_RxCpltCallback+0x46>
		readSatus = 1;
 800ce78:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <HAL_UART_RxCpltCallback+0x5c>)
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	701a      	strb	r2, [r3, #0]
}
 800ce7e:	bf00      	nop
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20000354 	.word	0x20000354
 800ce8c:	20000270 	.word	0x20000270
 800ce90:	20000404 	.word	0x20000404
 800ce94:	2000016c 	.word	0x2000016c

0800ce98 <takeStatus>:
void cardOperation(uint8_t* finalData, uint8_t* p);
void led(uint8_t n);
void readCardData(uint8_t* finalData);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

int takeStatus(uint8_t* data, int length){
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =5; i< length; i++){
 800cea2:	2305      	movs	r3, #5
 800cea4:	617b      	str	r3, [r7, #20]
 800cea6:	e008      	b.n	800ceba <takeStatus+0x22>
	  if(data[i] == '<')
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	4413      	add	r3, r2
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	2b3c      	cmp	r3, #60	; 0x3c
 800ceb2:	d007      	beq.n	800cec4 <takeStatus+0x2c>
	for(i =5; i< length; i++){
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	617b      	str	r3, [r7, #20]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	dbf2      	blt.n	800cea8 <takeStatus+0x10>
 800cec2:	e000      	b.n	800cec6 <takeStatus+0x2e>
	  {
		  break;
 800cec4:	bf00      	nop
	  }
	}

	STATUSSTR[0] = data[i+1];
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	3301      	adds	r3, #1
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	3302      	adds	r3, #2
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	4413      	add	r3, r2
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	3303      	adds	r3, #3
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	4413      	add	r3, r2
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	73bb      	strb	r3, [r7, #14]
	int Status = atoi((char*)STATUSSTR);
 800ceea:	f107 030c 	add.w	r3, r7, #12
 800ceee:	4618      	mov	r0, r3
 800cef0:	f003 fff2 	bl	8010ed8 <atoi>
 800cef4:	6138      	str	r0, [r7, #16]
	return Status;
 800cef6:	693b      	ldr	r3, [r7, #16]

}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <takeData>:
void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
	int i,j,l;
	for(i =5; i< length; i++){
 800cf0c:	2305      	movs	r3, #5
 800cf0e:	61fb      	str	r3, [r7, #28]
 800cf10:	e008      	b.n	800cf24 <takeData+0x24>
	  if(data[i] == '<')
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4413      	add	r3, r2
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b3c      	cmp	r3, #60	; 0x3c
 800cf1c:	d007      	beq.n	800cf2e <takeData+0x2e>
	for(i =5; i< length; i++){
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	3301      	adds	r3, #1
 800cf22:	61fb      	str	r3, [r7, #28]
 800cf24:	69fa      	ldr	r2, [r7, #28]
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	dbf2      	blt.n	800cf12 <takeData+0x12>
 800cf2c:	e000      	b.n	800cf30 <takeData+0x30>
	  {
		  break;
 800cf2e:	bf00      	nop
	  }
	}
	for(j = i; j< length; j++){
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	61bb      	str	r3, [r7, #24]
 800cf34:	e008      	b.n	800cf48 <takeData+0x48>
	  if(data[j] == ',')
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b2c      	cmp	r3, #44	; 0x2c
 800cf40:	d007      	beq.n	800cf52 <takeData+0x52>
	for(j = i; j< length; j++){
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	3301      	adds	r3, #1
 800cf46:	61bb      	str	r3, [r7, #24]
 800cf48:	69ba      	ldr	r2, [r7, #24]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	dbf2      	blt.n	800cf36 <takeData+0x36>
 800cf50:	e000      	b.n	800cf54 <takeData+0x54>
		 {
			  break;
 800cf52:	bf00      	nop
		 }
	}

	for(l = j; l< length; l++){
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	e008      	b.n	800cf6c <takeData+0x6c>
	  if(data[l] == '!')
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b21      	cmp	r3, #33	; 0x21
 800cf64:	d007      	beq.n	800cf76 <takeData+0x76>
	for(l = j; l< length; l++){
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	617b      	str	r3, [r7, #20]
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	dbf2      	blt.n	800cf5a <takeData+0x5a>
 800cf74:	e000      	b.n	800cf78 <takeData+0x78>
		 {
			  break;
 800cf76:	bf00      	nop
		 }
	}

	strncpy((char *)dataToDisplay, (char *)data + j + 1, l - j - 1);
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	18d1      	adds	r1, r2, r3
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	3b01      	subs	r3, #1
 800cf88:	461a      	mov	r2, r3
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f004 f808 	bl	8010fa0 <strncpy>


}
 800cf90:	bf00      	nop
 800cf92:	3720      	adds	r7, #32
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b094      	sub	sp, #80	; 0x50
 800cf9c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800cf9e:	f001 fb1f 	bl	800e5e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cfa2:	f000 fa45 	bl	800d430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cfa6:	f000 fb41 	bl	800d62c <MX_GPIO_Init>
  MX_I2C1_Init();
 800cfaa:	f000 fa87 	bl	800d4bc <MX_I2C1_Init>
  MX_SPI1_Init();
 800cfae:	f000 fab3 	bl	800d518 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800cfb2:	f000 fae7 	bl	800d584 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800cfb6:	f000 fb0f 	bl	800d5d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800cfba:	2002      	movs	r0, #2
 800cfbc:	f7ff fd38 	bl	800ca30 <HD44780_Init>
  //HAL_Delay(16000);
  printMzadVar(0, 3);
 800cfc0:	2103      	movs	r1, #3
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	f7ff f8ca 	bl	800c15c <printMzadVar>
  HD44780_SetCursor(0, 1);
 800cfc8:	2101      	movs	r1, #1
 800cfca:	2000      	movs	r0, #0
 800cfcc:	f7ff fdca 	bl	800cb64 <HD44780_SetCursor>
//  for(int i = 0;i<2; i++){
//	  quectelInit();
//  }


  MFRC522_Init();
 800cfd0:	f000 fecd 	bl	800dd6e <MFRC522_Init>


  	led(1);
 800cfd4:	2001      	movs	r0, #1
 800cfd6:	f001 f875 	bl	800e0c4 <led>
  	led(1);
 800cfda:	2001      	movs	r0, #1
 800cfdc:	f001 f872 	bl	800e0c4 <led>
  	led(1);
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	f001 f86f 	bl	800e0c4 <led>
  	uint8_t cardRead = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	int CardTime;


  	//uint8_t stat = checkMQTTCon(buffer);

  	uint32_t version = *(__IO uint32_t *)versionAdress; // for version check
 800cfec:	4bb0      	ldr	r3, [pc, #704]	; (800d2b0 <main+0x318>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"164522982240839\",\"firmwareVersion\":%lx}}", version);
 800cff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cff4:	49af      	ldr	r1, [pc, #700]	; (800d2b4 <main+0x31c>)
 800cff6:	48b0      	ldr	r0, [pc, #704]	; (800d2b8 <main+0x320>)
 800cff8:	f003 ffb2 	bl	8010f60 <siprintf>
//  	HAL_UART_Receive(&huart1, buffer1, 125, 1000);
//  	int lengthOfCheckData = strlen((char*)buffer1);
//  	int StatusCheck = takeStatus(buffer1, lengthOfCheckData);
//
//  	if(StatusCheck != 200)HAL_NVIC_SystemReset();
  	HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800cffc:	4baf      	ldr	r3, [pc, #700]	; (800d2bc <main+0x324>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4aaf      	ldr	r2, [pc, #700]	; (800d2c0 <main+0x328>)
 800d002:	4413      	add	r3, r2
 800d004:	2201      	movs	r2, #1
 800d006:	4619      	mov	r1, r3
 800d008:	48ae      	ldr	r0, [pc, #696]	; (800d2c4 <main+0x32c>)
 800d00a:	f003 fb0c 	bl	8010626 <HAL_UART_Receive_IT>
  	T = HAL_GetTick();
 800d00e:	f001 fb3f 	bl	800e690 <HAL_GetTick>
 800d012:	4603      	mov	r3, r0
 800d014:	4aac      	ldr	r2, [pc, #688]	; (800d2c8 <main+0x330>)
 800d016:	6013      	str	r3, [r2, #0]
  	 printMiadetBarati(0, 2);
 800d018:	2102      	movs	r1, #2
 800d01a:	2000      	movs	r0, #0
 800d01c:	f7ff fa98 	bl	800c550 <printMiadetBarati>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cardRead == 1){
 800d020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d024:	2b01      	cmp	r3, #1
 800d026:	d117      	bne.n	800d058 <main+0xc0>
		  if(HAL_GetTick() - CardTime >= 20000){
 800d028:	f001 fb32 	bl	800e690 <HAL_GetTick>
 800d02c:	4602      	mov	r2, r0
 800d02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d036:	4293      	cmp	r3, r2
 800d038:	d90e      	bls.n	800d058 <main+0xc0>
			  printShecdoma(0, 4);
 800d03a:	2104      	movs	r1, #4
 800d03c:	2000      	movs	r0, #0
 800d03e:	f7ff fb57 	bl	800c6f0 <printShecdoma>
			  HAL_Delay(3000);
 800d042:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d046:	f001 fb2d 	bl	800e6a4 <HAL_Delay>
			  printMiadetBarati(0, 2);
 800d04a:	2102      	movs	r1, #2
 800d04c:	2000      	movs	r0, #0
 800d04e:	f7ff fa7f 	bl	800c550 <printMiadetBarati>
			  cardRead = 0;
 800d052:	2300      	movs	r3, #0
 800d054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }

	  }
	  if(HAL_GetTick() - T >=(20000) && cardRead == 0){
 800d058:	f001 fb1a 	bl	800e690 <HAL_GetTick>
 800d05c:	4602      	mov	r2, r0
 800d05e:	4b9a      	ldr	r3, [pc, #616]	; (800d2c8 <main+0x330>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d068:	4293      	cmp	r3, r2
 800d06a:	d925      	bls.n	800d0b8 <main+0x120>
 800d06c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d070:	2b00      	cmp	r3, #0
 800d072:	d121      	bne.n	800d0b8 <main+0x120>

		  if(temp >= check)HAL_NVIC_SystemReset();
 800d074:	4b95      	ldr	r3, [pc, #596]	; (800d2cc <main+0x334>)
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	4b95      	ldr	r3, [pc, #596]	; (800d2d0 <main+0x338>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	db01      	blt.n	800d084 <main+0xec>
 800d080:	f001 fc4b 	bl	800e91a <HAL_NVIC_SystemReset>
		  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 800d084:	488c      	ldr	r0, [pc, #560]	; (800d2b8 <main+0x320>)
 800d086:	f7ff f861 	bl	800c14c <strlen>
 800d08a:	4603      	mov	r3, r0
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 fb55 	bl	800d73c <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 800d092:	4889      	ldr	r0, [pc, #548]	; (800d2b8 <main+0x320>)
 800d094:	f7ff f85a 	bl	800c14c <strlen>
 800d098:	4603      	mov	r3, r0
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	2332      	movs	r3, #50	; 0x32
 800d09e:	4986      	ldr	r1, [pc, #536]	; (800d2b8 <main+0x320>)
 800d0a0:	4888      	ldr	r0, [pc, #544]	; (800d2c4 <main+0x32c>)
 800d0a2:	f003 fa2e 	bl	8010502 <HAL_UART_Transmit>
		  T = HAL_GetTick();
 800d0a6:	f001 faf3 	bl	800e690 <HAL_GetTick>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	4a86      	ldr	r2, [pc, #536]	; (800d2c8 <main+0x330>)
 800d0ae:	6013      	str	r3, [r2, #0]
		  temp = check;
 800d0b0:	4b87      	ldr	r3, [pc, #540]	; (800d2d0 <main+0x338>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a85      	ldr	r2, [pc, #532]	; (800d2cc <main+0x334>)
 800d0b6:	6013      	str	r3, [r2, #0]
	  }

	  if(readSatus){
 800d0b8:	4b86      	ldr	r3, [pc, #536]	; (800d2d4 <main+0x33c>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 813d 	beq.w	800d33c <main+0x3a4>
		  int Status = takeStatus(buffer, count);
 800d0c2:	4b7e      	ldr	r3, [pc, #504]	; (800d2bc <main+0x324>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	487d      	ldr	r0, [pc, #500]	; (800d2c0 <main+0x328>)
 800d0ca:	f7ff fee5 	bl	800ce98 <takeStatus>
 800d0ce:	63b8      	str	r0, [r7, #56]	; 0x38
		  uint8_t dispData[50];

		  switch(Status){
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d0d6:	f280 80ff 	bge.w	800d2d8 <main+0x340>
 800d0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0dc:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800d0e0:	dc06      	bgt.n	800d0f0 <main+0x158>
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e4:	2bc8      	cmp	r3, #200	; 0xc8
 800d0e6:	d01f      	beq.n	800d128 <main+0x190>
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ea:	2bc9      	cmp	r3, #201	; 0xc9
 800d0ec:	d026      	beq.n	800d13c <main+0x1a4>
 800d0ee:	e0f3      	b.n	800d2d8 <main+0x340>
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f2:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800d0f6:	2b08      	cmp	r3, #8
 800d0f8:	f200 80ee 	bhi.w	800d2d8 <main+0x340>
 800d0fc:	a201      	add	r2, pc, #4	; (adr r2, 800d104 <main+0x16c>)
 800d0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d102:	bf00      	nop
 800d104:	0800d1b9 	.word	0x0800d1b9
 800d108:	0800d2d9 	.word	0x0800d2d9
 800d10c:	0800d17b 	.word	0x0800d17b
 800d110:	0800d2d9 	.word	0x0800d2d9
 800d114:	0800d2d9 	.word	0x0800d2d9
 800d118:	0800d1f7 	.word	0x0800d1f7
 800d11c:	0800d235 	.word	0x0800d235
 800d120:	0800d2d9 	.word	0x0800d2d9
 800d124:	0800d273 	.word	0x0800d273
		  	  	case 200:
		  	  		//AppruveSound();
		  	  		printUcxoBaratia(0, 0);
 800d128:	2100      	movs	r1, #0
 800d12a:	2000      	movs	r0, #0
 800d12c:	f7ff f8aa 	bl	800c284 <printUcxoBaratia>
		  	  		check++;
 800d130:	4b67      	ldr	r3, [pc, #412]	; (800d2d0 <main+0x338>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a66      	ldr	r2, [pc, #408]	; (800d2d0 <main+0x338>)
 800d138:	6013      	str	r3, [r2, #0]
		  	  		break;
 800d13a:	e0e5      	b.n	800d308 <main+0x370>
		  	  	case 201:
					AppruveSound();
 800d13c:	f001 f978 	bl	800e430 <AppruveSound>
					takeData(buffer, count, dispData);
 800d140:	4b5e      	ldr	r3, [pc, #376]	; (800d2bc <main+0x324>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	1d3a      	adds	r2, r7, #4
 800d146:	4619      	mov	r1, r3
 800d148:	485d      	ldr	r0, [pc, #372]	; (800d2c0 <main+0x328>)
 800d14a:	f7ff fed9 	bl	800cf00 <takeData>
					printBalansi(0, 0);
 800d14e:	2100      	movs	r1, #0
 800d150:	2000      	movs	r0, #0
 800d152:	f7ff fbeb 	bl	800c92c <printBalansi>
					HD44780_PrintStr((char*) dispData);
 800d156:	1d3b      	adds	r3, r7, #4
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fd81 	bl	800cc60 <HD44780_PrintStr>
					RelaySwitch();
 800d15e:	f001 f997 	bl	800e490 <RelaySwitch>
					HAL_Delay(2000);
 800d162:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d166:	f001 fa9d 	bl	800e6a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d16a:	2102      	movs	r1, #2
 800d16c:	2000      	movs	r0, #0
 800d16e:	f7ff f9ef 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d178:	e0c6      	b.n	800d308 <main+0x370>
				case 293:
					takeData(buffer, count, dispData);
 800d17a:	4b50      	ldr	r3, [pc, #320]	; (800d2bc <main+0x324>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	1d3a      	adds	r2, r7, #4
 800d180:	4619      	mov	r1, r3
 800d182:	484f      	ldr	r0, [pc, #316]	; (800d2c0 <main+0x328>)
 800d184:	f7ff febc 	bl	800cf00 <takeData>
					HD44780_Clear();
 800d188:	f7ff fcd6 	bl	800cb38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d18c:	2100      	movs	r1, #0
 800d18e:	2000      	movs	r0, #0
 800d190:	f7ff fce8 	bl	800cb64 <HD44780_SetCursor>
					printUcxoBaratia(0,0);
 800d194:	2100      	movs	r1, #0
 800d196:	2000      	movs	r0, #0
 800d198:	f7ff f874 	bl	800c284 <printUcxoBaratia>
					ErrorSound();
 800d19c:	f001 f98a 	bl	800e4b4 <ErrorSound>
					HAL_Delay(1000);
 800d1a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d1a4:	f001 fa7e 	bl	800e6a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d1a8:	2102      	movs	r1, #2
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	f7ff f9d0 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d1b6:	e0a7      	b.n	800d308 <main+0x370>
				case 291:
					takeData(buffer, count, dispData);
 800d1b8:	4b40      	ldr	r3, [pc, #256]	; (800d2bc <main+0x324>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	1d3a      	adds	r2, r7, #4
 800d1be:	4619      	mov	r1, r3
 800d1c0:	483f      	ldr	r0, [pc, #252]	; (800d2c0 <main+0x328>)
 800d1c2:	f7ff fe9d 	bl	800cf00 <takeData>
					HD44780_Clear();
 800d1c6:	f7ff fcb7 	bl	800cb38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	f7ff fcc9 	bl	800cb64 <HD44780_SetCursor>
					printBlansiAraa(0, 0);
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	f7ff f90f 	bl	800c3f8 <printBlansiAraa>
					ErrorSound();
 800d1da:	f001 f96b 	bl	800e4b4 <ErrorSound>
					HAL_Delay(1000);
 800d1de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d1e2:	f001 fa5f 	bl	800e6a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d1e6:	2102      	movs	r1, #2
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	f7ff f9b1 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d1f4:	e088      	b.n	800d308 <main+0x370>
				case 296:
					takeData(buffer, count, dispData);
 800d1f6:	4b31      	ldr	r3, [pc, #196]	; (800d2bc <main+0x324>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	1d3a      	adds	r2, r7, #4
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4830      	ldr	r0, [pc, #192]	; (800d2c0 <main+0x328>)
 800d200:	f7ff fe7e 	bl	800cf00 <takeData>
					HD44780_Clear();
 800d204:	f7ff fc98 	bl	800cb38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d208:	2100      	movs	r1, #0
 800d20a:	2000      	movs	r0, #0
 800d20c:	f7ff fcaa 	bl	800cb64 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d210:	1d3b      	adds	r3, r7, #4
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff fd24 	bl	800cc60 <HD44780_PrintStr>
					ErrorSound();
 800d218:	f001 f94c 	bl	800e4b4 <ErrorSound>
					HAL_Delay(3000);
 800d21c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d220:	f001 fa40 	bl	800e6a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d224:	2102      	movs	r1, #2
 800d226:	2000      	movs	r0, #0
 800d228:	f7ff f992 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d232:	e069      	b.n	800d308 <main+0x370>
				case 297:
					takeData(buffer, count, dispData);
 800d234:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <main+0x324>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	1d3a      	adds	r2, r7, #4
 800d23a:	4619      	mov	r1, r3
 800d23c:	4820      	ldr	r0, [pc, #128]	; (800d2c0 <main+0x328>)
 800d23e:	f7ff fe5f 	bl	800cf00 <takeData>
					HD44780_Clear();
 800d242:	f7ff fc79 	bl	800cb38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d246:	2100      	movs	r1, #0
 800d248:	2000      	movs	r0, #0
 800d24a:	f7ff fc8b 	bl	800cb64 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d24e:	1d3b      	adds	r3, r7, #4
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff fd05 	bl	800cc60 <HD44780_PrintStr>
					ErrorSound();
 800d256:	f001 f92d 	bl	800e4b4 <ErrorSound>
					HAL_Delay(3000);
 800d25a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d25e:	f001 fa21 	bl	800e6a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d262:	2102      	movs	r1, #2
 800d264:	2000      	movs	r0, #0
 800d266:	f7ff f973 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d270:	e04a      	b.n	800d308 <main+0x370>
				case 299:
					takeData(buffer, count, dispData);
 800d272:	4b12      	ldr	r3, [pc, #72]	; (800d2bc <main+0x324>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	1d3a      	adds	r2, r7, #4
 800d278:	4619      	mov	r1, r3
 800d27a:	4811      	ldr	r0, [pc, #68]	; (800d2c0 <main+0x328>)
 800d27c:	f7ff fe40 	bl	800cf00 <takeData>
					HD44780_Clear();
 800d280:	f7ff fc5a 	bl	800cb38 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d284:	2100      	movs	r1, #0
 800d286:	2000      	movs	r0, #0
 800d288:	f7ff fc6c 	bl	800cb64 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d28c:	1d3b      	adds	r3, r7, #4
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff fce6 	bl	800cc60 <HD44780_PrintStr>
					ErrorSound();
 800d294:	f001 f90e 	bl	800e4b4 <ErrorSound>
					HAL_Delay(3000);
 800d298:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d29c:	f001 fa02 	bl	800e6a4 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d2a0:	2102      	movs	r1, #2
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	f7ff f954 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d2ae:	e02b      	b.n	800d308 <main+0x370>
 800d2b0:	0800bff0 	.word	0x0800bff0
 800d2b4:	080119e4 	.word	0x080119e4
 800d2b8:	200002f0 	.word	0x200002f0
 800d2bc:	20000354 	.word	0x20000354
 800d2c0:	20000270 	.word	0x20000270
 800d2c4:	20000404 	.word	0x20000404
 800d2c8:	20000160 	.word	0x20000160
 800d2cc:	20000164 	.word	0x20000164
 800d2d0:	20000098 	.word	0x20000098
 800d2d4:	2000016c 	.word	0x2000016c
				default:
					memset(buffer, 0, sizeof(buffer));
 800d2d8:	2280      	movs	r2, #128	; 0x80
 800d2da:	2100      	movs	r1, #0
 800d2dc:	484e      	ldr	r0, [pc, #312]	; (800d418 <main+0x480>)
 800d2de:	f003 fe37 	bl	8010f50 <memset>
				    memset(dispData, 0, sizeof(dispData));
 800d2e2:	1d3b      	adds	r3, r7, #4
 800d2e4:	2232      	movs	r2, #50	; 0x32
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f003 fe31 	bl	8010f50 <memset>
					readSatus = 0;
 800d2ee:	4b4b      	ldr	r3, [pc, #300]	; (800d41c <main+0x484>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	701a      	strb	r2, [r3, #0]
					count = 0;
 800d2f4:	4b4a      	ldr	r3, [pc, #296]	; (800d420 <main+0x488>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	601a      	str	r2, [r3, #0]
					printMiadetBarati(0, 2);
 800d2fa:	2102      	movs	r1, #2
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	f7ff f927 	bl	800c550 <printMiadetBarati>
					cardRead = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }
		  memset(buffer, 0, sizeof(buffer));
 800d308:	2280      	movs	r2, #128	; 0x80
 800d30a:	2100      	movs	r1, #0
 800d30c:	4842      	ldr	r0, [pc, #264]	; (800d418 <main+0x480>)
 800d30e:	f003 fe1f 	bl	8010f50 <memset>
		  memset(dispData, 0, sizeof(dispData));
 800d312:	1d3b      	adds	r3, r7, #4
 800d314:	2232      	movs	r2, #50	; 0x32
 800d316:	2100      	movs	r1, #0
 800d318:	4618      	mov	r0, r3
 800d31a:	f003 fe19 	bl	8010f50 <memset>
		  readSatus = 0;
 800d31e:	4b3f      	ldr	r3, [pc, #252]	; (800d41c <main+0x484>)
 800d320:	2200      	movs	r2, #0
 800d322:	701a      	strb	r2, [r3, #0]
		  count = 0;
 800d324:	4b3e      	ldr	r3, [pc, #248]	; (800d420 <main+0x488>)
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d32a:	4b3d      	ldr	r3, [pc, #244]	; (800d420 <main+0x488>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a3a      	ldr	r2, [pc, #232]	; (800d418 <main+0x480>)
 800d330:	4413      	add	r3, r2
 800d332:	2201      	movs	r2, #1
 800d334:	4619      	mov	r1, r3
 800d336:	483b      	ldr	r0, [pc, #236]	; (800d424 <main+0x48c>)
 800d338:	f003 f975 	bl	8010626 <HAL_UART_Receive_IT>
		 }

	 uint8_t catStat = cardOperationWithBlockedSector(postData);
 800d33c:	483a      	ldr	r0, [pc, #232]	; (800d428 <main+0x490>)
 800d33e:	f000 fd57 	bl	800ddf0 <cardOperationWithBlockedSector>
 800d342:	4603      	mov	r3, r0
 800d344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if(catStat == 1 && cardRead == 0){
 800d348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	f47f ae67 	bne.w	800d020 <main+0x88>
 800d352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d356:	2b00      	cmp	r3, #0
 800d358:	f47f ae62 	bne.w	800d020 <main+0x88>
		 uint8_t bpundCount = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 uint8_t postEnable = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		 LENGTH = strlen((char*)postData);
 800d368:	482f      	ldr	r0, [pc, #188]	; (800d428 <main+0x490>)
 800d36a:	f7fe feef 	bl	800c14c <strlen>
 800d36e:	4603      	mov	r3, r0
 800d370:	461a      	mov	r2, r3
 800d372:	4b2e      	ldr	r3, [pc, #184]	; (800d42c <main+0x494>)
 800d374:	601a      	str	r2, [r3, #0]

		 for(int i = 0; i< LENGTH+5; i++){
 800d376:	2300      	movs	r3, #0
 800d378:	643b      	str	r3, [r7, #64]	; 0x40
 800d37a:	e013      	b.n	800d3a4 <main+0x40c>

			 if(postData[i]== '{' || postData[i] == '}'){
 800d37c:	4a2a      	ldr	r2, [pc, #168]	; (800d428 <main+0x490>)
 800d37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d380:	4413      	add	r3, r2
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b7b      	cmp	r3, #123	; 0x7b
 800d386:	d005      	beq.n	800d394 <main+0x3fc>
 800d388:	4a27      	ldr	r2, [pc, #156]	; (800d428 <main+0x490>)
 800d38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d38c:	4413      	add	r3, r2
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b7d      	cmp	r3, #125	; 0x7d
 800d392:	d104      	bne.n	800d39e <main+0x406>
				 bpundCount++;
 800d394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d398:	3301      	adds	r3, #1
 800d39a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 for(int i = 0; i< LENGTH+5; i++){
 800d39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	643b      	str	r3, [r7, #64]	; 0x40
 800d3a4:	4b21      	ldr	r3, [pc, #132]	; (800d42c <main+0x494>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	dde5      	ble.n	800d37c <main+0x3e4>
			 }

		 }
		 if(bpundCount != 4){
 800d3b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3b4:	2b04      	cmp	r3, #4
 800d3b6:	d007      	beq.n	800d3c8 <main+0x430>
		 	postEnable = 1;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		 	memset(postData, 0, sizeof(postData));
 800d3be:	22ff      	movs	r2, #255	; 0xff
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	4819      	ldr	r0, [pc, #100]	; (800d428 <main+0x490>)
 800d3c4:	f003 fdc4 	bl	8010f50 <memset>
		  }

		 if(postEnable == 0){
 800d3c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f47f ae27 	bne.w	800d020 <main+0x88>
			 CardReadSound();
 800d3d2:	f001 f891 	bl	800e4f8 <CardReadSound>
			 printDaicadet(0, 3);
 800d3d6:	2103      	movs	r1, #3
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f7ff fa19 	bl	800c810 <printDaicadet>
			 MQTTPubToTopic(LENGTH);
 800d3de:	4b13      	ldr	r3, [pc, #76]	; (800d42c <main+0x494>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 f9aa 	bl	800d73c <MQTTPubToTopic>
			 HAL_Delay(50);
 800d3e8:	2032      	movs	r0, #50	; 0x32
 800d3ea:	f001 f95b 	bl	800e6a4 <HAL_Delay>

			 HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 800d3ee:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <main+0x494>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	2364      	movs	r3, #100	; 0x64
 800d3f6:	490c      	ldr	r1, [pc, #48]	; (800d428 <main+0x490>)
 800d3f8:	480a      	ldr	r0, [pc, #40]	; (800d424 <main+0x48c>)
 800d3fa:	f003 f882 	bl	8010502 <HAL_UART_Transmit>

			 memset(postData, 0, sizeof(postData));
 800d3fe:	22ff      	movs	r2, #255	; 0xff
 800d400:	2100      	movs	r1, #0
 800d402:	4809      	ldr	r0, [pc, #36]	; (800d428 <main+0x490>)
 800d404:	f003 fda4 	bl	8010f50 <memset>
			 cardRead = 1;
 800d408:	2301      	movs	r3, #1
 800d40a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 CardTime = HAL_GetTick();
 800d40e:	f001 f93f 	bl	800e690 <HAL_GetTick>
 800d412:	4603      	mov	r3, r0
 800d414:	64bb      	str	r3, [r7, #72]	; 0x48
  {
 800d416:	e603      	b.n	800d020 <main+0x88>
 800d418:	20000270 	.word	0x20000270
 800d41c:	2000016c 	.word	0x2000016c
 800d420:	20000354 	.word	0x20000354
 800d424:	20000404 	.word	0x20000404
 800d428:	20000170 	.word	0x20000170
 800d42c:	20000168 	.word	0x20000168

0800d430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b090      	sub	sp, #64	; 0x40
 800d434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d436:	f107 0318 	add.w	r3, r7, #24
 800d43a:	2228      	movs	r2, #40	; 0x28
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f003 fd86 	bl	8010f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d444:	1d3b      	adds	r3, r7, #4
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	605a      	str	r2, [r3, #4]
 800d44c:	609a      	str	r2, [r3, #8]
 800d44e:	60da      	str	r2, [r3, #12]
 800d450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d452:	2301      	movs	r3, #1
 800d454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d45a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800d45c:	2300      	movs	r3, #0
 800d45e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d460:	2301      	movs	r3, #1
 800d462:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d464:	2302      	movs	r3, #2
 800d466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d46c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800d46e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d474:	f107 0318 	add.w	r3, r7, #24
 800d478:	4618      	mov	r0, r3
 800d47a:	f002 f90f 	bl	800f69c <HAL_RCC_OscConfig>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800d484:	f000 f954 	bl	800d730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d488:	230f      	movs	r3, #15
 800d48a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d48c:	2302      	movs	r3, #2
 800d48e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d490:	2300      	movs	r3, #0
 800d492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d49e:	1d3b      	adds	r3, r7, #4
 800d4a0:	2102      	movs	r1, #2
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f002 fb7c 	bl	800fba0 <HAL_RCC_ClockConfig>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d001      	beq.n	800d4b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800d4ae:	f000 f93f 	bl	800d730 <Error_Handler>
  }
}
 800d4b2:	bf00      	nop
 800d4b4:	3740      	adds	r7, #64	; 0x40
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
	...

0800d4bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d4c0:	4b12      	ldr	r3, [pc, #72]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4c2:	4a13      	ldr	r2, [pc, #76]	; (800d510 <MX_I2C1_Init+0x54>)
 800d4c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d4c6:	4b11      	ldr	r3, [pc, #68]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4c8:	4a12      	ldr	r2, [pc, #72]	; (800d514 <MX_I2C1_Init+0x58>)
 800d4ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d4cc:	4b0f      	ldr	r3, [pc, #60]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d4d2:	4b0e      	ldr	r3, [pc, #56]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d4d8:	4b0c      	ldr	r3, [pc, #48]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d4e0:	4b0a      	ldr	r3, [pc, #40]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d4e6:	4b09      	ldr	r3, [pc, #36]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d4ec:	4b07      	ldr	r3, [pc, #28]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d4f2:	4b06      	ldr	r3, [pc, #24]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d4f8:	4804      	ldr	r0, [pc, #16]	; (800d50c <MX_I2C1_Init+0x50>)
 800d4fa:	f001 fc85 	bl	800ee08 <HAL_I2C_Init>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d504:	f000 f914 	bl	800d730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d508:	bf00      	nop
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20000358 	.word	0x20000358
 800d510:	40005400 	.word	0x40005400
 800d514:	000186a0 	.word	0x000186a0

0800d518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d51c:	4b17      	ldr	r3, [pc, #92]	; (800d57c <MX_SPI1_Init+0x64>)
 800d51e:	4a18      	ldr	r2, [pc, #96]	; (800d580 <MX_SPI1_Init+0x68>)
 800d520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d522:	4b16      	ldr	r3, [pc, #88]	; (800d57c <MX_SPI1_Init+0x64>)
 800d524:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d52a:	4b14      	ldr	r3, [pc, #80]	; (800d57c <MX_SPI1_Init+0x64>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d530:	4b12      	ldr	r3, [pc, #72]	; (800d57c <MX_SPI1_Init+0x64>)
 800d532:	2200      	movs	r2, #0
 800d534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d536:	4b11      	ldr	r3, [pc, #68]	; (800d57c <MX_SPI1_Init+0x64>)
 800d538:	2200      	movs	r2, #0
 800d53a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d53c:	4b0f      	ldr	r3, [pc, #60]	; (800d57c <MX_SPI1_Init+0x64>)
 800d53e:	2200      	movs	r2, #0
 800d540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <MX_SPI1_Init+0x64>)
 800d544:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d54a:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <MX_SPI1_Init+0x64>)
 800d54c:	2218      	movs	r2, #24
 800d54e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d550:	4b0a      	ldr	r3, [pc, #40]	; (800d57c <MX_SPI1_Init+0x64>)
 800d552:	2200      	movs	r2, #0
 800d554:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d556:	4b09      	ldr	r3, [pc, #36]	; (800d57c <MX_SPI1_Init+0x64>)
 800d558:	2200      	movs	r2, #0
 800d55a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d55c:	4b07      	ldr	r3, [pc, #28]	; (800d57c <MX_SPI1_Init+0x64>)
 800d55e:	2200      	movs	r2, #0
 800d560:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d562:	4b06      	ldr	r3, [pc, #24]	; (800d57c <MX_SPI1_Init+0x64>)
 800d564:	220a      	movs	r2, #10
 800d566:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d568:	4804      	ldr	r0, [pc, #16]	; (800d57c <MX_SPI1_Init+0x64>)
 800d56a:	f002 fcb1 	bl	800fed0 <HAL_SPI_Init>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d574:	f000 f8dc 	bl	800d730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d578:	bf00      	nop
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	200003ac 	.word	0x200003ac
 800d580:	40013000 	.word	0x40013000

0800d584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d588:	4b11      	ldr	r3, [pc, #68]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d58a:	4a12      	ldr	r2, [pc, #72]	; (800d5d4 <MX_USART1_UART_Init+0x50>)
 800d58c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d58e:	4b10      	ldr	r3, [pc, #64]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d596:	4b0e      	ldr	r3, [pc, #56]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d598:	2200      	movs	r2, #0
 800d59a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d59c:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d5a2:	4b0b      	ldr	r3, [pc, #44]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d5a8:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d5aa:	220c      	movs	r2, #12
 800d5ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d5ae:	4b08      	ldr	r3, [pc, #32]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5b4:	4b06      	ldr	r3, [pc, #24]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d5ba:	4805      	ldr	r0, [pc, #20]	; (800d5d0 <MX_USART1_UART_Init+0x4c>)
 800d5bc:	f002 ff54 	bl	8010468 <HAL_UART_Init>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d5c6:	f000 f8b3 	bl	800d730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d5ca:	bf00      	nop
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20000404 	.word	0x20000404
 800d5d4:	40013800 	.word	0x40013800

0800d5d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d5dc:	4b11      	ldr	r3, [pc, #68]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d5de:	4a12      	ldr	r2, [pc, #72]	; (800d628 <MX_USART2_UART_Init+0x50>)
 800d5e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d5e2:	4b10      	ldr	r3, [pc, #64]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d5e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d5e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d5ea:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d5fc:	4b09      	ldr	r3, [pc, #36]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d5fe:	220c      	movs	r2, #12
 800d600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d602:	4b08      	ldr	r3, [pc, #32]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d604:	2200      	movs	r2, #0
 800d606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d60e:	4805      	ldr	r0, [pc, #20]	; (800d624 <MX_USART2_UART_Init+0x4c>)
 800d610:	f002 ff2a 	bl	8010468 <HAL_UART_Init>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d61a:	f000 f889 	bl	800d730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d61e:	bf00      	nop
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20000448 	.word	0x20000448
 800d628:	40004400 	.word	0x40004400

0800d62c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d632:	f107 0310 	add.w	r3, r7, #16
 800d636:	2200      	movs	r2, #0
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	605a      	str	r2, [r3, #4]
 800d63c:	609a      	str	r2, [r3, #8]
 800d63e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d640:	4b37      	ldr	r3, [pc, #220]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	4a36      	ldr	r2, [pc, #216]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d646:	f043 0310 	orr.w	r3, r3, #16
 800d64a:	6193      	str	r3, [r2, #24]
 800d64c:	4b34      	ldr	r3, [pc, #208]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	f003 0310 	and.w	r3, r3, #16
 800d654:	60fb      	str	r3, [r7, #12]
 800d656:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d658:	4b31      	ldr	r3, [pc, #196]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	4a30      	ldr	r2, [pc, #192]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d65e:	f043 0320 	orr.w	r3, r3, #32
 800d662:	6193      	str	r3, [r2, #24]
 800d664:	4b2e      	ldr	r3, [pc, #184]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	f003 0320 	and.w	r3, r3, #32
 800d66c:	60bb      	str	r3, [r7, #8]
 800d66e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d670:	4b2b      	ldr	r3, [pc, #172]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	4a2a      	ldr	r2, [pc, #168]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d676:	f043 0304 	orr.w	r3, r3, #4
 800d67a:	6193      	str	r3, [r2, #24]
 800d67c:	4b28      	ldr	r3, [pc, #160]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d67e:	699b      	ldr	r3, [r3, #24]
 800d680:	f003 0304 	and.w	r3, r3, #4
 800d684:	607b      	str	r3, [r7, #4]
 800d686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d688:	4b25      	ldr	r3, [pc, #148]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d68a:	699b      	ldr	r3, [r3, #24]
 800d68c:	4a24      	ldr	r2, [pc, #144]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d68e:	f043 0308 	orr.w	r3, r3, #8
 800d692:	6193      	str	r3, [r2, #24]
 800d694:	4b22      	ldr	r3, [pc, #136]	; (800d720 <MX_GPIO_Init+0xf4>)
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	f003 0308 	and.w	r3, r3, #8
 800d69c:	603b      	str	r3, [r7, #0]
 800d69e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6a6:	481f      	ldr	r0, [pc, #124]	; (800d724 <MX_GPIO_Init+0xf8>)
 800d6a8:	f001 fb7c 	bl	800eda4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	2110      	movs	r1, #16
 800d6b0:	481d      	ldr	r0, [pc, #116]	; (800d728 <MX_GPIO_Init+0xfc>)
 800d6b2:	f001 fb77 	bl	800eda4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2103      	movs	r1, #3
 800d6ba:	481c      	ldr	r0, [pc, #112]	; (800d72c <MX_GPIO_Init+0x100>)
 800d6bc:	f001 fb72 	bl	800eda4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d6c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d6c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6d2:	f107 0310 	add.w	r3, r7, #16
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	4812      	ldr	r0, [pc, #72]	; (800d724 <MX_GPIO_Init+0xf8>)
 800d6da:	f001 f9df 	bl	800ea9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d6de:	2310      	movs	r3, #16
 800d6e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6ee:	f107 0310 	add.w	r3, r7, #16
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	480c      	ldr	r0, [pc, #48]	; (800d728 <MX_GPIO_Init+0xfc>)
 800d6f6:	f001 f9d1 	bl	800ea9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6fe:	2301      	movs	r3, #1
 800d700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d702:	2300      	movs	r3, #0
 800d704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d706:	2302      	movs	r3, #2
 800d708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d70a:	f107 0310 	add.w	r3, r7, #16
 800d70e:	4619      	mov	r1, r3
 800d710:	4806      	ldr	r0, [pc, #24]	; (800d72c <MX_GPIO_Init+0x100>)
 800d712:	f001 f9c3 	bl	800ea9c <HAL_GPIO_Init>

}
 800d716:	bf00      	nop
 800d718:	3720      	adds	r7, #32
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	40021000 	.word	0x40021000
 800d724:	40011000 	.word	0x40011000
 800d728:	40010800 	.word	0x40010800
 800d72c:	40010c00 	.word	0x40010c00

0800d730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d730:	b480      	push	{r7}
 800d732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d734:	b672      	cpsid	i
}
 800d736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d738:	e7fe      	b.n	800d738 <Error_Handler+0x8>
	...

0800d73c <MQTTPubToTopic>:
//			break;
//		}
//	}
}

void MQTTPubToTopic(int length){
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\"liftos08765546789\",%d\r\n", (length));
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	4908      	ldr	r1, [pc, #32]	; (800d768 <MQTTPubToTopic+0x2c>)
 800d748:	4808      	ldr	r0, [pc, #32]	; (800d76c <MQTTPubToTopic+0x30>)
 800d74a:	f003 fc09 	bl	8010f60 <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800d74e:	2364      	movs	r3, #100	; 0x64
 800d750:	222e      	movs	r2, #46	; 0x2e
 800d752:	4906      	ldr	r1, [pc, #24]	; (800d76c <MQTTPubToTopic+0x30>)
 800d754:	4806      	ldr	r0, [pc, #24]	; (800d770 <MQTTPubToTopic+0x34>)
 800d756:	f002 fed4 	bl	8010502 <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800d75a:	201e      	movs	r0, #30
 800d75c:	f000 ffa2 	bl	800e6a4 <HAL_Delay>

}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	08011a94 	.word	0x08011a94
 800d76c:	2000009c 	.word	0x2000009c
 800d770:	20000404 	.word	0x20000404

0800d774 <SPI1SendByte>:
extern void MFRC522_Halt(void);
extern void cardOperation(uint8_t* finalData, uint8_t* p);
extern void led(uint8_t n);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

uint8_t SPI1SendByte(uint8_t data) {
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af02      	add	r7, sp, #8
 800d77a:	4603      	mov	r3, r0
 800d77c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800d77e:	79fb      	ldrb	r3, [r7, #7]
 800d780:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800d782:	f107 0208 	add.w	r2, r7, #8
 800d786:	f107 010c 	add.w	r1, r7, #12
 800d78a:	230a      	movs	r3, #10
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	2301      	movs	r3, #1
 800d790:	4803      	ldr	r0, [pc, #12]	; (800d7a0 <SPI1SendByte+0x2c>)
 800d792:	f002 fc21 	bl	800ffd8 <HAL_SPI_TransmitReceive>
	return readValue[0];
 800d796:	7a3b      	ldrb	r3, [r7, #8]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	200003ac 	.word	0x200003ac

0800d7a4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	460a      	mov	r2, r1
 800d7ae:	71fb      	strb	r3, [r7, #7]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	2110      	movs	r1, #16
 800d7b8:	4809      	ldr	r0, [pc, #36]	; (800d7e0 <SPI1_WriteReg+0x3c>)
 800d7ba:	f001 faf3 	bl	800eda4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff ffd7 	bl	800d774 <SPI1SendByte>
	SPI1SendByte(value);
 800d7c6:	79bb      	ldrb	r3, [r7, #6]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff ffd3 	bl	800d774 <SPI1SendByte>
	cs_set();
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	2110      	movs	r1, #16
 800d7d2:	4803      	ldr	r0, [pc, #12]	; (800d7e0 <SPI1_WriteReg+0x3c>)
 800d7d4:	f001 fae6 	bl	800eda4 <HAL_GPIO_WritePin>
}
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	40010800 	.word	0x40010800

0800d7e4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2110      	movs	r1, #16
 800d7f2:	480b      	ldr	r0, [pc, #44]	; (800d820 <SPI1_ReadReg+0x3c>)
 800d7f4:	f001 fad6 	bl	800eda4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800d7f8:	79fb      	ldrb	r3, [r7, #7]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff ffba 	bl	800d774 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800d800:	2000      	movs	r0, #0
 800d802:	f7ff ffb7 	bl	800d774 <SPI1SendByte>
 800d806:	4603      	mov	r3, r0
 800d808:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800d80a:	2201      	movs	r2, #1
 800d80c:	2110      	movs	r1, #16
 800d80e:	4804      	ldr	r0, [pc, #16]	; (800d820 <SPI1_ReadReg+0x3c>)
 800d810:	f001 fac8 	bl	800eda4 <HAL_GPIO_WritePin>
	return val;
 800d814:	7bfb      	ldrb	r3, [r7, #15]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	40010800 	.word	0x40010800

0800d824 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	460a      	mov	r2, r1
 800d82e:	71fb      	strb	r3, [r7, #7]
 800d830:	4613      	mov	r3, r2
 800d832:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	005b      	lsls	r3, r3, #1
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d83e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800d840:	79ba      	ldrb	r2, [r7, #6]
 800d842:	79fb      	ldrb	r3, [r7, #7]
 800d844:	4611      	mov	r1, r2
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff ffac 	bl	800d7a4 <SPI1_WriteReg>
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	4603      	mov	r3, r0
 800d85c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	b25b      	sxtb	r3, r3
 800d864:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d86e:	b25b      	sxtb	r3, r3
 800d870:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	4618      	mov	r0, r3
 800d876:	f7ff ffb5 	bl	800d7e4 <SPI1_ReadReg>
 800d87a:	4603      	mov	r3, r0
 800d87c:	73fb      	strb	r3, [r7, #15]
	return val;	
 800d87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	460a      	mov	r2, r1
 800d892:	71fb      	strb	r3, [r7, #7]
 800d894:	4613      	mov	r3, r2
 800d896:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800d898:	79fb      	ldrb	r3, [r7, #7]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff ffda 	bl	800d854 <MFRC522_ReadRegister>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	79bb      	ldrb	r3, [r7, #6]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff ffb8 	bl	800d824 <MFRC522_WriteRegister>
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	460a      	mov	r2, r1
 800d8c6:	71fb      	strb	r3, [r7, #7]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff ffc0 	bl	800d854 <MFRC522_ReadRegister>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	b25a      	sxtb	r2, r3
 800d8d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d8dc:	43db      	mvns	r3, r3
 800d8de:	b25b      	sxtb	r3, r3
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	b25b      	sxtb	r3, r3
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	79fb      	ldrb	r3, [r7, #7]
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff ff9a 	bl	800d824 <MFRC522_WriteRegister>
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af02      	add	r7, sp, #8
 800d8fe:	4603      	mov	r3, r0
 800d900:	6039      	str	r1, [r7, #0]
 800d902:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800d904:	2107      	movs	r1, #7
 800d906:	200d      	movs	r0, #13
 800d908:	f7ff ff8c 	bl	800d824 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	79fa      	ldrb	r2, [r7, #7]
 800d910:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800d912:	f107 030c 	add.w	r3, r7, #12
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	2201      	movs	r2, #1
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	200c      	movs	r0, #12
 800d920:	f000 f80f 	bl	800d942 <MFRC522_ToCard>
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d102      	bne.n	800d934 <MFRC522_Request+0x3c>
 800d92e:	89bb      	ldrh	r3, [r7, #12]
 800d930:	2b10      	cmp	r3, #16
 800d932:	d001      	beq.n	800d938 <MFRC522_Request+0x40>
 800d934:	2302      	movs	r3, #2
 800d936:	73fb      	strb	r3, [r7, #15]
	return status;
 800d938:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800d942:	b590      	push	{r4, r7, lr}
 800d944:	b087      	sub	sp, #28
 800d946:	af00      	add	r7, sp, #0
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607b      	str	r3, [r7, #4]
 800d94c:	4603      	mov	r3, r0
 800d94e:	73fb      	strb	r3, [r7, #15]
 800d950:	4613      	mov	r3, r2
 800d952:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800d954:	2302      	movs	r3, #2
 800d956:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800d958:	2300      	movs	r3, #0
 800d95a:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800d95c:	2300      	movs	r3, #0
 800d95e:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	2b0c      	cmp	r3, #12
 800d964:	d006      	beq.n	800d974 <MFRC522_ToCard+0x32>
 800d966:	2b0e      	cmp	r3, #14
 800d968:	d109      	bne.n	800d97e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800d96a:	2312      	movs	r3, #18
 800d96c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800d96e:	2310      	movs	r3, #16
 800d970:	757b      	strb	r3, [r7, #21]
			break;
 800d972:	e005      	b.n	800d980 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800d974:	2377      	movs	r3, #119	; 0x77
 800d976:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800d978:	2330      	movs	r3, #48	; 0x30
 800d97a:	757b      	strb	r3, [r7, #21]
			break;
 800d97c:	e000      	b.n	800d980 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800d97e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800d980:	7dbb      	ldrb	r3, [r7, #22]
 800d982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d986:	b2db      	uxtb	r3, r3
 800d988:	4619      	mov	r1, r3
 800d98a:	2002      	movs	r0, #2
 800d98c:	f7ff ff4a 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800d990:	2180      	movs	r1, #128	; 0x80
 800d992:	2004      	movs	r0, #4
 800d994:	f7ff ff92 	bl	800d8bc <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800d998:	2180      	movs	r1, #128	; 0x80
 800d99a:	200a      	movs	r0, #10
 800d99c:	f7ff ff74 	bl	800d888 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	2001      	movs	r0, #1
 800d9a4:	f7ff ff3e 	bl	800d824 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	827b      	strh	r3, [r7, #18]
 800d9ac:	e00a      	b.n	800d9c4 <MFRC522_ToCard+0x82>
 800d9ae:	8a7b      	ldrh	r3, [r7, #18]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	2009      	movs	r0, #9
 800d9ba:	f7ff ff33 	bl	800d824 <MFRC522_WriteRegister>
 800d9be:	8a7b      	ldrh	r3, [r7, #18]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	827b      	strh	r3, [r7, #18]
 800d9c4:	7bbb      	ldrb	r3, [r7, #14]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	8a7a      	ldrh	r2, [r7, #18]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d3ef      	bcc.n	800d9ae <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	f7ff ff26 	bl	800d824 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	2b0c      	cmp	r3, #12
 800d9dc:	d103      	bne.n	800d9e6 <MFRC522_ToCard+0xa4>
 800d9de:	2180      	movs	r1, #128	; 0x80
 800d9e0:	200d      	movs	r0, #13
 800d9e2:	f7ff ff51 	bl	800d888 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800d9e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d9ea:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800d9ec:	2004      	movs	r0, #4
 800d9ee:	f7ff ff31 	bl	800d854 <MFRC522_ReadRegister>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	753b      	strb	r3, [r7, #20]
		i--;
 800d9f6:	8a7b      	ldrh	r3, [r7, #18]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800d9fc:	8a7b      	ldrh	r3, [r7, #18]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00a      	beq.n	800da18 <MFRC522_ToCard+0xd6>
 800da02:	7d3b      	ldrb	r3, [r7, #20]
 800da04:	f003 0301 	and.w	r3, r3, #1
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d105      	bne.n	800da18 <MFRC522_ToCard+0xd6>
 800da0c:	7d3a      	ldrb	r2, [r7, #20]
 800da0e:	7d7b      	ldrb	r3, [r7, #21]
 800da10:	4013      	ands	r3, r2
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2b00      	cmp	r3, #0
 800da16:	d0e9      	beq.n	800d9ec <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800da18:	2180      	movs	r1, #128	; 0x80
 800da1a:	200d      	movs	r0, #13
 800da1c:	f7ff ff4e 	bl	800d8bc <MFRC522_ClearBitMask>

	if (i != 0)  {
 800da20:	8a7b      	ldrh	r3, [r7, #18]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d057      	beq.n	800dad6 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800da26:	2006      	movs	r0, #6
 800da28:	f7ff ff14 	bl	800d854 <MFRC522_ReadRegister>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f003 031b 	and.w	r3, r3, #27
 800da32:	2b00      	cmp	r3, #0
 800da34:	d14d      	bne.n	800dad2 <MFRC522_ToCard+0x190>
			status = MI_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800da3a:	7d3a      	ldrb	r2, [r7, #20]
 800da3c:	7dbb      	ldrb	r3, [r7, #22]
 800da3e:	4013      	ands	r3, r2
 800da40:	b2db      	uxtb	r3, r3
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <MFRC522_ToCard+0x10c>
 800da4a:	2301      	movs	r3, #1
 800da4c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
 800da50:	2b0c      	cmp	r3, #12
 800da52:	d140      	bne.n	800dad6 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800da54:	200a      	movs	r0, #10
 800da56:	f7ff fefd 	bl	800d854 <MFRC522_ReadRegister>
 800da5a:	4603      	mov	r3, r0
 800da5c:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800da5e:	200c      	movs	r0, #12
 800da60:	f7ff fef8 	bl	800d854 <MFRC522_ReadRegister>
 800da64:	4603      	mov	r3, r0
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800da6c:	7c7b      	ldrb	r3, [r7, #17]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00b      	beq.n	800da8a <MFRC522_ToCard+0x148>
 800da72:	7d3b      	ldrb	r3, [r7, #20]
 800da74:	3b01      	subs	r3, #1
 800da76:	b29b      	uxth	r3, r3
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	7c7b      	ldrb	r3, [r7, #17]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	4413      	add	r3, r2
 800da82:	b29a      	uxth	r2, r3
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	801a      	strh	r2, [r3, #0]
 800da88:	e005      	b.n	800da96 <MFRC522_ToCard+0x154>
 800da8a:	7d3b      	ldrb	r3, [r7, #20]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	b29a      	uxth	r2, r3
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800da96:	7d3b      	ldrb	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <MFRC522_ToCard+0x15e>
 800da9c:	2301      	movs	r3, #1
 800da9e:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800daa0:	7d3b      	ldrb	r3, [r7, #20]
 800daa2:	2b10      	cmp	r3, #16
 800daa4:	d901      	bls.n	800daaa <MFRC522_ToCard+0x168>
 800daa6:	2310      	movs	r3, #16
 800daa8:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800daaa:	2300      	movs	r3, #0
 800daac:	827b      	strh	r3, [r7, #18]
 800daae:	e00a      	b.n	800dac6 <MFRC522_ToCard+0x184>
 800dab0:	8a7b      	ldrh	r3, [r7, #18]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	18d4      	adds	r4, r2, r3
 800dab6:	2009      	movs	r0, #9
 800dab8:	f7ff fecc 	bl	800d854 <MFRC522_ReadRegister>
 800dabc:	4603      	mov	r3, r0
 800dabe:	7023      	strb	r3, [r4, #0]
 800dac0:	8a7b      	ldrh	r3, [r7, #18]
 800dac2:	3301      	adds	r3, #1
 800dac4:	827b      	strh	r3, [r7, #18]
 800dac6:	7d3b      	ldrb	r3, [r7, #20]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	8a7a      	ldrh	r2, [r7, #18]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d3ef      	bcc.n	800dab0 <MFRC522_ToCard+0x16e>
 800dad0:	e001      	b.n	800dad6 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800dad2:	2302      	movs	r3, #2
 800dad4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	371c      	adds	r7, #28
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd90      	pop	{r4, r7, pc}

0800dae0 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800dae8:	2300      	movs	r3, #0
 800daea:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800daec:	2100      	movs	r1, #0
 800daee:	200d      	movs	r0, #13
 800daf0:	f7ff fe98 	bl	800d824 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2293      	movs	r2, #147	; 0x93
 800daf8:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3301      	adds	r3, #1
 800dafe:	2220      	movs	r2, #32
 800db00:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800db02:	f107 030a 	add.w	r3, r7, #10
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	6879      	ldr	r1, [r7, #4]
 800db0e:	200c      	movs	r0, #12
 800db10:	f7ff ff17 	bl	800d942 <MFRC522_ToCard>
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800db18:	7bfb      	ldrb	r3, [r7, #15]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d118      	bne.n	800db50 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800db1e:	2300      	movs	r3, #0
 800db20:	73bb      	strb	r3, [r7, #14]
 800db22:	e009      	b.n	800db38 <MFRC522_Anticoll+0x58>
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	4413      	add	r3, r2
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	7b7b      	ldrb	r3, [r7, #13]
 800db2e:	4053      	eors	r3, r2
 800db30:	737b      	strb	r3, [r7, #13]
 800db32:	7bbb      	ldrb	r3, [r7, #14]
 800db34:	3301      	adds	r3, #1
 800db36:	73bb      	strb	r3, [r7, #14]
 800db38:	7bbb      	ldrb	r3, [r7, #14]
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d9f2      	bls.n	800db24 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800db3e:	7bbb      	ldrb	r3, [r7, #14]
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	4413      	add	r3, r2
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	7b7a      	ldrb	r2, [r7, #13]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d001      	beq.n	800db50 <MFRC522_Anticoll+0x70>
 800db4c:	2302      	movs	r3, #2
 800db4e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800db50:	7bfb      	ldrb	r3, [r7, #15]
} 
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800db5a:	b590      	push	{r4, r7, lr}
 800db5c:	b087      	sub	sp, #28
 800db5e:	af00      	add	r7, sp, #0
 800db60:	60f8      	str	r0, [r7, #12]
 800db62:	460b      	mov	r3, r1
 800db64:	607a      	str	r2, [r7, #4]
 800db66:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800db68:	2104      	movs	r1, #4
 800db6a:	2005      	movs	r0, #5
 800db6c:	f7ff fea6 	bl	800d8bc <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800db70:	2180      	movs	r1, #128	; 0x80
 800db72:	200a      	movs	r0, #10
 800db74:	f7ff fe88 	bl	800d888 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800db78:	2300      	movs	r3, #0
 800db7a:	75fb      	strb	r3, [r7, #23]
 800db7c:	e00a      	b.n	800db94 <MFRC522_CalculateCRC+0x3a>
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	4619      	mov	r1, r3
 800db88:	2009      	movs	r0, #9
 800db8a:	f7ff fe4b 	bl	800d824 <MFRC522_WriteRegister>
 800db8e:	7dfb      	ldrb	r3, [r7, #23]
 800db90:	3301      	adds	r3, #1
 800db92:	75fb      	strb	r3, [r7, #23]
 800db94:	7dfa      	ldrb	r2, [r7, #23]
 800db96:	7afb      	ldrb	r3, [r7, #11]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d3f0      	bcc.n	800db7e <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800db9c:	2103      	movs	r1, #3
 800db9e:	2001      	movs	r0, #1
 800dba0:	f7ff fe40 	bl	800d824 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800dba4:	23ff      	movs	r3, #255	; 0xff
 800dba6:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800dba8:	2005      	movs	r0, #5
 800dbaa:	f7ff fe53 	bl	800d854 <MFRC522_ReadRegister>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75bb      	strb	r3, [r7, #22]
		i--;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d004      	beq.n	800dbc8 <MFRC522_CalculateCRC+0x6e>
 800dbbe:	7dbb      	ldrb	r3, [r7, #22]
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0ef      	beq.n	800dba8 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800dbc8:	2022      	movs	r0, #34	; 0x22
 800dbca:	f7ff fe43 	bl	800d854 <MFRC522_ReadRegister>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	1c5c      	adds	r4, r3, #1
 800dbda:	2021      	movs	r0, #33	; 0x21
 800dbdc:	f7ff fe3a 	bl	800d854 <MFRC522_ReadRegister>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	7023      	strb	r3, [r4, #0]
}
 800dbe4:	bf00      	nop
 800dbe6:	371c      	adds	r7, #28
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd90      	pop	{r4, r7, pc}

0800dbec <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af02      	add	r7, sp, #8
 800dbf2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 800dbf4:	2393      	movs	r3, #147	; 0x93
 800dbf6:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 800dbf8:	2370      	movs	r3, #112	; 0x70
 800dbfa:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	75fb      	strb	r3, [r7, #23]
 800dc00:	e00c      	b.n	800dc1c <MFRC522_SelectTag+0x30>
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	441a      	add	r2, r3
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	3302      	adds	r3, #2
 800dc0c:	7812      	ldrb	r2, [r2, #0]
 800dc0e:	3318      	adds	r3, #24
 800dc10:	443b      	add	r3, r7
 800dc12:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	75fb      	strb	r3, [r7, #23]
 800dc1c:	7dfb      	ldrb	r3, [r7, #23]
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d9ef      	bls.n	800dc02 <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800dc22:	f107 0308 	add.w	r3, r7, #8
 800dc26:	1dda      	adds	r2, r3, #7
 800dc28:	f107 0308 	add.w	r3, r7, #8
 800dc2c:	2107      	movs	r1, #7
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff ff93 	bl	800db5a <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800dc34:	f107 0208 	add.w	r2, r7, #8
 800dc38:	f107 0108 	add.w	r1, r7, #8
 800dc3c:	f107 0312 	add.w	r3, r7, #18
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	4613      	mov	r3, r2
 800dc44:	2209      	movs	r2, #9
 800dc46:	200c      	movs	r0, #12
 800dc48:	f7ff fe7b 	bl	800d942 <MFRC522_ToCard>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 800dc50:	7d7b      	ldrb	r3, [r7, #21]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d105      	bne.n	800dc62 <MFRC522_SelectTag+0x76>
 800dc56:	8a7b      	ldrh	r3, [r7, #18]
 800dc58:	2b18      	cmp	r3, #24
 800dc5a:	d102      	bne.n	800dc62 <MFRC522_SelectTag+0x76>
 800dc5c:	7a3b      	ldrb	r3, [r7, #8]
 800dc5e:	75bb      	strb	r3, [r7, #22]
 800dc60:	e001      	b.n	800dc66 <MFRC522_SelectTag+0x7a>
 800dc62:	2300      	movs	r3, #0
 800dc64:	75bb      	strb	r3, [r7, #22]
	return size;
 800dc66:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08a      	sub	sp, #40	; 0x28
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	60ba      	str	r2, [r7, #8]
 800dc78:	607b      	str	r3, [r7, #4]
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	73fb      	strb	r3, [r7, #15]
 800dc7e:	460b      	mov	r3, r1
 800dc80:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800dc86:	7bbb      	ldrb	r3, [r7, #14]
 800dc88:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	77bb      	strb	r3, [r7, #30]
 800dc8e:	e00c      	b.n	800dcaa <MFRC522_Auth+0x3a>
 800dc90:	7fbb      	ldrb	r3, [r7, #30]
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	441a      	add	r2, r3
 800dc96:	7fbb      	ldrb	r3, [r7, #30]
 800dc98:	3302      	adds	r3, #2
 800dc9a:	7812      	ldrb	r2, [r2, #0]
 800dc9c:	3320      	adds	r3, #32
 800dc9e:	443b      	add	r3, r7
 800dca0:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dca4:	7fbb      	ldrb	r3, [r7, #30]
 800dca6:	3301      	adds	r3, #1
 800dca8:	77bb      	strb	r3, [r7, #30]
 800dcaa:	7fbb      	ldrb	r3, [r7, #30]
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	d9ef      	bls.n	800dc90 <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	77bb      	strb	r3, [r7, #30]
 800dcb4:	e00c      	b.n	800dcd0 <MFRC522_Auth+0x60>
 800dcb6:	7fbb      	ldrb	r3, [r7, #30]
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	441a      	add	r2, r3
 800dcbc:	7fbb      	ldrb	r3, [r7, #30]
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	7812      	ldrb	r2, [r2, #0]
 800dcc2:	3320      	adds	r3, #32
 800dcc4:	443b      	add	r3, r7
 800dcc6:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dcca:	7fbb      	ldrb	r3, [r7, #30]
 800dccc:	3301      	adds	r3, #1
 800dcce:	77bb      	strb	r3, [r7, #30]
 800dcd0:	7fbb      	ldrb	r3, [r7, #30]
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d9ef      	bls.n	800dcb6 <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800dcd6:	f107 0210 	add.w	r2, r7, #16
 800dcda:	f107 0110 	add.w	r1, r7, #16
 800dcde:	f107 031c 	add.w	r3, r7, #28
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	4613      	mov	r3, r2
 800dce6:	220c      	movs	r2, #12
 800dce8:	200e      	movs	r0, #14
 800dcea:	f7ff fe2a 	bl	800d942 <MFRC522_ToCard>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 800dcf2:	7ffb      	ldrb	r3, [r7, #31]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d107      	bne.n	800dd08 <MFRC522_Auth+0x98>
 800dcf8:	2008      	movs	r0, #8
 800dcfa:	f7ff fdab 	bl	800d854 <MFRC522_ReadRegister>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	f003 0308 	and.w	r3, r3, #8
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <MFRC522_Auth+0x9c>
 800dd08:	2302      	movs	r3, #2
 800dd0a:	77fb      	strb	r3, [r7, #31]
	return status;
 800dd0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3720      	adds	r7, #32
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b086      	sub	sp, #24
 800dd1a:	af02      	add	r7, sp, #8
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	6039      	str	r1, [r7, #0]
 800dd20:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2230      	movs	r2, #48	; 0x30
 800dd26:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	79fa      	ldrb	r2, [r7, #7]
 800dd2e:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	3302      	adds	r3, #2
 800dd34:	461a      	mov	r2, r3
 800dd36:	2102      	movs	r1, #2
 800dd38:	6838      	ldr	r0, [r7, #0]
 800dd3a:	f7ff ff0e 	bl	800db5a <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800dd3e:	f107 030c 	add.w	r3, r7, #12
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2204      	movs	r2, #4
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	200c      	movs	r0, #12
 800dd4c:	f7ff fdf9 	bl	800d942 <MFRC522_ToCard>
 800dd50:	4603      	mov	r3, r0
 800dd52:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800dd54:	7bfb      	ldrb	r3, [r7, #15]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d102      	bne.n	800dd60 <MFRC522_Read+0x4a>
 800dd5a:	89bb      	ldrh	r3, [r7, #12]
 800dd5c:	2b90      	cmp	r3, #144	; 0x90
 800dd5e:	d001      	beq.n	800dd64 <MFRC522_Read+0x4e>
 800dd60:	2302      	movs	r3, #2
 800dd62:	73fb      	strb	r3, [r7, #15]
	return status;
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800dd72:	f000 f820 	bl	800ddb6 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800dd76:	218d      	movs	r1, #141	; 0x8d
 800dd78:	202a      	movs	r0, #42	; 0x2a
 800dd7a:	f7ff fd53 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800dd7e:	213e      	movs	r1, #62	; 0x3e
 800dd80:	202b      	movs	r0, #43	; 0x2b
 800dd82:	f7ff fd4f 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800dd86:	211e      	movs	r1, #30
 800dd88:	202d      	movs	r0, #45	; 0x2d
 800dd8a:	f7ff fd4b 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800dd8e:	2100      	movs	r1, #0
 800dd90:	202c      	movs	r0, #44	; 0x2c
 800dd92:	f7ff fd47 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800dd96:	2170      	movs	r1, #112	; 0x70
 800dd98:	2026      	movs	r0, #38	; 0x26
 800dd9a:	f7ff fd43 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800dd9e:	2140      	movs	r1, #64	; 0x40
 800dda0:	2015      	movs	r0, #21
 800dda2:	f7ff fd3f 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800dda6:	213d      	movs	r1, #61	; 0x3d
 800dda8:	2011      	movs	r0, #17
 800ddaa:	f7ff fd3b 	bl	800d824 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800ddae:	f000 f80a 	bl	800ddc6 <MFRC522_AntennaOn>
}
 800ddb2:	bf00      	nop
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800ddba:	210f      	movs	r1, #15
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	f7ff fd31 	bl	800d824 <MFRC522_WriteRegister>
}
 800ddc2:	bf00      	nop
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800ddcc:	2014      	movs	r0, #20
 800ddce:	f7ff fd41 	bl	800d854 <MFRC522_ReadRegister>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	f003 0303 	and.w	r3, r3, #3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d103      	bne.n	800dde8 <MFRC522_AntennaOn+0x22>
 800dde0:	2103      	movs	r1, #3
 800dde2:	2014      	movs	r0, #20
 800dde4:	f7ff fd50 	bl	800d888 <MFRC522_SetBitMask>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 800ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddf2:	b0f1      	sub	sp, #452	; 0x1c4
 800ddf4:	af0e      	add	r7, sp, #56	; 0x38
 800ddf6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800ddfa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ddfe:	6018      	str	r0, [r3, #0]
	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 800de00:	4aad      	ldr	r2, [pc, #692]	; (800e0b8 <cardOperationWithBlockedSector+0x2c8>)
 800de02:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800de06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de0a:	6018      	str	r0, [r3, #0]
 800de0c:	3304      	adds	r3, #4
 800de0e:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 800de1c:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800de20:	2b00      	cmp	r3, #0
 800de22:	d13b      	bne.n	800de9c <cardOperationWithBlockedSector+0xac>
	     MFRC522_Init();
 800de24:	f7ff ffa3 	bl	800dd6e <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 800de28:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de2c:	4619      	mov	r1, r3
 800de2e:	2026      	movs	r0, #38	; 0x26
 800de30:	f7ff fd62 	bl	800d8f8 <MFRC522_Request>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d130      	bne.n	800de9c <cardOperationWithBlockedSector+0xac>
	       if (!MFRC522_Anticoll(str)) {
 800de3a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de3e:	4618      	mov	r0, r3
 800de40:	f7ff fe4e 	bl	800dae0 <MFRC522_Anticoll>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d128      	bne.n	800de9c <cardOperationWithBlockedSector+0xac>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\"164522975789130\",\"cardID\":\"%x%x%x%x\",", str[0],str[1], str[2], str[3]);
 800de4a:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800de4e:	4619      	mov	r1, r3
 800de50:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800de54:	461c      	mov	r4, r3
 800de56:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800de5a:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 800de5e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800de62:	9201      	str	r2, [sp, #4]
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	4623      	mov	r3, r4
 800de68:	460a      	mov	r2, r1
 800de6a:	4994      	ldr	r1, [pc, #592]	; (800e0bc <cardOperationWithBlockedSector+0x2cc>)
 800de6c:	f003 f878 	bl	8010f60 <siprintf>

	         l = strlen((char*)IDBuff);
 800de70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800de74:	4618      	mov	r0, r3
 800de76:	f7fe f969 	bl	800c14c <strlen>
 800de7a:	4603      	mov	r3, r0
 800de7c:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 800de80:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800de84:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800de88:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800de8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	f003 f84f 	bl	8010f34 <memcpy>

	         cardIDStatus = 1;
 800de96:	2301      	movs	r3, #1
 800de98:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 800de9c:	2014      	movs	r0, #20
 800de9e:	f000 fc01 	bl	800e6a4 <HAL_Delay>
	  MFRC522_Init();
 800dea2:	f7ff ff64 	bl	800dd6e <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 800dea6:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800deaa:	2b01      	cmp	r3, #1
 800deac:	f040 80ed 	bne.w	800e08a <cardOperationWithBlockedSector+0x29a>
 800deb0:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f040 80e8 	bne.w	800e08a <cardOperationWithBlockedSector+0x29a>
	    MFRC522_Init();
 800deba:	f7ff ff58 	bl	800dd6e <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 800debe:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dec2:	4619      	mov	r1, r3
 800dec4:	2026      	movs	r0, #38	; 0x26
 800dec6:	f7ff fd17 	bl	800d8f8 <MFRC522_Request>
 800deca:	4603      	mov	r3, r0
 800decc:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 800ded0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f040 80ce 	bne.w	800e076 <cardOperationWithBlockedSector+0x286>
	      status = MFRC522_Anticoll(str);
 800deda:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dede:	4618      	mov	r0, r3
 800dee0:	f7ff fdfe 	bl	800dae0 <MFRC522_Anticoll>
 800dee4:	4603      	mov	r3, r0
 800dee6:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 800deea:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800deee:	2b00      	cmp	r3, #0
 800def0:	f040 80b7 	bne.w	800e062 <cardOperationWithBlockedSector+0x272>
	        status = MFRC522_SelectTag(str);
 800def4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff fe77 	bl	800dbec <MFRC522_SelectTag>
 800defe:	4603      	mov	r3, r0
 800df00:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 800df04:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 80a0 	beq.w	800e04e <cardOperationWithBlockedSector+0x25e>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 800df0e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800df12:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800df16:	2102      	movs	r1, #2
 800df18:	2061      	movs	r0, #97	; 0x61
 800df1a:	f7ff fea9 	bl	800dc70 <MFRC522_Auth>
 800df1e:	4603      	mov	r3, r0
 800df20:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 800df24:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f040 8086 	bne.w	800e03a <cardOperationWithBlockedSector+0x24a>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 800df2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800df32:	4619      	mov	r1, r3
 800df34:	2002      	movs	r0, #2
 800df36:	f7ff feee 	bl	800dd16 <MFRC522_Read>
 800df3a:	4603      	mov	r3, r0
 800df3c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 800df40:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df44:	2b00      	cmp	r3, #0
 800df46:	d16e      	bne.n	800e026 <cardOperationWithBlockedSector+0x236>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 800df48:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800df4c:	469c      	mov	ip, r3
 800df4e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800df52:	469e      	mov	lr, r3
 800df54:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800df58:	461c      	mov	r4, r3
 800df5a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800df5e:	461d      	mov	r5, r3
 800df60:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800df64:	461e      	mov	r6, r3
 800df66:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800df6a:	623b      	str	r3, [r7, #32]
 800df6c:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800df76:	61bb      	str	r3, [r7, #24]
 800df78:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800df7c:	617b      	str	r3, [r7, #20]
 800df7e:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800df82:	613b      	str	r3, [r7, #16]
 800df84:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800df8e:	60bb      	str	r3, [r7, #8]
 800df90:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800df94:	607b      	str	r3, [r7, #4]
 800df96:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800df9a:	4619      	mov	r1, r3
 800df9c:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800dfa6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800dfaa:	930d      	str	r3, [sp, #52]	; 0x34
 800dfac:	920c      	str	r2, [sp, #48]	; 0x30
 800dfae:	910b      	str	r1, [sp, #44]	; 0x2c
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	920a      	str	r2, [sp, #40]	; 0x28
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	9209      	str	r2, [sp, #36]	; 0x24
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	9208      	str	r2, [sp, #32]
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	9207      	str	r2, [sp, #28]
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	9206      	str	r2, [sp, #24]
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	9205      	str	r2, [sp, #20]
 800dfc8:	69fa      	ldr	r2, [r7, #28]
 800dfca:	9204      	str	r2, [sp, #16]
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	9303      	str	r3, [sp, #12]
 800dfd0:	9602      	str	r6, [sp, #8]
 800dfd2:	9501      	str	r5, [sp, #4]
 800dfd4:	9400      	str	r4, [sp, #0]
 800dfd6:	4673      	mov	r3, lr
 800dfd8:	4662      	mov	r2, ip
 800dfda:	4939      	ldr	r1, [pc, #228]	; (800e0c0 <cardOperationWithBlockedSector+0x2d0>)
 800dfdc:	f002 ffc0 	bl	8010f60 <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800dfe0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800dfe4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800dfe8:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800dfec:	6812      	ldr	r2, [r2, #0]
 800dfee:	18d4      	adds	r4, r2, r3
 800dff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe f8a9 	bl	800c14c <strlen>
 800dffa:	4602      	mov	r2, r0
 800dffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e000:	4619      	mov	r1, r3
 800e002:	4620      	mov	r0, r4
 800e004:	f002 ff96 	bl	8010f34 <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 800e008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe f89d 	bl	800c14c <strlen>
 800e012:	4603      	mov	r3, r0
 800e014:	b2da      	uxtb	r2, r3
 800e016:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e01a:	4413      	add	r3, r2
 800e01c:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 800e020:	2301      	movs	r3, #1
 800e022:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 800e026:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d105      	bne.n	800e03a <cardOperationWithBlockedSector+0x24a>
	              led(READ_ERR);
 800e02e:	2005      	movs	r0, #5
 800e030:	f000 f848 	bl	800e0c4 <led>
	              cardIDStatus = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800e03a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d005      	beq.n	800e04e <cardOperationWithBlockedSector+0x25e>
	            led(AUTH_ERR);
 800e042:	2004      	movs	r0, #4
 800e044:	f000 f83e 	bl	800e0c4 <led>
	            cardIDStatus = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800e04e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <cardOperationWithBlockedSector+0x272>
	          led(TAG_SELECT_ERR);
 800e056:	2003      	movs	r0, #3
 800e058:	f000 f834 	bl	800e0c4 <led>
	          cardIDStatus = 0;
 800e05c:	2300      	movs	r3, #0
 800e05e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 800e062:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e066:	2b00      	cmp	r3, #0
 800e068:	d005      	beq.n	800e076 <cardOperationWithBlockedSector+0x286>
	        led(ANTICOL_ERR);
 800e06a:	2002      	movs	r0, #2
 800e06c:	f000 f82a 	bl	800e0c4 <led>
	        cardIDStatus = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 800e076:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d005      	beq.n	800e08a <cardOperationWithBlockedSector+0x29a>
	      led(REQUEST_ERR);
 800e07e:	2001      	movs	r0, #1
 800e080:	f000 f820 	bl	800e0c4 <led>
	      cardIDStatus = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800e08a:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d10b      	bne.n	800e0aa <cardOperationWithBlockedSector+0x2ba>
 800e092:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e096:	2b01      	cmp	r3, #1
 800e098:	d107      	bne.n	800e0aa <cardOperationWithBlockedSector+0x2ba>

	      cardIDStatus = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e000      	b.n	800e0ac <cardOperationWithBlockedSector+0x2bc>
	    }
	  return 0;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	08011b60 	.word	0x08011b60
 800e0bc:	08011ad4 	.word	0x08011ad4
 800e0c0:	08011b30 	.word	0x08011b30

0800e0c4 <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	73fb      	strb	r3, [r7, #15]
 800e0d2:	e014      	b.n	800e0fe <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e0da:	480d      	ldr	r0, [pc, #52]	; (800e110 <led+0x4c>)
 800e0dc:	f000 fe62 	bl	800eda4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e0e0:	2064      	movs	r0, #100	; 0x64
 800e0e2:	f000 fadf 	bl	800e6a4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e0ec:	4808      	ldr	r0, [pc, #32]	; (800e110 <led+0x4c>)
 800e0ee:	f000 fe59 	bl	800eda4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e0f2:	2064      	movs	r0, #100	; 0x64
 800e0f4:	f000 fad6 	bl	800e6a4 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	73fb      	strb	r3, [r7, #15]
 800e0fe:	7bfa      	ldrb	r2, [r7, #15]
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	429a      	cmp	r2, r3
 800e104:	d3e6      	bcc.n	800e0d4 <led+0x10>
	}
}
 800e106:	bf00      	nop
 800e108:	bf00      	nop
 800e10a:	3710      	adds	r7, #16
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	40011000 	.word	0x40011000

0800e114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e114:	b480      	push	{r7}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800e11a:	4b15      	ldr	r3, [pc, #84]	; (800e170 <HAL_MspInit+0x5c>)
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	4a14      	ldr	r2, [pc, #80]	; (800e170 <HAL_MspInit+0x5c>)
 800e120:	f043 0301 	orr.w	r3, r3, #1
 800e124:	6193      	str	r3, [r2, #24]
 800e126:	4b12      	ldr	r3, [pc, #72]	; (800e170 <HAL_MspInit+0x5c>)
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	60bb      	str	r3, [r7, #8]
 800e130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e132:	4b0f      	ldr	r3, [pc, #60]	; (800e170 <HAL_MspInit+0x5c>)
 800e134:	69db      	ldr	r3, [r3, #28]
 800e136:	4a0e      	ldr	r2, [pc, #56]	; (800e170 <HAL_MspInit+0x5c>)
 800e138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e13c:	61d3      	str	r3, [r2, #28]
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <HAL_MspInit+0x5c>)
 800e140:	69db      	ldr	r3, [r3, #28]
 800e142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e146:	607b      	str	r3, [r7, #4]
 800e148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800e14a:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <HAL_MspInit+0x60>)
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	60fb      	str	r3, [r7, #12]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	4a04      	ldr	r2, [pc, #16]	; (800e174 <HAL_MspInit+0x60>)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bc80      	pop	{r7}
 800e16e:	4770      	bx	lr
 800e170:	40021000 	.word	0x40021000
 800e174:	40010000 	.word	0x40010000

0800e178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e180:	f107 0310 	add.w	r3, r7, #16
 800e184:	2200      	movs	r2, #0
 800e186:	601a      	str	r2, [r3, #0]
 800e188:	605a      	str	r2, [r3, #4]
 800e18a:	609a      	str	r2, [r3, #8]
 800e18c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a15      	ldr	r2, [pc, #84]	; (800e1e8 <HAL_I2C_MspInit+0x70>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d123      	bne.n	800e1e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e198:	4b14      	ldr	r3, [pc, #80]	; (800e1ec <HAL_I2C_MspInit+0x74>)
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	4a13      	ldr	r2, [pc, #76]	; (800e1ec <HAL_I2C_MspInit+0x74>)
 800e19e:	f043 0308 	orr.w	r3, r3, #8
 800e1a2:	6193      	str	r3, [r2, #24]
 800e1a4:	4b11      	ldr	r3, [pc, #68]	; (800e1ec <HAL_I2C_MspInit+0x74>)
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	f003 0308 	and.w	r3, r3, #8
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e1b0:	23c0      	movs	r3, #192	; 0xc0
 800e1b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e1b4:	2312      	movs	r3, #18
 800e1b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e1b8:	2303      	movs	r3, #3
 800e1ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1bc:	f107 0310 	add.w	r3, r7, #16
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	480b      	ldr	r0, [pc, #44]	; (800e1f0 <HAL_I2C_MspInit+0x78>)
 800e1c4:	f000 fc6a 	bl	800ea9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e1c8:	4b08      	ldr	r3, [pc, #32]	; (800e1ec <HAL_I2C_MspInit+0x74>)
 800e1ca:	69db      	ldr	r3, [r3, #28]
 800e1cc:	4a07      	ldr	r2, [pc, #28]	; (800e1ec <HAL_I2C_MspInit+0x74>)
 800e1ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e1d2:	61d3      	str	r3, [r2, #28]
 800e1d4:	4b05      	ldr	r3, [pc, #20]	; (800e1ec <HAL_I2C_MspInit+0x74>)
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e1dc:	60bb      	str	r3, [r7, #8]
 800e1de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e1e0:	bf00      	nop
 800e1e2:	3720      	adds	r7, #32
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	40005400 	.word	0x40005400
 800e1ec:	40021000 	.word	0x40021000
 800e1f0:	40010c00 	.word	0x40010c00

0800e1f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b088      	sub	sp, #32
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1fc:	f107 0310 	add.w	r3, r7, #16
 800e200:	2200      	movs	r2, #0
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	605a      	str	r2, [r3, #4]
 800e206:	609a      	str	r2, [r3, #8]
 800e208:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a1b      	ldr	r2, [pc, #108]	; (800e27c <HAL_SPI_MspInit+0x88>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d12f      	bne.n	800e274 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e214:	4b1a      	ldr	r3, [pc, #104]	; (800e280 <HAL_SPI_MspInit+0x8c>)
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	4a19      	ldr	r2, [pc, #100]	; (800e280 <HAL_SPI_MspInit+0x8c>)
 800e21a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e21e:	6193      	str	r3, [r2, #24]
 800e220:	4b17      	ldr	r3, [pc, #92]	; (800e280 <HAL_SPI_MspInit+0x8c>)
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e22c:	4b14      	ldr	r3, [pc, #80]	; (800e280 <HAL_SPI_MspInit+0x8c>)
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	4a13      	ldr	r2, [pc, #76]	; (800e280 <HAL_SPI_MspInit+0x8c>)
 800e232:	f043 0304 	orr.w	r3, r3, #4
 800e236:	6193      	str	r3, [r2, #24]
 800e238:	4b11      	ldr	r3, [pc, #68]	; (800e280 <HAL_SPI_MspInit+0x8c>)
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	60bb      	str	r3, [r7, #8]
 800e242:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800e244:	23a0      	movs	r3, #160	; 0xa0
 800e246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e248:	2302      	movs	r3, #2
 800e24a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e24c:	2303      	movs	r3, #3
 800e24e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e250:	f107 0310 	add.w	r3, r7, #16
 800e254:	4619      	mov	r1, r3
 800e256:	480b      	ldr	r0, [pc, #44]	; (800e284 <HAL_SPI_MspInit+0x90>)
 800e258:	f000 fc20 	bl	800ea9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e25c:	2340      	movs	r3, #64	; 0x40
 800e25e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e260:	2300      	movs	r3, #0
 800e262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e264:	2300      	movs	r3, #0
 800e266:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e268:	f107 0310 	add.w	r3, r7, #16
 800e26c:	4619      	mov	r1, r3
 800e26e:	4805      	ldr	r0, [pc, #20]	; (800e284 <HAL_SPI_MspInit+0x90>)
 800e270:	f000 fc14 	bl	800ea9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e274:	bf00      	nop
 800e276:	3720      	adds	r7, #32
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	40013000 	.word	0x40013000
 800e280:	40021000 	.word	0x40021000
 800e284:	40010800 	.word	0x40010800

0800e288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08a      	sub	sp, #40	; 0x28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e290:	f107 0318 	add.w	r3, r7, #24
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	605a      	str	r2, [r3, #4]
 800e29a:	609a      	str	r2, [r3, #8]
 800e29c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a3b      	ldr	r2, [pc, #236]	; (800e390 <HAL_UART_MspInit+0x108>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d13a      	bne.n	800e31e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e2a8:	4b3a      	ldr	r3, [pc, #232]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	4a39      	ldr	r2, [pc, #228]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2b2:	6193      	str	r3, [r2, #24]
 800e2b4:	4b37      	ldr	r3, [pc, #220]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2c0:	4b34      	ldr	r3, [pc, #208]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	4a33      	ldr	r2, [pc, #204]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e2c6:	f043 0304 	orr.w	r3, r3, #4
 800e2ca:	6193      	str	r3, [r2, #24]
 800e2cc:	4b31      	ldr	r3, [pc, #196]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	f003 0304 	and.w	r3, r3, #4
 800e2d4:	613b      	str	r3, [r7, #16]
 800e2d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2de:	2302      	movs	r3, #2
 800e2e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e6:	f107 0318 	add.w	r3, r7, #24
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	482a      	ldr	r0, [pc, #168]	; (800e398 <HAL_UART_MspInit+0x110>)
 800e2ee:	f000 fbd5 	bl	800ea9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e2f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e300:	f107 0318 	add.w	r3, r7, #24
 800e304:	4619      	mov	r1, r3
 800e306:	4824      	ldr	r0, [pc, #144]	; (800e398 <HAL_UART_MspInit+0x110>)
 800e308:	f000 fbc8 	bl	800ea9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e30c:	2200      	movs	r2, #0
 800e30e:	2100      	movs	r1, #0
 800e310:	2025      	movs	r0, #37	; 0x25
 800e312:	f000 fad8 	bl	800e8c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e316:	2025      	movs	r0, #37	; 0x25
 800e318:	f000 faf1 	bl	800e8fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e31c:	e034      	b.n	800e388 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a1e      	ldr	r2, [pc, #120]	; (800e39c <HAL_UART_MspInit+0x114>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d12f      	bne.n	800e388 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e328:	4b1a      	ldr	r3, [pc, #104]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e32a:	69db      	ldr	r3, [r3, #28]
 800e32c:	4a19      	ldr	r2, [pc, #100]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e32e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e332:	61d3      	str	r3, [r2, #28]
 800e334:	4b17      	ldr	r3, [pc, #92]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e33c:	60fb      	str	r3, [r7, #12]
 800e33e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e340:	4b14      	ldr	r3, [pc, #80]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e342:	699b      	ldr	r3, [r3, #24]
 800e344:	4a13      	ldr	r2, [pc, #76]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e346:	f043 0304 	orr.w	r3, r3, #4
 800e34a:	6193      	str	r3, [r2, #24]
 800e34c:	4b11      	ldr	r3, [pc, #68]	; (800e394 <HAL_UART_MspInit+0x10c>)
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	60bb      	str	r3, [r7, #8]
 800e356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e358:	2304      	movs	r3, #4
 800e35a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e35c:	2302      	movs	r3, #2
 800e35e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e360:	2303      	movs	r3, #3
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e364:	f107 0318 	add.w	r3, r7, #24
 800e368:	4619      	mov	r1, r3
 800e36a:	480b      	ldr	r0, [pc, #44]	; (800e398 <HAL_UART_MspInit+0x110>)
 800e36c:	f000 fb96 	bl	800ea9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e370:	2308      	movs	r3, #8
 800e372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e374:	2300      	movs	r3, #0
 800e376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e37c:	f107 0318 	add.w	r3, r7, #24
 800e380:	4619      	mov	r1, r3
 800e382:	4805      	ldr	r0, [pc, #20]	; (800e398 <HAL_UART_MspInit+0x110>)
 800e384:	f000 fb8a 	bl	800ea9c <HAL_GPIO_Init>
}
 800e388:	bf00      	nop
 800e38a:	3728      	adds	r7, #40	; 0x28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	40013800 	.word	0x40013800
 800e394:	40021000 	.word	0x40021000
 800e398:	40010800 	.word	0x40010800
 800e39c:	40004400 	.word	0x40004400

0800e3a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e3a4:	f3bf 8f4f 	dsb	sy
}
 800e3a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e3aa:	4b06      	ldr	r3, [pc, #24]	; (800e3c4 <__NVIC_SystemReset+0x24>)
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e3b2:	4904      	ldr	r1, [pc, #16]	; (800e3c4 <__NVIC_SystemReset+0x24>)
 800e3b4:	4b04      	ldr	r3, [pc, #16]	; (800e3c8 <__NVIC_SystemReset+0x28>)
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e3ba:	f3bf 8f4f 	dsb	sy
}
 800e3be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e3c0:	bf00      	nop
 800e3c2:	e7fd      	b.n	800e3c0 <__NVIC_SystemReset+0x20>
 800e3c4:	e000ed00 	.word	0xe000ed00
 800e3c8:	05fa0004 	.word	0x05fa0004

0800e3cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e3d0:	e7fe      	b.n	800e3d0 <NMI_Handler+0x4>

0800e3d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 800e3d6:	f7ff ffe3 	bl	800e3a0 <__NVIC_SystemReset>

0800e3da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e3da:	b480      	push	{r7}
 800e3dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e3de:	e7fe      	b.n	800e3de <MemManage_Handler+0x4>

0800e3e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e3e4:	e7fe      	b.n	800e3e4 <BusFault_Handler+0x4>

0800e3e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e3ea:	e7fe      	b.n	800e3ea <UsageFault_Handler+0x4>

0800e3ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e3f0:	bf00      	nop
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bc80      	pop	{r7}
 800e3f6:	4770      	bx	lr

0800e3f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e3fc:	bf00      	nop
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bc80      	pop	{r7}
 800e402:	4770      	bx	lr

0800e404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e404:	b480      	push	{r7}
 800e406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e408:	bf00      	nop
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bc80      	pop	{r7}
 800e40e:	4770      	bx	lr

0800e410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e414:	f000 f92a 	bl	800e66c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e418:	bf00      	nop
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e420:	4802      	ldr	r0, [pc, #8]	; (800e42c <USART1_IRQHandler+0x10>)
 800e422:	f002 f931 	bl	8010688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e426:	bf00      	nop
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20000404 	.word	0x20000404

0800e430 <AppruveSound>:

#include "stm32f1xx_hal.h"
#include "switchSounds.h"
#include "main.h"

void AppruveSound() {
 800e430:	b580      	push	{r7, lr}
 800e432:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e434:	2101      	movs	r1, #1
 800e436:	4815      	ldr	r0, [pc, #84]	; (800e48c <AppruveSound+0x5c>)
 800e438:	f000 fccc 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e43c:	2050      	movs	r0, #80	; 0x50
 800e43e:	f000 f931 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e442:	2101      	movs	r1, #1
 800e444:	4811      	ldr	r0, [pc, #68]	; (800e48c <AppruveSound+0x5c>)
 800e446:	f000 fcc5 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e44a:	2050      	movs	r0, #80	; 0x50
 800e44c:	f000 f92a 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e450:	2101      	movs	r1, #1
 800e452:	480e      	ldr	r0, [pc, #56]	; (800e48c <AppruveSound+0x5c>)
 800e454:	f000 fcbe 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e458:	2050      	movs	r0, #80	; 0x50
 800e45a:	f000 f923 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e45e:	2101      	movs	r1, #1
 800e460:	480a      	ldr	r0, [pc, #40]	; (800e48c <AppruveSound+0x5c>)
 800e462:	f000 fcb7 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e466:	2050      	movs	r0, #80	; 0x50
 800e468:	f000 f91c 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e46c:	2101      	movs	r1, #1
 800e46e:	4807      	ldr	r0, [pc, #28]	; (800e48c <AppruveSound+0x5c>)
 800e470:	f000 fcb0 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e474:	2050      	movs	r0, #80	; 0x50
 800e476:	f000 f915 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e47a:	2101      	movs	r1, #1
 800e47c:	4803      	ldr	r0, [pc, #12]	; (800e48c <AppruveSound+0x5c>)
 800e47e:	f000 fca9 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e482:	2050      	movs	r0, #80	; 0x50
 800e484:	f000 f90e 	bl	800e6a4 <HAL_Delay>
}
 800e488:	bf00      	nop
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	40010c00 	.word	0x40010c00

0800e490 <RelaySwitch>:
void RelaySwitch() {
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800e494:	2102      	movs	r1, #2
 800e496:	4806      	ldr	r0, [pc, #24]	; (800e4b0 <RelaySwitch+0x20>)
 800e498:	f000 fc9c 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e49c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e4a0:	f000 f900 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800e4a4:	2102      	movs	r1, #2
 800e4a6:	4802      	ldr	r0, [pc, #8]	; (800e4b0 <RelaySwitch+0x20>)
 800e4a8:	f000 fc94 	bl	800edd4 <HAL_GPIO_TogglePin>

}
 800e4ac:	bf00      	nop
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	40010c00 	.word	0x40010c00

0800e4b4 <ErrorSound>:
void ErrorSound() {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	480e      	ldr	r0, [pc, #56]	; (800e4f4 <ErrorSound+0x40>)
 800e4bc:	f000 fc8a 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e4c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e4c4:	f000 f8ee 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	480a      	ldr	r0, [pc, #40]	; (800e4f4 <ErrorSound+0x40>)
 800e4cc:	f000 fc82 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800e4d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e4d4:	f000 f8e6 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e4d8:	2101      	movs	r1, #1
 800e4da:	4806      	ldr	r0, [pc, #24]	; (800e4f4 <ErrorSound+0x40>)
 800e4dc:	f000 fc7a 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e4e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e4e4:	f000 f8de 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e4e8:	2101      	movs	r1, #1
 800e4ea:	4802      	ldr	r0, [pc, #8]	; (800e4f4 <ErrorSound+0x40>)
 800e4ec:	f000 fc72 	bl	800edd4 <HAL_GPIO_TogglePin>

}
 800e4f0:	bf00      	nop
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	40010c00 	.word	0x40010c00

0800e4f8 <CardReadSound>:
void CardReadSound() {
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	4806      	ldr	r0, [pc, #24]	; (800e518 <CardReadSound+0x20>)
 800e500:	f000 fc68 	bl	800edd4 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800e504:	2032      	movs	r0, #50	; 0x32
 800e506:	f000 f8cd 	bl	800e6a4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e50a:	2101      	movs	r1, #1
 800e50c:	4802      	ldr	r0, [pc, #8]	; (800e518 <CardReadSound+0x20>)
 800e50e:	f000 fc61 	bl	800edd4 <HAL_GPIO_TogglePin>

}
 800e512:	bf00      	nop
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	40010c00 	.word	0x40010c00

0800e51c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e524:	4a14      	ldr	r2, [pc, #80]	; (800e578 <_sbrk+0x5c>)
 800e526:	4b15      	ldr	r3, [pc, #84]	; (800e57c <_sbrk+0x60>)
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e530:	4b13      	ldr	r3, [pc, #76]	; (800e580 <_sbrk+0x64>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d102      	bne.n	800e53e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e538:	4b11      	ldr	r3, [pc, #68]	; (800e580 <_sbrk+0x64>)
 800e53a:	4a12      	ldr	r2, [pc, #72]	; (800e584 <_sbrk+0x68>)
 800e53c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e53e:	4b10      	ldr	r3, [pc, #64]	; (800e580 <_sbrk+0x64>)
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4413      	add	r3, r2
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d207      	bcs.n	800e55c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e54c:	f002 fcc8 	bl	8010ee0 <__errno>
 800e550:	4603      	mov	r3, r0
 800e552:	220c      	movs	r2, #12
 800e554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e556:	f04f 33ff 	mov.w	r3, #4294967295
 800e55a:	e009      	b.n	800e570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e55c:	4b08      	ldr	r3, [pc, #32]	; (800e580 <_sbrk+0x64>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e562:	4b07      	ldr	r3, [pc, #28]	; (800e580 <_sbrk+0x64>)
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4413      	add	r3, r2
 800e56a:	4a05      	ldr	r2, [pc, #20]	; (800e580 <_sbrk+0x64>)
 800e56c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e56e:	68fb      	ldr	r3, [r7, #12]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20005000 	.word	0x20005000
 800e57c:	00000400 	.word	0x00000400
 800e580:	2000048c 	.word	0x2000048c
 800e584:	200004a8 	.word	0x200004a8

0800e588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e588:	b480      	push	{r7}
 800e58a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e58c:	bf00      	nop
 800e58e:	46bd      	mov	sp, r7
 800e590:	bc80      	pop	{r7}
 800e592:	4770      	bx	lr

0800e594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e594:	480c      	ldr	r0, [pc, #48]	; (800e5c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e596:	490d      	ldr	r1, [pc, #52]	; (800e5cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e598:	4a0d      	ldr	r2, [pc, #52]	; (800e5d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e59a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e59c:	e002      	b.n	800e5a4 <LoopCopyDataInit>

0800e59e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e59e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e5a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e5a2:	3304      	adds	r3, #4

0800e5a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e5a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e5a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e5a8:	d3f9      	bcc.n	800e59e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e5aa:	4a0a      	ldr	r2, [pc, #40]	; (800e5d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e5ac:	4c0a      	ldr	r4, [pc, #40]	; (800e5d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800e5ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e5b0:	e001      	b.n	800e5b6 <LoopFillZerobss>

0800e5b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e5b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e5b4:	3204      	adds	r2, #4

0800e5b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e5b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e5b8:	d3fb      	bcc.n	800e5b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e5ba:	f7ff ffe5 	bl	800e588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e5be:	f002 fc95 	bl	8010eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e5c2:	f7fe fce9 	bl	800cf98 <main>
  bx lr
 800e5c6:	4770      	bx	lr
  ldr r0, =_sdata
 800e5c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e5cc:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 800e5d0:	08011d84 	.word	0x08011d84
  ldr r2, =_sbss
 800e5d4:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 800e5d8:	200004a4 	.word	0x200004a4

0800e5dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e5dc:	e7fe      	b.n	800e5dc <ADC1_2_IRQHandler>
	...

0800e5e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e5e4:	4b08      	ldr	r3, [pc, #32]	; (800e608 <HAL_Init+0x28>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a07      	ldr	r2, [pc, #28]	; (800e608 <HAL_Init+0x28>)
 800e5ea:	f043 0310 	orr.w	r3, r3, #16
 800e5ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e5f0:	2003      	movs	r0, #3
 800e5f2:	f000 f95d 	bl	800e8b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e5f6:	200f      	movs	r0, #15
 800e5f8:	f000 f808 	bl	800e60c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e5fc:	f7ff fd8a 	bl	800e114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	40022000 	.word	0x40022000

0800e60c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e614:	4b12      	ldr	r3, [pc, #72]	; (800e660 <HAL_InitTick+0x54>)
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	4b12      	ldr	r3, [pc, #72]	; (800e664 <HAL_InitTick+0x58>)
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	4619      	mov	r1, r3
 800e61e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e622:	fbb3 f3f1 	udiv	r3, r3, r1
 800e626:	fbb2 f3f3 	udiv	r3, r2, r3
 800e62a:	4618      	mov	r0, r3
 800e62c:	f000 f979 	bl	800e922 <HAL_SYSTICK_Config>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e636:	2301      	movs	r3, #1
 800e638:	e00e      	b.n	800e658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b0f      	cmp	r3, #15
 800e63e:	d80a      	bhi.n	800e656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e640:	2200      	movs	r2, #0
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	f04f 30ff 	mov.w	r0, #4294967295
 800e648:	f000 f93d 	bl	800e8c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e64c:	4a06      	ldr	r2, [pc, #24]	; (800e668 <HAL_InitTick+0x5c>)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	e000      	b.n	800e658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	200000cc 	.word	0x200000cc
 800e664:	200000d4 	.word	0x200000d4
 800e668:	200000d0 	.word	0x200000d0

0800e66c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e66c:	b480      	push	{r7}
 800e66e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e670:	4b05      	ldr	r3, [pc, #20]	; (800e688 <HAL_IncTick+0x1c>)
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	461a      	mov	r2, r3
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <HAL_IncTick+0x20>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4413      	add	r3, r2
 800e67c:	4a03      	ldr	r2, [pc, #12]	; (800e68c <HAL_IncTick+0x20>)
 800e67e:	6013      	str	r3, [r2, #0]
}
 800e680:	bf00      	nop
 800e682:	46bd      	mov	sp, r7
 800e684:	bc80      	pop	{r7}
 800e686:	4770      	bx	lr
 800e688:	200000d4 	.word	0x200000d4
 800e68c:	20000490 	.word	0x20000490

0800e690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0
  return uwTick;
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <HAL_GetTick+0x10>)
 800e696:	681b      	ldr	r3, [r3, #0]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bc80      	pop	{r7}
 800e69e:	4770      	bx	lr
 800e6a0:	20000490 	.word	0x20000490

0800e6a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e6ac:	f7ff fff0 	bl	800e690 <HAL_GetTick>
 800e6b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6bc:	d005      	beq.n	800e6ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e6be:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <HAL_Delay+0x44>)
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e6ca:	bf00      	nop
 800e6cc:	f7ff ffe0 	bl	800e690 <HAL_GetTick>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d8f7      	bhi.n	800e6cc <HAL_Delay+0x28>
  {
  }
}
 800e6dc:	bf00      	nop
 800e6de:	bf00      	nop
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	200000d4 	.word	0x200000d4

0800e6ec <__NVIC_SetPriorityGrouping>:
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e6fc:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <__NVIC_SetPriorityGrouping+0x44>)
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e708:	4013      	ands	r3, r2
 800e70a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e71c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e71e:	4a04      	ldr	r2, [pc, #16]	; (800e730 <__NVIC_SetPriorityGrouping+0x44>)
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	60d3      	str	r3, [r2, #12]
}
 800e724:	bf00      	nop
 800e726:	3714      	adds	r7, #20
 800e728:	46bd      	mov	sp, r7
 800e72a:	bc80      	pop	{r7}
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	e000ed00 	.word	0xe000ed00

0800e734 <__NVIC_GetPriorityGrouping>:
{
 800e734:	b480      	push	{r7}
 800e736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e738:	4b04      	ldr	r3, [pc, #16]	; (800e74c <__NVIC_GetPriorityGrouping+0x18>)
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	0a1b      	lsrs	r3, r3, #8
 800e73e:	f003 0307 	and.w	r3, r3, #7
}
 800e742:	4618      	mov	r0, r3
 800e744:	46bd      	mov	sp, r7
 800e746:	bc80      	pop	{r7}
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	e000ed00 	.word	0xe000ed00

0800e750 <__NVIC_EnableIRQ>:
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e75a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	db0b      	blt.n	800e77a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e762:	79fb      	ldrb	r3, [r7, #7]
 800e764:	f003 021f 	and.w	r2, r3, #31
 800e768:	4906      	ldr	r1, [pc, #24]	; (800e784 <__NVIC_EnableIRQ+0x34>)
 800e76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e76e:	095b      	lsrs	r3, r3, #5
 800e770:	2001      	movs	r0, #1
 800e772:	fa00 f202 	lsl.w	r2, r0, r2
 800e776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e77a:	bf00      	nop
 800e77c:	370c      	adds	r7, #12
 800e77e:	46bd      	mov	sp, r7
 800e780:	bc80      	pop	{r7}
 800e782:	4770      	bx	lr
 800e784:	e000e100 	.word	0xe000e100

0800e788 <__NVIC_SetPriority>:
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	6039      	str	r1, [r7, #0]
 800e792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	db0a      	blt.n	800e7b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	490c      	ldr	r1, [pc, #48]	; (800e7d4 <__NVIC_SetPriority+0x4c>)
 800e7a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7a6:	0112      	lsls	r2, r2, #4
 800e7a8:	b2d2      	uxtb	r2, r2
 800e7aa:	440b      	add	r3, r1
 800e7ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7b0:	e00a      	b.n	800e7c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	b2da      	uxtb	r2, r3
 800e7b6:	4908      	ldr	r1, [pc, #32]	; (800e7d8 <__NVIC_SetPriority+0x50>)
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	f003 030f 	and.w	r3, r3, #15
 800e7be:	3b04      	subs	r3, #4
 800e7c0:	0112      	lsls	r2, r2, #4
 800e7c2:	b2d2      	uxtb	r2, r2
 800e7c4:	440b      	add	r3, r1
 800e7c6:	761a      	strb	r2, [r3, #24]
}
 800e7c8:	bf00      	nop
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bc80      	pop	{r7}
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	e000e100 	.word	0xe000e100
 800e7d8:	e000ed00 	.word	0xe000ed00

0800e7dc <NVIC_EncodePriority>:
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b089      	sub	sp, #36	; 0x24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f003 0307 	and.w	r3, r3, #7
 800e7ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	f1c3 0307 	rsb	r3, r3, #7
 800e7f6:	2b04      	cmp	r3, #4
 800e7f8:	bf28      	it	cs
 800e7fa:	2304      	movcs	r3, #4
 800e7fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	3304      	adds	r3, #4
 800e802:	2b06      	cmp	r3, #6
 800e804:	d902      	bls.n	800e80c <NVIC_EncodePriority+0x30>
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	3b03      	subs	r3, #3
 800e80a:	e000      	b.n	800e80e <NVIC_EncodePriority+0x32>
 800e80c:	2300      	movs	r3, #0
 800e80e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e810:	f04f 32ff 	mov.w	r2, #4294967295
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	fa02 f303 	lsl.w	r3, r2, r3
 800e81a:	43da      	mvns	r2, r3
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	401a      	ands	r2, r3
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e824:	f04f 31ff 	mov.w	r1, #4294967295
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	fa01 f303 	lsl.w	r3, r1, r3
 800e82e:	43d9      	mvns	r1, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e834:	4313      	orrs	r3, r2
}
 800e836:	4618      	mov	r0, r3
 800e838:	3724      	adds	r7, #36	; 0x24
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bc80      	pop	{r7}
 800e83e:	4770      	bx	lr

0800e840 <__NVIC_SystemReset>:
{
 800e840:	b480      	push	{r7}
 800e842:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e844:	f3bf 8f4f 	dsb	sy
}
 800e848:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e84a:	4b06      	ldr	r3, [pc, #24]	; (800e864 <__NVIC_SystemReset+0x24>)
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e852:	4904      	ldr	r1, [pc, #16]	; (800e864 <__NVIC_SystemReset+0x24>)
 800e854:	4b04      	ldr	r3, [pc, #16]	; (800e868 <__NVIC_SystemReset+0x28>)
 800e856:	4313      	orrs	r3, r2
 800e858:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e85a:	f3bf 8f4f 	dsb	sy
}
 800e85e:	bf00      	nop
    __NOP();
 800e860:	bf00      	nop
 800e862:	e7fd      	b.n	800e860 <__NVIC_SystemReset+0x20>
 800e864:	e000ed00 	.word	0xe000ed00
 800e868:	05fa0004 	.word	0x05fa0004

0800e86c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	3b01      	subs	r3, #1
 800e878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e87c:	d301      	bcc.n	800e882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e87e:	2301      	movs	r3, #1
 800e880:	e00f      	b.n	800e8a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e882:	4a0a      	ldr	r2, [pc, #40]	; (800e8ac <SysTick_Config+0x40>)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	3b01      	subs	r3, #1
 800e888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e88a:	210f      	movs	r1, #15
 800e88c:	f04f 30ff 	mov.w	r0, #4294967295
 800e890:	f7ff ff7a 	bl	800e788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e894:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <SysTick_Config+0x40>)
 800e896:	2200      	movs	r2, #0
 800e898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e89a:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <SysTick_Config+0x40>)
 800e89c:	2207      	movs	r2, #7
 800e89e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	e000e010 	.word	0xe000e010

0800e8b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ff17 	bl	800e6ec <__NVIC_SetPriorityGrouping>
}
 800e8be:	bf00      	nop
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b086      	sub	sp, #24
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	60b9      	str	r1, [r7, #8]
 800e8d0:	607a      	str	r2, [r7, #4]
 800e8d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e8d8:	f7ff ff2c 	bl	800e734 <__NVIC_GetPriorityGrouping>
 800e8dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	6978      	ldr	r0, [r7, #20]
 800e8e4:	f7ff ff7a 	bl	800e7dc <NVIC_EncodePriority>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ee:	4611      	mov	r1, r2
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7ff ff49 	bl	800e788 <__NVIC_SetPriority>
}
 800e8f6:	bf00      	nop
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b082      	sub	sp, #8
 800e902:	af00      	add	r7, sp, #0
 800e904:	4603      	mov	r3, r0
 800e906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7ff ff1f 	bl	800e750 <__NVIC_EnableIRQ>
}
 800e912:	bf00      	nop
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800e91e:	f7ff ff8f 	bl	800e840 <__NVIC_SystemReset>

0800e922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b082      	sub	sp, #8
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff ff9e 	bl	800e86c <SysTick_Config>
 800e930:	4603      	mov	r3, r0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b085      	sub	sp, #20
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e942:	2300      	movs	r3, #0
 800e944:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d008      	beq.n	800e962 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2204      	movs	r2, #4
 800e954:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800e95e:	2301      	movs	r3, #1
 800e960:	e020      	b.n	800e9a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f022 020e 	bic.w	r2, r2, #14
 800e970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f022 0201 	bic.w	r2, r2, #1
 800e980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e98a:	2101      	movs	r1, #1
 800e98c:	fa01 f202 	lsl.w	r2, r1, r2
 800e990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2201      	movs	r2, #1
 800e996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bc80      	pop	{r7}
 800e9ac:	4770      	bx	lr
	...

0800e9b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d005      	beq.n	800e9d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2204      	movs	r2, #4
 800e9ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	73fb      	strb	r3, [r7, #15]
 800e9d0:	e051      	b.n	800ea76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f022 020e 	bic.w	r2, r2, #14
 800e9e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f022 0201 	bic.w	r2, r2, #1
 800e9f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a22      	ldr	r2, [pc, #136]	; (800ea80 <HAL_DMA_Abort_IT+0xd0>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d029      	beq.n	800ea50 <HAL_DMA_Abort_IT+0xa0>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a20      	ldr	r2, [pc, #128]	; (800ea84 <HAL_DMA_Abort_IT+0xd4>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d022      	beq.n	800ea4c <HAL_DMA_Abort_IT+0x9c>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a1f      	ldr	r2, [pc, #124]	; (800ea88 <HAL_DMA_Abort_IT+0xd8>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d01a      	beq.n	800ea46 <HAL_DMA_Abort_IT+0x96>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a1d      	ldr	r2, [pc, #116]	; (800ea8c <HAL_DMA_Abort_IT+0xdc>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d012      	beq.n	800ea40 <HAL_DMA_Abort_IT+0x90>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a1c      	ldr	r2, [pc, #112]	; (800ea90 <HAL_DMA_Abort_IT+0xe0>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d00a      	beq.n	800ea3a <HAL_DMA_Abort_IT+0x8a>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a1a      	ldr	r2, [pc, #104]	; (800ea94 <HAL_DMA_Abort_IT+0xe4>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d102      	bne.n	800ea34 <HAL_DMA_Abort_IT+0x84>
 800ea2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ea32:	e00e      	b.n	800ea52 <HAL_DMA_Abort_IT+0xa2>
 800ea34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea38:	e00b      	b.n	800ea52 <HAL_DMA_Abort_IT+0xa2>
 800ea3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ea3e:	e008      	b.n	800ea52 <HAL_DMA_Abort_IT+0xa2>
 800ea40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea44:	e005      	b.n	800ea52 <HAL_DMA_Abort_IT+0xa2>
 800ea46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea4a:	e002      	b.n	800ea52 <HAL_DMA_Abort_IT+0xa2>
 800ea4c:	2310      	movs	r3, #16
 800ea4e:	e000      	b.n	800ea52 <HAL_DMA_Abort_IT+0xa2>
 800ea50:	2301      	movs	r3, #1
 800ea52:	4a11      	ldr	r2, [pc, #68]	; (800ea98 <HAL_DMA_Abort_IT+0xe8>)
 800ea54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d003      	beq.n	800ea76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	4798      	blx	r3
    } 
  }
  return status;
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	40020008 	.word	0x40020008
 800ea84:	4002001c 	.word	0x4002001c
 800ea88:	40020030 	.word	0x40020030
 800ea8c:	40020044 	.word	0x40020044
 800ea90:	40020058 	.word	0x40020058
 800ea94:	4002006c 	.word	0x4002006c
 800ea98:	40020000 	.word	0x40020000

0800ea9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b08b      	sub	sp, #44	; 0x2c
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800eaae:	e169      	b.n	800ed84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800eab0:	2201      	movs	r2, #1
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	fa02 f303 	lsl.w	r3, r2, r3
 800eab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	69fa      	ldr	r2, [r7, #28]
 800eac0:	4013      	ands	r3, r2
 800eac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	f040 8158 	bne.w	800ed7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	4a9a      	ldr	r2, [pc, #616]	; (800ed3c <HAL_GPIO_Init+0x2a0>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d05e      	beq.n	800eb96 <HAL_GPIO_Init+0xfa>
 800ead8:	4a98      	ldr	r2, [pc, #608]	; (800ed3c <HAL_GPIO_Init+0x2a0>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d875      	bhi.n	800ebca <HAL_GPIO_Init+0x12e>
 800eade:	4a98      	ldr	r2, [pc, #608]	; (800ed40 <HAL_GPIO_Init+0x2a4>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d058      	beq.n	800eb96 <HAL_GPIO_Init+0xfa>
 800eae4:	4a96      	ldr	r2, [pc, #600]	; (800ed40 <HAL_GPIO_Init+0x2a4>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d86f      	bhi.n	800ebca <HAL_GPIO_Init+0x12e>
 800eaea:	4a96      	ldr	r2, [pc, #600]	; (800ed44 <HAL_GPIO_Init+0x2a8>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d052      	beq.n	800eb96 <HAL_GPIO_Init+0xfa>
 800eaf0:	4a94      	ldr	r2, [pc, #592]	; (800ed44 <HAL_GPIO_Init+0x2a8>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d869      	bhi.n	800ebca <HAL_GPIO_Init+0x12e>
 800eaf6:	4a94      	ldr	r2, [pc, #592]	; (800ed48 <HAL_GPIO_Init+0x2ac>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d04c      	beq.n	800eb96 <HAL_GPIO_Init+0xfa>
 800eafc:	4a92      	ldr	r2, [pc, #584]	; (800ed48 <HAL_GPIO_Init+0x2ac>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d863      	bhi.n	800ebca <HAL_GPIO_Init+0x12e>
 800eb02:	4a92      	ldr	r2, [pc, #584]	; (800ed4c <HAL_GPIO_Init+0x2b0>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d046      	beq.n	800eb96 <HAL_GPIO_Init+0xfa>
 800eb08:	4a90      	ldr	r2, [pc, #576]	; (800ed4c <HAL_GPIO_Init+0x2b0>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d85d      	bhi.n	800ebca <HAL_GPIO_Init+0x12e>
 800eb0e:	2b12      	cmp	r3, #18
 800eb10:	d82a      	bhi.n	800eb68 <HAL_GPIO_Init+0xcc>
 800eb12:	2b12      	cmp	r3, #18
 800eb14:	d859      	bhi.n	800ebca <HAL_GPIO_Init+0x12e>
 800eb16:	a201      	add	r2, pc, #4	; (adr r2, 800eb1c <HAL_GPIO_Init+0x80>)
 800eb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb1c:	0800eb97 	.word	0x0800eb97
 800eb20:	0800eb71 	.word	0x0800eb71
 800eb24:	0800eb83 	.word	0x0800eb83
 800eb28:	0800ebc5 	.word	0x0800ebc5
 800eb2c:	0800ebcb 	.word	0x0800ebcb
 800eb30:	0800ebcb 	.word	0x0800ebcb
 800eb34:	0800ebcb 	.word	0x0800ebcb
 800eb38:	0800ebcb 	.word	0x0800ebcb
 800eb3c:	0800ebcb 	.word	0x0800ebcb
 800eb40:	0800ebcb 	.word	0x0800ebcb
 800eb44:	0800ebcb 	.word	0x0800ebcb
 800eb48:	0800ebcb 	.word	0x0800ebcb
 800eb4c:	0800ebcb 	.word	0x0800ebcb
 800eb50:	0800ebcb 	.word	0x0800ebcb
 800eb54:	0800ebcb 	.word	0x0800ebcb
 800eb58:	0800ebcb 	.word	0x0800ebcb
 800eb5c:	0800ebcb 	.word	0x0800ebcb
 800eb60:	0800eb79 	.word	0x0800eb79
 800eb64:	0800eb8d 	.word	0x0800eb8d
 800eb68:	4a79      	ldr	r2, [pc, #484]	; (800ed50 <HAL_GPIO_Init+0x2b4>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d013      	beq.n	800eb96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800eb6e:	e02c      	b.n	800ebca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	623b      	str	r3, [r7, #32]
          break;
 800eb76:	e029      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	623b      	str	r3, [r7, #32]
          break;
 800eb80:	e024      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	3308      	adds	r3, #8
 800eb88:	623b      	str	r3, [r7, #32]
          break;
 800eb8a:	e01f      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	330c      	adds	r3, #12
 800eb92:	623b      	str	r3, [r7, #32]
          break;
 800eb94:	e01a      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d102      	bne.n	800eba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800eb9e:	2304      	movs	r3, #4
 800eba0:	623b      	str	r3, [r7, #32]
          break;
 800eba2:	e013      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d105      	bne.n	800ebb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ebac:	2308      	movs	r3, #8
 800ebae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	69fa      	ldr	r2, [r7, #28]
 800ebb4:	611a      	str	r2, [r3, #16]
          break;
 800ebb6:	e009      	b.n	800ebcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ebb8:	2308      	movs	r3, #8
 800ebba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	69fa      	ldr	r2, [r7, #28]
 800ebc0:	615a      	str	r2, [r3, #20]
          break;
 800ebc2:	e003      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	623b      	str	r3, [r7, #32]
          break;
 800ebc8:	e000      	b.n	800ebcc <HAL_GPIO_Init+0x130>
          break;
 800ebca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	2bff      	cmp	r3, #255	; 0xff
 800ebd0:	d801      	bhi.n	800ebd6 <HAL_GPIO_Init+0x13a>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	e001      	b.n	800ebda <HAL_GPIO_Init+0x13e>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	2bff      	cmp	r3, #255	; 0xff
 800ebe0:	d802      	bhi.n	800ebe8 <HAL_GPIO_Init+0x14c>
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	e002      	b.n	800ebee <HAL_GPIO_Init+0x152>
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	3b08      	subs	r3, #8
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	210f      	movs	r1, #15
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	fa01 f303 	lsl.w	r3, r1, r3
 800ebfc:	43db      	mvns	r3, r3
 800ebfe:	401a      	ands	r2, r3
 800ec00:	6a39      	ldr	r1, [r7, #32]
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	fa01 f303 	lsl.w	r3, r1, r3
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f000 80b1 	beq.w	800ed7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800ec1c:	4b4d      	ldr	r3, [pc, #308]	; (800ed54 <HAL_GPIO_Init+0x2b8>)
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	4a4c      	ldr	r2, [pc, #304]	; (800ed54 <HAL_GPIO_Init+0x2b8>)
 800ec22:	f043 0301 	orr.w	r3, r3, #1
 800ec26:	6193      	str	r3, [r2, #24]
 800ec28:	4b4a      	ldr	r3, [pc, #296]	; (800ed54 <HAL_GPIO_Init+0x2b8>)
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	60bb      	str	r3, [r7, #8]
 800ec32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800ec34:	4a48      	ldr	r2, [pc, #288]	; (800ed58 <HAL_GPIO_Init+0x2bc>)
 800ec36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec38:	089b      	lsrs	r3, r3, #2
 800ec3a:	3302      	adds	r3, #2
 800ec3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800ec42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec44:	f003 0303 	and.w	r3, r3, #3
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	220f      	movs	r2, #15
 800ec4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec50:	43db      	mvns	r3, r3
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	4013      	ands	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a40      	ldr	r2, [pc, #256]	; (800ed5c <HAL_GPIO_Init+0x2c0>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d013      	beq.n	800ec88 <HAL_GPIO_Init+0x1ec>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a3f      	ldr	r2, [pc, #252]	; (800ed60 <HAL_GPIO_Init+0x2c4>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d00d      	beq.n	800ec84 <HAL_GPIO_Init+0x1e8>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a3e      	ldr	r2, [pc, #248]	; (800ed64 <HAL_GPIO_Init+0x2c8>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d007      	beq.n	800ec80 <HAL_GPIO_Init+0x1e4>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a3d      	ldr	r2, [pc, #244]	; (800ed68 <HAL_GPIO_Init+0x2cc>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d101      	bne.n	800ec7c <HAL_GPIO_Init+0x1e0>
 800ec78:	2303      	movs	r3, #3
 800ec7a:	e006      	b.n	800ec8a <HAL_GPIO_Init+0x1ee>
 800ec7c:	2304      	movs	r3, #4
 800ec7e:	e004      	b.n	800ec8a <HAL_GPIO_Init+0x1ee>
 800ec80:	2302      	movs	r3, #2
 800ec82:	e002      	b.n	800ec8a <HAL_GPIO_Init+0x1ee>
 800ec84:	2301      	movs	r3, #1
 800ec86:	e000      	b.n	800ec8a <HAL_GPIO_Init+0x1ee>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec8c:	f002 0203 	and.w	r2, r2, #3
 800ec90:	0092      	lsls	r2, r2, #2
 800ec92:	4093      	lsls	r3, r2
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800ec9a:	492f      	ldr	r1, [pc, #188]	; (800ed58 <HAL_GPIO_Init+0x2bc>)
 800ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9e:	089b      	lsrs	r3, r3, #2
 800eca0:	3302      	adds	r3, #2
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d006      	beq.n	800ecc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ecb4:	4b2d      	ldr	r3, [pc, #180]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	492c      	ldr	r1, [pc, #176]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	600b      	str	r3, [r1, #0]
 800ecc0:	e006      	b.n	800ecd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ecc2:	4b2a      	ldr	r3, [pc, #168]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	43db      	mvns	r3, r3
 800ecca:	4928      	ldr	r1, [pc, #160]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800eccc:	4013      	ands	r3, r2
 800ecce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d006      	beq.n	800ecea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ecdc:	4b23      	ldr	r3, [pc, #140]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	4922      	ldr	r1, [pc, #136]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	604b      	str	r3, [r1, #4]
 800ece8:	e006      	b.n	800ecf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ecea:	4b20      	ldr	r3, [pc, #128]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	43db      	mvns	r3, r3
 800ecf2:	491e      	ldr	r1, [pc, #120]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d006      	beq.n	800ed12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800ed04:	4b19      	ldr	r3, [pc, #100]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ed06:	689a      	ldr	r2, [r3, #8]
 800ed08:	4918      	ldr	r1, [pc, #96]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	608b      	str	r3, [r1, #8]
 800ed10:	e006      	b.n	800ed20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800ed12:	4b16      	ldr	r3, [pc, #88]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ed14:	689a      	ldr	r2, [r3, #8]
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	43db      	mvns	r3, r3
 800ed1a:	4914      	ldr	r1, [pc, #80]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d021      	beq.n	800ed70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800ed2c:	4b0f      	ldr	r3, [pc, #60]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	490e      	ldr	r1, [pc, #56]	; (800ed6c <HAL_GPIO_Init+0x2d0>)
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	60cb      	str	r3, [r1, #12]
 800ed38:	e021      	b.n	800ed7e <HAL_GPIO_Init+0x2e2>
 800ed3a:	bf00      	nop
 800ed3c:	10320000 	.word	0x10320000
 800ed40:	10310000 	.word	0x10310000
 800ed44:	10220000 	.word	0x10220000
 800ed48:	10210000 	.word	0x10210000
 800ed4c:	10120000 	.word	0x10120000
 800ed50:	10110000 	.word	0x10110000
 800ed54:	40021000 	.word	0x40021000
 800ed58:	40010000 	.word	0x40010000
 800ed5c:	40010800 	.word	0x40010800
 800ed60:	40010c00 	.word	0x40010c00
 800ed64:	40011000 	.word	0x40011000
 800ed68:	40011400 	.word	0x40011400
 800ed6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ed70:	4b0b      	ldr	r3, [pc, #44]	; (800eda0 <HAL_GPIO_Init+0x304>)
 800ed72:	68da      	ldr	r2, [r3, #12]
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	43db      	mvns	r3, r3
 800ed78:	4909      	ldr	r1, [pc, #36]	; (800eda0 <HAL_GPIO_Init+0x304>)
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800ed7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed80:	3301      	adds	r3, #1
 800ed82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f47f ae8e 	bne.w	800eab0 <HAL_GPIO_Init+0x14>
  }
}
 800ed94:	bf00      	nop
 800ed96:	bf00      	nop
 800ed98:	372c      	adds	r7, #44	; 0x2c
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bc80      	pop	{r7}
 800ed9e:	4770      	bx	lr
 800eda0:	40010400 	.word	0x40010400

0800eda4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	460b      	mov	r3, r1
 800edae:	807b      	strh	r3, [r7, #2]
 800edb0:	4613      	mov	r3, r2
 800edb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800edb4:	787b      	ldrb	r3, [r7, #1]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d003      	beq.n	800edc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800edba:	887a      	ldrh	r2, [r7, #2]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800edc0:	e003      	b.n	800edca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800edc2:	887b      	ldrh	r3, [r7, #2]
 800edc4:	041a      	lsls	r2, r3, #16
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	611a      	str	r2, [r3, #16]
}
 800edca:	bf00      	nop
 800edcc:	370c      	adds	r7, #12
 800edce:	46bd      	mov	sp, r7
 800edd0:	bc80      	pop	{r7}
 800edd2:	4770      	bx	lr

0800edd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ede6:	887a      	ldrh	r2, [r7, #2]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	4013      	ands	r3, r2
 800edec:	041a      	lsls	r2, r3, #16
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	43d9      	mvns	r1, r3
 800edf2:	887b      	ldrh	r3, [r7, #2]
 800edf4:	400b      	ands	r3, r1
 800edf6:	431a      	orrs	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	611a      	str	r2, [r3, #16]
}
 800edfc:	bf00      	nop
 800edfe:	3714      	adds	r7, #20
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bc80      	pop	{r7}
 800ee04:	4770      	bx	lr
	...

0800ee08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e12b      	b.n	800f072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7ff f9a2 	bl	800e178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2224      	movs	r2, #36	; 0x24
 800ee38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f022 0201 	bic.w	r2, r2, #1
 800ee4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ee6c:	f000 ffea 	bl	800fe44 <HAL_RCC_GetPCLK1Freq>
 800ee70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	4a81      	ldr	r2, [pc, #516]	; (800f07c <HAL_I2C_Init+0x274>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d807      	bhi.n	800ee8c <HAL_I2C_Init+0x84>
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4a80      	ldr	r2, [pc, #512]	; (800f080 <HAL_I2C_Init+0x278>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	bf94      	ite	ls
 800ee84:	2301      	movls	r3, #1
 800ee86:	2300      	movhi	r3, #0
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	e006      	b.n	800ee9a <HAL_I2C_Init+0x92>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4a7d      	ldr	r2, [pc, #500]	; (800f084 <HAL_I2C_Init+0x27c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	bf94      	ite	ls
 800ee94:	2301      	movls	r3, #1
 800ee96:	2300      	movhi	r3, #0
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e0e7      	b.n	800f072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4a78      	ldr	r2, [pc, #480]	; (800f088 <HAL_I2C_Init+0x280>)
 800eea6:	fba2 2303 	umull	r2, r3, r2, r3
 800eeaa:	0c9b      	lsrs	r3, r3, #18
 800eeac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	430a      	orrs	r2, r1
 800eec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	6a1b      	ldr	r3, [r3, #32]
 800eec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	4a6a      	ldr	r2, [pc, #424]	; (800f07c <HAL_I2C_Init+0x274>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d802      	bhi.n	800eedc <HAL_I2C_Init+0xd4>
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	3301      	adds	r3, #1
 800eeda:	e009      	b.n	800eef0 <HAL_I2C_Init+0xe8>
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800eee2:	fb02 f303 	mul.w	r3, r2, r3
 800eee6:	4a69      	ldr	r2, [pc, #420]	; (800f08c <HAL_I2C_Init+0x284>)
 800eee8:	fba2 2303 	umull	r2, r3, r2, r3
 800eeec:	099b      	lsrs	r3, r3, #6
 800eeee:	3301      	adds	r3, #1
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	6812      	ldr	r2, [r2, #0]
 800eef4:	430b      	orrs	r3, r1
 800eef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	69db      	ldr	r3, [r3, #28]
 800eefe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ef02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	495c      	ldr	r1, [pc, #368]	; (800f07c <HAL_I2C_Init+0x274>)
 800ef0c:	428b      	cmp	r3, r1
 800ef0e:	d819      	bhi.n	800ef44 <HAL_I2C_Init+0x13c>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	1e59      	subs	r1, r3, #1
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ef1e:	1c59      	adds	r1, r3, #1
 800ef20:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ef24:	400b      	ands	r3, r1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00a      	beq.n	800ef40 <HAL_I2C_Init+0x138>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	1e59      	subs	r1, r3, #1
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	fbb1 f3f3 	udiv	r3, r1, r3
 800ef38:	3301      	adds	r3, #1
 800ef3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef3e:	e051      	b.n	800efe4 <HAL_I2C_Init+0x1dc>
 800ef40:	2304      	movs	r3, #4
 800ef42:	e04f      	b.n	800efe4 <HAL_I2C_Init+0x1dc>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d111      	bne.n	800ef70 <HAL_I2C_Init+0x168>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	1e58      	subs	r0, r3, #1
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6859      	ldr	r1, [r3, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	440b      	add	r3, r1
 800ef5a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ef5e:	3301      	adds	r3, #1
 800ef60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	bf0c      	ite	eq
 800ef68:	2301      	moveq	r3, #1
 800ef6a:	2300      	movne	r3, #0
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	e012      	b.n	800ef96 <HAL_I2C_Init+0x18e>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	1e58      	subs	r0, r3, #1
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6859      	ldr	r1, [r3, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	440b      	add	r3, r1
 800ef7e:	0099      	lsls	r1, r3, #2
 800ef80:	440b      	add	r3, r1
 800ef82:	fbb0 f3f3 	udiv	r3, r0, r3
 800ef86:	3301      	adds	r3, #1
 800ef88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	bf0c      	ite	eq
 800ef90:	2301      	moveq	r3, #1
 800ef92:	2300      	movne	r3, #0
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <HAL_I2C_Init+0x196>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e022      	b.n	800efe4 <HAL_I2C_Init+0x1dc>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10e      	bne.n	800efc4 <HAL_I2C_Init+0x1bc>
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	1e58      	subs	r0, r3, #1
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6859      	ldr	r1, [r3, #4]
 800efae:	460b      	mov	r3, r1
 800efb0:	005b      	lsls	r3, r3, #1
 800efb2:	440b      	add	r3, r1
 800efb4:	fbb0 f3f3 	udiv	r3, r0, r3
 800efb8:	3301      	adds	r3, #1
 800efba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efc2:	e00f      	b.n	800efe4 <HAL_I2C_Init+0x1dc>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	1e58      	subs	r0, r3, #1
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6859      	ldr	r1, [r3, #4]
 800efcc:	460b      	mov	r3, r1
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	440b      	add	r3, r1
 800efd2:	0099      	lsls	r1, r3, #2
 800efd4:	440b      	add	r3, r1
 800efd6:	fbb0 f3f3 	udiv	r3, r0, r3
 800efda:	3301      	adds	r3, #1
 800efdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800efe4:	6879      	ldr	r1, [r7, #4]
 800efe6:	6809      	ldr	r1, [r1, #0]
 800efe8:	4313      	orrs	r3, r2
 800efea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	69da      	ldr	r2, [r3, #28]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6a1b      	ldr	r3, [r3, #32]
 800effe:	431a      	orrs	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	430a      	orrs	r2, r1
 800f006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800f012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	6911      	ldr	r1, [r2, #16]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	68d2      	ldr	r2, [r2, #12]
 800f01e:	4311      	orrs	r1, r2
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	6812      	ldr	r2, [r2, #0]
 800f024:	430b      	orrs	r3, r1
 800f026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	695a      	ldr	r2, [r3, #20]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	431a      	orrs	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	430a      	orrs	r2, r1
 800f042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f042 0201 	orr.w	r2, r2, #1
 800f052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2220      	movs	r2, #32
 800f05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	000186a0 	.word	0x000186a0
 800f080:	001e847f 	.word	0x001e847f
 800f084:	003d08ff 	.word	0x003d08ff
 800f088:	431bde83 	.word	0x431bde83
 800f08c:	10624dd3 	.word	0x10624dd3

0800f090 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b088      	sub	sp, #32
 800f094:	af02      	add	r7, sp, #8
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	607a      	str	r2, [r7, #4]
 800f09a:	461a      	mov	r2, r3
 800f09c:	460b      	mov	r3, r1
 800f09e:	817b      	strh	r3, [r7, #10]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f0a4:	f7ff faf4 	bl	800e690 <HAL_GetTick>
 800f0a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	2b20      	cmp	r3, #32
 800f0b4:	f040 80e0 	bne.w	800f278 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	2319      	movs	r3, #25
 800f0be:	2201      	movs	r2, #1
 800f0c0:	4970      	ldr	r1, [pc, #448]	; (800f284 <HAL_I2C_Master_Transmit+0x1f4>)
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f000 f964 	bl	800f390 <I2C_WaitOnFlagUntilTimeout>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	e0d3      	b.n	800f27a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d101      	bne.n	800f0e0 <HAL_I2C_Master_Transmit+0x50>
 800f0dc:	2302      	movs	r3, #2
 800f0de:	e0cc      	b.n	800f27a <HAL_I2C_Master_Transmit+0x1ea>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d007      	beq.n	800f106 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f042 0201 	orr.w	r2, r2, #1
 800f104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2221      	movs	r2, #33	; 0x21
 800f11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2210      	movs	r2, #16
 800f122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	893a      	ldrh	r2, [r7, #8]
 800f136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	4a50      	ldr	r2, [pc, #320]	; (800f288 <HAL_I2C_Master_Transmit+0x1f8>)
 800f146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f148:	8979      	ldrh	r1, [r7, #10]
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	6a3a      	ldr	r2, [r7, #32]
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f000 f89c 	bl	800f28c <I2C_MasterRequestWrite>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e08d      	b.n	800f27a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f15e:	2300      	movs	r3, #0
 800f160:	613b      	str	r3, [r7, #16]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	613b      	str	r3, [r7, #16]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	613b      	str	r3, [r7, #16]
 800f172:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f174:	e066      	b.n	800f244 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	6a39      	ldr	r1, [r7, #32]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f000 f9de 	bl	800f53c <I2C_WaitOnTXEFlagUntilTimeout>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00d      	beq.n	800f1a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	d107      	bne.n	800f19e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f19c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e06b      	b.n	800f27a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a6:	781a      	ldrb	r2, [r3, #0]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	2b04      	cmp	r3, #4
 800f1de:	d11b      	bne.n	800f218 <HAL_I2C_Master_Transmit+0x188>
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d017      	beq.n	800f218 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ec:	781a      	ldrb	r2, [r3, #0]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f8:	1c5a      	adds	r2, r3, #1
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f202:	b29b      	uxth	r3, r3
 800f204:	3b01      	subs	r3, #1
 800f206:	b29a      	uxth	r2, r3
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f210:	3b01      	subs	r3, #1
 800f212:	b29a      	uxth	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f218:	697a      	ldr	r2, [r7, #20]
 800f21a:	6a39      	ldr	r1, [r7, #32]
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f9ce 	bl	800f5be <I2C_WaitOnBTFFlagUntilTimeout>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00d      	beq.n	800f244 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f22c:	2b04      	cmp	r3, #4
 800f22e:	d107      	bne.n	800f240 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f23e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	e01a      	b.n	800f27a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d194      	bne.n	800f176 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f25a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2220      	movs	r2, #32
 800f260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	e000      	b.n	800f27a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f278:	2302      	movs	r3, #2
  }
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3718      	adds	r7, #24
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	00100002 	.word	0x00100002
 800f288:	ffff0000 	.word	0xffff0000

0800f28c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af02      	add	r7, sp, #8
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	607a      	str	r2, [r7, #4]
 800f296:	603b      	str	r3, [r7, #0]
 800f298:	460b      	mov	r3, r1
 800f29a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	2b08      	cmp	r3, #8
 800f2a6:	d006      	beq.n	800f2b6 <I2C_MasterRequestWrite+0x2a>
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d003      	beq.n	800f2b6 <I2C_MasterRequestWrite+0x2a>
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f2b4:	d108      	bne.n	800f2c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	e00b      	b.n	800f2e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2cc:	2b12      	cmp	r3, #18
 800f2ce:	d107      	bne.n	800f2e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 f84f 	bl	800f390 <I2C_WaitOnFlagUntilTimeout>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00d      	beq.n	800f314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f306:	d103      	bne.n	800f310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f30e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f310:	2303      	movs	r3, #3
 800f312:	e035      	b.n	800f380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	691b      	ldr	r3, [r3, #16]
 800f318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f31c:	d108      	bne.n	800f330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f31e:	897b      	ldrh	r3, [r7, #10]
 800f320:	b2db      	uxtb	r3, r3
 800f322:	461a      	mov	r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f32c:	611a      	str	r2, [r3, #16]
 800f32e:	e01b      	b.n	800f368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f330:	897b      	ldrh	r3, [r7, #10]
 800f332:	11db      	asrs	r3, r3, #7
 800f334:	b2db      	uxtb	r3, r3
 800f336:	f003 0306 	and.w	r3, r3, #6
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	f063 030f 	orn	r3, r3, #15
 800f340:	b2da      	uxtb	r2, r3
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	490e      	ldr	r1, [pc, #56]	; (800f388 <I2C_MasterRequestWrite+0xfc>)
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f000 f875 	bl	800f43e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e010      	b.n	800f380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f35e:	897b      	ldrh	r3, [r7, #10]
 800f360:	b2da      	uxtb	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	4907      	ldr	r1, [pc, #28]	; (800f38c <I2C_MasterRequestWrite+0x100>)
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f000 f865 	bl	800f43e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	e000      	b.n	800f380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800f37e:	2300      	movs	r3, #0
}
 800f380:	4618      	mov	r0, r3
 800f382:	3718      	adds	r7, #24
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	00010008 	.word	0x00010008
 800f38c:	00010002 	.word	0x00010002

0800f390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	603b      	str	r3, [r7, #0]
 800f39c:	4613      	mov	r3, r2
 800f39e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f3a0:	e025      	b.n	800f3ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a8:	d021      	beq.n	800f3ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3aa:	f7ff f971 	bl	800e690 <HAL_GetTick>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	683a      	ldr	r2, [r7, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d302      	bcc.n	800f3c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d116      	bne.n	800f3ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2220      	movs	r2, #32
 800f3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3da:	f043 0220 	orr.w	r2, r3, #32
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e023      	b.n	800f436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	0c1b      	lsrs	r3, r3, #16
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d10d      	bne.n	800f414 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	695b      	ldr	r3, [r3, #20]
 800f3fe:	43da      	mvns	r2, r3
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	4013      	ands	r3, r2
 800f404:	b29b      	uxth	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	bf0c      	ite	eq
 800f40a:	2301      	moveq	r3, #1
 800f40c:	2300      	movne	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	461a      	mov	r2, r3
 800f412:	e00c      	b.n	800f42e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	43da      	mvns	r2, r3
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	4013      	ands	r3, r2
 800f420:	b29b      	uxth	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	bf0c      	ite	eq
 800f426:	2301      	moveq	r3, #1
 800f428:	2300      	movne	r3, #0
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	461a      	mov	r2, r3
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	429a      	cmp	r2, r3
 800f432:	d0b6      	beq.n	800f3a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	60f8      	str	r0, [r7, #12]
 800f446:	60b9      	str	r1, [r7, #8]
 800f448:	607a      	str	r2, [r7, #4]
 800f44a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f44c:	e051      	b.n	800f4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	695b      	ldr	r3, [r3, #20]
 800f454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f45c:	d123      	bne.n	800f4a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f46c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2200      	movs	r2, #0
 800f47c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2220      	movs	r2, #32
 800f482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f492:	f043 0204 	orr.w	r2, r3, #4
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e046      	b.n	800f534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ac:	d021      	beq.n	800f4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4ae:	f7ff f8ef 	bl	800e690 <HAL_GetTick>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d302      	bcc.n	800f4c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d116      	bne.n	800f4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2220      	movs	r2, #32
 800f4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4de:	f043 0220 	orr.w	r2, r3, #32
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e020      	b.n	800f534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	0c1b      	lsrs	r3, r3, #16
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d10c      	bne.n	800f516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	43da      	mvns	r2, r3
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	4013      	ands	r3, r2
 800f508:	b29b      	uxth	r3, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	bf14      	ite	ne
 800f50e:	2301      	movne	r3, #1
 800f510:	2300      	moveq	r3, #0
 800f512:	b2db      	uxtb	r3, r3
 800f514:	e00b      	b.n	800f52e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	43da      	mvns	r2, r3
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	4013      	ands	r3, r2
 800f522:	b29b      	uxth	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	bf14      	ite	ne
 800f528:	2301      	movne	r3, #1
 800f52a:	2300      	moveq	r3, #0
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d18d      	bne.n	800f44e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f548:	e02d      	b.n	800f5a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f000 f878 	bl	800f640 <I2C_IsAcknowledgeFailed>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f556:	2301      	movs	r3, #1
 800f558:	e02d      	b.n	800f5b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f560:	d021      	beq.n	800f5a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f562:	f7ff f895 	bl	800e690 <HAL_GetTick>
 800f566:	4602      	mov	r2, r0
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d302      	bcc.n	800f578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d116      	bne.n	800f5a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2220      	movs	r2, #32
 800f582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f592:	f043 0220 	orr.w	r2, r3, #32
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e007      	b.n	800f5b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5b0:	2b80      	cmp	r3, #128	; 0x80
 800f5b2:	d1ca      	bne.n	800f54a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b084      	sub	sp, #16
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	60b9      	str	r1, [r7, #8]
 800f5c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f5ca:	e02d      	b.n	800f628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f000 f837 	bl	800f640 <I2C_IsAcknowledgeFailed>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d001      	beq.n	800f5dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e02d      	b.n	800f638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e2:	d021      	beq.n	800f628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5e4:	f7ff f854 	bl	800e690 <HAL_GetTick>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d302      	bcc.n	800f5fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d116      	bne.n	800f628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2220      	movs	r2, #32
 800f604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f614:	f043 0220 	orr.w	r2, r3, #32
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f624:	2301      	movs	r3, #1
 800f626:	e007      	b.n	800f638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	f003 0304 	and.w	r3, r3, #4
 800f632:	2b04      	cmp	r3, #4
 800f634:	d1ca      	bne.n	800f5cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	695b      	ldr	r3, [r3, #20]
 800f64e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f656:	d11b      	bne.n	800f690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2220      	movs	r2, #32
 800f66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67c:	f043 0204 	orr.w	r2, r3, #4
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f68c:	2301      	movs	r3, #1
 800f68e:	e000      	b.n	800f692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	370c      	adds	r7, #12
 800f696:	46bd      	mov	sp, r7
 800f698:	bc80      	pop	{r7}
 800f69a:	4770      	bx	lr

0800f69c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b086      	sub	sp, #24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e272      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 8087 	beq.w	800f7ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f6bc:	4b92      	ldr	r3, [pc, #584]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	f003 030c 	and.w	r3, r3, #12
 800f6c4:	2b04      	cmp	r3, #4
 800f6c6:	d00c      	beq.n	800f6e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800f6c8:	4b8f      	ldr	r3, [pc, #572]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	f003 030c 	and.w	r3, r3, #12
 800f6d0:	2b08      	cmp	r3, #8
 800f6d2:	d112      	bne.n	800f6fa <HAL_RCC_OscConfig+0x5e>
 800f6d4:	4b8c      	ldr	r3, [pc, #560]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f6dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6e0:	d10b      	bne.n	800f6fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f6e2:	4b89      	ldr	r3, [pc, #548]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d06c      	beq.n	800f7c8 <HAL_RCC_OscConfig+0x12c>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d168      	bne.n	800f7c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e24c      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f702:	d106      	bne.n	800f712 <HAL_RCC_OscConfig+0x76>
 800f704:	4b80      	ldr	r3, [pc, #512]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a7f      	ldr	r2, [pc, #508]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f70e:	6013      	str	r3, [r2, #0]
 800f710:	e02e      	b.n	800f770 <HAL_RCC_OscConfig+0xd4>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10c      	bne.n	800f734 <HAL_RCC_OscConfig+0x98>
 800f71a:	4b7b      	ldr	r3, [pc, #492]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a7a      	ldr	r2, [pc, #488]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f724:	6013      	str	r3, [r2, #0]
 800f726:	4b78      	ldr	r3, [pc, #480]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a77      	ldr	r2, [pc, #476]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f72c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f730:	6013      	str	r3, [r2, #0]
 800f732:	e01d      	b.n	800f770 <HAL_RCC_OscConfig+0xd4>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f73c:	d10c      	bne.n	800f758 <HAL_RCC_OscConfig+0xbc>
 800f73e:	4b72      	ldr	r3, [pc, #456]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a71      	ldr	r2, [pc, #452]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	4b6f      	ldr	r3, [pc, #444]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4a6e      	ldr	r2, [pc, #440]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f754:	6013      	str	r3, [r2, #0]
 800f756:	e00b      	b.n	800f770 <HAL_RCC_OscConfig+0xd4>
 800f758:	4b6b      	ldr	r3, [pc, #428]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a6a      	ldr	r2, [pc, #424]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f75e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f762:	6013      	str	r3, [r2, #0]
 800f764:	4b68      	ldr	r3, [pc, #416]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a67      	ldr	r2, [pc, #412]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f76a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f76e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d013      	beq.n	800f7a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f778:	f7fe ff8a 	bl	800e690 <HAL_GetTick>
 800f77c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f77e:	e008      	b.n	800f792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f780:	f7fe ff86 	bl	800e690 <HAL_GetTick>
 800f784:	4602      	mov	r2, r0
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	2b64      	cmp	r3, #100	; 0x64
 800f78c:	d901      	bls.n	800f792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800f78e:	2303      	movs	r3, #3
 800f790:	e200      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f792:	4b5d      	ldr	r3, [pc, #372]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0f0      	beq.n	800f780 <HAL_RCC_OscConfig+0xe4>
 800f79e:	e014      	b.n	800f7ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f7a0:	f7fe ff76 	bl	800e690 <HAL_GetTick>
 800f7a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f7a6:	e008      	b.n	800f7ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7a8:	f7fe ff72 	bl	800e690 <HAL_GetTick>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	2b64      	cmp	r3, #100	; 0x64
 800f7b4:	d901      	bls.n	800f7ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800f7b6:	2303      	movs	r3, #3
 800f7b8:	e1ec      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f7ba:	4b53      	ldr	r3, [pc, #332]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1f0      	bne.n	800f7a8 <HAL_RCC_OscConfig+0x10c>
 800f7c6:	e000      	b.n	800f7ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f003 0302 	and.w	r3, r3, #2
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d063      	beq.n	800f89e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f7d6:	4b4c      	ldr	r3, [pc, #304]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f003 030c 	and.w	r3, r3, #12
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00b      	beq.n	800f7fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800f7e2:	4b49      	ldr	r3, [pc, #292]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	f003 030c 	and.w	r3, r3, #12
 800f7ea:	2b08      	cmp	r3, #8
 800f7ec:	d11c      	bne.n	800f828 <HAL_RCC_OscConfig+0x18c>
 800f7ee:	4b46      	ldr	r3, [pc, #280]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d116      	bne.n	800f828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f7fa:	4b43      	ldr	r3, [pc, #268]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0302 	and.w	r3, r3, #2
 800f802:	2b00      	cmp	r3, #0
 800f804:	d005      	beq.n	800f812 <HAL_RCC_OscConfig+0x176>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d001      	beq.n	800f812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800f80e:	2301      	movs	r3, #1
 800f810:	e1c0      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f812:	4b3d      	ldr	r3, [pc, #244]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	4939      	ldr	r1, [pc, #228]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f822:	4313      	orrs	r3, r2
 800f824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f826:	e03a      	b.n	800f89e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	691b      	ldr	r3, [r3, #16]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d020      	beq.n	800f872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f830:	4b36      	ldr	r3, [pc, #216]	; (800f90c <HAL_RCC_OscConfig+0x270>)
 800f832:	2201      	movs	r2, #1
 800f834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f836:	f7fe ff2b 	bl	800e690 <HAL_GetTick>
 800f83a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f83c:	e008      	b.n	800f850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f83e:	f7fe ff27 	bl	800e690 <HAL_GetTick>
 800f842:	4602      	mov	r2, r0
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d901      	bls.n	800f850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800f84c:	2303      	movs	r3, #3
 800f84e:	e1a1      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f850:	4b2d      	ldr	r3, [pc, #180]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f003 0302 	and.w	r3, r3, #2
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d0f0      	beq.n	800f83e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f85c:	4b2a      	ldr	r3, [pc, #168]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	695b      	ldr	r3, [r3, #20]
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	4927      	ldr	r1, [pc, #156]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f86c:	4313      	orrs	r3, r2
 800f86e:	600b      	str	r3, [r1, #0]
 800f870:	e015      	b.n	800f89e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f872:	4b26      	ldr	r3, [pc, #152]	; (800f90c <HAL_RCC_OscConfig+0x270>)
 800f874:	2200      	movs	r2, #0
 800f876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f878:	f7fe ff0a 	bl	800e690 <HAL_GetTick>
 800f87c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f87e:	e008      	b.n	800f892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f880:	f7fe ff06 	bl	800e690 <HAL_GetTick>
 800f884:	4602      	mov	r2, r0
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d901      	bls.n	800f892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800f88e:	2303      	movs	r3, #3
 800f890:	e180      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f892:	4b1d      	ldr	r3, [pc, #116]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f003 0302 	and.w	r3, r3, #2
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d1f0      	bne.n	800f880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f003 0308 	and.w	r3, r3, #8
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d03a      	beq.n	800f920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	699b      	ldr	r3, [r3, #24]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d019      	beq.n	800f8e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f8b2:	4b17      	ldr	r3, [pc, #92]	; (800f910 <HAL_RCC_OscConfig+0x274>)
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8b8:	f7fe feea 	bl	800e690 <HAL_GetTick>
 800f8bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f8be:	e008      	b.n	800f8d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8c0:	f7fe fee6 	bl	800e690 <HAL_GetTick>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d901      	bls.n	800f8d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	e160      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f8d2:	4b0d      	ldr	r3, [pc, #52]	; (800f908 <HAL_RCC_OscConfig+0x26c>)
 800f8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d6:	f003 0302 	and.w	r3, r3, #2
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0f0      	beq.n	800f8c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800f8de:	2001      	movs	r0, #1
 800f8e0:	f000 fad8 	bl	800fe94 <RCC_Delay>
 800f8e4:	e01c      	b.n	800f920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f8e6:	4b0a      	ldr	r3, [pc, #40]	; (800f910 <HAL_RCC_OscConfig+0x274>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8ec:	f7fe fed0 	bl	800e690 <HAL_GetTick>
 800f8f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f8f2:	e00f      	b.n	800f914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8f4:	f7fe fecc 	bl	800e690 <HAL_GetTick>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	2b02      	cmp	r3, #2
 800f900:	d908      	bls.n	800f914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800f902:	2303      	movs	r3, #3
 800f904:	e146      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
 800f906:	bf00      	nop
 800f908:	40021000 	.word	0x40021000
 800f90c:	42420000 	.word	0x42420000
 800f910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f914:	4b92      	ldr	r3, [pc, #584]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f918:	f003 0302 	and.w	r3, r3, #2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1e9      	bne.n	800f8f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f003 0304 	and.w	r3, r3, #4
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f000 80a6 	beq.w	800fa7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f92e:	2300      	movs	r3, #0
 800f930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f932:	4b8b      	ldr	r3, [pc, #556]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f934:	69db      	ldr	r3, [r3, #28]
 800f936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10d      	bne.n	800f95a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f93e:	4b88      	ldr	r3, [pc, #544]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	4a87      	ldr	r2, [pc, #540]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f948:	61d3      	str	r3, [r2, #28]
 800f94a:	4b85      	ldr	r3, [pc, #532]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f952:	60bb      	str	r3, [r7, #8]
 800f954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f956:	2301      	movs	r3, #1
 800f958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f95a:	4b82      	ldr	r3, [pc, #520]	; (800fb64 <HAL_RCC_OscConfig+0x4c8>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f962:	2b00      	cmp	r3, #0
 800f964:	d118      	bne.n	800f998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f966:	4b7f      	ldr	r3, [pc, #508]	; (800fb64 <HAL_RCC_OscConfig+0x4c8>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a7e      	ldr	r2, [pc, #504]	; (800fb64 <HAL_RCC_OscConfig+0x4c8>)
 800f96c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f972:	f7fe fe8d 	bl	800e690 <HAL_GetTick>
 800f976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f978:	e008      	b.n	800f98c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f97a:	f7fe fe89 	bl	800e690 <HAL_GetTick>
 800f97e:	4602      	mov	r2, r0
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	2b64      	cmp	r3, #100	; 0x64
 800f986:	d901      	bls.n	800f98c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800f988:	2303      	movs	r3, #3
 800f98a:	e103      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f98c:	4b75      	ldr	r3, [pc, #468]	; (800fb64 <HAL_RCC_OscConfig+0x4c8>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f994:	2b00      	cmp	r3, #0
 800f996:	d0f0      	beq.n	800f97a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d106      	bne.n	800f9ae <HAL_RCC_OscConfig+0x312>
 800f9a0:	4b6f      	ldr	r3, [pc, #444]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9a2:	6a1b      	ldr	r3, [r3, #32]
 800f9a4:	4a6e      	ldr	r2, [pc, #440]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9a6:	f043 0301 	orr.w	r3, r3, #1
 800f9aa:	6213      	str	r3, [r2, #32]
 800f9ac:	e02d      	b.n	800fa0a <HAL_RCC_OscConfig+0x36e>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10c      	bne.n	800f9d0 <HAL_RCC_OscConfig+0x334>
 800f9b6:	4b6a      	ldr	r3, [pc, #424]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	4a69      	ldr	r2, [pc, #420]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9bc:	f023 0301 	bic.w	r3, r3, #1
 800f9c0:	6213      	str	r3, [r2, #32]
 800f9c2:	4b67      	ldr	r3, [pc, #412]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9c4:	6a1b      	ldr	r3, [r3, #32]
 800f9c6:	4a66      	ldr	r2, [pc, #408]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9c8:	f023 0304 	bic.w	r3, r3, #4
 800f9cc:	6213      	str	r3, [r2, #32]
 800f9ce:	e01c      	b.n	800fa0a <HAL_RCC_OscConfig+0x36e>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	2b05      	cmp	r3, #5
 800f9d6:	d10c      	bne.n	800f9f2 <HAL_RCC_OscConfig+0x356>
 800f9d8:	4b61      	ldr	r3, [pc, #388]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9da:	6a1b      	ldr	r3, [r3, #32]
 800f9dc:	4a60      	ldr	r2, [pc, #384]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9de:	f043 0304 	orr.w	r3, r3, #4
 800f9e2:	6213      	str	r3, [r2, #32]
 800f9e4:	4b5e      	ldr	r3, [pc, #376]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9e6:	6a1b      	ldr	r3, [r3, #32]
 800f9e8:	4a5d      	ldr	r2, [pc, #372]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9ea:	f043 0301 	orr.w	r3, r3, #1
 800f9ee:	6213      	str	r3, [r2, #32]
 800f9f0:	e00b      	b.n	800fa0a <HAL_RCC_OscConfig+0x36e>
 800f9f2:	4b5b      	ldr	r3, [pc, #364]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	4a5a      	ldr	r2, [pc, #360]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800f9f8:	f023 0301 	bic.w	r3, r3, #1
 800f9fc:	6213      	str	r3, [r2, #32]
 800f9fe:	4b58      	ldr	r3, [pc, #352]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	4a57      	ldr	r2, [pc, #348]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa04:	f023 0304 	bic.w	r3, r3, #4
 800fa08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d015      	beq.n	800fa3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fa12:	f7fe fe3d 	bl	800e690 <HAL_GetTick>
 800fa16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa18:	e00a      	b.n	800fa30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa1a:	f7fe fe39 	bl	800e690 <HAL_GetTick>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d901      	bls.n	800fa30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e0b1      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa30:	4b4b      	ldr	r3, [pc, #300]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0ee      	beq.n	800fa1a <HAL_RCC_OscConfig+0x37e>
 800fa3c:	e014      	b.n	800fa68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fa3e:	f7fe fe27 	bl	800e690 <HAL_GetTick>
 800fa42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fa44:	e00a      	b.n	800fa5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa46:	f7fe fe23 	bl	800e690 <HAL_GetTick>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d901      	bls.n	800fa5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800fa58:	2303      	movs	r3, #3
 800fa5a:	e09b      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fa5c:	4b40      	ldr	r3, [pc, #256]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa5e:	6a1b      	ldr	r3, [r3, #32]
 800fa60:	f003 0302 	and.w	r3, r3, #2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d1ee      	bne.n	800fa46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d105      	bne.n	800fa7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fa6e:	4b3c      	ldr	r3, [pc, #240]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	4a3b      	ldr	r2, [pc, #236]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	69db      	ldr	r3, [r3, #28]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 8087 	beq.w	800fb92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fa84:	4b36      	ldr	r3, [pc, #216]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	f003 030c 	and.w	r3, r3, #12
 800fa8c:	2b08      	cmp	r3, #8
 800fa8e:	d061      	beq.n	800fb54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	69db      	ldr	r3, [r3, #28]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d146      	bne.n	800fb26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa98:	4b33      	ldr	r3, [pc, #204]	; (800fb68 <HAL_RCC_OscConfig+0x4cc>)
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa9e:	f7fe fdf7 	bl	800e690 <HAL_GetTick>
 800faa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800faa4:	e008      	b.n	800fab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800faa6:	f7fe fdf3 	bl	800e690 <HAL_GetTick>
 800faaa:	4602      	mov	r2, r0
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d901      	bls.n	800fab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800fab4:	2303      	movs	r3, #3
 800fab6:	e06d      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fab8:	4b29      	ldr	r3, [pc, #164]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1f0      	bne.n	800faa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a1b      	ldr	r3, [r3, #32]
 800fac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800facc:	d108      	bne.n	800fae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800face:	4b24      	ldr	r3, [pc, #144]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	4921      	ldr	r1, [pc, #132]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fadc:	4313      	orrs	r3, r2
 800fade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fae0:	4b1f      	ldr	r3, [pc, #124]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a19      	ldr	r1, [r3, #32]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf0:	430b      	orrs	r3, r1
 800faf2:	491b      	ldr	r1, [pc, #108]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800faf4:	4313      	orrs	r3, r2
 800faf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800faf8:	4b1b      	ldr	r3, [pc, #108]	; (800fb68 <HAL_RCC_OscConfig+0x4cc>)
 800fafa:	2201      	movs	r2, #1
 800fafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fafe:	f7fe fdc7 	bl	800e690 <HAL_GetTick>
 800fb02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800fb04:	e008      	b.n	800fb18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb06:	f7fe fdc3 	bl	800e690 <HAL_GetTick>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d901      	bls.n	800fb18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800fb14:	2303      	movs	r3, #3
 800fb16:	e03d      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800fb18:	4b11      	ldr	r3, [pc, #68]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d0f0      	beq.n	800fb06 <HAL_RCC_OscConfig+0x46a>
 800fb24:	e035      	b.n	800fb92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb26:	4b10      	ldr	r3, [pc, #64]	; (800fb68 <HAL_RCC_OscConfig+0x4cc>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb2c:	f7fe fdb0 	bl	800e690 <HAL_GetTick>
 800fb30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fb32:	e008      	b.n	800fb46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb34:	f7fe fdac 	bl	800e690 <HAL_GetTick>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	1ad3      	subs	r3, r2, r3
 800fb3e:	2b02      	cmp	r3, #2
 800fb40:	d901      	bls.n	800fb46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e026      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fb46:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <HAL_RCC_OscConfig+0x4c4>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1f0      	bne.n	800fb34 <HAL_RCC_OscConfig+0x498>
 800fb52:	e01e      	b.n	800fb92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	69db      	ldr	r3, [r3, #28]
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d107      	bne.n	800fb6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e019      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
 800fb60:	40021000 	.word	0x40021000
 800fb64:	40007000 	.word	0x40007000
 800fb68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800fb6c:	4b0b      	ldr	r3, [pc, #44]	; (800fb9c <HAL_RCC_OscConfig+0x500>)
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d106      	bne.n	800fb8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d001      	beq.n	800fb92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	e000      	b.n	800fb94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	40021000 	.word	0x40021000

0800fba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d101      	bne.n	800fbb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e0d0      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fbb4:	4b6a      	ldr	r3, [pc, #424]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f003 0307 	and.w	r3, r3, #7
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d910      	bls.n	800fbe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fbc2:	4b67      	ldr	r3, [pc, #412]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f023 0207 	bic.w	r2, r3, #7
 800fbca:	4965      	ldr	r1, [pc, #404]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fbd2:	4b63      	ldr	r3, [pc, #396]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f003 0307 	and.w	r3, r3, #7
 800fbda:	683a      	ldr	r2, [r7, #0]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d001      	beq.n	800fbe4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e0b8      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f003 0302 	and.w	r3, r3, #2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d020      	beq.n	800fc32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f003 0304 	and.w	r3, r3, #4
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d005      	beq.n	800fc08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fbfc:	4b59      	ldr	r3, [pc, #356]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	4a58      	ldr	r2, [pc, #352]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800fc06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f003 0308 	and.w	r3, r3, #8
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d005      	beq.n	800fc20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fc14:	4b53      	ldr	r3, [pc, #332]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	4a52      	ldr	r2, [pc, #328]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800fc1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fc20:	4b50      	ldr	r3, [pc, #320]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	689b      	ldr	r3, [r3, #8]
 800fc2c:	494d      	ldr	r1, [pc, #308]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d040      	beq.n	800fcc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d107      	bne.n	800fc56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc46:	4b47      	ldr	r3, [pc, #284]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d115      	bne.n	800fc7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fc52:	2301      	movs	r3, #1
 800fc54:	e07f      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	d107      	bne.n	800fc6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fc5e:	4b41      	ldr	r3, [pc, #260]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d109      	bne.n	800fc7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e073      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fc6e:	4b3d      	ldr	r3, [pc, #244]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f003 0302 	and.w	r3, r3, #2
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e06b      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fc7e:	4b39      	ldr	r3, [pc, #228]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	f023 0203 	bic.w	r2, r3, #3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	4936      	ldr	r1, [pc, #216]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fc90:	f7fe fcfe 	bl	800e690 <HAL_GetTick>
 800fc94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc96:	e00a      	b.n	800fcae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fc98:	f7fe fcfa 	bl	800e690 <HAL_GetTick>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d901      	bls.n	800fcae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fcaa:	2303      	movs	r3, #3
 800fcac:	e053      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fcae:	4b2d      	ldr	r3, [pc, #180]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	f003 020c 	and.w	r2, r3, #12
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d1eb      	bne.n	800fc98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fcc0:	4b27      	ldr	r3, [pc, #156]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f003 0307 	and.w	r3, r3, #7
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d210      	bcs.n	800fcf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fcce:	4b24      	ldr	r3, [pc, #144]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f023 0207 	bic.w	r2, r3, #7
 800fcd6:	4922      	ldr	r1, [pc, #136]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fcde:	4b20      	ldr	r3, [pc, #128]	; (800fd60 <HAL_RCC_ClockConfig+0x1c0>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f003 0307 	and.w	r3, r3, #7
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d001      	beq.n	800fcf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800fcec:	2301      	movs	r3, #1
 800fcee:	e032      	b.n	800fd56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f003 0304 	and.w	r3, r3, #4
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d008      	beq.n	800fd0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fcfc:	4b19      	ldr	r3, [pc, #100]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	4916      	ldr	r1, [pc, #88]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f003 0308 	and.w	r3, r3, #8
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d009      	beq.n	800fd2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800fd1a:	4b12      	ldr	r3, [pc, #72]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	00db      	lsls	r3, r3, #3
 800fd28:	490e      	ldr	r1, [pc, #56]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800fd2e:	f000 f821 	bl	800fd74 <HAL_RCC_GetSysClockFreq>
 800fd32:	4602      	mov	r2, r0
 800fd34:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <HAL_RCC_ClockConfig+0x1c4>)
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	091b      	lsrs	r3, r3, #4
 800fd3a:	f003 030f 	and.w	r3, r3, #15
 800fd3e:	490a      	ldr	r1, [pc, #40]	; (800fd68 <HAL_RCC_ClockConfig+0x1c8>)
 800fd40:	5ccb      	ldrb	r3, [r1, r3]
 800fd42:	fa22 f303 	lsr.w	r3, r2, r3
 800fd46:	4a09      	ldr	r2, [pc, #36]	; (800fd6c <HAL_RCC_ClockConfig+0x1cc>)
 800fd48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800fd4a:	4b09      	ldr	r3, [pc, #36]	; (800fd70 <HAL_RCC_ClockConfig+0x1d0>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fe fc5c 	bl	800e60c <HAL_InitTick>

  return HAL_OK;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3710      	adds	r7, #16
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	40022000 	.word	0x40022000
 800fd64:	40021000 	.word	0x40021000
 800fd68:	08011c30 	.word	0x08011c30
 800fd6c:	200000cc 	.word	0x200000cc
 800fd70:	200000d0 	.word	0x200000d0

0800fd74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fd74:	b490      	push	{r4, r7}
 800fd76:	b08a      	sub	sp, #40	; 0x28
 800fd78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800fd7a:	4b29      	ldr	r3, [pc, #164]	; (800fe20 <HAL_RCC_GetSysClockFreq+0xac>)
 800fd7c:	1d3c      	adds	r4, r7, #4
 800fd7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800fd84:	f240 2301 	movw	r3, #513	; 0x201
 800fd88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61fb      	str	r3, [r7, #28]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	61bb      	str	r3, [r7, #24]
 800fd92:	2300      	movs	r3, #0
 800fd94:	627b      	str	r3, [r7, #36]	; 0x24
 800fd96:	2300      	movs	r3, #0
 800fd98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800fd9e:	4b21      	ldr	r3, [pc, #132]	; (800fe24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	f003 030c 	and.w	r3, r3, #12
 800fdaa:	2b04      	cmp	r3, #4
 800fdac:	d002      	beq.n	800fdb4 <HAL_RCC_GetSysClockFreq+0x40>
 800fdae:	2b08      	cmp	r3, #8
 800fdb0:	d003      	beq.n	800fdba <HAL_RCC_GetSysClockFreq+0x46>
 800fdb2:	e02b      	b.n	800fe0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800fdb4:	4b1c      	ldr	r3, [pc, #112]	; (800fe28 <HAL_RCC_GetSysClockFreq+0xb4>)
 800fdb6:	623b      	str	r3, [r7, #32]
      break;
 800fdb8:	e02b      	b.n	800fe12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	0c9b      	lsrs	r3, r3, #18
 800fdbe:	f003 030f 	and.w	r3, r3, #15
 800fdc2:	3328      	adds	r3, #40	; 0x28
 800fdc4:	443b      	add	r3, r7
 800fdc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800fdca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d012      	beq.n	800fdfc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800fdd6:	4b13      	ldr	r3, [pc, #76]	; (800fe24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	0c5b      	lsrs	r3, r3, #17
 800fddc:	f003 0301 	and.w	r3, r3, #1
 800fde0:	3328      	adds	r3, #40	; 0x28
 800fde2:	443b      	add	r3, r7
 800fde4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800fde8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	4a0e      	ldr	r2, [pc, #56]	; (800fe28 <HAL_RCC_GetSysClockFreq+0xb4>)
 800fdee:	fb03 f202 	mul.w	r2, r3, r2
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdf8:	627b      	str	r3, [r7, #36]	; 0x24
 800fdfa:	e004      	b.n	800fe06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	4a0b      	ldr	r2, [pc, #44]	; (800fe2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800fe00:	fb02 f303 	mul.w	r3, r2, r3
 800fe04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe08:	623b      	str	r3, [r7, #32]
      break;
 800fe0a:	e002      	b.n	800fe12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800fe0c:	4b06      	ldr	r3, [pc, #24]	; (800fe28 <HAL_RCC_GetSysClockFreq+0xb4>)
 800fe0e:	623b      	str	r3, [r7, #32]
      break;
 800fe10:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fe12:	6a3b      	ldr	r3, [r7, #32]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3728      	adds	r7, #40	; 0x28
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bc90      	pop	{r4, r7}
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	08011c20 	.word	0x08011c20
 800fe24:	40021000 	.word	0x40021000
 800fe28:	007a1200 	.word	0x007a1200
 800fe2c:	003d0900 	.word	0x003d0900

0800fe30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe30:	b480      	push	{r7}
 800fe32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fe34:	4b02      	ldr	r3, [pc, #8]	; (800fe40 <HAL_RCC_GetHCLKFreq+0x10>)
 800fe36:	681b      	ldr	r3, [r3, #0]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bc80      	pop	{r7}
 800fe3e:	4770      	bx	lr
 800fe40:	200000cc 	.word	0x200000cc

0800fe44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800fe48:	f7ff fff2 	bl	800fe30 <HAL_RCC_GetHCLKFreq>
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	4b05      	ldr	r3, [pc, #20]	; (800fe64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	0a1b      	lsrs	r3, r3, #8
 800fe54:	f003 0307 	and.w	r3, r3, #7
 800fe58:	4903      	ldr	r1, [pc, #12]	; (800fe68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe5a:	5ccb      	ldrb	r3, [r1, r3]
 800fe5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	40021000 	.word	0x40021000
 800fe68:	08011c40 	.word	0x08011c40

0800fe6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800fe70:	f7ff ffde 	bl	800fe30 <HAL_RCC_GetHCLKFreq>
 800fe74:	4602      	mov	r2, r0
 800fe76:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	0adb      	lsrs	r3, r3, #11
 800fe7c:	f003 0307 	and.w	r3, r3, #7
 800fe80:	4903      	ldr	r1, [pc, #12]	; (800fe90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fe82:	5ccb      	ldrb	r3, [r1, r3]
 800fe84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	40021000 	.word	0x40021000
 800fe90:	08011c40 	.word	0x08011c40

0800fe94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800fe9c:	4b0a      	ldr	r3, [pc, #40]	; (800fec8 <RCC_Delay+0x34>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a0a      	ldr	r2, [pc, #40]	; (800fecc <RCC_Delay+0x38>)
 800fea2:	fba2 2303 	umull	r2, r3, r2, r3
 800fea6:	0a5b      	lsrs	r3, r3, #9
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	fb02 f303 	mul.w	r3, r2, r3
 800feae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800feb0:	bf00      	nop
  }
  while (Delay --);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	1e5a      	subs	r2, r3, #1
 800feb6:	60fa      	str	r2, [r7, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d1f9      	bne.n	800feb0 <RCC_Delay+0x1c>
}
 800febc:	bf00      	nop
 800febe:	bf00      	nop
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bc80      	pop	{r7}
 800fec6:	4770      	bx	lr
 800fec8:	200000cc 	.word	0x200000cc
 800fecc:	10624dd3 	.word	0x10624dd3

0800fed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	e076      	b.n	800ffd0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d108      	bne.n	800fefc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fef2:	d009      	beq.n	800ff08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	61da      	str	r2, [r3, #28]
 800fefa:	e005      	b.n	800ff08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d106      	bne.n	800ff28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7fe f966 	bl	800e1f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2202      	movs	r2, #2
 800ff2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ff50:	431a      	orrs	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	f003 0302 	and.w	r3, r3, #2
 800ff64:	431a      	orrs	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	695b      	ldr	r3, [r3, #20]
 800ff6a:	f003 0301 	and.w	r3, r3, #1
 800ff6e:	431a      	orrs	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ff78:	431a      	orrs	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	69db      	ldr	r3, [r3, #28]
 800ff7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff82:	431a      	orrs	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6a1b      	ldr	r3, [r3, #32]
 800ff88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff8c:	ea42 0103 	orr.w	r1, r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	699b      	ldr	r3, [r3, #24]
 800ffa4:	0c1a      	lsrs	r2, r3, #16
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f002 0204 	and.w	r2, r2, #4
 800ffae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	69da      	ldr	r2, [r3, #28]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ffbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b08c      	sub	sp, #48	; 0x30
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
 800ffe4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d101      	bne.n	800fffe <HAL_SPI_TransmitReceive+0x26>
 800fffa:	2302      	movs	r3, #2
 800fffc:	e18a      	b.n	8010314 <HAL_SPI_TransmitReceive+0x33c>
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010006:	f7fe fb43 	bl	800e690 <HAL_GetTick>
 801000a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801001c:	887b      	ldrh	r3, [r7, #2]
 801001e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010024:	2b01      	cmp	r3, #1
 8010026:	d00f      	beq.n	8010048 <HAL_SPI_TransmitReceive+0x70>
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801002e:	d107      	bne.n	8010040 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d103      	bne.n	8010040 <HAL_SPI_TransmitReceive+0x68>
 8010038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801003c:	2b04      	cmp	r3, #4
 801003e:	d003      	beq.n	8010048 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010040:	2302      	movs	r3, #2
 8010042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010046:	e15b      	b.n	8010300 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d005      	beq.n	801005a <HAL_SPI_TransmitReceive+0x82>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d002      	beq.n	801005a <HAL_SPI_TransmitReceive+0x82>
 8010054:	887b      	ldrh	r3, [r7, #2]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d103      	bne.n	8010062 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010060:	e14e      	b.n	8010300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010068:	b2db      	uxtb	r3, r3
 801006a:	2b04      	cmp	r3, #4
 801006c:	d003      	beq.n	8010076 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2205      	movs	r2, #5
 8010072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2200      	movs	r2, #0
 801007a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	887a      	ldrh	r2, [r7, #2]
 8010086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	887a      	ldrh	r2, [r7, #2]
 801008c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	68ba      	ldr	r2, [r7, #8]
 8010092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	887a      	ldrh	r2, [r7, #2]
 8010098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	887a      	ldrh	r2, [r7, #2]
 801009e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2200      	movs	r2, #0
 80100a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b6:	2b40      	cmp	r3, #64	; 0x40
 80100b8:	d007      	beq.n	80100ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100d2:	d178      	bne.n	80101c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <HAL_SPI_TransmitReceive+0x10a>
 80100dc:	8b7b      	ldrh	r3, [r7, #26]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d166      	bne.n	80101b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e6:	881a      	ldrh	r2, [r3, #0]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f2:	1c9a      	adds	r2, r3, #2
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	3b01      	subs	r3, #1
 8010100:	b29a      	uxth	r2, r3
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010106:	e053      	b.n	80101b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	f003 0302 	and.w	r3, r3, #2
 8010112:	2b02      	cmp	r3, #2
 8010114:	d11b      	bne.n	801014e <HAL_SPI_TransmitReceive+0x176>
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801011a:	b29b      	uxth	r3, r3
 801011c:	2b00      	cmp	r3, #0
 801011e:	d016      	beq.n	801014e <HAL_SPI_TransmitReceive+0x176>
 8010120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010122:	2b01      	cmp	r3, #1
 8010124:	d113      	bne.n	801014e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012a:	881a      	ldrh	r2, [r3, #0]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010136:	1c9a      	adds	r2, r3, #2
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010140:	b29b      	uxth	r3, r3
 8010142:	3b01      	subs	r3, #1
 8010144:	b29a      	uxth	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801014a:	2300      	movs	r3, #0
 801014c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	f003 0301 	and.w	r3, r3, #1
 8010158:	2b01      	cmp	r3, #1
 801015a:	d119      	bne.n	8010190 <HAL_SPI_TransmitReceive+0x1b8>
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010160:	b29b      	uxth	r3, r3
 8010162:	2b00      	cmp	r3, #0
 8010164:	d014      	beq.n	8010190 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68da      	ldr	r2, [r3, #12]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010170:	b292      	uxth	r2, r2
 8010172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010178:	1c9a      	adds	r2, r3, #2
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010182:	b29b      	uxth	r3, r3
 8010184:	3b01      	subs	r3, #1
 8010186:	b29a      	uxth	r2, r3
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801018c:	2301      	movs	r3, #1
 801018e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010190:	f7fe fa7e 	bl	800e690 <HAL_GetTick>
 8010194:	4602      	mov	r2, r0
 8010196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801019c:	429a      	cmp	r2, r3
 801019e:	d807      	bhi.n	80101b0 <HAL_SPI_TransmitReceive+0x1d8>
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a6:	d003      	beq.n	80101b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80101a8:	2303      	movs	r3, #3
 80101aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80101ae:	e0a7      	b.n	8010300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1a6      	bne.n	8010108 <HAL_SPI_TransmitReceive+0x130>
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101be:	b29b      	uxth	r3, r3
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d1a1      	bne.n	8010108 <HAL_SPI_TransmitReceive+0x130>
 80101c4:	e07c      	b.n	80102c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d002      	beq.n	80101d4 <HAL_SPI_TransmitReceive+0x1fc>
 80101ce:	8b7b      	ldrh	r3, [r7, #26]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d16b      	bne.n	80102ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	330c      	adds	r3, #12
 80101de:	7812      	ldrb	r2, [r2, #0]
 80101e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e6:	1c5a      	adds	r2, r3, #1
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	3b01      	subs	r3, #1
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80101fa:	e057      	b.n	80102ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	f003 0302 	and.w	r3, r3, #2
 8010206:	2b02      	cmp	r3, #2
 8010208:	d11c      	bne.n	8010244 <HAL_SPI_TransmitReceive+0x26c>
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801020e:	b29b      	uxth	r3, r3
 8010210:	2b00      	cmp	r3, #0
 8010212:	d017      	beq.n	8010244 <HAL_SPI_TransmitReceive+0x26c>
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	2b01      	cmp	r3, #1
 8010218:	d114      	bne.n	8010244 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	330c      	adds	r3, #12
 8010224:	7812      	ldrb	r2, [r2, #0]
 8010226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801022c:	1c5a      	adds	r2, r3, #1
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010236:	b29b      	uxth	r3, r3
 8010238:	3b01      	subs	r3, #1
 801023a:	b29a      	uxth	r2, r3
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010240:	2300      	movs	r3, #0
 8010242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b01      	cmp	r3, #1
 8010250:	d119      	bne.n	8010286 <HAL_SPI_TransmitReceive+0x2ae>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010256:	b29b      	uxth	r3, r3
 8010258:	2b00      	cmp	r3, #0
 801025a:	d014      	beq.n	8010286 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	68da      	ldr	r2, [r3, #12]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010266:	b2d2      	uxtb	r2, r2
 8010268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010278:	b29b      	uxth	r3, r3
 801027a:	3b01      	subs	r3, #1
 801027c:	b29a      	uxth	r2, r3
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010282:	2301      	movs	r3, #1
 8010284:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010286:	f7fe fa03 	bl	800e690 <HAL_GetTick>
 801028a:	4602      	mov	r2, r0
 801028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010292:	429a      	cmp	r2, r3
 8010294:	d803      	bhi.n	801029e <HAL_SPI_TransmitReceive+0x2c6>
 8010296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801029c:	d102      	bne.n	80102a4 <HAL_SPI_TransmitReceive+0x2cc>
 801029e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d103      	bne.n	80102ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80102a4:	2303      	movs	r3, #3
 80102a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80102aa:	e029      	b.n	8010300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1a2      	bne.n	80101fc <HAL_SPI_TransmitReceive+0x224>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d19d      	bne.n	80101fc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80102c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 f8b1 	bl	801042c <SPI_EndRxTxTransaction>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d006      	beq.n	80102de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80102d0:	2301      	movs	r3, #1
 80102d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2220      	movs	r2, #32
 80102da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80102dc:	e010      	b.n	8010300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d10b      	bne.n	80102fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80102e6:	2300      	movs	r3, #0
 80102e8:	617b      	str	r3, [r7, #20]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	617b      	str	r3, [r7, #20]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	617b      	str	r3, [r7, #20]
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	e000      	b.n	8010300 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80102fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2201      	movs	r2, #1
 8010304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010314:	4618      	mov	r0, r3
 8010316:	3730      	adds	r7, #48	; 0x30
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b088      	sub	sp, #32
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	4613      	mov	r3, r2
 801032a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801032c:	f7fe f9b0 	bl	800e690 <HAL_GetTick>
 8010330:	4602      	mov	r2, r0
 8010332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010334:	1a9b      	subs	r3, r3, r2
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	4413      	add	r3, r2
 801033a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801033c:	f7fe f9a8 	bl	800e690 <HAL_GetTick>
 8010340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010342:	4b39      	ldr	r3, [pc, #228]	; (8010428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	015b      	lsls	r3, r3, #5
 8010348:	0d1b      	lsrs	r3, r3, #20
 801034a:	69fa      	ldr	r2, [r7, #28]
 801034c:	fb02 f303 	mul.w	r3, r2, r3
 8010350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010352:	e054      	b.n	80103fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035a:	d050      	beq.n	80103fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801035c:	f7fe f998 	bl	800e690 <HAL_GetTick>
 8010360:	4602      	mov	r2, r0
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	69fa      	ldr	r2, [r7, #28]
 8010368:	429a      	cmp	r2, r3
 801036a:	d902      	bls.n	8010372 <SPI_WaitFlagStateUntilTimeout+0x56>
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d13d      	bne.n	80103ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801038a:	d111      	bne.n	80103b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010394:	d004      	beq.n	80103a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801039e:	d107      	bne.n	80103b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80103ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80103b8:	d10f      	bne.n	80103da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80103c8:	601a      	str	r2, [r3, #0]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80103d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2201      	movs	r2, #1
 80103de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80103ea:	2303      	movs	r3, #3
 80103ec:	e017      	b.n	801041e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80103f4:	2300      	movs	r3, #0
 80103f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	689a      	ldr	r2, [r3, #8]
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	4013      	ands	r3, r2
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	429a      	cmp	r2, r3
 801040c:	bf0c      	ite	eq
 801040e:	2301      	moveq	r3, #1
 8010410:	2300      	movne	r3, #0
 8010412:	b2db      	uxtb	r3, r3
 8010414:	461a      	mov	r2, r3
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	429a      	cmp	r2, r3
 801041a:	d19b      	bne.n	8010354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3720      	adds	r7, #32
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	200000cc 	.word	0x200000cc

0801042c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b086      	sub	sp, #24
 8010430:	af02      	add	r7, sp, #8
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	2200      	movs	r2, #0
 8010440:	2180      	movs	r1, #128	; 0x80
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f7ff ff6a 	bl	801031c <SPI_WaitFlagStateUntilTimeout>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d007      	beq.n	801045e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010452:	f043 0220 	orr.w	r2, r3, #32
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 801045a:	2303      	movs	r3, #3
 801045c:	e000      	b.n	8010460 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010476:	2301      	movs	r3, #1
 8010478:	e03f      	b.n	80104fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010480:	b2db      	uxtb	r3, r3
 8010482:	2b00      	cmp	r3, #0
 8010484:	d106      	bne.n	8010494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7fd fefa 	bl	800e288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2224      	movs	r2, #36	; 0x24
 8010498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68da      	ldr	r2, [r3, #12]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80104aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 fc85 	bl	8010dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	691a      	ldr	r2, [r3, #16]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80104c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	695a      	ldr	r2, [r3, #20]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80104d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	68da      	ldr	r2, [r3, #12]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80104e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2220      	movs	r2, #32
 80104ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2220      	movs	r2, #32
 80104f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3708      	adds	r7, #8
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b08a      	sub	sp, #40	; 0x28
 8010506:	af02      	add	r7, sp, #8
 8010508:	60f8      	str	r0, [r7, #12]
 801050a:	60b9      	str	r1, [r7, #8]
 801050c:	603b      	str	r3, [r7, #0]
 801050e:	4613      	mov	r3, r2
 8010510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010512:	2300      	movs	r3, #0
 8010514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b20      	cmp	r3, #32
 8010520:	d17c      	bne.n	801061c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <HAL_UART_Transmit+0x2c>
 8010528:	88fb      	ldrh	r3, [r7, #6]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801052e:	2301      	movs	r3, #1
 8010530:	e075      	b.n	801061e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010538:	2b01      	cmp	r3, #1
 801053a:	d101      	bne.n	8010540 <HAL_UART_Transmit+0x3e>
 801053c:	2302      	movs	r3, #2
 801053e:	e06e      	b.n	801061e <HAL_UART_Transmit+0x11c>
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2201      	movs	r2, #1
 8010544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2221      	movs	r2, #33	; 0x21
 8010552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010556:	f7fe f89b 	bl	800e690 <HAL_GetTick>
 801055a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	88fa      	ldrh	r2, [r7, #6]
 8010560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	88fa      	ldrh	r2, [r7, #6]
 8010566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010570:	d108      	bne.n	8010584 <HAL_UART_Transmit+0x82>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d104      	bne.n	8010584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	61bb      	str	r3, [r7, #24]
 8010582:	e003      	b.n	801058c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010588:	2300      	movs	r3, #0
 801058a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2200      	movs	r2, #0
 8010590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010594:	e02a      	b.n	80105ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	9300      	str	r3, [sp, #0]
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	2200      	movs	r2, #0
 801059e:	2180      	movs	r1, #128	; 0x80
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f000 fa38 	bl	8010a16 <UART_WaitOnFlagUntilTimeout>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80105ac:	2303      	movs	r3, #3
 80105ae:	e036      	b.n	801061e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d10b      	bne.n	80105ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	461a      	mov	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80105c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	3302      	adds	r3, #2
 80105ca:	61bb      	str	r3, [r7, #24]
 80105cc:	e007      	b.n	80105de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	781a      	ldrb	r2, [r3, #0]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	3301      	adds	r3, #1
 80105dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	3b01      	subs	r3, #1
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1cf      	bne.n	8010596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	2200      	movs	r2, #0
 80105fe:	2140      	movs	r1, #64	; 0x40
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f000 fa08 	bl	8010a16 <UART_WaitOnFlagUntilTimeout>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d001      	beq.n	8010610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801060c:	2303      	movs	r3, #3
 801060e:	e006      	b.n	801061e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2220      	movs	r2, #32
 8010614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010618:	2300      	movs	r3, #0
 801061a:	e000      	b.n	801061e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801061c:	2302      	movs	r3, #2
  }
}
 801061e:	4618      	mov	r0, r3
 8010620:	3720      	adds	r7, #32
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b084      	sub	sp, #16
 801062a:	af00      	add	r7, sp, #0
 801062c:	60f8      	str	r0, [r7, #12]
 801062e:	60b9      	str	r1, [r7, #8]
 8010630:	4613      	mov	r3, r2
 8010632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b20      	cmp	r3, #32
 801063e:	d11d      	bne.n	801067c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <HAL_UART_Receive_IT+0x26>
 8010646:	88fb      	ldrh	r3, [r7, #6]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d101      	bne.n	8010650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801064c:	2301      	movs	r3, #1
 801064e:	e016      	b.n	801067e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010656:	2b01      	cmp	r3, #1
 8010658:	d101      	bne.n	801065e <HAL_UART_Receive_IT+0x38>
 801065a:	2302      	movs	r3, #2
 801065c:	e00f      	b.n	801067e <HAL_UART_Receive_IT+0x58>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2201      	movs	r2, #1
 8010662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2200      	movs	r2, #0
 801066a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 801066c:	88fb      	ldrh	r3, [r7, #6]
 801066e:	461a      	mov	r2, r3
 8010670:	68b9      	ldr	r1, [r7, #8]
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f000 fa19 	bl	8010aaa <UART_Start_Receive_IT>
 8010678:	4603      	mov	r3, r0
 801067a:	e000      	b.n	801067e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801067c:	2302      	movs	r3, #2
  }
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
	...

08010688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b08a      	sub	sp, #40	; 0x28
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	695b      	ldr	r3, [r3, #20]
 80106a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80106a8:	2300      	movs	r3, #0
 80106aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80106ac:	2300      	movs	r3, #0
 80106ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	f003 030f 	and.w	r3, r3, #15
 80106b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d10d      	bne.n	80106da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80106be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c0:	f003 0320 	and.w	r3, r3, #32
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d008      	beq.n	80106da <HAL_UART_IRQHandler+0x52>
 80106c8:	6a3b      	ldr	r3, [r7, #32]
 80106ca:	f003 0320 	and.w	r3, r3, #32
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d003      	beq.n	80106da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 fac9 	bl	8010c6a <UART_Receive_IT>
      return;
 80106d8:	e17b      	b.n	80109d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f000 80b1 	beq.w	8010844 <HAL_UART_IRQHandler+0x1bc>
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	f003 0301 	and.w	r3, r3, #1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d105      	bne.n	80106f8 <HAL_UART_IRQHandler+0x70>
 80106ec:	6a3b      	ldr	r3, [r7, #32]
 80106ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 80a6 	beq.w	8010844 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80106f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fa:	f003 0301 	and.w	r3, r3, #1
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00a      	beq.n	8010718 <HAL_UART_IRQHandler+0x90>
 8010702:	6a3b      	ldr	r3, [r7, #32]
 8010704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010708:	2b00      	cmp	r3, #0
 801070a:	d005      	beq.n	8010718 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010710:	f043 0201 	orr.w	r2, r3, #1
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	f003 0304 	and.w	r3, r3, #4
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00a      	beq.n	8010738 <HAL_UART_IRQHandler+0xb0>
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	f003 0301 	and.w	r3, r3, #1
 8010728:	2b00      	cmp	r3, #0
 801072a:	d005      	beq.n	8010738 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010730:	f043 0202 	orr.w	r2, r3, #2
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	f003 0302 	and.w	r3, r3, #2
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00a      	beq.n	8010758 <HAL_UART_IRQHandler+0xd0>
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	d005      	beq.n	8010758 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010750:	f043 0204 	orr.w	r2, r3, #4
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	f003 0308 	and.w	r3, r3, #8
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00f      	beq.n	8010782 <HAL_UART_IRQHandler+0xfa>
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	f003 0320 	and.w	r3, r3, #32
 8010768:	2b00      	cmp	r3, #0
 801076a:	d104      	bne.n	8010776 <HAL_UART_IRQHandler+0xee>
 801076c:	69fb      	ldr	r3, [r7, #28]
 801076e:	f003 0301 	and.w	r3, r3, #1
 8010772:	2b00      	cmp	r3, #0
 8010774:	d005      	beq.n	8010782 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801077a:	f043 0208 	orr.w	r2, r3, #8
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 811e 	beq.w	80109c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078e:	f003 0320 	and.w	r3, r3, #32
 8010792:	2b00      	cmp	r3, #0
 8010794:	d007      	beq.n	80107a6 <HAL_UART_IRQHandler+0x11e>
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	f003 0320 	and.w	r3, r3, #32
 801079c:	2b00      	cmp	r3, #0
 801079e:	d002      	beq.n	80107a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fa62 	bl	8010c6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	695b      	ldr	r3, [r3, #20]
 80107ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	bf14      	ite	ne
 80107b4:	2301      	movne	r3, #1
 80107b6:	2300      	moveq	r3, #0
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c0:	f003 0308 	and.w	r3, r3, #8
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <HAL_UART_IRQHandler+0x146>
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d031      	beq.n	8010832 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f9a4 	bl	8010b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d023      	beq.n	801082a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	695a      	ldr	r2, [r3, #20]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d013      	beq.n	8010822 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107fe:	4a76      	ldr	r2, [pc, #472]	; (80109d8 <HAL_UART_IRQHandler+0x350>)
 8010800:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010806:	4618      	mov	r0, r3
 8010808:	f7fe f8d2 	bl	800e9b0 <HAL_DMA_Abort_IT>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d016      	beq.n	8010840 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801081c:	4610      	mov	r0, r2
 801081e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010820:	e00e      	b.n	8010840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 f8e3 	bl	80109ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010828:	e00a      	b.n	8010840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f000 f8df 	bl	80109ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010830:	e006      	b.n	8010840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 f8db 	bl	80109ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801083e:	e0c3      	b.n	80109c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010840:	bf00      	nop
    return;
 8010842:	e0c1      	b.n	80109c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010848:	2b01      	cmp	r3, #1
 801084a:	f040 80a1 	bne.w	8010990 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	f003 0310 	and.w	r3, r3, #16
 8010854:	2b00      	cmp	r3, #0
 8010856:	f000 809b 	beq.w	8010990 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 801085a:	6a3b      	ldr	r3, [r7, #32]
 801085c:	f003 0310 	and.w	r3, r3, #16
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 8095 	beq.w	8010990 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010866:	2300      	movs	r3, #0
 8010868:	60fb      	str	r3, [r7, #12]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	60fb      	str	r3, [r7, #12]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	60fb      	str	r3, [r7, #12]
 801087a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	695b      	ldr	r3, [r3, #20]
 8010882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010886:	2b00      	cmp	r3, #0
 8010888:	d04e      	beq.n	8010928 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8010894:	8a3b      	ldrh	r3, [r7, #16]
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 8098 	beq.w	80109cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80108a0:	8a3a      	ldrh	r2, [r7, #16]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	f080 8092 	bcs.w	80109cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8a3a      	ldrh	r2, [r7, #16]
 80108ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108b2:	699b      	ldr	r3, [r3, #24]
 80108b4:	2b20      	cmp	r3, #32
 80108b6:	d02b      	beq.n	8010910 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	68da      	ldr	r2, [r3, #12]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80108c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	695a      	ldr	r2, [r3, #20]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f022 0201 	bic.w	r2, r2, #1
 80108d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	695a      	ldr	r2, [r3, #20]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2220      	movs	r2, #32
 80108ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	68da      	ldr	r2, [r3, #12]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 0210 	bic.w	r2, r2, #16
 8010904:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801090a:	4618      	mov	r0, r3
 801090c:	f7fe f815 	bl	800e93a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010918:	b29b      	uxth	r3, r3
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	b29b      	uxth	r3, r3
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 f86d 	bl	8010a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010926:	e051      	b.n	80109cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010930:	b29b      	uxth	r3, r3
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801093a:	b29b      	uxth	r3, r3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d047      	beq.n	80109d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8010940:	8a7b      	ldrh	r3, [r7, #18]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d044      	beq.n	80109d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68da      	ldr	r2, [r3, #12]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010954:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	695a      	ldr	r2, [r3, #20]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f022 0201 	bic.w	r2, r2, #1
 8010964:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2220      	movs	r2, #32
 801096a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	68da      	ldr	r2, [r3, #12]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f022 0210 	bic.w	r2, r2, #16
 8010982:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010984:	8a7b      	ldrh	r3, [r7, #18]
 8010986:	4619      	mov	r1, r3
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f000 f839 	bl	8010a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801098e:	e01f      	b.n	80109d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010996:	2b00      	cmp	r3, #0
 8010998:	d008      	beq.n	80109ac <HAL_UART_IRQHandler+0x324>
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d003      	beq.n	80109ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 f8f9 	bl	8010b9c <UART_Transmit_IT>
    return;
 80109aa:	e012      	b.n	80109d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00d      	beq.n	80109d2 <HAL_UART_IRQHandler+0x34a>
 80109b6:	6a3b      	ldr	r3, [r7, #32]
 80109b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d008      	beq.n	80109d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 f93a 	bl	8010c3a <UART_EndTransmit_IT>
    return;
 80109c6:	e004      	b.n	80109d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80109c8:	bf00      	nop
 80109ca:	e002      	b.n	80109d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80109cc:	bf00      	nop
 80109ce:	e000      	b.n	80109d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80109d0:	bf00      	nop
  }
}
 80109d2:	3728      	adds	r7, #40	; 0x28
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	08010b75 	.word	0x08010b75

080109dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80109e4:	bf00      	nop
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bc80      	pop	{r7}
 80109ec:	4770      	bx	lr

080109ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80109ee:	b480      	push	{r7}
 80109f0:	b083      	sub	sp, #12
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80109f6:	bf00      	nop
 80109f8:	370c      	adds	r7, #12
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bc80      	pop	{r7}
 80109fe:	4770      	bx	lr

08010a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	460b      	mov	r3, r1
 8010a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010a0c:	bf00      	nop
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bc80      	pop	{r7}
 8010a14:	4770      	bx	lr

08010a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b084      	sub	sp, #16
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	60f8      	str	r0, [r7, #12]
 8010a1e:	60b9      	str	r1, [r7, #8]
 8010a20:	603b      	str	r3, [r7, #0]
 8010a22:	4613      	mov	r3, r2
 8010a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a26:	e02c      	b.n	8010a82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2e:	d028      	beq.n	8010a82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d007      	beq.n	8010a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8010a36:	f7fd fe2b 	bl	800e690 <HAL_GetTick>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	1ad3      	subs	r3, r2, r3
 8010a40:	69ba      	ldr	r2, [r7, #24]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d21d      	bcs.n	8010a82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68da      	ldr	r2, [r3, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	695a      	ldr	r2, [r3, #20]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f022 0201 	bic.w	r2, r2, #1
 8010a64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2220      	movs	r2, #32
 8010a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2220      	movs	r2, #32
 8010a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010a7e:	2303      	movs	r3, #3
 8010a80:	e00f      	b.n	8010aa2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	bf0c      	ite	eq
 8010a92:	2301      	moveq	r3, #1
 8010a94:	2300      	movne	r3, #0
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	461a      	mov	r2, r3
 8010a9a:	79fb      	ldrb	r3, [r7, #7]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d0c3      	beq.n	8010a28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010aa0:	2300      	movs	r3, #0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010aaa:	b480      	push	{r7}
 8010aac:	b085      	sub	sp, #20
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	60f8      	str	r0, [r7, #12]
 8010ab2:	60b9      	str	r1, [r7, #8]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	88fa      	ldrh	r2, [r7, #6]
 8010ac2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	88fa      	ldrh	r2, [r7, #6]
 8010ac8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2200      	movs	r2, #0
 8010ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2222      	movs	r2, #34	; 0x22
 8010ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68da      	ldr	r2, [r3, #12]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010aee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	695a      	ldr	r2, [r3, #20]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f042 0201 	orr.w	r2, r2, #1
 8010afe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	68da      	ldr	r2, [r3, #12]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f042 0220 	orr.w	r2, r2, #32
 8010b0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3714      	adds	r7, #20
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bc80      	pop	{r7}
 8010b1a:	4770      	bx	lr

08010b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	695a      	ldr	r2, [r3, #20]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f022 0201 	bic.w	r2, r2, #1
 8010b42:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d107      	bne.n	8010b5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	68da      	ldr	r2, [r3, #12]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f022 0210 	bic.w	r2, r2, #16
 8010b5a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2220      	movs	r2, #32
 8010b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010b6a:	bf00      	nop
 8010b6c:	370c      	adds	r7, #12
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bc80      	pop	{r7}
 8010b72:	4770      	bx	lr

08010b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7ff ff2d 	bl	80109ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b94:	bf00      	nop
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b21      	cmp	r3, #33	; 0x21
 8010bae:	d13e      	bne.n	8010c2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bb8:	d114      	bne.n	8010be4 <UART_Transmit_IT+0x48>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d110      	bne.n	8010be4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a1b      	ldr	r3, [r3, #32]
 8010bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	881b      	ldrh	r3, [r3, #0]
 8010bcc:	461a      	mov	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010bd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6a1b      	ldr	r3, [r3, #32]
 8010bdc:	1c9a      	adds	r2, r3, #2
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	621a      	str	r2, [r3, #32]
 8010be2:	e008      	b.n	8010bf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6a1b      	ldr	r3, [r3, #32]
 8010be8:	1c59      	adds	r1, r3, #1
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	6211      	str	r1, [r2, #32]
 8010bee:	781a      	ldrb	r2, [r3, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	4619      	mov	r1, r3
 8010c04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10f      	bne.n	8010c2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	68da      	ldr	r2, [r3, #12]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68da      	ldr	r2, [r3, #12]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e000      	b.n	8010c30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010c2e:	2302      	movs	r3, #2
  }
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bc80      	pop	{r7}
 8010c38:	4770      	bx	lr

08010c3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b082      	sub	sp, #8
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	68da      	ldr	r2, [r3, #12]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2220      	movs	r2, #32
 8010c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7ff febe 	bl	80109dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010c60:	2300      	movs	r3, #0
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3708      	adds	r7, #8
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010c6a:	b580      	push	{r7, lr}
 8010c6c:	b086      	sub	sp, #24
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b22      	cmp	r3, #34	; 0x22
 8010c7c:	f040 8099 	bne.w	8010db2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c88:	d117      	bne.n	8010cba <UART_Receive_IT+0x50>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d113      	bne.n	8010cba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c9a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cb2:	1c9a      	adds	r2, r3, #2
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8010cb8:	e026      	b.n	8010d08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cbe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ccc:	d007      	beq.n	8010cde <UART_Receive_IT+0x74>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	689b      	ldr	r3, [r3, #8]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10a      	bne.n	8010cec <UART_Receive_IT+0x82>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d106      	bne.n	8010cec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	701a      	strb	r2, [r3, #0]
 8010cea:	e008      	b.n	8010cfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	4619      	mov	r1, r3
 8010d16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d148      	bne.n	8010dae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	68da      	ldr	r2, [r3, #12]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f022 0220 	bic.w	r2, r2, #32
 8010d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	68da      	ldr	r2, [r3, #12]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	695a      	ldr	r2, [r3, #20]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f022 0201 	bic.w	r2, r2, #1
 8010d4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2220      	movs	r2, #32
 8010d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d123      	bne.n	8010da4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	68da      	ldr	r2, [r3, #12]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f022 0210 	bic.w	r2, r2, #16
 8010d70:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f003 0310 	and.w	r3, r3, #16
 8010d7c:	2b10      	cmp	r3, #16
 8010d7e:	d10a      	bne.n	8010d96 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010d80:	2300      	movs	r3, #0
 8010d82:	60fb      	str	r3, [r7, #12]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	60fb      	str	r3, [r7, #12]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	60fb      	str	r3, [r7, #12]
 8010d94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7ff fe2f 	bl	8010a00 <HAL_UARTEx_RxEventCallback>
 8010da2:	e002      	b.n	8010daa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7fc f847 	bl	800ce38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010daa:	2300      	movs	r3, #0
 8010dac:	e002      	b.n	8010db4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8010dae:	2300      	movs	r3, #0
 8010db0:	e000      	b.n	8010db4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8010db2:	2302      	movs	r3, #2
  }
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3718      	adds	r7, #24
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	691b      	ldr	r3, [r3, #16]
 8010dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	68da      	ldr	r2, [r3, #12]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	430a      	orrs	r2, r1
 8010dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	689a      	ldr	r2, [r3, #8]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	431a      	orrs	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	695b      	ldr	r3, [r3, #20]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010df6:	f023 030c 	bic.w	r3, r3, #12
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	6812      	ldr	r2, [r2, #0]
 8010dfe:	68b9      	ldr	r1, [r7, #8]
 8010e00:	430b      	orrs	r3, r1
 8010e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	695b      	ldr	r3, [r3, #20]
 8010e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	699a      	ldr	r2, [r3, #24]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	430a      	orrs	r2, r1
 8010e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4a2c      	ldr	r2, [pc, #176]	; (8010ed0 <UART_SetConfig+0x114>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d103      	bne.n	8010e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010e24:	f7ff f822 	bl	800fe6c <HAL_RCC_GetPCLK2Freq>
 8010e28:	60f8      	str	r0, [r7, #12]
 8010e2a:	e002      	b.n	8010e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8010e2c:	f7ff f80a 	bl	800fe44 <HAL_RCC_GetPCLK1Freq>
 8010e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	4613      	mov	r3, r2
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	009a      	lsls	r2, r3, #2
 8010e3c:	441a      	add	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e48:	4a22      	ldr	r2, [pc, #136]	; (8010ed4 <UART_SetConfig+0x118>)
 8010e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8010e4e:	095b      	lsrs	r3, r3, #5
 8010e50:	0119      	lsls	r1, r3, #4
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	4613      	mov	r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	4413      	add	r3, r2
 8010e5a:	009a      	lsls	r2, r3, #2
 8010e5c:	441a      	add	r2, r3
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	009b      	lsls	r3, r3, #2
 8010e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8010e68:	4b1a      	ldr	r3, [pc, #104]	; (8010ed4 <UART_SetConfig+0x118>)
 8010e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8010e6e:	095b      	lsrs	r3, r3, #5
 8010e70:	2064      	movs	r0, #100	; 0x64
 8010e72:	fb00 f303 	mul.w	r3, r0, r3
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	011b      	lsls	r3, r3, #4
 8010e7a:	3332      	adds	r3, #50	; 0x32
 8010e7c:	4a15      	ldr	r2, [pc, #84]	; (8010ed4 <UART_SetConfig+0x118>)
 8010e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e82:	095b      	lsrs	r3, r3, #5
 8010e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e88:	4419      	add	r1, r3
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	4413      	add	r3, r2
 8010e92:	009a      	lsls	r2, r3, #2
 8010e94:	441a      	add	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ea0:	4b0c      	ldr	r3, [pc, #48]	; (8010ed4 <UART_SetConfig+0x118>)
 8010ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8010ea6:	095b      	lsrs	r3, r3, #5
 8010ea8:	2064      	movs	r0, #100	; 0x64
 8010eaa:	fb00 f303 	mul.w	r3, r0, r3
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	011b      	lsls	r3, r3, #4
 8010eb2:	3332      	adds	r3, #50	; 0x32
 8010eb4:	4a07      	ldr	r2, [pc, #28]	; (8010ed4 <UART_SetConfig+0x118>)
 8010eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eba:	095b      	lsrs	r3, r3, #5
 8010ebc:	f003 020f 	and.w	r2, r3, #15
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	440a      	add	r2, r1
 8010ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8010ec8:	bf00      	nop
 8010eca:	3710      	adds	r7, #16
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	40013800 	.word	0x40013800
 8010ed4:	51eb851f 	.word	0x51eb851f

08010ed8 <atoi>:
 8010ed8:	220a      	movs	r2, #10
 8010eda:	2100      	movs	r1, #0
 8010edc:	f000 b8f0 	b.w	80110c0 <strtol>

08010ee0 <__errno>:
 8010ee0:	4b01      	ldr	r3, [pc, #4]	; (8010ee8 <__errno+0x8>)
 8010ee2:	6818      	ldr	r0, [r3, #0]
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	200000d8 	.word	0x200000d8

08010eec <__libc_init_array>:
 8010eec:	b570      	push	{r4, r5, r6, lr}
 8010eee:	2600      	movs	r6, #0
 8010ef0:	4d0c      	ldr	r5, [pc, #48]	; (8010f24 <__libc_init_array+0x38>)
 8010ef2:	4c0d      	ldr	r4, [pc, #52]	; (8010f28 <__libc_init_array+0x3c>)
 8010ef4:	1b64      	subs	r4, r4, r5
 8010ef6:	10a4      	asrs	r4, r4, #2
 8010ef8:	42a6      	cmp	r6, r4
 8010efa:	d109      	bne.n	8010f10 <__libc_init_array+0x24>
 8010efc:	f000 fd36 	bl	801196c <_init>
 8010f00:	2600      	movs	r6, #0
 8010f02:	4d0a      	ldr	r5, [pc, #40]	; (8010f2c <__libc_init_array+0x40>)
 8010f04:	4c0a      	ldr	r4, [pc, #40]	; (8010f30 <__libc_init_array+0x44>)
 8010f06:	1b64      	subs	r4, r4, r5
 8010f08:	10a4      	asrs	r4, r4, #2
 8010f0a:	42a6      	cmp	r6, r4
 8010f0c:	d105      	bne.n	8010f1a <__libc_init_array+0x2e>
 8010f0e:	bd70      	pop	{r4, r5, r6, pc}
 8010f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f14:	4798      	blx	r3
 8010f16:	3601      	adds	r6, #1
 8010f18:	e7ee      	b.n	8010ef8 <__libc_init_array+0xc>
 8010f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f1e:	4798      	blx	r3
 8010f20:	3601      	adds	r6, #1
 8010f22:	e7f2      	b.n	8010f0a <__libc_init_array+0x1e>
 8010f24:	08011d7c 	.word	0x08011d7c
 8010f28:	08011d7c 	.word	0x08011d7c
 8010f2c:	08011d7c 	.word	0x08011d7c
 8010f30:	08011d80 	.word	0x08011d80

08010f34 <memcpy>:
 8010f34:	440a      	add	r2, r1
 8010f36:	4291      	cmp	r1, r2
 8010f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f3c:	d100      	bne.n	8010f40 <memcpy+0xc>
 8010f3e:	4770      	bx	lr
 8010f40:	b510      	push	{r4, lr}
 8010f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f46:	4291      	cmp	r1, r2
 8010f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f4c:	d1f9      	bne.n	8010f42 <memcpy+0xe>
 8010f4e:	bd10      	pop	{r4, pc}

08010f50 <memset>:
 8010f50:	4603      	mov	r3, r0
 8010f52:	4402      	add	r2, r0
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d100      	bne.n	8010f5a <memset+0xa>
 8010f58:	4770      	bx	lr
 8010f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f5e:	e7f9      	b.n	8010f54 <memset+0x4>

08010f60 <siprintf>:
 8010f60:	b40e      	push	{r1, r2, r3}
 8010f62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f66:	b500      	push	{lr}
 8010f68:	b09c      	sub	sp, #112	; 0x70
 8010f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8010f6c:	9002      	str	r0, [sp, #8]
 8010f6e:	9006      	str	r0, [sp, #24]
 8010f70:	9107      	str	r1, [sp, #28]
 8010f72:	9104      	str	r1, [sp, #16]
 8010f74:	4808      	ldr	r0, [pc, #32]	; (8010f98 <siprintf+0x38>)
 8010f76:	4909      	ldr	r1, [pc, #36]	; (8010f9c <siprintf+0x3c>)
 8010f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7c:	9105      	str	r1, [sp, #20]
 8010f7e:	6800      	ldr	r0, [r0, #0]
 8010f80:	a902      	add	r1, sp, #8
 8010f82:	9301      	str	r3, [sp, #4]
 8010f84:	f000 f902 	bl	801118c <_svfiprintf_r>
 8010f88:	2200      	movs	r2, #0
 8010f8a:	9b02      	ldr	r3, [sp, #8]
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	b01c      	add	sp, #112	; 0x70
 8010f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f94:	b003      	add	sp, #12
 8010f96:	4770      	bx	lr
 8010f98:	200000d8 	.word	0x200000d8
 8010f9c:	ffff0208 	.word	0xffff0208

08010fa0 <strncpy>:
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	b510      	push	{r4, lr}
 8010fa4:	3901      	subs	r1, #1
 8010fa6:	b132      	cbz	r2, 8010fb6 <strncpy+0x16>
 8010fa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010fac:	3a01      	subs	r2, #1
 8010fae:	f803 4b01 	strb.w	r4, [r3], #1
 8010fb2:	2c00      	cmp	r4, #0
 8010fb4:	d1f7      	bne.n	8010fa6 <strncpy+0x6>
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	441a      	add	r2, r3
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d100      	bne.n	8010fc0 <strncpy+0x20>
 8010fbe:	bd10      	pop	{r4, pc}
 8010fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8010fc4:	e7f9      	b.n	8010fba <strncpy+0x1a>
	...

08010fc8 <_strtol_l.constprop.0>:
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fce:	4680      	mov	r8, r0
 8010fd0:	d001      	beq.n	8010fd6 <_strtol_l.constprop.0+0xe>
 8010fd2:	2b24      	cmp	r3, #36	; 0x24
 8010fd4:	d906      	bls.n	8010fe4 <_strtol_l.constprop.0+0x1c>
 8010fd6:	f7ff ff83 	bl	8010ee0 <__errno>
 8010fda:	2316      	movs	r3, #22
 8010fdc:	6003      	str	r3, [r0, #0]
 8010fde:	2000      	movs	r0, #0
 8010fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	4f35      	ldr	r7, [pc, #212]	; (80110bc <_strtol_l.constprop.0+0xf4>)
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fee:	5de6      	ldrb	r6, [r4, r7]
 8010ff0:	f016 0608 	ands.w	r6, r6, #8
 8010ff4:	d1f8      	bne.n	8010fe8 <_strtol_l.constprop.0+0x20>
 8010ff6:	2c2d      	cmp	r4, #45	; 0x2d
 8010ff8:	d12f      	bne.n	801105a <_strtol_l.constprop.0+0x92>
 8010ffa:	2601      	movs	r6, #1
 8010ffc:	782c      	ldrb	r4, [r5, #0]
 8010ffe:	1c85      	adds	r5, r0, #2
 8011000:	2b00      	cmp	r3, #0
 8011002:	d057      	beq.n	80110b4 <_strtol_l.constprop.0+0xec>
 8011004:	2b10      	cmp	r3, #16
 8011006:	d109      	bne.n	801101c <_strtol_l.constprop.0+0x54>
 8011008:	2c30      	cmp	r4, #48	; 0x30
 801100a:	d107      	bne.n	801101c <_strtol_l.constprop.0+0x54>
 801100c:	7828      	ldrb	r0, [r5, #0]
 801100e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011012:	2858      	cmp	r0, #88	; 0x58
 8011014:	d149      	bne.n	80110aa <_strtol_l.constprop.0+0xe2>
 8011016:	2310      	movs	r3, #16
 8011018:	786c      	ldrb	r4, [r5, #1]
 801101a:	3502      	adds	r5, #2
 801101c:	2700      	movs	r7, #0
 801101e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8011022:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011026:	fbbe f9f3 	udiv	r9, lr, r3
 801102a:	4638      	mov	r0, r7
 801102c:	fb03 ea19 	mls	sl, r3, r9, lr
 8011030:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011034:	f1bc 0f09 	cmp.w	ip, #9
 8011038:	d814      	bhi.n	8011064 <_strtol_l.constprop.0+0x9c>
 801103a:	4664      	mov	r4, ip
 801103c:	42a3      	cmp	r3, r4
 801103e:	dd22      	ble.n	8011086 <_strtol_l.constprop.0+0xbe>
 8011040:	2f00      	cmp	r7, #0
 8011042:	db1d      	blt.n	8011080 <_strtol_l.constprop.0+0xb8>
 8011044:	4581      	cmp	r9, r0
 8011046:	d31b      	bcc.n	8011080 <_strtol_l.constprop.0+0xb8>
 8011048:	d101      	bne.n	801104e <_strtol_l.constprop.0+0x86>
 801104a:	45a2      	cmp	sl, r4
 801104c:	db18      	blt.n	8011080 <_strtol_l.constprop.0+0xb8>
 801104e:	2701      	movs	r7, #1
 8011050:	fb00 4003 	mla	r0, r0, r3, r4
 8011054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011058:	e7ea      	b.n	8011030 <_strtol_l.constprop.0+0x68>
 801105a:	2c2b      	cmp	r4, #43	; 0x2b
 801105c:	bf04      	itt	eq
 801105e:	782c      	ldrbeq	r4, [r5, #0]
 8011060:	1c85      	addeq	r5, r0, #2
 8011062:	e7cd      	b.n	8011000 <_strtol_l.constprop.0+0x38>
 8011064:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011068:	f1bc 0f19 	cmp.w	ip, #25
 801106c:	d801      	bhi.n	8011072 <_strtol_l.constprop.0+0xaa>
 801106e:	3c37      	subs	r4, #55	; 0x37
 8011070:	e7e4      	b.n	801103c <_strtol_l.constprop.0+0x74>
 8011072:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011076:	f1bc 0f19 	cmp.w	ip, #25
 801107a:	d804      	bhi.n	8011086 <_strtol_l.constprop.0+0xbe>
 801107c:	3c57      	subs	r4, #87	; 0x57
 801107e:	e7dd      	b.n	801103c <_strtol_l.constprop.0+0x74>
 8011080:	f04f 37ff 	mov.w	r7, #4294967295
 8011084:	e7e6      	b.n	8011054 <_strtol_l.constprop.0+0x8c>
 8011086:	2f00      	cmp	r7, #0
 8011088:	da07      	bge.n	801109a <_strtol_l.constprop.0+0xd2>
 801108a:	2322      	movs	r3, #34	; 0x22
 801108c:	4670      	mov	r0, lr
 801108e:	f8c8 3000 	str.w	r3, [r8]
 8011092:	2a00      	cmp	r2, #0
 8011094:	d0a4      	beq.n	8010fe0 <_strtol_l.constprop.0+0x18>
 8011096:	1e69      	subs	r1, r5, #1
 8011098:	e005      	b.n	80110a6 <_strtol_l.constprop.0+0xde>
 801109a:	b106      	cbz	r6, 801109e <_strtol_l.constprop.0+0xd6>
 801109c:	4240      	negs	r0, r0
 801109e:	2a00      	cmp	r2, #0
 80110a0:	d09e      	beq.n	8010fe0 <_strtol_l.constprop.0+0x18>
 80110a2:	2f00      	cmp	r7, #0
 80110a4:	d1f7      	bne.n	8011096 <_strtol_l.constprop.0+0xce>
 80110a6:	6011      	str	r1, [r2, #0]
 80110a8:	e79a      	b.n	8010fe0 <_strtol_l.constprop.0+0x18>
 80110aa:	2430      	movs	r4, #48	; 0x30
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1b5      	bne.n	801101c <_strtol_l.constprop.0+0x54>
 80110b0:	2308      	movs	r3, #8
 80110b2:	e7b3      	b.n	801101c <_strtol_l.constprop.0+0x54>
 80110b4:	2c30      	cmp	r4, #48	; 0x30
 80110b6:	d0a9      	beq.n	801100c <_strtol_l.constprop.0+0x44>
 80110b8:	230a      	movs	r3, #10
 80110ba:	e7af      	b.n	801101c <_strtol_l.constprop.0+0x54>
 80110bc:	08011c49 	.word	0x08011c49

080110c0 <strtol>:
 80110c0:	4613      	mov	r3, r2
 80110c2:	460a      	mov	r2, r1
 80110c4:	4601      	mov	r1, r0
 80110c6:	4802      	ldr	r0, [pc, #8]	; (80110d0 <strtol+0x10>)
 80110c8:	6800      	ldr	r0, [r0, #0]
 80110ca:	f7ff bf7d 	b.w	8010fc8 <_strtol_l.constprop.0>
 80110ce:	bf00      	nop
 80110d0:	200000d8 	.word	0x200000d8

080110d4 <__ssputs_r>:
 80110d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d8:	688e      	ldr	r6, [r1, #8]
 80110da:	4682      	mov	sl, r0
 80110dc:	429e      	cmp	r6, r3
 80110de:	460c      	mov	r4, r1
 80110e0:	4690      	mov	r8, r2
 80110e2:	461f      	mov	r7, r3
 80110e4:	d838      	bhi.n	8011158 <__ssputs_r+0x84>
 80110e6:	898a      	ldrh	r2, [r1, #12]
 80110e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110ec:	d032      	beq.n	8011154 <__ssputs_r+0x80>
 80110ee:	6825      	ldr	r5, [r4, #0]
 80110f0:	6909      	ldr	r1, [r1, #16]
 80110f2:	3301      	adds	r3, #1
 80110f4:	eba5 0901 	sub.w	r9, r5, r1
 80110f8:	6965      	ldr	r5, [r4, #20]
 80110fa:	444b      	add	r3, r9
 80110fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011104:	106d      	asrs	r5, r5, #1
 8011106:	429d      	cmp	r5, r3
 8011108:	bf38      	it	cc
 801110a:	461d      	movcc	r5, r3
 801110c:	0553      	lsls	r3, r2, #21
 801110e:	d531      	bpl.n	8011174 <__ssputs_r+0xa0>
 8011110:	4629      	mov	r1, r5
 8011112:	f000 fb61 	bl	80117d8 <_malloc_r>
 8011116:	4606      	mov	r6, r0
 8011118:	b950      	cbnz	r0, 8011130 <__ssputs_r+0x5c>
 801111a:	230c      	movs	r3, #12
 801111c:	f04f 30ff 	mov.w	r0, #4294967295
 8011120:	f8ca 3000 	str.w	r3, [sl]
 8011124:	89a3      	ldrh	r3, [r4, #12]
 8011126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801112a:	81a3      	strh	r3, [r4, #12]
 801112c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011130:	464a      	mov	r2, r9
 8011132:	6921      	ldr	r1, [r4, #16]
 8011134:	f7ff fefe 	bl	8010f34 <memcpy>
 8011138:	89a3      	ldrh	r3, [r4, #12]
 801113a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801113e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	6126      	str	r6, [r4, #16]
 8011146:	444e      	add	r6, r9
 8011148:	6026      	str	r6, [r4, #0]
 801114a:	463e      	mov	r6, r7
 801114c:	6165      	str	r5, [r4, #20]
 801114e:	eba5 0509 	sub.w	r5, r5, r9
 8011152:	60a5      	str	r5, [r4, #8]
 8011154:	42be      	cmp	r6, r7
 8011156:	d900      	bls.n	801115a <__ssputs_r+0x86>
 8011158:	463e      	mov	r6, r7
 801115a:	4632      	mov	r2, r6
 801115c:	4641      	mov	r1, r8
 801115e:	6820      	ldr	r0, [r4, #0]
 8011160:	f000 fab8 	bl	80116d4 <memmove>
 8011164:	68a3      	ldr	r3, [r4, #8]
 8011166:	2000      	movs	r0, #0
 8011168:	1b9b      	subs	r3, r3, r6
 801116a:	60a3      	str	r3, [r4, #8]
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	4433      	add	r3, r6
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	e7db      	b.n	801112c <__ssputs_r+0x58>
 8011174:	462a      	mov	r2, r5
 8011176:	f000 fba3 	bl	80118c0 <_realloc_r>
 801117a:	4606      	mov	r6, r0
 801117c:	2800      	cmp	r0, #0
 801117e:	d1e1      	bne.n	8011144 <__ssputs_r+0x70>
 8011180:	4650      	mov	r0, sl
 8011182:	6921      	ldr	r1, [r4, #16]
 8011184:	f000 fac0 	bl	8011708 <_free_r>
 8011188:	e7c7      	b.n	801111a <__ssputs_r+0x46>
	...

0801118c <_svfiprintf_r>:
 801118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011190:	4698      	mov	r8, r3
 8011192:	898b      	ldrh	r3, [r1, #12]
 8011194:	4607      	mov	r7, r0
 8011196:	061b      	lsls	r3, r3, #24
 8011198:	460d      	mov	r5, r1
 801119a:	4614      	mov	r4, r2
 801119c:	b09d      	sub	sp, #116	; 0x74
 801119e:	d50e      	bpl.n	80111be <_svfiprintf_r+0x32>
 80111a0:	690b      	ldr	r3, [r1, #16]
 80111a2:	b963      	cbnz	r3, 80111be <_svfiprintf_r+0x32>
 80111a4:	2140      	movs	r1, #64	; 0x40
 80111a6:	f000 fb17 	bl	80117d8 <_malloc_r>
 80111aa:	6028      	str	r0, [r5, #0]
 80111ac:	6128      	str	r0, [r5, #16]
 80111ae:	b920      	cbnz	r0, 80111ba <_svfiprintf_r+0x2e>
 80111b0:	230c      	movs	r3, #12
 80111b2:	603b      	str	r3, [r7, #0]
 80111b4:	f04f 30ff 	mov.w	r0, #4294967295
 80111b8:	e0d1      	b.n	801135e <_svfiprintf_r+0x1d2>
 80111ba:	2340      	movs	r3, #64	; 0x40
 80111bc:	616b      	str	r3, [r5, #20]
 80111be:	2300      	movs	r3, #0
 80111c0:	9309      	str	r3, [sp, #36]	; 0x24
 80111c2:	2320      	movs	r3, #32
 80111c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111c8:	2330      	movs	r3, #48	; 0x30
 80111ca:	f04f 0901 	mov.w	r9, #1
 80111ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80111d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011378 <_svfiprintf_r+0x1ec>
 80111d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111da:	4623      	mov	r3, r4
 80111dc:	469a      	mov	sl, r3
 80111de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111e2:	b10a      	cbz	r2, 80111e8 <_svfiprintf_r+0x5c>
 80111e4:	2a25      	cmp	r2, #37	; 0x25
 80111e6:	d1f9      	bne.n	80111dc <_svfiprintf_r+0x50>
 80111e8:	ebba 0b04 	subs.w	fp, sl, r4
 80111ec:	d00b      	beq.n	8011206 <_svfiprintf_r+0x7a>
 80111ee:	465b      	mov	r3, fp
 80111f0:	4622      	mov	r2, r4
 80111f2:	4629      	mov	r1, r5
 80111f4:	4638      	mov	r0, r7
 80111f6:	f7ff ff6d 	bl	80110d4 <__ssputs_r>
 80111fa:	3001      	adds	r0, #1
 80111fc:	f000 80aa 	beq.w	8011354 <_svfiprintf_r+0x1c8>
 8011200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011202:	445a      	add	r2, fp
 8011204:	9209      	str	r2, [sp, #36]	; 0x24
 8011206:	f89a 3000 	ldrb.w	r3, [sl]
 801120a:	2b00      	cmp	r3, #0
 801120c:	f000 80a2 	beq.w	8011354 <_svfiprintf_r+0x1c8>
 8011210:	2300      	movs	r3, #0
 8011212:	f04f 32ff 	mov.w	r2, #4294967295
 8011216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801121a:	f10a 0a01 	add.w	sl, sl, #1
 801121e:	9304      	str	r3, [sp, #16]
 8011220:	9307      	str	r3, [sp, #28]
 8011222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011226:	931a      	str	r3, [sp, #104]	; 0x68
 8011228:	4654      	mov	r4, sl
 801122a:	2205      	movs	r2, #5
 801122c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011230:	4851      	ldr	r0, [pc, #324]	; (8011378 <_svfiprintf_r+0x1ec>)
 8011232:	f000 fa41 	bl	80116b8 <memchr>
 8011236:	9a04      	ldr	r2, [sp, #16]
 8011238:	b9d8      	cbnz	r0, 8011272 <_svfiprintf_r+0xe6>
 801123a:	06d0      	lsls	r0, r2, #27
 801123c:	bf44      	itt	mi
 801123e:	2320      	movmi	r3, #32
 8011240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011244:	0711      	lsls	r1, r2, #28
 8011246:	bf44      	itt	mi
 8011248:	232b      	movmi	r3, #43	; 0x2b
 801124a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801124e:	f89a 3000 	ldrb.w	r3, [sl]
 8011252:	2b2a      	cmp	r3, #42	; 0x2a
 8011254:	d015      	beq.n	8011282 <_svfiprintf_r+0xf6>
 8011256:	4654      	mov	r4, sl
 8011258:	2000      	movs	r0, #0
 801125a:	f04f 0c0a 	mov.w	ip, #10
 801125e:	9a07      	ldr	r2, [sp, #28]
 8011260:	4621      	mov	r1, r4
 8011262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011266:	3b30      	subs	r3, #48	; 0x30
 8011268:	2b09      	cmp	r3, #9
 801126a:	d94e      	bls.n	801130a <_svfiprintf_r+0x17e>
 801126c:	b1b0      	cbz	r0, 801129c <_svfiprintf_r+0x110>
 801126e:	9207      	str	r2, [sp, #28]
 8011270:	e014      	b.n	801129c <_svfiprintf_r+0x110>
 8011272:	eba0 0308 	sub.w	r3, r0, r8
 8011276:	fa09 f303 	lsl.w	r3, r9, r3
 801127a:	4313      	orrs	r3, r2
 801127c:	46a2      	mov	sl, r4
 801127e:	9304      	str	r3, [sp, #16]
 8011280:	e7d2      	b.n	8011228 <_svfiprintf_r+0x9c>
 8011282:	9b03      	ldr	r3, [sp, #12]
 8011284:	1d19      	adds	r1, r3, #4
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	9103      	str	r1, [sp, #12]
 801128a:	2b00      	cmp	r3, #0
 801128c:	bfbb      	ittet	lt
 801128e:	425b      	neglt	r3, r3
 8011290:	f042 0202 	orrlt.w	r2, r2, #2
 8011294:	9307      	strge	r3, [sp, #28]
 8011296:	9307      	strlt	r3, [sp, #28]
 8011298:	bfb8      	it	lt
 801129a:	9204      	strlt	r2, [sp, #16]
 801129c:	7823      	ldrb	r3, [r4, #0]
 801129e:	2b2e      	cmp	r3, #46	; 0x2e
 80112a0:	d10c      	bne.n	80112bc <_svfiprintf_r+0x130>
 80112a2:	7863      	ldrb	r3, [r4, #1]
 80112a4:	2b2a      	cmp	r3, #42	; 0x2a
 80112a6:	d135      	bne.n	8011314 <_svfiprintf_r+0x188>
 80112a8:	9b03      	ldr	r3, [sp, #12]
 80112aa:	3402      	adds	r4, #2
 80112ac:	1d1a      	adds	r2, r3, #4
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	9203      	str	r2, [sp, #12]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	bfb8      	it	lt
 80112b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80112ba:	9305      	str	r3, [sp, #20]
 80112bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801137c <_svfiprintf_r+0x1f0>
 80112c0:	2203      	movs	r2, #3
 80112c2:	4650      	mov	r0, sl
 80112c4:	7821      	ldrb	r1, [r4, #0]
 80112c6:	f000 f9f7 	bl	80116b8 <memchr>
 80112ca:	b140      	cbz	r0, 80112de <_svfiprintf_r+0x152>
 80112cc:	2340      	movs	r3, #64	; 0x40
 80112ce:	eba0 000a 	sub.w	r0, r0, sl
 80112d2:	fa03 f000 	lsl.w	r0, r3, r0
 80112d6:	9b04      	ldr	r3, [sp, #16]
 80112d8:	3401      	adds	r4, #1
 80112da:	4303      	orrs	r3, r0
 80112dc:	9304      	str	r3, [sp, #16]
 80112de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112e2:	2206      	movs	r2, #6
 80112e4:	4826      	ldr	r0, [pc, #152]	; (8011380 <_svfiprintf_r+0x1f4>)
 80112e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112ea:	f000 f9e5 	bl	80116b8 <memchr>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d038      	beq.n	8011364 <_svfiprintf_r+0x1d8>
 80112f2:	4b24      	ldr	r3, [pc, #144]	; (8011384 <_svfiprintf_r+0x1f8>)
 80112f4:	bb1b      	cbnz	r3, 801133e <_svfiprintf_r+0x1b2>
 80112f6:	9b03      	ldr	r3, [sp, #12]
 80112f8:	3307      	adds	r3, #7
 80112fa:	f023 0307 	bic.w	r3, r3, #7
 80112fe:	3308      	adds	r3, #8
 8011300:	9303      	str	r3, [sp, #12]
 8011302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011304:	4433      	add	r3, r6
 8011306:	9309      	str	r3, [sp, #36]	; 0x24
 8011308:	e767      	b.n	80111da <_svfiprintf_r+0x4e>
 801130a:	460c      	mov	r4, r1
 801130c:	2001      	movs	r0, #1
 801130e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011312:	e7a5      	b.n	8011260 <_svfiprintf_r+0xd4>
 8011314:	2300      	movs	r3, #0
 8011316:	f04f 0c0a 	mov.w	ip, #10
 801131a:	4619      	mov	r1, r3
 801131c:	3401      	adds	r4, #1
 801131e:	9305      	str	r3, [sp, #20]
 8011320:	4620      	mov	r0, r4
 8011322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011326:	3a30      	subs	r2, #48	; 0x30
 8011328:	2a09      	cmp	r2, #9
 801132a:	d903      	bls.n	8011334 <_svfiprintf_r+0x1a8>
 801132c:	2b00      	cmp	r3, #0
 801132e:	d0c5      	beq.n	80112bc <_svfiprintf_r+0x130>
 8011330:	9105      	str	r1, [sp, #20]
 8011332:	e7c3      	b.n	80112bc <_svfiprintf_r+0x130>
 8011334:	4604      	mov	r4, r0
 8011336:	2301      	movs	r3, #1
 8011338:	fb0c 2101 	mla	r1, ip, r1, r2
 801133c:	e7f0      	b.n	8011320 <_svfiprintf_r+0x194>
 801133e:	ab03      	add	r3, sp, #12
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	462a      	mov	r2, r5
 8011344:	4638      	mov	r0, r7
 8011346:	4b10      	ldr	r3, [pc, #64]	; (8011388 <_svfiprintf_r+0x1fc>)
 8011348:	a904      	add	r1, sp, #16
 801134a:	f3af 8000 	nop.w
 801134e:	1c42      	adds	r2, r0, #1
 8011350:	4606      	mov	r6, r0
 8011352:	d1d6      	bne.n	8011302 <_svfiprintf_r+0x176>
 8011354:	89ab      	ldrh	r3, [r5, #12]
 8011356:	065b      	lsls	r3, r3, #25
 8011358:	f53f af2c 	bmi.w	80111b4 <_svfiprintf_r+0x28>
 801135c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801135e:	b01d      	add	sp, #116	; 0x74
 8011360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011364:	ab03      	add	r3, sp, #12
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	462a      	mov	r2, r5
 801136a:	4638      	mov	r0, r7
 801136c:	4b06      	ldr	r3, [pc, #24]	; (8011388 <_svfiprintf_r+0x1fc>)
 801136e:	a904      	add	r1, sp, #16
 8011370:	f000 f87c 	bl	801146c <_printf_i>
 8011374:	e7eb      	b.n	801134e <_svfiprintf_r+0x1c2>
 8011376:	bf00      	nop
 8011378:	08011d49 	.word	0x08011d49
 801137c:	08011d4f 	.word	0x08011d4f
 8011380:	08011d53 	.word	0x08011d53
 8011384:	00000000 	.word	0x00000000
 8011388:	080110d5 	.word	0x080110d5

0801138c <_printf_common>:
 801138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011390:	4616      	mov	r6, r2
 8011392:	4699      	mov	r9, r3
 8011394:	688a      	ldr	r2, [r1, #8]
 8011396:	690b      	ldr	r3, [r1, #16]
 8011398:	4607      	mov	r7, r0
 801139a:	4293      	cmp	r3, r2
 801139c:	bfb8      	it	lt
 801139e:	4613      	movlt	r3, r2
 80113a0:	6033      	str	r3, [r6, #0]
 80113a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113a6:	460c      	mov	r4, r1
 80113a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113ac:	b10a      	cbz	r2, 80113b2 <_printf_common+0x26>
 80113ae:	3301      	adds	r3, #1
 80113b0:	6033      	str	r3, [r6, #0]
 80113b2:	6823      	ldr	r3, [r4, #0]
 80113b4:	0699      	lsls	r1, r3, #26
 80113b6:	bf42      	ittt	mi
 80113b8:	6833      	ldrmi	r3, [r6, #0]
 80113ba:	3302      	addmi	r3, #2
 80113bc:	6033      	strmi	r3, [r6, #0]
 80113be:	6825      	ldr	r5, [r4, #0]
 80113c0:	f015 0506 	ands.w	r5, r5, #6
 80113c4:	d106      	bne.n	80113d4 <_printf_common+0x48>
 80113c6:	f104 0a19 	add.w	sl, r4, #25
 80113ca:	68e3      	ldr	r3, [r4, #12]
 80113cc:	6832      	ldr	r2, [r6, #0]
 80113ce:	1a9b      	subs	r3, r3, r2
 80113d0:	42ab      	cmp	r3, r5
 80113d2:	dc28      	bgt.n	8011426 <_printf_common+0x9a>
 80113d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80113d8:	1e13      	subs	r3, r2, #0
 80113da:	6822      	ldr	r2, [r4, #0]
 80113dc:	bf18      	it	ne
 80113de:	2301      	movne	r3, #1
 80113e0:	0692      	lsls	r2, r2, #26
 80113e2:	d42d      	bmi.n	8011440 <_printf_common+0xb4>
 80113e4:	4649      	mov	r1, r9
 80113e6:	4638      	mov	r0, r7
 80113e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113ec:	47c0      	blx	r8
 80113ee:	3001      	adds	r0, #1
 80113f0:	d020      	beq.n	8011434 <_printf_common+0xa8>
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	68e5      	ldr	r5, [r4, #12]
 80113f6:	f003 0306 	and.w	r3, r3, #6
 80113fa:	2b04      	cmp	r3, #4
 80113fc:	bf18      	it	ne
 80113fe:	2500      	movne	r5, #0
 8011400:	6832      	ldr	r2, [r6, #0]
 8011402:	f04f 0600 	mov.w	r6, #0
 8011406:	68a3      	ldr	r3, [r4, #8]
 8011408:	bf08      	it	eq
 801140a:	1aad      	subeq	r5, r5, r2
 801140c:	6922      	ldr	r2, [r4, #16]
 801140e:	bf08      	it	eq
 8011410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011414:	4293      	cmp	r3, r2
 8011416:	bfc4      	itt	gt
 8011418:	1a9b      	subgt	r3, r3, r2
 801141a:	18ed      	addgt	r5, r5, r3
 801141c:	341a      	adds	r4, #26
 801141e:	42b5      	cmp	r5, r6
 8011420:	d11a      	bne.n	8011458 <_printf_common+0xcc>
 8011422:	2000      	movs	r0, #0
 8011424:	e008      	b.n	8011438 <_printf_common+0xac>
 8011426:	2301      	movs	r3, #1
 8011428:	4652      	mov	r2, sl
 801142a:	4649      	mov	r1, r9
 801142c:	4638      	mov	r0, r7
 801142e:	47c0      	blx	r8
 8011430:	3001      	adds	r0, #1
 8011432:	d103      	bne.n	801143c <_printf_common+0xb0>
 8011434:	f04f 30ff 	mov.w	r0, #4294967295
 8011438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143c:	3501      	adds	r5, #1
 801143e:	e7c4      	b.n	80113ca <_printf_common+0x3e>
 8011440:	2030      	movs	r0, #48	; 0x30
 8011442:	18e1      	adds	r1, r4, r3
 8011444:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011448:	1c5a      	adds	r2, r3, #1
 801144a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801144e:	4422      	add	r2, r4
 8011450:	3302      	adds	r3, #2
 8011452:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011456:	e7c5      	b.n	80113e4 <_printf_common+0x58>
 8011458:	2301      	movs	r3, #1
 801145a:	4622      	mov	r2, r4
 801145c:	4649      	mov	r1, r9
 801145e:	4638      	mov	r0, r7
 8011460:	47c0      	blx	r8
 8011462:	3001      	adds	r0, #1
 8011464:	d0e6      	beq.n	8011434 <_printf_common+0xa8>
 8011466:	3601      	adds	r6, #1
 8011468:	e7d9      	b.n	801141e <_printf_common+0x92>
	...

0801146c <_printf_i>:
 801146c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011470:	7e0f      	ldrb	r7, [r1, #24]
 8011472:	4691      	mov	r9, r2
 8011474:	2f78      	cmp	r7, #120	; 0x78
 8011476:	4680      	mov	r8, r0
 8011478:	460c      	mov	r4, r1
 801147a:	469a      	mov	sl, r3
 801147c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801147e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011482:	d807      	bhi.n	8011494 <_printf_i+0x28>
 8011484:	2f62      	cmp	r7, #98	; 0x62
 8011486:	d80a      	bhi.n	801149e <_printf_i+0x32>
 8011488:	2f00      	cmp	r7, #0
 801148a:	f000 80d9 	beq.w	8011640 <_printf_i+0x1d4>
 801148e:	2f58      	cmp	r7, #88	; 0x58
 8011490:	f000 80a4 	beq.w	80115dc <_printf_i+0x170>
 8011494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801149c:	e03a      	b.n	8011514 <_printf_i+0xa8>
 801149e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114a2:	2b15      	cmp	r3, #21
 80114a4:	d8f6      	bhi.n	8011494 <_printf_i+0x28>
 80114a6:	a101      	add	r1, pc, #4	; (adr r1, 80114ac <_printf_i+0x40>)
 80114a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114ac:	08011505 	.word	0x08011505
 80114b0:	08011519 	.word	0x08011519
 80114b4:	08011495 	.word	0x08011495
 80114b8:	08011495 	.word	0x08011495
 80114bc:	08011495 	.word	0x08011495
 80114c0:	08011495 	.word	0x08011495
 80114c4:	08011519 	.word	0x08011519
 80114c8:	08011495 	.word	0x08011495
 80114cc:	08011495 	.word	0x08011495
 80114d0:	08011495 	.word	0x08011495
 80114d4:	08011495 	.word	0x08011495
 80114d8:	08011627 	.word	0x08011627
 80114dc:	08011549 	.word	0x08011549
 80114e0:	08011609 	.word	0x08011609
 80114e4:	08011495 	.word	0x08011495
 80114e8:	08011495 	.word	0x08011495
 80114ec:	08011649 	.word	0x08011649
 80114f0:	08011495 	.word	0x08011495
 80114f4:	08011549 	.word	0x08011549
 80114f8:	08011495 	.word	0x08011495
 80114fc:	08011495 	.word	0x08011495
 8011500:	08011611 	.word	0x08011611
 8011504:	682b      	ldr	r3, [r5, #0]
 8011506:	1d1a      	adds	r2, r3, #4
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	602a      	str	r2, [r5, #0]
 801150c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011514:	2301      	movs	r3, #1
 8011516:	e0a4      	b.n	8011662 <_printf_i+0x1f6>
 8011518:	6820      	ldr	r0, [r4, #0]
 801151a:	6829      	ldr	r1, [r5, #0]
 801151c:	0606      	lsls	r6, r0, #24
 801151e:	f101 0304 	add.w	r3, r1, #4
 8011522:	d50a      	bpl.n	801153a <_printf_i+0xce>
 8011524:	680e      	ldr	r6, [r1, #0]
 8011526:	602b      	str	r3, [r5, #0]
 8011528:	2e00      	cmp	r6, #0
 801152a:	da03      	bge.n	8011534 <_printf_i+0xc8>
 801152c:	232d      	movs	r3, #45	; 0x2d
 801152e:	4276      	negs	r6, r6
 8011530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011534:	230a      	movs	r3, #10
 8011536:	485e      	ldr	r0, [pc, #376]	; (80116b0 <_printf_i+0x244>)
 8011538:	e019      	b.n	801156e <_printf_i+0x102>
 801153a:	680e      	ldr	r6, [r1, #0]
 801153c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011540:	602b      	str	r3, [r5, #0]
 8011542:	bf18      	it	ne
 8011544:	b236      	sxthne	r6, r6
 8011546:	e7ef      	b.n	8011528 <_printf_i+0xbc>
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	6820      	ldr	r0, [r4, #0]
 801154c:	1d19      	adds	r1, r3, #4
 801154e:	6029      	str	r1, [r5, #0]
 8011550:	0601      	lsls	r1, r0, #24
 8011552:	d501      	bpl.n	8011558 <_printf_i+0xec>
 8011554:	681e      	ldr	r6, [r3, #0]
 8011556:	e002      	b.n	801155e <_printf_i+0xf2>
 8011558:	0646      	lsls	r6, r0, #25
 801155a:	d5fb      	bpl.n	8011554 <_printf_i+0xe8>
 801155c:	881e      	ldrh	r6, [r3, #0]
 801155e:	2f6f      	cmp	r7, #111	; 0x6f
 8011560:	bf0c      	ite	eq
 8011562:	2308      	moveq	r3, #8
 8011564:	230a      	movne	r3, #10
 8011566:	4852      	ldr	r0, [pc, #328]	; (80116b0 <_printf_i+0x244>)
 8011568:	2100      	movs	r1, #0
 801156a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801156e:	6865      	ldr	r5, [r4, #4]
 8011570:	2d00      	cmp	r5, #0
 8011572:	bfa8      	it	ge
 8011574:	6821      	ldrge	r1, [r4, #0]
 8011576:	60a5      	str	r5, [r4, #8]
 8011578:	bfa4      	itt	ge
 801157a:	f021 0104 	bicge.w	r1, r1, #4
 801157e:	6021      	strge	r1, [r4, #0]
 8011580:	b90e      	cbnz	r6, 8011586 <_printf_i+0x11a>
 8011582:	2d00      	cmp	r5, #0
 8011584:	d04d      	beq.n	8011622 <_printf_i+0x1b6>
 8011586:	4615      	mov	r5, r2
 8011588:	fbb6 f1f3 	udiv	r1, r6, r3
 801158c:	fb03 6711 	mls	r7, r3, r1, r6
 8011590:	5dc7      	ldrb	r7, [r0, r7]
 8011592:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011596:	4637      	mov	r7, r6
 8011598:	42bb      	cmp	r3, r7
 801159a:	460e      	mov	r6, r1
 801159c:	d9f4      	bls.n	8011588 <_printf_i+0x11c>
 801159e:	2b08      	cmp	r3, #8
 80115a0:	d10b      	bne.n	80115ba <_printf_i+0x14e>
 80115a2:	6823      	ldr	r3, [r4, #0]
 80115a4:	07de      	lsls	r6, r3, #31
 80115a6:	d508      	bpl.n	80115ba <_printf_i+0x14e>
 80115a8:	6923      	ldr	r3, [r4, #16]
 80115aa:	6861      	ldr	r1, [r4, #4]
 80115ac:	4299      	cmp	r1, r3
 80115ae:	bfde      	ittt	le
 80115b0:	2330      	movle	r3, #48	; 0x30
 80115b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80115b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80115ba:	1b52      	subs	r2, r2, r5
 80115bc:	6122      	str	r2, [r4, #16]
 80115be:	464b      	mov	r3, r9
 80115c0:	4621      	mov	r1, r4
 80115c2:	4640      	mov	r0, r8
 80115c4:	f8cd a000 	str.w	sl, [sp]
 80115c8:	aa03      	add	r2, sp, #12
 80115ca:	f7ff fedf 	bl	801138c <_printf_common>
 80115ce:	3001      	adds	r0, #1
 80115d0:	d14c      	bne.n	801166c <_printf_i+0x200>
 80115d2:	f04f 30ff 	mov.w	r0, #4294967295
 80115d6:	b004      	add	sp, #16
 80115d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115dc:	4834      	ldr	r0, [pc, #208]	; (80116b0 <_printf_i+0x244>)
 80115de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80115e2:	6829      	ldr	r1, [r5, #0]
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80115ea:	6029      	str	r1, [r5, #0]
 80115ec:	061d      	lsls	r5, r3, #24
 80115ee:	d514      	bpl.n	801161a <_printf_i+0x1ae>
 80115f0:	07df      	lsls	r7, r3, #31
 80115f2:	bf44      	itt	mi
 80115f4:	f043 0320 	orrmi.w	r3, r3, #32
 80115f8:	6023      	strmi	r3, [r4, #0]
 80115fa:	b91e      	cbnz	r6, 8011604 <_printf_i+0x198>
 80115fc:	6823      	ldr	r3, [r4, #0]
 80115fe:	f023 0320 	bic.w	r3, r3, #32
 8011602:	6023      	str	r3, [r4, #0]
 8011604:	2310      	movs	r3, #16
 8011606:	e7af      	b.n	8011568 <_printf_i+0xfc>
 8011608:	6823      	ldr	r3, [r4, #0]
 801160a:	f043 0320 	orr.w	r3, r3, #32
 801160e:	6023      	str	r3, [r4, #0]
 8011610:	2378      	movs	r3, #120	; 0x78
 8011612:	4828      	ldr	r0, [pc, #160]	; (80116b4 <_printf_i+0x248>)
 8011614:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011618:	e7e3      	b.n	80115e2 <_printf_i+0x176>
 801161a:	0659      	lsls	r1, r3, #25
 801161c:	bf48      	it	mi
 801161e:	b2b6      	uxthmi	r6, r6
 8011620:	e7e6      	b.n	80115f0 <_printf_i+0x184>
 8011622:	4615      	mov	r5, r2
 8011624:	e7bb      	b.n	801159e <_printf_i+0x132>
 8011626:	682b      	ldr	r3, [r5, #0]
 8011628:	6826      	ldr	r6, [r4, #0]
 801162a:	1d18      	adds	r0, r3, #4
 801162c:	6961      	ldr	r1, [r4, #20]
 801162e:	6028      	str	r0, [r5, #0]
 8011630:	0635      	lsls	r5, r6, #24
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	d501      	bpl.n	801163a <_printf_i+0x1ce>
 8011636:	6019      	str	r1, [r3, #0]
 8011638:	e002      	b.n	8011640 <_printf_i+0x1d4>
 801163a:	0670      	lsls	r0, r6, #25
 801163c:	d5fb      	bpl.n	8011636 <_printf_i+0x1ca>
 801163e:	8019      	strh	r1, [r3, #0]
 8011640:	2300      	movs	r3, #0
 8011642:	4615      	mov	r5, r2
 8011644:	6123      	str	r3, [r4, #16]
 8011646:	e7ba      	b.n	80115be <_printf_i+0x152>
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	2100      	movs	r1, #0
 801164c:	1d1a      	adds	r2, r3, #4
 801164e:	602a      	str	r2, [r5, #0]
 8011650:	681d      	ldr	r5, [r3, #0]
 8011652:	6862      	ldr	r2, [r4, #4]
 8011654:	4628      	mov	r0, r5
 8011656:	f000 f82f 	bl	80116b8 <memchr>
 801165a:	b108      	cbz	r0, 8011660 <_printf_i+0x1f4>
 801165c:	1b40      	subs	r0, r0, r5
 801165e:	6060      	str	r0, [r4, #4]
 8011660:	6863      	ldr	r3, [r4, #4]
 8011662:	6123      	str	r3, [r4, #16]
 8011664:	2300      	movs	r3, #0
 8011666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801166a:	e7a8      	b.n	80115be <_printf_i+0x152>
 801166c:	462a      	mov	r2, r5
 801166e:	4649      	mov	r1, r9
 8011670:	4640      	mov	r0, r8
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	47d0      	blx	sl
 8011676:	3001      	adds	r0, #1
 8011678:	d0ab      	beq.n	80115d2 <_printf_i+0x166>
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	079b      	lsls	r3, r3, #30
 801167e:	d413      	bmi.n	80116a8 <_printf_i+0x23c>
 8011680:	68e0      	ldr	r0, [r4, #12]
 8011682:	9b03      	ldr	r3, [sp, #12]
 8011684:	4298      	cmp	r0, r3
 8011686:	bfb8      	it	lt
 8011688:	4618      	movlt	r0, r3
 801168a:	e7a4      	b.n	80115d6 <_printf_i+0x16a>
 801168c:	2301      	movs	r3, #1
 801168e:	4632      	mov	r2, r6
 8011690:	4649      	mov	r1, r9
 8011692:	4640      	mov	r0, r8
 8011694:	47d0      	blx	sl
 8011696:	3001      	adds	r0, #1
 8011698:	d09b      	beq.n	80115d2 <_printf_i+0x166>
 801169a:	3501      	adds	r5, #1
 801169c:	68e3      	ldr	r3, [r4, #12]
 801169e:	9903      	ldr	r1, [sp, #12]
 80116a0:	1a5b      	subs	r3, r3, r1
 80116a2:	42ab      	cmp	r3, r5
 80116a4:	dcf2      	bgt.n	801168c <_printf_i+0x220>
 80116a6:	e7eb      	b.n	8011680 <_printf_i+0x214>
 80116a8:	2500      	movs	r5, #0
 80116aa:	f104 0619 	add.w	r6, r4, #25
 80116ae:	e7f5      	b.n	801169c <_printf_i+0x230>
 80116b0:	08011d5a 	.word	0x08011d5a
 80116b4:	08011d6b 	.word	0x08011d6b

080116b8 <memchr>:
 80116b8:	4603      	mov	r3, r0
 80116ba:	b510      	push	{r4, lr}
 80116bc:	b2c9      	uxtb	r1, r1
 80116be:	4402      	add	r2, r0
 80116c0:	4293      	cmp	r3, r2
 80116c2:	4618      	mov	r0, r3
 80116c4:	d101      	bne.n	80116ca <memchr+0x12>
 80116c6:	2000      	movs	r0, #0
 80116c8:	e003      	b.n	80116d2 <memchr+0x1a>
 80116ca:	7804      	ldrb	r4, [r0, #0]
 80116cc:	3301      	adds	r3, #1
 80116ce:	428c      	cmp	r4, r1
 80116d0:	d1f6      	bne.n	80116c0 <memchr+0x8>
 80116d2:	bd10      	pop	{r4, pc}

080116d4 <memmove>:
 80116d4:	4288      	cmp	r0, r1
 80116d6:	b510      	push	{r4, lr}
 80116d8:	eb01 0402 	add.w	r4, r1, r2
 80116dc:	d902      	bls.n	80116e4 <memmove+0x10>
 80116de:	4284      	cmp	r4, r0
 80116e0:	4623      	mov	r3, r4
 80116e2:	d807      	bhi.n	80116f4 <memmove+0x20>
 80116e4:	1e43      	subs	r3, r0, #1
 80116e6:	42a1      	cmp	r1, r4
 80116e8:	d008      	beq.n	80116fc <memmove+0x28>
 80116ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116f2:	e7f8      	b.n	80116e6 <memmove+0x12>
 80116f4:	4601      	mov	r1, r0
 80116f6:	4402      	add	r2, r0
 80116f8:	428a      	cmp	r2, r1
 80116fa:	d100      	bne.n	80116fe <memmove+0x2a>
 80116fc:	bd10      	pop	{r4, pc}
 80116fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011706:	e7f7      	b.n	80116f8 <memmove+0x24>

08011708 <_free_r>:
 8011708:	b538      	push	{r3, r4, r5, lr}
 801170a:	4605      	mov	r5, r0
 801170c:	2900      	cmp	r1, #0
 801170e:	d040      	beq.n	8011792 <_free_r+0x8a>
 8011710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011714:	1f0c      	subs	r4, r1, #4
 8011716:	2b00      	cmp	r3, #0
 8011718:	bfb8      	it	lt
 801171a:	18e4      	addlt	r4, r4, r3
 801171c:	f000 f910 	bl	8011940 <__malloc_lock>
 8011720:	4a1c      	ldr	r2, [pc, #112]	; (8011794 <_free_r+0x8c>)
 8011722:	6813      	ldr	r3, [r2, #0]
 8011724:	b933      	cbnz	r3, 8011734 <_free_r+0x2c>
 8011726:	6063      	str	r3, [r4, #4]
 8011728:	6014      	str	r4, [r2, #0]
 801172a:	4628      	mov	r0, r5
 801172c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011730:	f000 b90c 	b.w	801194c <__malloc_unlock>
 8011734:	42a3      	cmp	r3, r4
 8011736:	d908      	bls.n	801174a <_free_r+0x42>
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	1821      	adds	r1, r4, r0
 801173c:	428b      	cmp	r3, r1
 801173e:	bf01      	itttt	eq
 8011740:	6819      	ldreq	r1, [r3, #0]
 8011742:	685b      	ldreq	r3, [r3, #4]
 8011744:	1809      	addeq	r1, r1, r0
 8011746:	6021      	streq	r1, [r4, #0]
 8011748:	e7ed      	b.n	8011726 <_free_r+0x1e>
 801174a:	461a      	mov	r2, r3
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	b10b      	cbz	r3, 8011754 <_free_r+0x4c>
 8011750:	42a3      	cmp	r3, r4
 8011752:	d9fa      	bls.n	801174a <_free_r+0x42>
 8011754:	6811      	ldr	r1, [r2, #0]
 8011756:	1850      	adds	r0, r2, r1
 8011758:	42a0      	cmp	r0, r4
 801175a:	d10b      	bne.n	8011774 <_free_r+0x6c>
 801175c:	6820      	ldr	r0, [r4, #0]
 801175e:	4401      	add	r1, r0
 8011760:	1850      	adds	r0, r2, r1
 8011762:	4283      	cmp	r3, r0
 8011764:	6011      	str	r1, [r2, #0]
 8011766:	d1e0      	bne.n	801172a <_free_r+0x22>
 8011768:	6818      	ldr	r0, [r3, #0]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	4401      	add	r1, r0
 801176e:	6011      	str	r1, [r2, #0]
 8011770:	6053      	str	r3, [r2, #4]
 8011772:	e7da      	b.n	801172a <_free_r+0x22>
 8011774:	d902      	bls.n	801177c <_free_r+0x74>
 8011776:	230c      	movs	r3, #12
 8011778:	602b      	str	r3, [r5, #0]
 801177a:	e7d6      	b.n	801172a <_free_r+0x22>
 801177c:	6820      	ldr	r0, [r4, #0]
 801177e:	1821      	adds	r1, r4, r0
 8011780:	428b      	cmp	r3, r1
 8011782:	bf01      	itttt	eq
 8011784:	6819      	ldreq	r1, [r3, #0]
 8011786:	685b      	ldreq	r3, [r3, #4]
 8011788:	1809      	addeq	r1, r1, r0
 801178a:	6021      	streq	r1, [r4, #0]
 801178c:	6063      	str	r3, [r4, #4]
 801178e:	6054      	str	r4, [r2, #4]
 8011790:	e7cb      	b.n	801172a <_free_r+0x22>
 8011792:	bd38      	pop	{r3, r4, r5, pc}
 8011794:	20000494 	.word	0x20000494

08011798 <sbrk_aligned>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	4e0e      	ldr	r6, [pc, #56]	; (80117d4 <sbrk_aligned+0x3c>)
 801179c:	460c      	mov	r4, r1
 801179e:	6831      	ldr	r1, [r6, #0]
 80117a0:	4605      	mov	r5, r0
 80117a2:	b911      	cbnz	r1, 80117aa <sbrk_aligned+0x12>
 80117a4:	f000 f8bc 	bl	8011920 <_sbrk_r>
 80117a8:	6030      	str	r0, [r6, #0]
 80117aa:	4621      	mov	r1, r4
 80117ac:	4628      	mov	r0, r5
 80117ae:	f000 f8b7 	bl	8011920 <_sbrk_r>
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	d00a      	beq.n	80117cc <sbrk_aligned+0x34>
 80117b6:	1cc4      	adds	r4, r0, #3
 80117b8:	f024 0403 	bic.w	r4, r4, #3
 80117bc:	42a0      	cmp	r0, r4
 80117be:	d007      	beq.n	80117d0 <sbrk_aligned+0x38>
 80117c0:	1a21      	subs	r1, r4, r0
 80117c2:	4628      	mov	r0, r5
 80117c4:	f000 f8ac 	bl	8011920 <_sbrk_r>
 80117c8:	3001      	adds	r0, #1
 80117ca:	d101      	bne.n	80117d0 <sbrk_aligned+0x38>
 80117cc:	f04f 34ff 	mov.w	r4, #4294967295
 80117d0:	4620      	mov	r0, r4
 80117d2:	bd70      	pop	{r4, r5, r6, pc}
 80117d4:	20000498 	.word	0x20000498

080117d8 <_malloc_r>:
 80117d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117dc:	1ccd      	adds	r5, r1, #3
 80117de:	f025 0503 	bic.w	r5, r5, #3
 80117e2:	3508      	adds	r5, #8
 80117e4:	2d0c      	cmp	r5, #12
 80117e6:	bf38      	it	cc
 80117e8:	250c      	movcc	r5, #12
 80117ea:	2d00      	cmp	r5, #0
 80117ec:	4607      	mov	r7, r0
 80117ee:	db01      	blt.n	80117f4 <_malloc_r+0x1c>
 80117f0:	42a9      	cmp	r1, r5
 80117f2:	d905      	bls.n	8011800 <_malloc_r+0x28>
 80117f4:	230c      	movs	r3, #12
 80117f6:	2600      	movs	r6, #0
 80117f8:	603b      	str	r3, [r7, #0]
 80117fa:	4630      	mov	r0, r6
 80117fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011800:	4e2e      	ldr	r6, [pc, #184]	; (80118bc <_malloc_r+0xe4>)
 8011802:	f000 f89d 	bl	8011940 <__malloc_lock>
 8011806:	6833      	ldr	r3, [r6, #0]
 8011808:	461c      	mov	r4, r3
 801180a:	bb34      	cbnz	r4, 801185a <_malloc_r+0x82>
 801180c:	4629      	mov	r1, r5
 801180e:	4638      	mov	r0, r7
 8011810:	f7ff ffc2 	bl	8011798 <sbrk_aligned>
 8011814:	1c43      	adds	r3, r0, #1
 8011816:	4604      	mov	r4, r0
 8011818:	d14d      	bne.n	80118b6 <_malloc_r+0xde>
 801181a:	6834      	ldr	r4, [r6, #0]
 801181c:	4626      	mov	r6, r4
 801181e:	2e00      	cmp	r6, #0
 8011820:	d140      	bne.n	80118a4 <_malloc_r+0xcc>
 8011822:	6823      	ldr	r3, [r4, #0]
 8011824:	4631      	mov	r1, r6
 8011826:	4638      	mov	r0, r7
 8011828:	eb04 0803 	add.w	r8, r4, r3
 801182c:	f000 f878 	bl	8011920 <_sbrk_r>
 8011830:	4580      	cmp	r8, r0
 8011832:	d13a      	bne.n	80118aa <_malloc_r+0xd2>
 8011834:	6821      	ldr	r1, [r4, #0]
 8011836:	3503      	adds	r5, #3
 8011838:	1a6d      	subs	r5, r5, r1
 801183a:	f025 0503 	bic.w	r5, r5, #3
 801183e:	3508      	adds	r5, #8
 8011840:	2d0c      	cmp	r5, #12
 8011842:	bf38      	it	cc
 8011844:	250c      	movcc	r5, #12
 8011846:	4638      	mov	r0, r7
 8011848:	4629      	mov	r1, r5
 801184a:	f7ff ffa5 	bl	8011798 <sbrk_aligned>
 801184e:	3001      	adds	r0, #1
 8011850:	d02b      	beq.n	80118aa <_malloc_r+0xd2>
 8011852:	6823      	ldr	r3, [r4, #0]
 8011854:	442b      	add	r3, r5
 8011856:	6023      	str	r3, [r4, #0]
 8011858:	e00e      	b.n	8011878 <_malloc_r+0xa0>
 801185a:	6822      	ldr	r2, [r4, #0]
 801185c:	1b52      	subs	r2, r2, r5
 801185e:	d41e      	bmi.n	801189e <_malloc_r+0xc6>
 8011860:	2a0b      	cmp	r2, #11
 8011862:	d916      	bls.n	8011892 <_malloc_r+0xba>
 8011864:	1961      	adds	r1, r4, r5
 8011866:	42a3      	cmp	r3, r4
 8011868:	6025      	str	r5, [r4, #0]
 801186a:	bf18      	it	ne
 801186c:	6059      	strne	r1, [r3, #4]
 801186e:	6863      	ldr	r3, [r4, #4]
 8011870:	bf08      	it	eq
 8011872:	6031      	streq	r1, [r6, #0]
 8011874:	5162      	str	r2, [r4, r5]
 8011876:	604b      	str	r3, [r1, #4]
 8011878:	4638      	mov	r0, r7
 801187a:	f104 060b 	add.w	r6, r4, #11
 801187e:	f000 f865 	bl	801194c <__malloc_unlock>
 8011882:	f026 0607 	bic.w	r6, r6, #7
 8011886:	1d23      	adds	r3, r4, #4
 8011888:	1af2      	subs	r2, r6, r3
 801188a:	d0b6      	beq.n	80117fa <_malloc_r+0x22>
 801188c:	1b9b      	subs	r3, r3, r6
 801188e:	50a3      	str	r3, [r4, r2]
 8011890:	e7b3      	b.n	80117fa <_malloc_r+0x22>
 8011892:	6862      	ldr	r2, [r4, #4]
 8011894:	42a3      	cmp	r3, r4
 8011896:	bf0c      	ite	eq
 8011898:	6032      	streq	r2, [r6, #0]
 801189a:	605a      	strne	r2, [r3, #4]
 801189c:	e7ec      	b.n	8011878 <_malloc_r+0xa0>
 801189e:	4623      	mov	r3, r4
 80118a0:	6864      	ldr	r4, [r4, #4]
 80118a2:	e7b2      	b.n	801180a <_malloc_r+0x32>
 80118a4:	4634      	mov	r4, r6
 80118a6:	6876      	ldr	r6, [r6, #4]
 80118a8:	e7b9      	b.n	801181e <_malloc_r+0x46>
 80118aa:	230c      	movs	r3, #12
 80118ac:	4638      	mov	r0, r7
 80118ae:	603b      	str	r3, [r7, #0]
 80118b0:	f000 f84c 	bl	801194c <__malloc_unlock>
 80118b4:	e7a1      	b.n	80117fa <_malloc_r+0x22>
 80118b6:	6025      	str	r5, [r4, #0]
 80118b8:	e7de      	b.n	8011878 <_malloc_r+0xa0>
 80118ba:	bf00      	nop
 80118bc:	20000494 	.word	0x20000494

080118c0 <_realloc_r>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	4680      	mov	r8, r0
 80118c6:	4614      	mov	r4, r2
 80118c8:	460e      	mov	r6, r1
 80118ca:	b921      	cbnz	r1, 80118d6 <_realloc_r+0x16>
 80118cc:	4611      	mov	r1, r2
 80118ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118d2:	f7ff bf81 	b.w	80117d8 <_malloc_r>
 80118d6:	b92a      	cbnz	r2, 80118e4 <_realloc_r+0x24>
 80118d8:	f7ff ff16 	bl	8011708 <_free_r>
 80118dc:	4625      	mov	r5, r4
 80118de:	4628      	mov	r0, r5
 80118e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e4:	f000 f838 	bl	8011958 <_malloc_usable_size_r>
 80118e8:	4284      	cmp	r4, r0
 80118ea:	4607      	mov	r7, r0
 80118ec:	d802      	bhi.n	80118f4 <_realloc_r+0x34>
 80118ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118f2:	d812      	bhi.n	801191a <_realloc_r+0x5a>
 80118f4:	4621      	mov	r1, r4
 80118f6:	4640      	mov	r0, r8
 80118f8:	f7ff ff6e 	bl	80117d8 <_malloc_r>
 80118fc:	4605      	mov	r5, r0
 80118fe:	2800      	cmp	r0, #0
 8011900:	d0ed      	beq.n	80118de <_realloc_r+0x1e>
 8011902:	42bc      	cmp	r4, r7
 8011904:	4622      	mov	r2, r4
 8011906:	4631      	mov	r1, r6
 8011908:	bf28      	it	cs
 801190a:	463a      	movcs	r2, r7
 801190c:	f7ff fb12 	bl	8010f34 <memcpy>
 8011910:	4631      	mov	r1, r6
 8011912:	4640      	mov	r0, r8
 8011914:	f7ff fef8 	bl	8011708 <_free_r>
 8011918:	e7e1      	b.n	80118de <_realloc_r+0x1e>
 801191a:	4635      	mov	r5, r6
 801191c:	e7df      	b.n	80118de <_realloc_r+0x1e>
	...

08011920 <_sbrk_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	2300      	movs	r3, #0
 8011924:	4d05      	ldr	r5, [pc, #20]	; (801193c <_sbrk_r+0x1c>)
 8011926:	4604      	mov	r4, r0
 8011928:	4608      	mov	r0, r1
 801192a:	602b      	str	r3, [r5, #0]
 801192c:	f7fc fdf6 	bl	800e51c <_sbrk>
 8011930:	1c43      	adds	r3, r0, #1
 8011932:	d102      	bne.n	801193a <_sbrk_r+0x1a>
 8011934:	682b      	ldr	r3, [r5, #0]
 8011936:	b103      	cbz	r3, 801193a <_sbrk_r+0x1a>
 8011938:	6023      	str	r3, [r4, #0]
 801193a:	bd38      	pop	{r3, r4, r5, pc}
 801193c:	2000049c 	.word	0x2000049c

08011940 <__malloc_lock>:
 8011940:	4801      	ldr	r0, [pc, #4]	; (8011948 <__malloc_lock+0x8>)
 8011942:	f000 b811 	b.w	8011968 <__retarget_lock_acquire_recursive>
 8011946:	bf00      	nop
 8011948:	200004a0 	.word	0x200004a0

0801194c <__malloc_unlock>:
 801194c:	4801      	ldr	r0, [pc, #4]	; (8011954 <__malloc_unlock+0x8>)
 801194e:	f000 b80c 	b.w	801196a <__retarget_lock_release_recursive>
 8011952:	bf00      	nop
 8011954:	200004a0 	.word	0x200004a0

08011958 <_malloc_usable_size_r>:
 8011958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801195c:	1f18      	subs	r0, r3, #4
 801195e:	2b00      	cmp	r3, #0
 8011960:	bfbc      	itt	lt
 8011962:	580b      	ldrlt	r3, [r1, r0]
 8011964:	18c0      	addlt	r0, r0, r3
 8011966:	4770      	bx	lr

08011968 <__retarget_lock_acquire_recursive>:
 8011968:	4770      	bx	lr

0801196a <__retarget_lock_release_recursive>:
 801196a:	4770      	bx	lr

0801196c <_init>:
 801196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801196e:	bf00      	nop
 8011970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011972:	bc08      	pop	{r3}
 8011974:	469e      	mov	lr, r3
 8011976:	4770      	bx	lr

08011978 <_fini>:
 8011978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197a:	bf00      	nop
 801197c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801197e:	bc08      	pop	{r3}
 8011980:	469e      	mov	lr, r3
 8011982:	4770      	bx	lr
