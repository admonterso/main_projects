
lifOSMQTT_UPDATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  0800c10c  0800c10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08011ef4  08011ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012290  08012290  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08012290  08012290  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012290  08012290  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012290  08012290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012294  08012294  00012294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08012298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001ec  08012484  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08012484  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd2a  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268d  00000000  00000000  0002df3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000305d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00031448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a11  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1f  00000000  00000000  0004ac01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d89  00000000  00000000  0005b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e35a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  000e35fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c10c <__do_global_dtors_aux>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4c05      	ldr	r4, [pc, #20]	; (800c124 <__do_global_dtors_aux+0x18>)
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	b933      	cbnz	r3, 800c122 <__do_global_dtors_aux+0x16>
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__do_global_dtors_aux+0x1c>)
 800c116:	b113      	cbz	r3, 800c11e <__do_global_dtors_aux+0x12>
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <__do_global_dtors_aux+0x20>)
 800c11a:	f3af 8000 	nop.w
 800c11e:	2301      	movs	r3, #1
 800c120:	7023      	strb	r3, [r4, #0]
 800c122:	bd10      	pop	{r4, pc}
 800c124:	200001ec 	.word	0x200001ec
 800c128:	00000000 	.word	0x00000000
 800c12c:	08011edc 	.word	0x08011edc

0800c130 <frame_dummy>:
 800c130:	b508      	push	{r3, lr}
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <frame_dummy+0x10>)
 800c134:	b11b      	cbz	r3, 800c13e <frame_dummy+0xe>
 800c136:	4903      	ldr	r1, [pc, #12]	; (800c144 <frame_dummy+0x14>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <frame_dummy+0x18>)
 800c13a:	f3af 8000 	nop.w
 800c13e:	bd08      	pop	{r3, pc}
 800c140:	00000000 	.word	0x00000000
 800c144:	200001f0 	.word	0x200001f0
 800c148:	08011edc 	.word	0x08011edc

0800c14c <strlen>:
 800c14c:	4603      	mov	r3, r0
 800c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c152:	2a00      	cmp	r2, #0
 800c154:	d1fb      	bne.n	800c14e <strlen+0x2>
 800c156:	1a18      	subs	r0, r3, r0
 800c158:	3801      	subs	r0, #1
 800c15a:	4770      	bx	lr

0800c15c <printItvirteba>:
};
/**
  * @brief  The application entry point.
  * @retval int
  */
void printItvirteba(uint8_t row, uint8_t column){
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	460a      	mov	r2, r1
 800c166:	71fb      	strb	r3, [r7, #7]
 800c168:	4613      	mov	r3, r2
 800c16a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c16c:	f000 fcf4 	bl	800cb58 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, iGeo); // i
 800c170:	4943      	ldr	r1, [pc, #268]	; (800c280 <printItvirteba+0x124>)
 800c172:	2001      	movs	r0, #1
 800c174:	f000 fd4e 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	79bb      	ldrb	r3, [r7, #6]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fd00 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c184:	2001      	movs	r0, #1
 800c186:	f000 fd6e 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, TGeo); //t
 800c18a:	493e      	ldr	r1, [pc, #248]	; (800c284 <printItvirteba+0x128>)
 800c18c:	2002      	movs	r0, #2
 800c18e:	f000 fd41 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c192:	79bb      	ldrb	r3, [r7, #6]
 800c194:	3301      	adds	r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fcf1 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c1a2:	2002      	movs	r0, #2
 800c1a4:	f000 fd5f 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, vGeo);//v
 800c1a8:	4937      	ldr	r1, [pc, #220]	; (800c288 <printItvirteba+0x12c>)
 800c1aa:	2003      	movs	r0, #3
 800c1ac:	f000 fd32 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c1b0:	79bb      	ldrb	r3, [r7, #6]
 800c1b2:	3302      	adds	r3, #2
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	79fa      	ldrb	r2, [r7, #7]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fce2 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	f000 fd50 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c1c6:	79bb      	ldrb	r3, [r7, #6]
 800c1c8:	3303      	adds	r3, #3
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	79fa      	ldrb	r2, [r7, #7]
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 fcd7 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1); // i
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	f000 fd45 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, rGeo); //r
 800c1dc:	492b      	ldr	r1, [pc, #172]	; (800c28c <printItvirteba+0x130>)
 800c1de:	2005      	movs	r0, #5
 800c1e0:	f000 fd18 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c1e4:	79bb      	ldrb	r3, [r7, #6]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	79fa      	ldrb	r2, [r7, #7]
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 fcc8 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c1f4:	2005      	movs	r0, #5
 800c1f6:	f000 fd36 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo); // t
 800c1fa:	4925      	ldr	r1, [pc, #148]	; (800c290 <printItvirteba+0x134>)
 800c1fc:	2006      	movs	r0, #6
 800c1fe:	f000 fd09 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c202:	79bb      	ldrb	r3, [r7, #6]
 800c204:	3305      	adds	r3, #5
 800c206:	b2db      	uxtb	r3, r3
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fcb9 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c212:	2006      	movs	r0, #6
 800c214:	f000 fd27 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, eGeo); //e
 800c218:	491e      	ldr	r1, [pc, #120]	; (800c294 <printItvirteba+0x138>)
 800c21a:	2007      	movs	r0, #7
 800c21c:	f000 fcfa 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c220:	79bb      	ldrb	r3, [r7, #6]
 800c222:	3306      	adds	r3, #6
 800c224:	b2db      	uxtb	r3, r3
 800c226:	79fa      	ldrb	r2, [r7, #7]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fcaa 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c230:	2007      	movs	r0, #7
 800c232:	f000 fd18 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(8, bGeo); //b
 800c236:	4918      	ldr	r1, [pc, #96]	; (800c298 <printItvirteba+0x13c>)
 800c238:	2008      	movs	r0, #8
 800c23a:	f000 fceb 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c23e:	79bb      	ldrb	r3, [r7, #6]
 800c240:	3307      	adds	r3, #7
 800c242:	b2db      	uxtb	r3, r3
 800c244:	79fa      	ldrb	r2, [r7, #7]
 800c246:	4611      	mov	r1, r2
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 fc9b 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(8);
 800c24e:	2008      	movs	r0, #8
 800c250:	f000 fd09 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, aGeo); //a
 800c254:	4911      	ldr	r1, [pc, #68]	; (800c29c <printItvirteba+0x140>)
 800c256:	2004      	movs	r0, #4
 800c258:	f000 fcdc 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+8, row);
 800c25c:	79bb      	ldrb	r3, [r7, #6]
 800c25e:	3308      	adds	r3, #8
 800c260:	b2db      	uxtb	r3, r3
 800c262:	79fa      	ldrb	r2, [r7, #7]
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fc8c 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c26c:	2004      	movs	r0, #4
 800c26e:	f000 fcfa 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c272:	480b      	ldr	r0, [pc, #44]	; (800c2a0 <printItvirteba+0x144>)
 800c274:	f000 fd04 	bl	800cc80 <HD44780_PrintStr>
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20000040 	.word	0x20000040
 800c284:	20000020 	.word	0x20000020
 800c288:	20000070 	.word	0x20000070
 800c28c:	20000078 	.word	0x20000078
 800c290:	20000060 	.word	0x20000060
 800c294:	20000080 	.word	0x20000080
 800c298:	20000038 	.word	0x20000038
 800c29c:	20000028 	.word	0x20000028
 800c2a0:	08011ef4 	.word	0x08011ef4

0800c2a4 <printUcxoBaratia>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintStr("!");
	HD44780_SetCursor(6, 1);
	HD44780_PrintStr("-_-");
}
void printUcxoBaratia(uint8_t row, uint8_t column){
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	460a      	mov	r2, r1
 800c2ae:	71fb      	strb	r3, [r7, #7]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c2b4:	f000 fc50 	bl	800cb58 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 800c2b8:	494e      	ldr	r1, [pc, #312]	; (800c3f4 <printUcxoBaratia+0x150>)
 800c2ba:	2001      	movs	r0, #1
 800c2bc:	f000 fcaa 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c2c0:	79fa      	ldrb	r2, [r7, #7]
 800c2c2:	79bb      	ldrb	r3, [r7, #6]
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 fc5c 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	f000 fcca 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 800c2d2:	4949      	ldr	r1, [pc, #292]	; (800c3f8 <printUcxoBaratia+0x154>)
 800c2d4:	2002      	movs	r0, #2
 800c2d6:	f000 fc9d 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c2da:	79bb      	ldrb	r3, [r7, #6]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	79fa      	ldrb	r2, [r7, #7]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fc4d 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c2ea:	2002      	movs	r0, #2
 800c2ec:	f000 fcbb 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 800c2f0:	4942      	ldr	r1, [pc, #264]	; (800c3fc <printUcxoBaratia+0x158>)
 800c2f2:	2003      	movs	r0, #3
 800c2f4:	f000 fc8e 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c2f8:	79bb      	ldrb	r3, [r7, #6]
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	79fa      	ldrb	r2, [r7, #7]
 800c300:	4611      	mov	r1, r2
 800c302:	4618      	mov	r0, r3
 800c304:	f000 fc3e 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c308:	2003      	movs	r0, #3
 800c30a:	f000 fcac 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 800c30e:	493c      	ldr	r1, [pc, #240]	; (800c400 <printUcxoBaratia+0x15c>)
 800c310:	2004      	movs	r0, #4
 800c312:	f000 fc7f 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c316:	79bb      	ldrb	r3, [r7, #6]
 800c318:	3303      	adds	r3, #3
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	79fa      	ldrb	r2, [r7, #7]
 800c31e:	4611      	mov	r1, r2
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fc2f 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c326:	2004      	movs	r0, #4
 800c328:	f000 fc9d 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800c32c:	4935      	ldr	r1, [pc, #212]	; (800c404 <printUcxoBaratia+0x160>)
 800c32e:	2005      	movs	r0, #5
 800c330:	f000 fc70 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c334:	79bb      	ldrb	r3, [r7, #6]
 800c336:	3305      	adds	r3, #5
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	79fa      	ldrb	r2, [r7, #7]
 800c33c:	4611      	mov	r1, r2
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 fc20 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c344:	2005      	movs	r0, #5
 800c346:	f000 fc8e 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800c34a:	79bb      	ldrb	r3, [r7, #6]
 800c34c:	3306      	adds	r3, #6
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	79fa      	ldrb	r2, [r7, #7]
 800c352:	4611      	mov	r1, r2
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fc15 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c35a:	2004      	movs	r0, #4
 800c35c:	f000 fc83 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 800c360:	4929      	ldr	r1, [pc, #164]	; (800c408 <printUcxoBaratia+0x164>)
 800c362:	2006      	movs	r0, #6
 800c364:	f000 fc56 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c368:	79bb      	ldrb	r3, [r7, #6]
 800c36a:	3307      	adds	r3, #7
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	79fa      	ldrb	r2, [r7, #7]
 800c370:	4611      	mov	r1, r2
 800c372:	4618      	mov	r0, r3
 800c374:	f000 fc06 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c378:	2006      	movs	r0, #6
 800c37a:	f000 fc74 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800c37e:	79bb      	ldrb	r3, [r7, #6]
 800c380:	3308      	adds	r3, #8
 800c382:	b2db      	uxtb	r3, r3
 800c384:	79fa      	ldrb	r2, [r7, #7]
 800c386:	4611      	mov	r1, r2
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 fbfb 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c38e:	2004      	movs	r0, #4
 800c390:	f000 fc69 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 800c394:	491d      	ldr	r1, [pc, #116]	; (800c40c <printUcxoBaratia+0x168>)
 800c396:	2007      	movs	r0, #7
 800c398:	f000 fc3c 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c39c:	79bb      	ldrb	r3, [r7, #6]
 800c39e:	3309      	adds	r3, #9
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	79fa      	ldrb	r2, [r7, #7]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fbec 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c3ac:	2007      	movs	r0, #7
 800c3ae:	f000 fc5a 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 800c3b2:	4917      	ldr	r1, [pc, #92]	; (800c410 <printUcxoBaratia+0x16c>)
 800c3b4:	2008      	movs	r0, #8
 800c3b6:	f000 fc2d 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c3ba:	79bb      	ldrb	r3, [r7, #6]
 800c3bc:	330a      	adds	r3, #10
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	79fa      	ldrb	r2, [r7, #7]
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 fbdd 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c3ca:	2008      	movs	r0, #8
 800c3cc:	f000 fc4b 	bl	800cc66 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 800c3d0:	79bb      	ldrb	r3, [r7, #6]
 800c3d2:	330b      	adds	r3, #11
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	79fa      	ldrb	r2, [r7, #7]
 800c3d8:	4611      	mov	r1, r2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 fbd2 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c3e0:	2004      	movs	r0, #4
 800c3e2:	f000 fc40 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c3e6:	480b      	ldr	r0, [pc, #44]	; (800c414 <printUcxoBaratia+0x170>)
 800c3e8:	f000 fc4a 	bl	800cc80 <HD44780_PrintStr>

}
 800c3ec:	bf00      	nop
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	20000008 	.word	0x20000008
 800c3f8:	20000010 	.word	0x20000010
 800c3fc:	20000070 	.word	0x20000070
 800c400:	20000028 	.word	0x20000028
 800c404:	20000038 	.word	0x20000038
 800c408:	20000078 	.word	0x20000078
 800c40c:	20000060 	.word	0x20000060
 800c410:	20000040 	.word	0x20000040
 800c414:	08011ef4 	.word	0x08011ef4

0800c418 <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	460a      	mov	r2, r1
 800c422:	71fb      	strb	r3, [r7, #7]
 800c424:	4613      	mov	r3, r2
 800c426:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 800c428:	f000 fb96 	bl	800cb58 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800c42c:	4948      	ldr	r1, [pc, #288]	; (800c550 <printBlansiAraa+0x138>)
 800c42e:	2001      	movs	r0, #1
 800c430:	f000 fbf0 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c434:	79fa      	ldrb	r2, [r7, #7]
 800c436:	79bb      	ldrb	r3, [r7, #6]
 800c438:	4611      	mov	r1, r2
 800c43a:	4618      	mov	r0, r3
 800c43c:	f000 fba2 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c440:	2001      	movs	r0, #1
 800c442:	f000 fc10 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 800c446:	4943      	ldr	r1, [pc, #268]	; (800c554 <printBlansiAraa+0x13c>)
 800c448:	2002      	movs	r0, #2
 800c44a:	f000 fbe3 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c44e:	79bb      	ldrb	r3, [r7, #6]
 800c450:	3301      	adds	r3, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	79fa      	ldrb	r2, [r7, #7]
 800c456:	4611      	mov	r1, r2
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fb93 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c45e:	2002      	movs	r0, #2
 800c460:	f000 fc01 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 800c464:	493c      	ldr	r1, [pc, #240]	; (800c558 <printBlansiAraa+0x140>)
 800c466:	2003      	movs	r0, #3
 800c468:	f000 fbd4 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c46c:	79bb      	ldrb	r3, [r7, #6]
 800c46e:	3302      	adds	r3, #2
 800c470:	b2db      	uxtb	r3, r3
 800c472:	79fa      	ldrb	r2, [r7, #7]
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f000 fb84 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c47c:	2003      	movs	r0, #3
 800c47e:	f000 fbf2 	bl	800cc66 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 800c482:	79bb      	ldrb	r3, [r7, #6]
 800c484:	3303      	adds	r3, #3
 800c486:	b2db      	uxtb	r3, r3
 800c488:	79fa      	ldrb	r2, [r7, #7]
 800c48a:	4611      	mov	r1, r2
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 fb79 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c492:	2002      	movs	r0, #2
 800c494:	f000 fbe7 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 800c498:	4930      	ldr	r1, [pc, #192]	; (800c55c <printBlansiAraa+0x144>)
 800c49a:	2004      	movs	r0, #4
 800c49c:	f000 fbba 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c4a0:	79bb      	ldrb	r3, [r7, #6]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	79fa      	ldrb	r2, [r7, #7]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 fb6a 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c4b0:	2004      	movs	r0, #4
 800c4b2:	f000 fbd8 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 800c4b6:	492a      	ldr	r1, [pc, #168]	; (800c560 <printBlansiAraa+0x148>)
 800c4b8:	2005      	movs	r0, #5
 800c4ba:	f000 fbab 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c4be:	79bb      	ldrb	r3, [r7, #6]
 800c4c0:	3305      	adds	r3, #5
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	79fa      	ldrb	r2, [r7, #7]
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fb5b 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c4ce:	2005      	movs	r0, #5
 800c4d0:	f000 fbc9 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 800c4d4:	4923      	ldr	r1, [pc, #140]	; (800c564 <printBlansiAraa+0x14c>)
 800c4d6:	2006      	movs	r0, #6
 800c4d8:	f000 fb9c 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c4dc:	79bb      	ldrb	r3, [r7, #6]
 800c4de:	3306      	adds	r3, #6
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	79fa      	ldrb	r2, [r7, #7]
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fb4c 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c4ec:	2006      	movs	r0, #6
 800c4ee:	f000 fbba 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 800c4f2:	79bb      	ldrb	r3, [r7, #6]
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	79fa      	ldrb	r2, [r7, #7]
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 fb41 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c502:	2002      	movs	r0, #2
 800c504:	f000 fbaf 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 800c508:	4917      	ldr	r1, [pc, #92]	; (800c568 <printBlansiAraa+0x150>)
 800c50a:	2007      	movs	r0, #7
 800c50c:	f000 fb82 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 800c510:	79bb      	ldrb	r3, [r7, #6]
 800c512:	3309      	adds	r3, #9
 800c514:	b2db      	uxtb	r3, r3
 800c516:	79fa      	ldrb	r2, [r7, #7]
 800c518:	4611      	mov	r1, r2
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fb32 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c520:	2007      	movs	r0, #7
 800c522:	f000 fba0 	bl	800cc66 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 800c526:	79bb      	ldrb	r3, [r7, #6]
 800c528:	330a      	adds	r3, #10
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	79fa      	ldrb	r2, [r7, #7]
 800c52e:	4611      	mov	r1, r2
 800c530:	4618      	mov	r0, r3
 800c532:	f000 fb27 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c536:	2002      	movs	r0, #2
 800c538:	f000 fb95 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c53c:	2002      	movs	r0, #2
 800c53e:	f000 fb92 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c542:	480a      	ldr	r0, [pc, #40]	; (800c56c <printBlansiAraa+0x154>)
 800c544:	f000 fb9c 	bl	800cc80 <HD44780_PrintStr>
}
 800c548:	bf00      	nop
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20000038 	.word	0x20000038
 800c554:	20000028 	.word	0x20000028
 800c558:	20000048 	.word	0x20000048
 800c55c:	20000000 	.word	0x20000000
 800c560:	20000008 	.word	0x20000008
 800c564:	20000040 	.word	0x20000040
 800c568:	20000078 	.word	0x20000078
 800c56c:	08011ef4 	.word	0x08011ef4

0800c570 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	460a      	mov	r2, r1
 800c57a:	71fb      	strb	r3, [r7, #7]
 800c57c:	4613      	mov	r3, r2
 800c57e:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c580:	f000 faea 	bl	800cb58 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 800c584:	4959      	ldr	r1, [pc, #356]	; (800c6ec <printMiadetBarati+0x17c>)
 800c586:	2001      	movs	r0, #1
 800c588:	f000 fb44 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c58c:	79fa      	ldrb	r2, [r7, #7]
 800c58e:	79bb      	ldrb	r3, [r7, #6]
 800c590:	4611      	mov	r1, r2
 800c592:	4618      	mov	r0, r3
 800c594:	f000 faf6 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c598:	2001      	movs	r0, #1
 800c59a:	f000 fb64 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800c59e:	4954      	ldr	r1, [pc, #336]	; (800c6f0 <printMiadetBarati+0x180>)
 800c5a0:	2002      	movs	r0, #2
 800c5a2:	f000 fb37 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c5a6:	79bb      	ldrb	r3, [r7, #6]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	79fa      	ldrb	r2, [r7, #7]
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fae7 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c5b6:	2002      	movs	r0, #2
 800c5b8:	f000 fb55 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800c5bc:	494d      	ldr	r1, [pc, #308]	; (800c6f4 <printMiadetBarati+0x184>)
 800c5be:	2003      	movs	r0, #3
 800c5c0:	f000 fb28 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c5c4:	79bb      	ldrb	r3, [r7, #6]
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	79fa      	ldrb	r2, [r7, #7]
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fad8 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c5d4:	2003      	movs	r0, #3
 800c5d6:	f000 fb46 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 800c5da:	4947      	ldr	r1, [pc, #284]	; (800c6f8 <printMiadetBarati+0x188>)
 800c5dc:	2004      	movs	r0, #4
 800c5de:	f000 fb19 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c5e2:	79bb      	ldrb	r3, [r7, #6]
 800c5e4:	3303      	adds	r3, #3
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	79fa      	ldrb	r2, [r7, #7]
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 fac9 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c5f2:	2004      	movs	r0, #4
 800c5f4:	f000 fb37 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 800c5f8:	4940      	ldr	r1, [pc, #256]	; (800c6fc <printMiadetBarati+0x18c>)
 800c5fa:	2005      	movs	r0, #5
 800c5fc:	f000 fb0a 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 800c600:	79bb      	ldrb	r3, [r7, #6]
 800c602:	3304      	adds	r3, #4
 800c604:	b2db      	uxtb	r3, r3
 800c606:	79fa      	ldrb	r2, [r7, #7]
 800c608:	4611      	mov	r1, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 faba 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c610:	2005      	movs	r0, #5
 800c612:	f000 fb28 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 800c616:	493a      	ldr	r1, [pc, #232]	; (800c700 <printMiadetBarati+0x190>)
 800c618:	2006      	movs	r0, #6
 800c61a:	f000 fafb 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c61e:	79bb      	ldrb	r3, [r7, #6]
 800c620:	3305      	adds	r3, #5
 800c622:	b2db      	uxtb	r3, r3
 800c624:	79fa      	ldrb	r2, [r7, #7]
 800c626:	4611      	mov	r1, r2
 800c628:	4618      	mov	r0, r3
 800c62a:	f000 faab 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c62e:	2006      	movs	r0, #6
 800c630:	f000 fb19 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 800c634:	4933      	ldr	r1, [pc, #204]	; (800c704 <printMiadetBarati+0x194>)
 800c636:	2007      	movs	r0, #7
 800c638:	f000 faec 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c63c:	79bb      	ldrb	r3, [r7, #6]
 800c63e:	3307      	adds	r3, #7
 800c640:	b2db      	uxtb	r3, r3
 800c642:	79fa      	ldrb	r2, [r7, #7]
 800c644:	4611      	mov	r1, r2
 800c646:	4618      	mov	r0, r3
 800c648:	f000 fa9c 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c64c:	2007      	movs	r0, #7
 800c64e:	f000 fb0a 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 800c652:	79bb      	ldrb	r3, [r7, #6]
 800c654:	3308      	adds	r3, #8
 800c656:	b2db      	uxtb	r3, r3
 800c658:	79fa      	ldrb	r2, [r7, #7]
 800c65a:	4611      	mov	r1, r2
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 fa91 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c662:	2003      	movs	r0, #3
 800c664:	f000 faff 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 800c668:	4927      	ldr	r1, [pc, #156]	; (800c708 <printMiadetBarati+0x198>)
 800c66a:	2008      	movs	r0, #8
 800c66c:	f000 fad2 	bl	800cc14 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c670:	79bb      	ldrb	r3, [r7, #6]
 800c672:	3309      	adds	r3, #9
 800c674:	b2db      	uxtb	r3, r3
 800c676:	79fa      	ldrb	r2, [r7, #7]
 800c678:	4611      	mov	r1, r2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fa82 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c680:	2008      	movs	r0, #8
 800c682:	f000 faf0 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c686:	79bb      	ldrb	r3, [r7, #6]
 800c688:	330a      	adds	r3, #10
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	79fa      	ldrb	r2, [r7, #7]
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fa77 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c696:	2003      	movs	r0, #3
 800c698:	f000 fae5 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800c69c:	79bb      	ldrb	r3, [r7, #6]
 800c69e:	330b      	adds	r3, #11
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	79fa      	ldrb	r2, [r7, #7]
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fa6c 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c6ac:	2006      	movs	r0, #6
 800c6ae:	f000 fada 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 800c6b2:	79bb      	ldrb	r3, [r7, #6]
 800c6b4:	330c      	adds	r3, #12
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	79fa      	ldrb	r2, [r7, #7]
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 fa61 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c6c2:	2002      	movs	r0, #2
 800c6c4:	f000 facf 	bl	800cc66 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 800c6c8:	79bb      	ldrb	r3, [r7, #6]
 800c6ca:	3302      	adds	r3, #2
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	f000 fa54 	bl	800cb84 <HD44780_SetCursor>
		HD44780_PrintStr("0.18 GEL");
 800c6dc:	480b      	ldr	r0, [pc, #44]	; (800c70c <printMiadetBarati+0x19c>)
 800c6de:	f000 facf 	bl	800cc80 <HD44780_PrintStr>


}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20000068 	.word	0x20000068
 800c6f0:	20000040 	.word	0x20000040
 800c6f4:	20000028 	.word	0x20000028
 800c6f8:	20000018 	.word	0x20000018
 800c6fc:	20000080 	.word	0x20000080
 800c700:	20000060 	.word	0x20000060
 800c704:	20000038 	.word	0x20000038
 800c708:	20000078 	.word	0x20000078
 800c70c:	08011efc 	.word	0x08011efc

0800c710 <printShecdoma>:
void printShecdoma(uint8_t row, uint8_t column){
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	460a      	mov	r2, r1
 800c71a:	71fb      	strb	r3, [r7, #7]
 800c71c:	4613      	mov	r3, r2
 800c71e:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c720:	f000 fa1a 	bl	800cb58 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, SGeo);
 800c724:	493a      	ldr	r1, [pc, #232]	; (800c810 <printShecdoma+0x100>)
 800c726:	2001      	movs	r0, #1
 800c728:	f000 fa74 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c72c:	79fa      	ldrb	r2, [r7, #7]
 800c72e:	79bb      	ldrb	r3, [r7, #6]
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f000 fa26 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c738:	2001      	movs	r0, #1
 800c73a:	f000 fa94 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, eGeo);
 800c73e:	4935      	ldr	r1, [pc, #212]	; (800c814 <printShecdoma+0x104>)
 800c740:	2002      	movs	r0, #2
 800c742:	f000 fa67 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c746:	79bb      	ldrb	r3, [r7, #6]
 800c748:	3301      	adds	r3, #1
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	79fa      	ldrb	r2, [r7, #7]
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f000 fa17 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c756:	2002      	movs	r0, #2
 800c758:	f000 fa85 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, cGeo);
 800c75c:	492e      	ldr	r1, [pc, #184]	; (800c818 <printShecdoma+0x108>)
 800c75e:	2003      	movs	r0, #3
 800c760:	f000 fa58 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c764:	79bb      	ldrb	r3, [r7, #6]
 800c766:	3302      	adds	r3, #2
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	79fa      	ldrb	r2, [r7, #7]
 800c76c:	4611      	mov	r1, r2
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 fa08 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c774:	2003      	movs	r0, #3
 800c776:	f000 fa76 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800c77a:	4928      	ldr	r1, [pc, #160]	; (800c81c <printShecdoma+0x10c>)
 800c77c:	2004      	movs	r0, #4
 800c77e:	f000 fa49 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c782:	79bb      	ldrb	r3, [r7, #6]
 800c784:	3303      	adds	r3, #3
 800c786:	b2db      	uxtb	r3, r3
 800c788:	79fa      	ldrb	r2, [r7, #7]
 800c78a:	4611      	mov	r1, r2
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 f9f9 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c792:	2004      	movs	r0, #4
 800c794:	f000 fa67 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, oGeo);
 800c798:	4921      	ldr	r1, [pc, #132]	; (800c820 <printShecdoma+0x110>)
 800c79a:	2005      	movs	r0, #5
 800c79c:	f000 fa3a 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c7a0:	79bb      	ldrb	r3, [r7, #6]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	79fa      	ldrb	r2, [r7, #7]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f9ea 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c7b0:	2005      	movs	r0, #5
 800c7b2:	f000 fa58 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, mGeo);
 800c7b6:	491b      	ldr	r1, [pc, #108]	; (800c824 <printShecdoma+0x114>)
 800c7b8:	2006      	movs	r0, #6
 800c7ba:	f000 fa2b 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c7be:	79bb      	ldrb	r3, [r7, #6]
 800c7c0:	3305      	adds	r3, #5
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	79fa      	ldrb	r2, [r7, #7]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 f9db 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c7ce:	2006      	movs	r0, #6
 800c7d0:	f000 fa49 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, aGeo);
 800c7d4:	4914      	ldr	r1, [pc, #80]	; (800c828 <printShecdoma+0x118>)
 800c7d6:	2007      	movs	r0, #7
 800c7d8:	f000 fa1c 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c7dc:	79bb      	ldrb	r3, [r7, #6]
 800c7de:	3306      	adds	r3, #6
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	79fa      	ldrb	r2, [r7, #7]
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 f9cc 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c7ec:	2007      	movs	r0, #7
 800c7ee:	f000 fa3a 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c7f2:	79bb      	ldrb	r3, [r7, #6]
 800c7f4:	3307      	adds	r3, #7
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	79fa      	ldrb	r2, [r7, #7]
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f9c1 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 800c802:	480a      	ldr	r0, [pc, #40]	; (800c82c <printShecdoma+0x11c>)
 800c804:	f000 fa3c 	bl	800cc80 <HD44780_PrintStr>
}
 800c808:	bf00      	nop
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20000030 	.word	0x20000030
 800c814:	20000080 	.word	0x20000080
 800c818:	20000050 	.word	0x20000050
 800c81c:	20000018 	.word	0x20000018
 800c820:	20000058 	.word	0x20000058
 800c824:	20000068 	.word	0x20000068
 800c828:	20000028 	.word	0x20000028
 800c82c:	08011ef4 	.word	0x08011ef4

0800c830 <printDaicadet>:

void printDaicadet(uint8_t row, uint8_t column){
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	460a      	mov	r2, r1
 800c83a:	71fb      	strb	r3, [r7, #7]
 800c83c:	4613      	mov	r3, r2
 800c83e:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c840:	f000 f98a 	bl	800cb58 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 800c844:	493a      	ldr	r1, [pc, #232]	; (800c930 <printDaicadet+0x100>)
 800c846:	2001      	movs	r0, #1
 800c848:	f000 f9e4 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c84c:	79fa      	ldrb	r2, [r7, #7]
 800c84e:	79bb      	ldrb	r3, [r7, #6]
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f996 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c858:	2001      	movs	r0, #1
 800c85a:	f000 fa04 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800c85e:	4935      	ldr	r1, [pc, #212]	; (800c934 <printDaicadet+0x104>)
 800c860:	2002      	movs	r0, #2
 800c862:	f000 f9d7 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c866:	79bb      	ldrb	r3, [r7, #6]
 800c868:	3301      	adds	r3, #1
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	79fa      	ldrb	r2, [r7, #7]
 800c86e:	4611      	mov	r1, r2
 800c870:	4618      	mov	r0, r3
 800c872:	f000 f987 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c876:	2002      	movs	r0, #2
 800c878:	f000 f9f5 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800c87c:	492e      	ldr	r1, [pc, #184]	; (800c938 <printDaicadet+0x108>)
 800c87e:	2003      	movs	r0, #3
 800c880:	f000 f9c8 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c884:	79bb      	ldrb	r3, [r7, #6]
 800c886:	3302      	adds	r3, #2
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	79fa      	ldrb	r2, [r7, #7]
 800c88c:	4611      	mov	r1, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 f978 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c894:	2003      	movs	r0, #3
 800c896:	f000 f9e6 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800c89a:	4928      	ldr	r1, [pc, #160]	; (800c93c <printDaicadet+0x10c>)
 800c89c:	2004      	movs	r0, #4
 800c89e:	f000 f9b9 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c8a2:	79bb      	ldrb	r3, [r7, #6]
 800c8a4:	3303      	adds	r3, #3
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	79fa      	ldrb	r2, [r7, #7]
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 f969 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c8b2:	2004      	movs	r0, #4
 800c8b4:	f000 f9d7 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c8b8:	79bb      	ldrb	r3, [r7, #6]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	79fa      	ldrb	r2, [r7, #7]
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 f95e 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c8c8:	2002      	movs	r0, #2
 800c8ca:	f000 f9cc 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c8ce:	79bb      	ldrb	r3, [r7, #6]
 800c8d0:	3305      	adds	r3, #5
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	79fa      	ldrb	r2, [r7, #7]
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 f953 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c8de:	2001      	movs	r0, #1
 800c8e0:	f000 f9c1 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 800c8e4:	4916      	ldr	r1, [pc, #88]	; (800c940 <printDaicadet+0x110>)
 800c8e6:	2005      	movs	r0, #5
 800c8e8:	f000 f994 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c8ec:	79bb      	ldrb	r3, [r7, #6]
 800c8ee:	3306      	adds	r3, #6
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	79fa      	ldrb	r2, [r7, #7]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 f944 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c8fc:	2005      	movs	r0, #5
 800c8fe:	f000 f9b2 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 800c902:	4910      	ldr	r1, [pc, #64]	; (800c944 <printDaicadet+0x114>)
 800c904:	2006      	movs	r0, #6
 800c906:	f000 f985 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c90a:	79bb      	ldrb	r3, [r7, #6]
 800c90c:	3307      	adds	r3, #7
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	79fa      	ldrb	r2, [r7, #7]
 800c912:	4611      	mov	r1, r2
 800c914:	4618      	mov	r0, r3
 800c916:	f000 f935 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c91a:	2006      	movs	r0, #6
 800c91c:	f000 f9a3 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c920:	4809      	ldr	r0, [pc, #36]	; (800c948 <printDaicadet+0x118>)
 800c922:	f000 f9ad 	bl	800cc80 <HD44780_PrintStr>
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20000018 	.word	0x20000018
 800c934:	20000028 	.word	0x20000028
 800c938:	20000040 	.word	0x20000040
 800c93c:	20000050 	.word	0x20000050
 800c940:	20000080 	.word	0x20000080
 800c944:	20000060 	.word	0x20000060
 800c948:	08011ef4 	.word	0x08011ef4

0800c94c <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	4603      	mov	r3, r0
 800c954:	460a      	mov	r2, r1
 800c956:	71fb      	strb	r3, [r7, #7]
 800c958:	4613      	mov	r3, r2
 800c95a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c95c:	f000 f8fc 	bl	800cb58 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 800c960:	4934      	ldr	r1, [pc, #208]	; (800ca34 <printBalansi+0xe8>)
 800c962:	2001      	movs	r0, #1
 800c964:	f000 f956 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c968:	79fa      	ldrb	r2, [r7, #7]
 800c96a:	79bb      	ldrb	r3, [r7, #6]
 800c96c:	4611      	mov	r1, r2
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 f908 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c974:	2001      	movs	r0, #1
 800c976:	f000 f976 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800c97a:	492f      	ldr	r1, [pc, #188]	; (800ca38 <printBalansi+0xec>)
 800c97c:	2002      	movs	r0, #2
 800c97e:	f000 f949 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c982:	79bb      	ldrb	r3, [r7, #6]
 800c984:	3301      	adds	r3, #1
 800c986:	b2db      	uxtb	r3, r3
 800c988:	79fa      	ldrb	r2, [r7, #7]
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f8f9 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c992:	2002      	movs	r0, #2
 800c994:	f000 f967 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 800c998:	4928      	ldr	r1, [pc, #160]	; (800ca3c <printBalansi+0xf0>)
 800c99a:	2003      	movs	r0, #3
 800c99c:	f000 f93a 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c9a0:	79bb      	ldrb	r3, [r7, #6]
 800c9a2:	3302      	adds	r3, #2
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	79fa      	ldrb	r2, [r7, #7]
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f8ea 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c9b0:	2003      	movs	r0, #3
 800c9b2:	f000 f958 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c9b6:	2002      	movs	r0, #2
 800c9b8:	f000 f955 	bl	800cc66 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c9bc:	79bb      	ldrb	r3, [r7, #6]
 800c9be:	3303      	adds	r3, #3
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	79fa      	ldrb	r2, [r7, #7]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 f8dc 	bl	800cb84 <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 800c9cc:	491c      	ldr	r1, [pc, #112]	; (800ca40 <printBalansi+0xf4>)
 800c9ce:	2005      	movs	r0, #5
 800c9d0:	f000 f920 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c9d4:	79bb      	ldrb	r3, [r7, #6]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	79fa      	ldrb	r2, [r7, #7]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 f8d0 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c9e4:	2005      	movs	r0, #5
 800c9e6:	f000 f93e 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 800c9ea:	4916      	ldr	r1, [pc, #88]	; (800ca44 <printBalansi+0xf8>)
 800c9ec:	2006      	movs	r0, #6
 800c9ee:	f000 f911 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c9f2:	79bb      	ldrb	r3, [r7, #6]
 800c9f4:	3305      	adds	r3, #5
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 f8c1 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800ca02:	2006      	movs	r0, #6
 800ca04:	f000 f92f 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 800ca08:	490f      	ldr	r1, [pc, #60]	; (800ca48 <printBalansi+0xfc>)
 800ca0a:	2007      	movs	r0, #7
 800ca0c:	f000 f902 	bl	800cc14 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800ca10:	79bb      	ldrb	r3, [r7, #6]
 800ca12:	3306      	adds	r3, #6
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	79fa      	ldrb	r2, [r7, #7]
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 f8b2 	bl	800cb84 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800ca20:	2007      	movs	r0, #7
 800ca22:	f000 f920 	bl	800cc66 <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 800ca26:	4809      	ldr	r0, [pc, #36]	; (800ca4c <printBalansi+0x100>)
 800ca28:	f000 f92a 	bl	800cc80 <HD44780_PrintStr>
}
 800ca2c:	bf00      	nop
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20000038 	.word	0x20000038
 800ca38:	20000028 	.word	0x20000028
 800ca3c:	20000048 	.word	0x20000048
 800ca40:	20000000 	.word	0x20000000
 800ca44:	20000008 	.word	0x20000008
 800ca48:	20000040 	.word	0x20000040
 800ca4c:	08011f08 	.word	0x08011f08

0800ca50 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800ca5a:	4a38      	ldr	r2, [pc, #224]	; (800cb3c <HD44780_Init+0xec>)
 800ca5c:	79fb      	ldrb	r3, [r7, #7]
 800ca5e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800ca60:	4b37      	ldr	r3, [pc, #220]	; (800cb40 <HD44780_Init+0xf0>)
 800ca62:	2208      	movs	r2, #8
 800ca64:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800ca66:	4b37      	ldr	r3, [pc, #220]	; (800cb44 <HD44780_Init+0xf4>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800ca6c:	4b33      	ldr	r3, [pc, #204]	; (800cb3c <HD44780_Init+0xec>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d907      	bls.n	800ca84 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800ca74:	4b33      	ldr	r3, [pc, #204]	; (800cb44 <HD44780_Init+0xf4>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f043 0308 	orr.w	r3, r3, #8
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	4b31      	ldr	r3, [pc, #196]	; (800cb44 <HD44780_Init+0xf4>)
 800ca80:	701a      	strb	r2, [r3, #0]
 800ca82:	e006      	b.n	800ca92 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800ca84:	4b2f      	ldr	r3, [pc, #188]	; (800cb44 <HD44780_Init+0xf4>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	f043 0304 	orr.w	r3, r3, #4
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	4b2d      	ldr	r3, [pc, #180]	; (800cb44 <HD44780_Init+0xf4>)
 800ca90:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800ca92:	f000 f993 	bl	800cdbc <DelayInit>
  HAL_Delay(50);
 800ca96:	2032      	movs	r0, #50	; 0x32
 800ca98:	f002 f81a 	bl	800ead0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800ca9c:	4b28      	ldr	r3, [pc, #160]	; (800cb40 <HD44780_Init+0xf0>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f951 	bl	800cd48 <ExpanderWrite>
  HAL_Delay(1000);
 800caa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800caaa:	f002 f811 	bl	800ead0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800caae:	2030      	movs	r0, #48	; 0x30
 800cab0:	f000 f938 	bl	800cd24 <Write4Bits>
  DelayUS(4500);
 800cab4:	f241 1094 	movw	r0, #4500	; 0x1194
 800cab8:	f000 f9a8 	bl	800ce0c <DelayUS>

  Write4Bits(0x03 << 4);
 800cabc:	2030      	movs	r0, #48	; 0x30
 800cabe:	f000 f931 	bl	800cd24 <Write4Bits>
  DelayUS(4500);
 800cac2:	f241 1094 	movw	r0, #4500	; 0x1194
 800cac6:	f000 f9a1 	bl	800ce0c <DelayUS>

  Write4Bits(0x03 << 4);
 800caca:	2030      	movs	r0, #48	; 0x30
 800cacc:	f000 f92a 	bl	800cd24 <Write4Bits>
  DelayUS(4500);
 800cad0:	f241 1094 	movw	r0, #4500	; 0x1194
 800cad4:	f000 f99a 	bl	800ce0c <DelayUS>

  Write4Bits(0x02 << 4);
 800cad8:	2020      	movs	r0, #32
 800cada:	f000 f923 	bl	800cd24 <Write4Bits>
  DelayUS(100);
 800cade:	2064      	movs	r0, #100	; 0x64
 800cae0:	f000 f994 	bl	800ce0c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800cae4:	4b17      	ldr	r3, [pc, #92]	; (800cb44 <HD44780_Init+0xf4>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	f043 0320 	orr.w	r3, r3, #32
 800caec:	b2db      	uxtb	r3, r3
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f8db 	bl	800ccaa <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800caf4:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <HD44780_Init+0xf8>)
 800caf6:	2204      	movs	r2, #4
 800caf8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800cafa:	f000 f875 	bl	800cbe8 <HD44780_Display>
  HD44780_Clear();
 800cafe:	f000 f82b 	bl	800cb58 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800cb02:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <HD44780_Init+0xfc>)
 800cb04:	2202      	movs	r2, #2
 800cb06:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800cb08:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <HD44780_Init+0xfc>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	f043 0304 	orr.w	r3, r3, #4
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 f8c9 	bl	800ccaa <SendCommand>
  DelayUS(4500);
 800cb18:	f241 1094 	movw	r0, #4500	; 0x1194
 800cb1c:	f000 f976 	bl	800ce0c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800cb20:	490b      	ldr	r1, [pc, #44]	; (800cb50 <HD44780_Init+0x100>)
 800cb22:	2000      	movs	r0, #0
 800cb24:	f000 f876 	bl	800cc14 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800cb28:	490a      	ldr	r1, [pc, #40]	; (800cb54 <HD44780_Init+0x104>)
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f000 f872 	bl	800cc14 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800cb30:	f000 f81d 	bl	800cb6e <HD44780_Home>
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	2000020b 	.word	0x2000020b
 800cb40:	2000020c 	.word	0x2000020c
 800cb44:	20000208 	.word	0x20000208
 800cb48:	20000209 	.word	0x20000209
 800cb4c:	2000020a 	.word	0x2000020a
 800cb50:	20000088 	.word	0x20000088
 800cb54:	20000090 	.word	0x20000090

0800cb58 <HD44780_Clear>:

void HD44780_Clear()
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	f000 f8a4 	bl	800ccaa <SendCommand>
  DelayUS(2000);
 800cb62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb66:	f000 f951 	bl	800ce0c <DelayUS>
}
 800cb6a:	bf00      	nop
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <HD44780_Home>:

void HD44780_Home()
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800cb72:	2002      	movs	r0, #2
 800cb74:	f000 f899 	bl	800ccaa <SendCommand>
  DelayUS(2000);
 800cb78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb7c:	f000 f946 	bl	800ce0c <DelayUS>
}
 800cb80:	bf00      	nop
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800cb84:	b590      	push	{r4, r7, lr}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	460a      	mov	r2, r1
 800cb8e:	71fb      	strb	r3, [r7, #7]
 800cb90:	4613      	mov	r3, r2
 800cb92:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800cb94:	4b12      	ldr	r3, [pc, #72]	; (800cbe0 <HD44780_SetCursor+0x5c>)
 800cb96:	f107 0408 	add.w	r4, r7, #8
 800cb9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800cba0:	4b10      	ldr	r3, [pc, #64]	; (800cbe4 <HD44780_SetCursor+0x60>)
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	79ba      	ldrb	r2, [r7, #6]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d303      	bcc.n	800cbb2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <HD44780_SetCursor+0x60>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800cbb2:	79bb      	ldrb	r3, [r7, #6]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	3318      	adds	r3, #24
 800cbb8:	443b      	add	r3, r7
 800cbba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	79fb      	ldrb	r3, [r7, #7]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	b25b      	sxtb	r3, r3
 800cbc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbcc:	b25b      	sxtb	r3, r3
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 f86a 	bl	800ccaa <SendCommand>
}
 800cbd6:	bf00      	nop
 800cbd8:	371c      	adds	r7, #28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd90      	pop	{r4, r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	08011f0c 	.word	0x08011f0c
 800cbe4:	2000020b 	.word	0x2000020b

0800cbe8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800cbec:	4b08      	ldr	r3, [pc, #32]	; (800cc10 <HD44780_Display+0x28>)
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	f043 0304 	orr.w	r3, r3, #4
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <HD44780_Display+0x28>)
 800cbf8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800cbfa:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <HD44780_Display+0x28>)
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	f043 0308 	orr.w	r3, r3, #8
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 f850 	bl	800ccaa <SendCommand>
}
 800cc0a:	bf00      	nop
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000209 	.word	0x20000209

0800cc14 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	6039      	str	r1, [r7, #0]
 800cc1e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800cc20:	79fb      	ldrb	r3, [r7, #7]
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	b25b      	sxtb	r3, r3
 800cc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc32:	b25b      	sxtb	r3, r3
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 f837 	bl	800ccaa <SendCommand>
  for (int i=0; i<8; i++)
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e009      	b.n	800cc56 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	4413      	add	r3, r2
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 f83b 	bl	800ccc6 <SendChar>
  for (int i=0; i<8; i++)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3301      	adds	r3, #1
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b07      	cmp	r3, #7
 800cc5a:	ddf2      	ble.n	800cc42 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800cc5c:	bf00      	nop
 800cc5e:	bf00      	nop
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 f827 	bl	800ccc6 <SendChar>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800cc88:	e006      	b.n	800cc98 <HD44780_PrintStr+0x18>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 f817 	bl	800ccc6 <SendChar>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1f4      	bne.n	800cc8a <HD44780_PrintStr+0xa>
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b082      	sub	sp, #8
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f000 f812 	bl	800cce2 <Send>
}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <SendChar>:

static void SendChar(uint8_t ch)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b082      	sub	sp, #8
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	4603      	mov	r3, r0
 800ccce:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 f804 	bl	800cce2 <Send>
}
 800ccda:	bf00      	nop
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	4603      	mov	r3, r0
 800ccea:	460a      	mov	r2, r1
 800ccec:	71fb      	strb	r3, [r7, #7]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	f023 030f 	bic.w	r3, r3, #15
 800ccf8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800ccfa:	79fb      	ldrb	r3, [r7, #7]
 800ccfc:	011b      	lsls	r3, r3, #4
 800ccfe:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800cd00:	7bfa      	ldrb	r2, [r7, #15]
 800cd02:	79bb      	ldrb	r3, [r7, #6]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 f80b 	bl	800cd24 <Write4Bits>
  Write4Bits((lownib)|mode);
 800cd0e:	7bba      	ldrb	r2, [r7, #14]
 800cd10:	79bb      	ldrb	r3, [r7, #6]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 f804 	bl	800cd24 <Write4Bits>
}
 800cd1c:	bf00      	nop
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 f809 	bl	800cd48 <ExpanderWrite>
  PulseEnable(value);
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 f821 	bl	800cd80 <PulseEnable>
}
 800cd3e:	bf00      	nop
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	4603      	mov	r3, r0
 800cd50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800cd52:	4b09      	ldr	r3, [pc, #36]	; (800cd78 <ExpanderWrite+0x30>)
 800cd54:	781a      	ldrb	r2, [r3, #0]
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800cd5e:	f107 020f 	add.w	r2, r7, #15
 800cd62:	230a      	movs	r3, #10
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	2301      	movs	r3, #1
 800cd68:	214e      	movs	r1, #78	; 0x4e
 800cd6a:	4804      	ldr	r0, [pc, #16]	; (800cd7c <ExpanderWrite+0x34>)
 800cd6c:	f002 fba6 	bl	800f4bc <HAL_I2C_Master_Transmit>
}
 800cd70:	bf00      	nop
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	2000020c 	.word	0x2000020c
 800cd7c:	20000424 	.word	0x20000424

0800cd80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	f043 0304 	orr.w	r3, r3, #4
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff ffd8 	bl	800cd48 <ExpanderWrite>
  DelayUS(20);
 800cd98:	2014      	movs	r0, #20
 800cd9a:	f000 f837 	bl	800ce0c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	f023 0304 	bic.w	r3, r3, #4
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7ff ffce 	bl	800cd48 <ExpanderWrite>
  DelayUS(20);
 800cdac:	2014      	movs	r0, #20
 800cdae:	f000 f82d 	bl	800ce0c <DelayUS>
}
 800cdb2:	bf00      	nop
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <DelayInit>:

static void DelayInit(void)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800cdc0:	4b10      	ldr	r3, [pc, #64]	; (800ce04 <DelayInit+0x48>)
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	4a0f      	ldr	r2, [pc, #60]	; (800ce04 <DelayInit+0x48>)
 800cdc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cdca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <DelayInit+0x48>)
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	4a0c      	ldr	r2, [pc, #48]	; (800ce04 <DelayInit+0x48>)
 800cdd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdd6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800cdd8:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <DelayInit+0x4c>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a0a      	ldr	r2, [pc, #40]	; (800ce08 <DelayInit+0x4c>)
 800cdde:	f023 0301 	bic.w	r3, r3, #1
 800cde2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800cde4:	4b08      	ldr	r3, [pc, #32]	; (800ce08 <DelayInit+0x4c>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a07      	ldr	r2, [pc, #28]	; (800ce08 <DelayInit+0x4c>)
 800cdea:	f043 0301 	orr.w	r3, r3, #1
 800cdee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800cdf0:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <DelayInit+0x4c>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800cdf6:	bf00      	nop
  __ASM volatile ("NOP");
 800cdf8:	bf00      	nop
  __ASM volatile ("NOP");
 800cdfa:	bf00      	nop
}
 800cdfc:	bf00      	nop
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bc80      	pop	{r7}
 800ce02:	4770      	bx	lr
 800ce04:	e000edf0 	.word	0xe000edf0
 800ce08:	e0001000 	.word	0xe0001000

0800ce0c <DelayUS>:

static void DelayUS(uint32_t us) {
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800ce14:	4b0d      	ldr	r3, [pc, #52]	; (800ce4c <DelayUS+0x40>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a0d      	ldr	r2, [pc, #52]	; (800ce50 <DelayUS+0x44>)
 800ce1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1e:	0c9a      	lsrs	r2, r3, #18
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	fb02 f303 	mul.w	r3, r2, r3
 800ce26:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <DelayUS+0x48>)
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800ce2e:	4b09      	ldr	r3, [pc, #36]	; (800ce54 <DelayUS+0x48>)
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d8f6      	bhi.n	800ce2e <DelayUS+0x22>
}
 800ce40:	bf00      	nop
 800ce42:	bf00      	nop
 800ce44:	371c      	adds	r7, #28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bc80      	pop	{r7}
 800ce4a:	4770      	bx	lr
 800ce4c:	2000017c 	.word	0x2000017c
 800ce50:	431bde83 	.word	0x431bde83
 800ce54:	e0001000 	.word	0xe0001000

0800ce58 <HAL_UART_RxCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]

	if(count >= 124){
 800ce60:	4b11      	ldr	r3, [pc, #68]	; (800cea8 <HAL_UART_RxCpltCallback+0x50>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b7b      	cmp	r3, #123	; 0x7b
 800ce66:	dd02      	ble.n	800ce6e <HAL_UART_RxCpltCallback+0x16>
		count = 0;
 800ce68:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <HAL_UART_RxCpltCallback+0x50>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
	}

	if(buffer[count] != '!'){
 800ce6e:	4b0e      	ldr	r3, [pc, #56]	; (800cea8 <HAL_UART_RxCpltCallback+0x50>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a0e      	ldr	r2, [pc, #56]	; (800ceac <HAL_UART_RxCpltCallback+0x54>)
 800ce74:	5cd3      	ldrb	r3, [r2, r3]
 800ce76:	2b21      	cmp	r3, #33	; 0x21
 800ce78:	d00e      	beq.n	800ce98 <HAL_UART_RxCpltCallback+0x40>

		count++;
 800ce7a:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <HAL_UART_RxCpltCallback+0x50>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	4a09      	ldr	r2, [pc, #36]	; (800cea8 <HAL_UART_RxCpltCallback+0x50>)
 800ce82:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800ce84:	4b08      	ldr	r3, [pc, #32]	; (800cea8 <HAL_UART_RxCpltCallback+0x50>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a08      	ldr	r2, [pc, #32]	; (800ceac <HAL_UART_RxCpltCallback+0x54>)
 800ce8a:	4413      	add	r3, r2
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4807      	ldr	r0, [pc, #28]	; (800ceb0 <HAL_UART_RxCpltCallback+0x58>)
 800ce92:	f003 fe80 	bl	8010b96 <HAL_UART_Receive_IT>
	}
	else{
		readSatus = 1;
	}

}
 800ce96:	e002      	b.n	800ce9e <HAL_UART_RxCpltCallback+0x46>
		readSatus = 1;
 800ce98:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <HAL_UART_RxCpltCallback+0x5c>)
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	701a      	strb	r2, [r3, #0]
}
 800ce9e:	bf00      	nop
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20000420 	.word	0x20000420
 800ceac:	20000320 	.word	0x20000320
 800ceb0:	200004d0 	.word	0x200004d0
 800ceb4:	2000021c 	.word	0x2000021c

0800ceb8 <takeStatus>:
void cardOperation(uint8_t* finalData, uint8_t* p);
void led(uint8_t n);
void readCardData(uint8_t* finalData);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

int takeStatus(uint8_t* data, int length){
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =5; i< length; i++){
 800cec2:	2305      	movs	r3, #5
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e008      	b.n	800ceda <takeStatus+0x22>
	  if(data[i] == '<')
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	2b3c      	cmp	r3, #60	; 0x3c
 800ced2:	d007      	beq.n	800cee4 <takeStatus+0x2c>
	for(i =5; i< length; i++){
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	3301      	adds	r3, #1
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	dbf2      	blt.n	800cec8 <takeStatus+0x10>
 800cee2:	e000      	b.n	800cee6 <takeStatus+0x2e>
	  {
		  break;
 800cee4:	bf00      	nop
	  }
	}

	STATUSSTR[0] = data[i+1];
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	3301      	adds	r3, #1
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	4413      	add	r3, r2
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	3302      	adds	r3, #2
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	4413      	add	r3, r2
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	3303      	adds	r3, #3
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	4413      	add	r3, r2
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	73bb      	strb	r3, [r7, #14]
	int Status = atoi((char*)STATUSSTR);
 800cf0a:	f107 030c 	add.w	r3, r7, #12
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f004 fa9a 	bl	8011448 <atoi>
 800cf14:	6138      	str	r0, [r7, #16]
	return Status;
 800cf16:	693b      	ldr	r3, [r7, #16]

}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <takeData>:
void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b088      	sub	sp, #32
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
	int i,j,l;
	for(i =5; i< length; i++){
 800cf2c:	2305      	movs	r3, #5
 800cf2e:	61fb      	str	r3, [r7, #28]
 800cf30:	e008      	b.n	800cf44 <takeData+0x24>
	  if(data[i] == '<')
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b3c      	cmp	r3, #60	; 0x3c
 800cf3c:	d007      	beq.n	800cf4e <takeData+0x2e>
	for(i =5; i< length; i++){
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	3301      	adds	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	69fa      	ldr	r2, [r7, #28]
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	dbf2      	blt.n	800cf32 <takeData+0x12>
 800cf4c:	e000      	b.n	800cf50 <takeData+0x30>
	  {
		  break;
 800cf4e:	bf00      	nop
	  }
	}
	for(j = i; j< length; j++){
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	61bb      	str	r3, [r7, #24]
 800cf54:	e008      	b.n	800cf68 <takeData+0x48>
	  if(data[j] == ',')
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b2c      	cmp	r3, #44	; 0x2c
 800cf60:	d007      	beq.n	800cf72 <takeData+0x52>
	for(j = i; j< length; j++){
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	3301      	adds	r3, #1
 800cf66:	61bb      	str	r3, [r7, #24]
 800cf68:	69ba      	ldr	r2, [r7, #24]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	dbf2      	blt.n	800cf56 <takeData+0x36>
 800cf70:	e000      	b.n	800cf74 <takeData+0x54>
		 {
			  break;
 800cf72:	bf00      	nop
		 }
	}

	for(l = j; l< length; l++){
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	e008      	b.n	800cf8c <takeData+0x6c>
	  if(data[l] == '!')
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	4413      	add	r3, r2
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b21      	cmp	r3, #33	; 0x21
 800cf84:	d007      	beq.n	800cf96 <takeData+0x76>
	for(l = j; l< length; l++){
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	617b      	str	r3, [r7, #20]
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	dbf2      	blt.n	800cf7a <takeData+0x5a>
 800cf94:	e000      	b.n	800cf98 <takeData+0x78>
		 {
			  break;
 800cf96:	bf00      	nop
		 }
	}

	strncpy((char *)dataToDisplay, (char *)data + j + 1, l - j - 1);
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	18d1      	adds	r1, r2, r3
 800cfa0:	697a      	ldr	r2, [r7, #20]
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f004 fab0 	bl	8011510 <strncpy>


}
 800cfb0:	bf00      	nop
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <quectelInit>:
void quectelInit(){
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
	  memset(buffer, 0, sizeof(buffer));
 800cfbc:	2280      	movs	r2, #128	; 0x80
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	4825      	ldr	r0, [pc, #148]	; (800d058 <quectelInit+0xa0>)
 800cfc2:	f004 fa7d 	bl	80114c0 <memset>

	 checkQueqtelWithNoEcho(buffer);
 800cfc6:	4824      	ldr	r0, [pc, #144]	; (800d058 <quectelInit+0xa0>)
 800cfc8:	f000 fc70 	bl	800d8ac <checkQueqtelWithNoEcho>
	  HD44780_PrintStr("#");
 800cfcc:	4823      	ldr	r0, [pc, #140]	; (800d05c <quectelInit+0xa4>)
 800cfce:	f7ff fe57 	bl	800cc80 <HD44780_PrintStr>
	  memset(buffer, 0, sizeof(buffer));
 800cfd2:	2280      	movs	r2, #128	; 0x80
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	4820      	ldr	r0, [pc, #128]	; (800d058 <quectelInit+0xa0>)
 800cfd8:	f004 fa72 	bl	80114c0 <memset>

	 ckeckQuectelSignalWithNoEcho(buffer);
 800cfdc:	481e      	ldr	r0, [pc, #120]	; (800d058 <quectelInit+0xa0>)
 800cfde:	f000 fca1 	bl	800d924 <ckeckQuectelSignalWithNoEcho>
	  HD44780_PrintStr("#");
 800cfe2:	481e      	ldr	r0, [pc, #120]	; (800d05c <quectelInit+0xa4>)
 800cfe4:	f7ff fe4c 	bl	800cc80 <HD44780_PrintStr>
	  memset(buffer, 0, sizeof(buffer));
 800cfe8:	2280      	movs	r2, #128	; 0x80
 800cfea:	2100      	movs	r1, #0
 800cfec:	481a      	ldr	r0, [pc, #104]	; (800d058 <quectelInit+0xa0>)
 800cfee:	f004 fa67 	bl	80114c0 <memset>

	 MQTTRecMod(buffer);
 800cff2:	4819      	ldr	r0, [pc, #100]	; (800d058 <quectelInit+0xa0>)
 800cff4:	f000 fcd0 	bl	800d998 <MQTTRecMod>
	  HD44780_PrintStr("#");
 800cff8:	4818      	ldr	r0, [pc, #96]	; (800d05c <quectelInit+0xa4>)
 800cffa:	f7ff fe41 	bl	800cc80 <HD44780_PrintStr>
	  memset(buffer, 0, sizeof(buffer));
 800cffe:	2280      	movs	r2, #128	; 0x80
 800d000:	2100      	movs	r1, #0
 800d002:	4815      	ldr	r0, [pc, #84]	; (800d058 <quectelInit+0xa0>)
 800d004:	f004 fa5c 	bl	80114c0 <memset>

	 MQTTOpenPort(buffer);
 800d008:	4813      	ldr	r0, [pc, #76]	; (800d058 <quectelInit+0xa0>)
 800d00a:	f000 fd0b 	bl	800da24 <MQTTOpenPort>
	  HD44780_PrintStr("##");
 800d00e:	4814      	ldr	r0, [pc, #80]	; (800d060 <quectelInit+0xa8>)
 800d010:	f7ff fe36 	bl	800cc80 <HD44780_PrintStr>
	  memset(buffer, 0, sizeof(buffer));
 800d014:	2280      	movs	r2, #128	; 0x80
 800d016:	2100      	movs	r1, #0
 800d018:	480f      	ldr	r0, [pc, #60]	; (800d058 <quectelInit+0xa0>)
 800d01a:	f004 fa51 	bl	80114c0 <memset>

	 MQTTConnect(buffer);
 800d01e:	480e      	ldr	r0, [pc, #56]	; (800d058 <quectelInit+0xa0>)
 800d020:	f000 fd46 	bl	800dab0 <MQTTConnect>
	  HD44780_PrintStr("##");
 800d024:	480e      	ldr	r0, [pc, #56]	; (800d060 <quectelInit+0xa8>)
 800d026:	f7ff fe2b 	bl	800cc80 <HD44780_PrintStr>
	  memset(buffer, 0, sizeof(buffer));
 800d02a:	2280      	movs	r2, #128	; 0x80
 800d02c:	2100      	movs	r1, #0
 800d02e:	480a      	ldr	r0, [pc, #40]	; (800d058 <quectelInit+0xa0>)
 800d030:	f004 fa46 	bl	80114c0 <memset>

	 MQTTSubToTopic(buffer);
 800d034:	4808      	ldr	r0, [pc, #32]	; (800d058 <quectelInit+0xa0>)
 800d036:	f000 fd81 	bl	800db3c <MQTTSubToTopic>

	  //memset(buffer, 0, sizeof(buffer));

	  //MQTTPubToTopic(buffer, MQTT_EXMP_DATA);
	  HD44780_PrintStr("#");
 800d03a:	4808      	ldr	r0, [pc, #32]	; (800d05c <quectelInit+0xa4>)
 800d03c:	f7ff fe20 	bl	800cc80 <HD44780_PrintStr>
	  memset(buffer, 0, sizeof(buffer));
 800d040:	2280      	movs	r2, #128	; 0x80
 800d042:	2100      	movs	r1, #0
 800d044:	4804      	ldr	r0, [pc, #16]	; (800d058 <quectelInit+0xa0>)
 800d046:	f004 fa3b 	bl	80114c0 <memset>

      HAL_Delay(500);
 800d04a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d04e:	f001 fd3f 	bl	800ead0 <HAL_Delay>
}
 800d052:	bf00      	nop
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20000320 	.word	0x20000320
 800d05c:	08011f4c 	.word	0x08011f4c
 800d060:	08011f50 	.word	0x08011f50

0800d064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b096      	sub	sp, #88	; 0x58
 800d068:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800d06a:	f001 fccf 	bl	800ea0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d06e:	f000 fa59 	bl	800d524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d072:	f000 fb55 	bl	800d720 <MX_GPIO_Init>
  MX_I2C1_Init();
 800d076:	f000 fa9b 	bl	800d5b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800d07a:	f000 fac7 	bl	800d60c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800d07e:	f000 fafb 	bl	800d678 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d082:	f000 fb23 	bl	800d6cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800d086:	2002      	movs	r0, #2
 800d088:	f7ff fce2 	bl	800ca50 <HD44780_Init>
  //HAL_Delay(16000);
  printItvirteba(0, 3);
 800d08c:	2103      	movs	r1, #3
 800d08e:	2000      	movs	r0, #0
 800d090:	f7ff f864 	bl	800c15c <printItvirteba>
  HD44780_SetCursor(0, 1);
 800d094:	2101      	movs	r1, #1
 800d096:	2000      	movs	r0, #0
 800d098:	f7ff fd74 	bl	800cb84 <HD44780_SetCursor>

  for(int i = 0;i<2; i++){
 800d09c:	2300      	movs	r3, #0
 800d09e:	657b      	str	r3, [r7, #84]	; 0x54
 800d0a0:	e004      	b.n	800d0ac <main+0x48>
	  quectelInit();
 800d0a2:	f7ff ff89 	bl	800cfb8 <quectelInit>
  for(int i = 0;i<2; i++){
 800d0a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	657b      	str	r3, [r7, #84]	; 0x54
 800d0ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	ddf7      	ble.n	800d0a2 <main+0x3e>
  }


  MFRC522_Init();
 800d0b2:	f001 f872 	bl	800e19a <MFRC522_Init>


  	led(1);
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f001 fa1a 	bl	800e4f0 <led>
  	led(1);
 800d0bc:	2001      	movs	r0, #1
 800d0be:	f001 fa17 	bl	800e4f0 <led>
  	led(1);
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	f001 fa14 	bl	800e4f0 <led>
  	uint8_t cardRead = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


  	//uint8_t stat = checkMQTTCon(buffer);


  	MQTTPubToTopic(25);
 800d0ce:	2019      	movs	r0, #25
 800d0d0:	f000 fd4a 	bl	800db68 <MQTTPubToTopic>
  	HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, 25, 50);
 800d0d4:	2332      	movs	r3, #50	; 0x32
 800d0d6:	2219      	movs	r2, #25
 800d0d8:	49b2      	ldr	r1, [pc, #712]	; (800d3a4 <main+0x340>)
 800d0da:	48b3      	ldr	r0, [pc, #716]	; (800d3a8 <main+0x344>)
 800d0dc:	f003 fc27 	bl	801092e <HAL_UART_Transmit>
  	HAL_UART_Receive(&huart1, buffer1, 125, 1000);
 800d0e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d0e4:	227d      	movs	r2, #125	; 0x7d
 800d0e6:	49b1      	ldr	r1, [pc, #708]	; (800d3ac <main+0x348>)
 800d0e8:	48af      	ldr	r0, [pc, #700]	; (800d3a8 <main+0x344>)
 800d0ea:	f003 fcb2 	bl	8010a52 <HAL_UART_Receive>
  	int lengthOfCheckData = strlen((char*)buffer1);
 800d0ee:	48af      	ldr	r0, [pc, #700]	; (800d3ac <main+0x348>)
 800d0f0:	f7ff f82c 	bl	800c14c <strlen>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	643b      	str	r3, [r7, #64]	; 0x40
  	int StatusCheck = takeStatus(buffer1, lengthOfCheckData);
 800d0f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0fa:	48ac      	ldr	r0, [pc, #688]	; (800d3ac <main+0x348>)
 800d0fc:	f7ff fedc 	bl	800ceb8 <takeStatus>
 800d100:	63f8      	str	r0, [r7, #60]	; 0x3c

  	if(StatusCheck != 200)HAL_NVIC_SystemReset();
 800d102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d104:	2bc8      	cmp	r3, #200	; 0xc8
 800d106:	d001      	beq.n	800d10c <main+0xa8>
 800d108:	f001 fe1d 	bl	800ed46 <HAL_NVIC_SystemReset>
  	HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d10c:	4ba8      	ldr	r3, [pc, #672]	; (800d3b0 <main+0x34c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4aa8      	ldr	r2, [pc, #672]	; (800d3b4 <main+0x350>)
 800d112:	4413      	add	r3, r2
 800d114:	2201      	movs	r2, #1
 800d116:	4619      	mov	r1, r3
 800d118:	48a3      	ldr	r0, [pc, #652]	; (800d3a8 <main+0x344>)
 800d11a:	f003 fd3c 	bl	8010b96 <HAL_UART_Receive_IT>
  	T = HAL_GetTick();
 800d11e:	f001 fccd 	bl	800eabc <HAL_GetTick>
 800d122:	4603      	mov	r3, r0
 800d124:	4aa4      	ldr	r2, [pc, #656]	; (800d3b8 <main+0x354>)
 800d126:	6013      	str	r3, [r2, #0]
  	 printMiadetBarati(0, 2);
 800d128:	2102      	movs	r1, #2
 800d12a:	2000      	movs	r0, #0
 800d12c:	f7ff fa20 	bl	800c570 <printMiadetBarati>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cardRead == 1){
 800d130:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d134:	2b01      	cmp	r3, #1
 800d136:	d117      	bne.n	800d168 <main+0x104>
		  if(HAL_GetTick() - CardTime >= 20000){
 800d138:	f001 fcc0 	bl	800eabc <HAL_GetTick>
 800d13c:	4602      	mov	r2, r0
 800d13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d146:	4293      	cmp	r3, r2
 800d148:	d90e      	bls.n	800d168 <main+0x104>
			  printShecdoma(0, 4);
 800d14a:	2104      	movs	r1, #4
 800d14c:	2000      	movs	r0, #0
 800d14e:	f7ff fadf 	bl	800c710 <printShecdoma>
			  HAL_Delay(3000);
 800d152:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d156:	f001 fcbb 	bl	800ead0 <HAL_Delay>
			  printMiadetBarati(0, 2);
 800d15a:	2102      	movs	r1, #2
 800d15c:	2000      	movs	r0, #0
 800d15e:	f7ff fa07 	bl	800c570 <printMiadetBarati>
			  cardRead = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		  }

	  }
	  if(HAL_GetTick() - T >= 5*(60000) && cardRead == 0){
 800d168:	f001 fca8 	bl	800eabc <HAL_GetTick>
 800d16c:	4602      	mov	r2, r0
 800d16e:	4b92      	ldr	r3, [pc, #584]	; (800d3b8 <main+0x354>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	4a91      	ldr	r2, [pc, #580]	; (800d3bc <main+0x358>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d91d      	bls.n	800d1b6 <main+0x152>
 800d17a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d119      	bne.n	800d1b6 <main+0x152>

		  if(temp >= check)HAL_NVIC_SystemReset();
 800d182:	4b8f      	ldr	r3, [pc, #572]	; (800d3c0 <main+0x35c>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4b8f      	ldr	r3, [pc, #572]	; (800d3c4 <main+0x360>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	db01      	blt.n	800d192 <main+0x12e>
 800d18e:	f001 fdda 	bl	800ed46 <HAL_NVIC_SystemReset>
		  MQTTPubToTopic(25);
 800d192:	2019      	movs	r0, #25
 800d194:	f000 fce8 	bl	800db68 <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, 25, 50);
 800d198:	2332      	movs	r3, #50	; 0x32
 800d19a:	2219      	movs	r2, #25
 800d19c:	4981      	ldr	r1, [pc, #516]	; (800d3a4 <main+0x340>)
 800d19e:	4882      	ldr	r0, [pc, #520]	; (800d3a8 <main+0x344>)
 800d1a0:	f003 fbc5 	bl	801092e <HAL_UART_Transmit>
		  T = HAL_GetTick();
 800d1a4:	f001 fc8a 	bl	800eabc <HAL_GetTick>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	4a83      	ldr	r2, [pc, #524]	; (800d3b8 <main+0x354>)
 800d1ac:	6013      	str	r3, [r2, #0]
		  temp = check;
 800d1ae:	4b85      	ldr	r3, [pc, #532]	; (800d3c4 <main+0x360>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a83      	ldr	r2, [pc, #524]	; (800d3c0 <main+0x35c>)
 800d1b4:	6013      	str	r3, [r2, #0]
	  }

	  if(readSatus){
 800d1b6:	4b84      	ldr	r3, [pc, #528]	; (800d3c8 <main+0x364>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 8138 	beq.w	800d430 <main+0x3cc>
		  int Status = takeStatus(buffer, count);
 800d1c0:	4b7b      	ldr	r3, [pc, #492]	; (800d3b0 <main+0x34c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	487b      	ldr	r0, [pc, #492]	; (800d3b4 <main+0x350>)
 800d1c8:	f7ff fe76 	bl	800ceb8 <takeStatus>
 800d1cc:	63b8      	str	r0, [r7, #56]	; 0x38
		  uint8_t dispData[50];

		  switch(Status){
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d1d4:	f280 80fa 	bge.w	800d3cc <main+0x368>
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800d1de:	dc06      	bgt.n	800d1ee <main+0x18a>
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	2bc8      	cmp	r3, #200	; 0xc8
 800d1e4:	d01e      	beq.n	800d224 <main+0x1c0>
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	2bc9      	cmp	r3, #201	; 0xc9
 800d1ea:	d021      	beq.n	800d230 <main+0x1cc>
 800d1ec:	e0ee      	b.n	800d3cc <main+0x368>
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f0:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800d1f4:	2b08      	cmp	r3, #8
 800d1f6:	f200 80e9 	bhi.w	800d3cc <main+0x368>
 800d1fa:	a201      	add	r2, pc, #4	; (adr r2, 800d200 <main+0x19c>)
 800d1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d200:	0800d2ad 	.word	0x0800d2ad
 800d204:	0800d3cd 	.word	0x0800d3cd
 800d208:	0800d26f 	.word	0x0800d26f
 800d20c:	0800d3cd 	.word	0x0800d3cd
 800d210:	0800d3cd 	.word	0x0800d3cd
 800d214:	0800d2eb 	.word	0x0800d2eb
 800d218:	0800d329 	.word	0x0800d329
 800d21c:	0800d3cd 	.word	0x0800d3cd
 800d220:	0800d367 	.word	0x0800d367
		  	  	case 200:
		  	  		//AppruveSound();
		  	  		check++;
 800d224:	4b67      	ldr	r3, [pc, #412]	; (800d3c4 <main+0x360>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3301      	adds	r3, #1
 800d22a:	4a66      	ldr	r2, [pc, #408]	; (800d3c4 <main+0x360>)
 800d22c:	6013      	str	r3, [r2, #0]
		  	  		break;
 800d22e:	e0e5      	b.n	800d3fc <main+0x398>
		  	  	case 201:
					AppruveSound();
 800d230:	f001 fb14 	bl	800e85c <AppruveSound>
					takeData(buffer, count, dispData);
 800d234:	4b5e      	ldr	r3, [pc, #376]	; (800d3b0 <main+0x34c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	1d3a      	adds	r2, r7, #4
 800d23a:	4619      	mov	r1, r3
 800d23c:	485d      	ldr	r0, [pc, #372]	; (800d3b4 <main+0x350>)
 800d23e:	f7ff fe6f 	bl	800cf20 <takeData>
					printBalansi(0, 0);
 800d242:	2100      	movs	r1, #0
 800d244:	2000      	movs	r0, #0
 800d246:	f7ff fb81 	bl	800c94c <printBalansi>
					HD44780_PrintStr((char*) dispData);
 800d24a:	1d3b      	adds	r3, r7, #4
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff fd17 	bl	800cc80 <HD44780_PrintStr>
					RelaySwitch();
 800d252:	f001 fb33 	bl	800e8bc <RelaySwitch>
					HAL_Delay(2000);
 800d256:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d25a:	f001 fc39 	bl	800ead0 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d25e:	2102      	movs	r1, #2
 800d260:	2000      	movs	r0, #0
 800d262:	f7ff f985 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					break;
 800d26c:	e0c6      	b.n	800d3fc <main+0x398>
				case 293:
					takeData(buffer, count, dispData);
 800d26e:	4b50      	ldr	r3, [pc, #320]	; (800d3b0 <main+0x34c>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	1d3a      	adds	r2, r7, #4
 800d274:	4619      	mov	r1, r3
 800d276:	484f      	ldr	r0, [pc, #316]	; (800d3b4 <main+0x350>)
 800d278:	f7ff fe52 	bl	800cf20 <takeData>
					HD44780_Clear();
 800d27c:	f7ff fc6c 	bl	800cb58 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d280:	2100      	movs	r1, #0
 800d282:	2000      	movs	r0, #0
 800d284:	f7ff fc7e 	bl	800cb84 <HD44780_SetCursor>
					printUcxoBaratia(0,0);
 800d288:	2100      	movs	r1, #0
 800d28a:	2000      	movs	r0, #0
 800d28c:	f7ff f80a 	bl	800c2a4 <printUcxoBaratia>
					ErrorSound();
 800d290:	f001 fb26 	bl	800e8e0 <ErrorSound>
					HAL_Delay(1000);
 800d294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d298:	f001 fc1a 	bl	800ead0 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d29c:	2102      	movs	r1, #2
 800d29e:	2000      	movs	r0, #0
 800d2a0:	f7ff f966 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					break;
 800d2aa:	e0a7      	b.n	800d3fc <main+0x398>
				case 291:
					takeData(buffer, count, dispData);
 800d2ac:	4b40      	ldr	r3, [pc, #256]	; (800d3b0 <main+0x34c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	1d3a      	adds	r2, r7, #4
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	483f      	ldr	r0, [pc, #252]	; (800d3b4 <main+0x350>)
 800d2b6:	f7ff fe33 	bl	800cf20 <takeData>
					HD44780_Clear();
 800d2ba:	f7ff fc4d 	bl	800cb58 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d2be:	2100      	movs	r1, #0
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	f7ff fc5f 	bl	800cb84 <HD44780_SetCursor>
					printBlansiAraa(0, 0);
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f7ff f8a5 	bl	800c418 <printBlansiAraa>
					ErrorSound();
 800d2ce:	f001 fb07 	bl	800e8e0 <ErrorSound>
					HAL_Delay(1000);
 800d2d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2d6:	f001 fbfb 	bl	800ead0 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d2da:	2102      	movs	r1, #2
 800d2dc:	2000      	movs	r0, #0
 800d2de:	f7ff f947 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					break;
 800d2e8:	e088      	b.n	800d3fc <main+0x398>
				case 296:
					takeData(buffer, count, dispData);
 800d2ea:	4b31      	ldr	r3, [pc, #196]	; (800d3b0 <main+0x34c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	1d3a      	adds	r2, r7, #4
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4830      	ldr	r0, [pc, #192]	; (800d3b4 <main+0x350>)
 800d2f4:	f7ff fe14 	bl	800cf20 <takeData>
					HD44780_Clear();
 800d2f8:	f7ff fc2e 	bl	800cb58 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	2000      	movs	r0, #0
 800d300:	f7ff fc40 	bl	800cb84 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d304:	1d3b      	adds	r3, r7, #4
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff fcba 	bl	800cc80 <HD44780_PrintStr>
					ErrorSound();
 800d30c:	f001 fae8 	bl	800e8e0 <ErrorSound>
					HAL_Delay(3000);
 800d310:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d314:	f001 fbdc 	bl	800ead0 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d318:	2102      	movs	r1, #2
 800d31a:	2000      	movs	r0, #0
 800d31c:	f7ff f928 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					break;
 800d326:	e069      	b.n	800d3fc <main+0x398>
				case 297:
					takeData(buffer, count, dispData);
 800d328:	4b21      	ldr	r3, [pc, #132]	; (800d3b0 <main+0x34c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	1d3a      	adds	r2, r7, #4
 800d32e:	4619      	mov	r1, r3
 800d330:	4820      	ldr	r0, [pc, #128]	; (800d3b4 <main+0x350>)
 800d332:	f7ff fdf5 	bl	800cf20 <takeData>
					HD44780_Clear();
 800d336:	f7ff fc0f 	bl	800cb58 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d33a:	2100      	movs	r1, #0
 800d33c:	2000      	movs	r0, #0
 800d33e:	f7ff fc21 	bl	800cb84 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d342:	1d3b      	adds	r3, r7, #4
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fc9b 	bl	800cc80 <HD44780_PrintStr>
					ErrorSound();
 800d34a:	f001 fac9 	bl	800e8e0 <ErrorSound>
					HAL_Delay(3000);
 800d34e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d352:	f001 fbbd 	bl	800ead0 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d356:	2102      	movs	r1, #2
 800d358:	2000      	movs	r0, #0
 800d35a:	f7ff f909 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					break;
 800d364:	e04a      	b.n	800d3fc <main+0x398>
				case 299:
					takeData(buffer, count, dispData);
 800d366:	4b12      	ldr	r3, [pc, #72]	; (800d3b0 <main+0x34c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	1d3a      	adds	r2, r7, #4
 800d36c:	4619      	mov	r1, r3
 800d36e:	4811      	ldr	r0, [pc, #68]	; (800d3b4 <main+0x350>)
 800d370:	f7ff fdd6 	bl	800cf20 <takeData>
					HD44780_Clear();
 800d374:	f7ff fbf0 	bl	800cb58 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d378:	2100      	movs	r1, #0
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7ff fc02 	bl	800cb84 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d380:	1d3b      	adds	r3, r7, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fc7c 	bl	800cc80 <HD44780_PrintStr>
					ErrorSound();
 800d388:	f001 faaa 	bl	800e8e0 <ErrorSound>
					HAL_Delay(3000);
 800d38c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d390:	f001 fb9e 	bl	800ead0 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d394:	2102      	movs	r1, #2
 800d396:	2000      	movs	r0, #0
 800d398:	f7ff f8ea 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					break;
 800d3a2:	e02b      	b.n	800d3fc <main+0x398>
 800d3a4:	2000009c 	.word	0x2000009c
 800d3a8:	200004d0 	.word	0x200004d0
 800d3ac:	200003a0 	.word	0x200003a0
 800d3b0:	20000420 	.word	0x20000420
 800d3b4:	20000320 	.word	0x20000320
 800d3b8:	20000210 	.word	0x20000210
 800d3bc:	000493df 	.word	0x000493df
 800d3c0:	20000214 	.word	0x20000214
 800d3c4:	20000098 	.word	0x20000098
 800d3c8:	2000021c 	.word	0x2000021c
				default:
					memset(buffer, 0, sizeof(buffer));
 800d3cc:	2280      	movs	r2, #128	; 0x80
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	484e      	ldr	r0, [pc, #312]	; (800d50c <main+0x4a8>)
 800d3d2:	f004 f875 	bl	80114c0 <memset>
				    memset(dispData, 0, sizeof(dispData));
 800d3d6:	1d3b      	adds	r3, r7, #4
 800d3d8:	2232      	movs	r2, #50	; 0x32
 800d3da:	2100      	movs	r1, #0
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f004 f86f 	bl	80114c0 <memset>
					readSatus = 0;
 800d3e2:	4b4b      	ldr	r3, [pc, #300]	; (800d510 <main+0x4ac>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	701a      	strb	r2, [r3, #0]
					count = 0;
 800d3e8:	4b4a      	ldr	r3, [pc, #296]	; (800d514 <main+0x4b0>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]
					printMiadetBarati(0, 2);
 800d3ee:	2102      	movs	r1, #2
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	f7ff f8bd 	bl	800c570 <printMiadetBarati>
					cardRead = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		  }
		  memset(buffer, 0, sizeof(buffer));
 800d3fc:	2280      	movs	r2, #128	; 0x80
 800d3fe:	2100      	movs	r1, #0
 800d400:	4842      	ldr	r0, [pc, #264]	; (800d50c <main+0x4a8>)
 800d402:	f004 f85d 	bl	80114c0 <memset>
		  memset(dispData, 0, sizeof(dispData));
 800d406:	1d3b      	adds	r3, r7, #4
 800d408:	2232      	movs	r2, #50	; 0x32
 800d40a:	2100      	movs	r1, #0
 800d40c:	4618      	mov	r0, r3
 800d40e:	f004 f857 	bl	80114c0 <memset>
		  readSatus = 0;
 800d412:	4b3f      	ldr	r3, [pc, #252]	; (800d510 <main+0x4ac>)
 800d414:	2200      	movs	r2, #0
 800d416:	701a      	strb	r2, [r3, #0]
		  count = 0;
 800d418:	4b3e      	ldr	r3, [pc, #248]	; (800d514 <main+0x4b0>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d41e:	4b3d      	ldr	r3, [pc, #244]	; (800d514 <main+0x4b0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a3a      	ldr	r2, [pc, #232]	; (800d50c <main+0x4a8>)
 800d424:	4413      	add	r3, r2
 800d426:	2201      	movs	r2, #1
 800d428:	4619      	mov	r1, r3
 800d42a:	483b      	ldr	r0, [pc, #236]	; (800d518 <main+0x4b4>)
 800d42c:	f003 fbb3 	bl	8010b96 <HAL_UART_Receive_IT>
		 }

	 uint8_t catStat = cardOperationWithBlockedSector(postData);
 800d430:	483a      	ldr	r0, [pc, #232]	; (800d51c <main+0x4b8>)
 800d432:	f000 fef3 	bl	800e21c <cardOperationWithBlockedSector>
 800d436:	4603      	mov	r3, r0
 800d438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if(catStat == 1 && cardRead == 0){
 800d43c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d440:	2b01      	cmp	r3, #1
 800d442:	f47f ae75 	bne.w	800d130 <main+0xcc>
 800d446:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f47f ae70 	bne.w	800d130 <main+0xcc>
		 uint8_t bpundCount = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		 uint8_t postEnable = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

		 LENGTH = strlen((char*)postData);
 800d45c:	482f      	ldr	r0, [pc, #188]	; (800d51c <main+0x4b8>)
 800d45e:	f7fe fe75 	bl	800c14c <strlen>
 800d462:	4603      	mov	r3, r0
 800d464:	461a      	mov	r2, r3
 800d466:	4b2e      	ldr	r3, [pc, #184]	; (800d520 <main+0x4bc>)
 800d468:	601a      	str	r2, [r3, #0]

		 for(int i = 0; i< LENGTH+5; i++){
 800d46a:	2300      	movs	r3, #0
 800d46c:	647b      	str	r3, [r7, #68]	; 0x44
 800d46e:	e013      	b.n	800d498 <main+0x434>

			 if(postData[i]== '{' || postData[i] == '}'){
 800d470:	4a2a      	ldr	r2, [pc, #168]	; (800d51c <main+0x4b8>)
 800d472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d474:	4413      	add	r3, r2
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b7b      	cmp	r3, #123	; 0x7b
 800d47a:	d005      	beq.n	800d488 <main+0x424>
 800d47c:	4a27      	ldr	r2, [pc, #156]	; (800d51c <main+0x4b8>)
 800d47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d480:	4413      	add	r3, r2
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b7d      	cmp	r3, #125	; 0x7d
 800d486:	d104      	bne.n	800d492 <main+0x42e>
				 bpundCount++;
 800d488:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d48c:	3301      	adds	r3, #1
 800d48e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		 for(int i = 0; i< LENGTH+5; i++){
 800d492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d494:	3301      	adds	r3, #1
 800d496:	647b      	str	r3, [r7, #68]	; 0x44
 800d498:	4b21      	ldr	r3, [pc, #132]	; (800d520 <main+0x4bc>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3304      	adds	r3, #4
 800d49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	dde5      	ble.n	800d470 <main+0x40c>
			 }

		 }
		 if(bpundCount != 4){
 800d4a4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d007      	beq.n	800d4bc <main+0x458>
		 	postEnable = 1;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		 	memset(postData, 0, sizeof(postData));
 800d4b2:	22ff      	movs	r2, #255	; 0xff
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	4819      	ldr	r0, [pc, #100]	; (800d51c <main+0x4b8>)
 800d4b8:	f004 f802 	bl	80114c0 <memset>
		  }

		 if(postEnable == 0){
 800d4bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f47f ae35 	bne.w	800d130 <main+0xcc>
			 CardReadSound();
 800d4c6:	f001 fa2d 	bl	800e924 <CardReadSound>
			 printDaicadet(0, 3);
 800d4ca:	2103      	movs	r1, #3
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	f7ff f9af 	bl	800c830 <printDaicadet>
			 MQTTPubToTopic(LENGTH);
 800d4d2:	4b13      	ldr	r3, [pc, #76]	; (800d520 <main+0x4bc>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fb46 	bl	800db68 <MQTTPubToTopic>
			 HAL_Delay(50);
 800d4dc:	2032      	movs	r0, #50	; 0x32
 800d4de:	f001 faf7 	bl	800ead0 <HAL_Delay>

			 HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 800d4e2:	4b0f      	ldr	r3, [pc, #60]	; (800d520 <main+0x4bc>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	2364      	movs	r3, #100	; 0x64
 800d4ea:	490c      	ldr	r1, [pc, #48]	; (800d51c <main+0x4b8>)
 800d4ec:	480a      	ldr	r0, [pc, #40]	; (800d518 <main+0x4b4>)
 800d4ee:	f003 fa1e 	bl	801092e <HAL_UART_Transmit>

			 memset(postData, 0, sizeof(postData));
 800d4f2:	22ff      	movs	r2, #255	; 0xff
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	4809      	ldr	r0, [pc, #36]	; (800d51c <main+0x4b8>)
 800d4f8:	f003 ffe2 	bl	80114c0 <memset>
			 cardRead = 1;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			 CardTime = HAL_GetTick();
 800d502:	f001 fadb 	bl	800eabc <HAL_GetTick>
 800d506:	4603      	mov	r3, r0
 800d508:	64fb      	str	r3, [r7, #76]	; 0x4c
  {
 800d50a:	e611      	b.n	800d130 <main+0xcc>
 800d50c:	20000320 	.word	0x20000320
 800d510:	2000021c 	.word	0x2000021c
 800d514:	20000420 	.word	0x20000420
 800d518:	200004d0 	.word	0x200004d0
 800d51c:	20000220 	.word	0x20000220
 800d520:	20000218 	.word	0x20000218

0800d524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b090      	sub	sp, #64	; 0x40
 800d528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d52a:	f107 0318 	add.w	r3, r7, #24
 800d52e:	2228      	movs	r2, #40	; 0x28
 800d530:	2100      	movs	r1, #0
 800d532:	4618      	mov	r0, r3
 800d534:	f003 ffc4 	bl	80114c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d538:	1d3b      	adds	r3, r7, #4
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	605a      	str	r2, [r3, #4]
 800d540:	609a      	str	r2, [r3, #8]
 800d542:	60da      	str	r2, [r3, #12]
 800d544:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d546:	2301      	movs	r3, #1
 800d548:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d54a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d54e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800d550:	2300      	movs	r3, #0
 800d552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d554:	2301      	movs	r3, #1
 800d556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d558:	2302      	movs	r3, #2
 800d55a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d55c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800d562:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d568:	f107 0318 	add.w	r3, r7, #24
 800d56c:	4618      	mov	r0, r3
 800d56e:	f002 faab 	bl	800fac8 <HAL_RCC_OscConfig>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <SystemClock_Config+0x58>
  {
    Error_Handler();
 800d578:	f000 f954 	bl	800d824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d57c:	230f      	movs	r3, #15
 800d57e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d580:	2302      	movs	r3, #2
 800d582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d584:	2300      	movs	r3, #0
 800d586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d58c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d58e:	2300      	movs	r3, #0
 800d590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d592:	1d3b      	adds	r3, r7, #4
 800d594:	2102      	movs	r1, #2
 800d596:	4618      	mov	r0, r3
 800d598:	f002 fd18 	bl	800ffcc <HAL_RCC_ClockConfig>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800d5a2:	f000 f93f 	bl	800d824 <Error_Handler>
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	3740      	adds	r7, #64	; 0x40
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d5b4:	4b12      	ldr	r3, [pc, #72]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5b6:	4a13      	ldr	r2, [pc, #76]	; (800d604 <MX_I2C1_Init+0x54>)
 800d5b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d5ba:	4b11      	ldr	r3, [pc, #68]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5bc:	4a12      	ldr	r2, [pc, #72]	; (800d608 <MX_I2C1_Init+0x58>)
 800d5be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d5c0:	4b0f      	ldr	r3, [pc, #60]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d5c6:	4b0e      	ldr	r3, [pc, #56]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d5cc:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d5d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d5d4:	4b0a      	ldr	r3, [pc, #40]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d5da:	4b09      	ldr	r3, [pc, #36]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d5e0:	4b07      	ldr	r3, [pc, #28]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d5e6:	4b06      	ldr	r3, [pc, #24]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d5ec:	4804      	ldr	r0, [pc, #16]	; (800d600 <MX_I2C1_Init+0x50>)
 800d5ee:	f001 fe21 	bl	800f234 <HAL_I2C_Init>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d5f8:	f000 f914 	bl	800d824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d5fc:	bf00      	nop
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	20000424 	.word	0x20000424
 800d604:	40005400 	.word	0x40005400
 800d608:	000186a0 	.word	0x000186a0

0800d60c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d610:	4b17      	ldr	r3, [pc, #92]	; (800d670 <MX_SPI1_Init+0x64>)
 800d612:	4a18      	ldr	r2, [pc, #96]	; (800d674 <MX_SPI1_Init+0x68>)
 800d614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d616:	4b16      	ldr	r3, [pc, #88]	; (800d670 <MX_SPI1_Init+0x64>)
 800d618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d61c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d61e:	4b14      	ldr	r3, [pc, #80]	; (800d670 <MX_SPI1_Init+0x64>)
 800d620:	2200      	movs	r2, #0
 800d622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d624:	4b12      	ldr	r3, [pc, #72]	; (800d670 <MX_SPI1_Init+0x64>)
 800d626:	2200      	movs	r2, #0
 800d628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d62a:	4b11      	ldr	r3, [pc, #68]	; (800d670 <MX_SPI1_Init+0x64>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d630:	4b0f      	ldr	r3, [pc, #60]	; (800d670 <MX_SPI1_Init+0x64>)
 800d632:	2200      	movs	r2, #0
 800d634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d636:	4b0e      	ldr	r3, [pc, #56]	; (800d670 <MX_SPI1_Init+0x64>)
 800d638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d63c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d63e:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <MX_SPI1_Init+0x64>)
 800d640:	2218      	movs	r2, #24
 800d642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d644:	4b0a      	ldr	r3, [pc, #40]	; (800d670 <MX_SPI1_Init+0x64>)
 800d646:	2200      	movs	r2, #0
 800d648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d64a:	4b09      	ldr	r3, [pc, #36]	; (800d670 <MX_SPI1_Init+0x64>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <MX_SPI1_Init+0x64>)
 800d652:	2200      	movs	r2, #0
 800d654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d656:	4b06      	ldr	r3, [pc, #24]	; (800d670 <MX_SPI1_Init+0x64>)
 800d658:	220a      	movs	r2, #10
 800d65a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d65c:	4804      	ldr	r0, [pc, #16]	; (800d670 <MX_SPI1_Init+0x64>)
 800d65e:	f002 fe4d 	bl	80102fc <HAL_SPI_Init>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d668:	f000 f8dc 	bl	800d824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d66c:	bf00      	nop
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	20000478 	.word	0x20000478
 800d674:	40013000 	.word	0x40013000

0800d678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d67c:	4b11      	ldr	r3, [pc, #68]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d67e:	4a12      	ldr	r2, [pc, #72]	; (800d6c8 <MX_USART1_UART_Init+0x50>)
 800d680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d682:	4b10      	ldr	r3, [pc, #64]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d68a:	4b0e      	ldr	r3, [pc, #56]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d690:	4b0c      	ldr	r3, [pc, #48]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d692:	2200      	movs	r2, #0
 800d694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d696:	4b0b      	ldr	r3, [pc, #44]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d698:	2200      	movs	r2, #0
 800d69a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d69c:	4b09      	ldr	r3, [pc, #36]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d69e:	220c      	movs	r2, #12
 800d6a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6a2:	4b08      	ldr	r3, [pc, #32]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6a8:	4b06      	ldr	r3, [pc, #24]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d6ae:	4805      	ldr	r0, [pc, #20]	; (800d6c4 <MX_USART1_UART_Init+0x4c>)
 800d6b0:	f003 f8f0 	bl	8010894 <HAL_UART_Init>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d6ba:	f000 f8b3 	bl	800d824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d6be:	bf00      	nop
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	200004d0 	.word	0x200004d0
 800d6c8:	40013800 	.word	0x40013800

0800d6cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d6d0:	4b11      	ldr	r3, [pc, #68]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6d2:	4a12      	ldr	r2, [pc, #72]	; (800d71c <MX_USART2_UART_Init+0x50>)
 800d6d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d6d6:	4b10      	ldr	r3, [pc, #64]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d6dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d6de:	4b0e      	ldr	r3, [pc, #56]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d6e4:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d6ea:	4b0b      	ldr	r3, [pc, #44]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d6f0:	4b09      	ldr	r3, [pc, #36]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6f2:	220c      	movs	r2, #12
 800d6f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6f6:	4b08      	ldr	r3, [pc, #32]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d702:	4805      	ldr	r0, [pc, #20]	; (800d718 <MX_USART2_UART_Init+0x4c>)
 800d704:	f003 f8c6 	bl	8010894 <HAL_UART_Init>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d70e:	f000 f889 	bl	800d824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d712:	bf00      	nop
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20000514 	.word	0x20000514
 800d71c:	40004400 	.word	0x40004400

0800d720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d726:	f107 0310 	add.w	r3, r7, #16
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	605a      	str	r2, [r3, #4]
 800d730:	609a      	str	r2, [r3, #8]
 800d732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d734:	4b37      	ldr	r3, [pc, #220]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	4a36      	ldr	r2, [pc, #216]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d73a:	f043 0310 	orr.w	r3, r3, #16
 800d73e:	6193      	str	r3, [r2, #24]
 800d740:	4b34      	ldr	r3, [pc, #208]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	f003 0310 	and.w	r3, r3, #16
 800d748:	60fb      	str	r3, [r7, #12]
 800d74a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d74c:	4b31      	ldr	r3, [pc, #196]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	4a30      	ldr	r2, [pc, #192]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d752:	f043 0320 	orr.w	r3, r3, #32
 800d756:	6193      	str	r3, [r2, #24]
 800d758:	4b2e      	ldr	r3, [pc, #184]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	60bb      	str	r3, [r7, #8]
 800d762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d764:	4b2b      	ldr	r3, [pc, #172]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	4a2a      	ldr	r2, [pc, #168]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d76a:	f043 0304 	orr.w	r3, r3, #4
 800d76e:	6193      	str	r3, [r2, #24]
 800d770:	4b28      	ldr	r3, [pc, #160]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	f003 0304 	and.w	r3, r3, #4
 800d778:	607b      	str	r3, [r7, #4]
 800d77a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d77c:	4b25      	ldr	r3, [pc, #148]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d77e:	699b      	ldr	r3, [r3, #24]
 800d780:	4a24      	ldr	r2, [pc, #144]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d782:	f043 0308 	orr.w	r3, r3, #8
 800d786:	6193      	str	r3, [r2, #24]
 800d788:	4b22      	ldr	r3, [pc, #136]	; (800d814 <MX_GPIO_Init+0xf4>)
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	f003 0308 	and.w	r3, r3, #8
 800d790:	603b      	str	r3, [r7, #0]
 800d792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d794:	2200      	movs	r2, #0
 800d796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d79a:	481f      	ldr	r0, [pc, #124]	; (800d818 <MX_GPIO_Init+0xf8>)
 800d79c:	f001 fd18 	bl	800f1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2110      	movs	r1, #16
 800d7a4:	481d      	ldr	r0, [pc, #116]	; (800d81c <MX_GPIO_Init+0xfc>)
 800d7a6:	f001 fd13 	bl	800f1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2103      	movs	r1, #3
 800d7ae:	481c      	ldr	r0, [pc, #112]	; (800d820 <MX_GPIO_Init+0x100>)
 800d7b0:	f001 fd0e 	bl	800f1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d7b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7c6:	f107 0310 	add.w	r3, r7, #16
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4812      	ldr	r0, [pc, #72]	; (800d818 <MX_GPIO_Init+0xf8>)
 800d7ce:	f001 fb7b 	bl	800eec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d7d2:	2310      	movs	r3, #16
 800d7d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7de:	2302      	movs	r3, #2
 800d7e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7e2:	f107 0310 	add.w	r3, r7, #16
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	480c      	ldr	r0, [pc, #48]	; (800d81c <MX_GPIO_Init+0xfc>)
 800d7ea:	f001 fb6d 	bl	800eec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d7fe:	f107 0310 	add.w	r3, r7, #16
 800d802:	4619      	mov	r1, r3
 800d804:	4806      	ldr	r0, [pc, #24]	; (800d820 <MX_GPIO_Init+0x100>)
 800d806:	f001 fb5f 	bl	800eec8 <HAL_GPIO_Init>

}
 800d80a:	bf00      	nop
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	40021000 	.word	0x40021000
 800d818:	40011000 	.word	0x40011000
 800d81c:	40010800 	.word	0x40010800
 800d820:	40010c00 	.word	0x40010c00

0800d824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d824:	b480      	push	{r7}
 800d826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d828:	b672      	cpsid	i
}
 800d82a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d82c:	e7fe      	b.n	800d82c <Error_Handler+0x8>

0800d82e <checkCommand>:
	return Error;
}



uint8_t checkCommand(uint8_t* text, uint8_t* word) {
 800d82e:	b580      	push	{r7, lr}
 800d830:	b084      	sub	sp, #16
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
	uint8_t textLen = strlen((char*)text);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7fe fc87 	bl	800c14c <strlen>
 800d83e:	4603      	mov	r3, r0
 800d840:	737b      	strb	r3, [r7, #13]
	uint8_t wordLen = strlen((char*)word);
 800d842:	6838      	ldr	r0, [r7, #0]
 800d844:	f7fe fc82 	bl	800c14c <strlen>
 800d848:	4603      	mov	r3, r0
 800d84a:	733b      	strb	r3, [r7, #12]
	uint8_t i, j;

    for (i = 0; i <= textLen - wordLen; i++) {
 800d84c:	2300      	movs	r3, #0
 800d84e:	73fb      	strb	r3, [r7, #15]
 800d850:	e021      	b.n	800d896 <checkCommand+0x68>
        for (j = 0; j < wordLen; j++) {
 800d852:	2300      	movs	r3, #0
 800d854:	73bb      	strb	r3, [r7, #14]
 800d856:	e00f      	b.n	800d878 <checkCommand+0x4a>
            if (text[i+j] != word[j]) {
 800d858:	7bfa      	ldrb	r2, [r7, #15]
 800d85a:	7bbb      	ldrb	r3, [r7, #14]
 800d85c:	4413      	add	r3, r2
 800d85e:	461a      	mov	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4413      	add	r3, r2
 800d864:	781a      	ldrb	r2, [r3, #0]
 800d866:	7bbb      	ldrb	r3, [r7, #14]
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	440b      	add	r3, r1
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d107      	bne.n	800d882 <checkCommand+0x54>
        for (j = 0; j < wordLen; j++) {
 800d872:	7bbb      	ldrb	r3, [r7, #14]
 800d874:	3301      	adds	r3, #1
 800d876:	73bb      	strb	r3, [r7, #14]
 800d878:	7bba      	ldrb	r2, [r7, #14]
 800d87a:	7b3b      	ldrb	r3, [r7, #12]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d3eb      	bcc.n	800d858 <checkCommand+0x2a>
 800d880:	e000      	b.n	800d884 <checkCommand+0x56>
                break;
 800d882:	bf00      	nop
            }
        }
        if (j == wordLen) {
 800d884:	7bba      	ldrb	r2, [r7, #14]
 800d886:	7b3b      	ldrb	r3, [r7, #12]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d101      	bne.n	800d890 <checkCommand+0x62>
            return 1;  // word found
 800d88c:	2301      	movs	r3, #1
 800d88e:	e009      	b.n	800d8a4 <checkCommand+0x76>
    for (i = 0; i <= textLen - wordLen; i++) {
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	3301      	adds	r3, #1
 800d894:	73fb      	strb	r3, [r7, #15]
 800d896:	7bfa      	ldrb	r2, [r7, #15]
 800d898:	7b79      	ldrb	r1, [r7, #13]
 800d89a:	7b3b      	ldrb	r3, [r7, #12]
 800d89c:	1acb      	subs	r3, r1, r3
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	ddd7      	ble.n	800d852 <checkCommand+0x24>
        }
    }

    return 0;  // word not found
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <checkQueqtelWithNoEcho>:
					HAL_NVIC_SystemReset();
				}
			}
}

void checkQueqtelWithNoEcho (uint8_t *RXBuffer){
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800d8b8:	f001 f900 	bl	800eabc <HAL_GetTick>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	60bb      	str	r3, [r7, #8]
	while (status == 0) {
 800d8c0:	e020      	b.n	800d904 <checkQueqtelWithNoEcho+0x58>
			HAL_UART_Transmit(&huart1, TXBuffer, sizeof TXBuffer / sizeof TXBuffer[0], 200);
 800d8c2:	23c8      	movs	r3, #200	; 0xc8
 800d8c4:	2205      	movs	r2, #5
 800d8c6:	4914      	ldr	r1, [pc, #80]	; (800d918 <checkQueqtelWithNoEcho+0x6c>)
 800d8c8:	4814      	ldr	r0, [pc, #80]	; (800d91c <checkQueqtelWithNoEcho+0x70>)
 800d8ca:	f003 f830 	bl	801092e <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, RXBuffer, 6, 500);
 800d8ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d8d2:	2206      	movs	r2, #6
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	4811      	ldr	r0, [pc, #68]	; (800d91c <checkQueqtelWithNoEcho+0x70>)
 800d8d8:	f003 f8bb 	bl	8010a52 <HAL_UART_Receive>
			status = checkCommand(RXBuffer, (uint8_t*)"OK");
 800d8dc:	4910      	ldr	r1, [pc, #64]	; (800d920 <checkQueqtelWithNoEcho+0x74>)
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7ff ffa5 	bl	800d82e <checkCommand>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73fb      	strb	r3, [r7, #15]
			if(status){
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10e      	bne.n	800d90c <checkQueqtelWithNoEcho+0x60>
				break;
			}
			if(HAL_GetTick() - timeOut >= 10000){
 800d8ee:	f001 f8e5 	bl	800eabc <HAL_GetTick>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	f242 720f 	movw	r2, #9999	; 0x270f
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d901      	bls.n	800d904 <checkQueqtelWithNoEcho+0x58>
				HAL_NVIC_SystemReset();
 800d900:	f001 fa21 	bl	800ed46 <HAL_NVIC_SystemReset>
	while (status == 0) {
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d0db      	beq.n	800d8c2 <checkQueqtelWithNoEcho+0x16>
			}
		}
}
 800d90a:	e000      	b.n	800d90e <checkQueqtelWithNoEcho+0x62>
				break;
 800d90c:	bf00      	nop
}
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	200000b8 	.word	0x200000b8
 800d91c:	200004d0 	.word	0x200004d0
 800d920:	08011f6c 	.word	0x08011f6c

0800d924 <ckeckQuectelSignalWithNoEcho>:

void ckeckQuectelSignalWithNoEcho(uint8_t *RXBuffer){
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800d930:	f001 f8c4 	bl	800eabc <HAL_GetTick>
 800d934:	4603      	mov	r3, r0
 800d936:	60bb      	str	r3, [r7, #8]
	while (status == 0) {
 800d938:	e01f      	b.n	800d97a <ckeckQuectelSignalWithNoEcho+0x56>
		HAL_UART_Transmit(&huart1, TXBuffer10, sizeof TXBuffer10 / sizeof TXBuffer10[0], 200);
 800d93a:	23c8      	movs	r3, #200	; 0xc8
 800d93c:	220b      	movs	r2, #11
 800d93e:	4913      	ldr	r1, [pc, #76]	; (800d98c <ckeckQuectelSignalWithNoEcho+0x68>)
 800d940:	4813      	ldr	r0, [pc, #76]	; (800d990 <ckeckQuectelSignalWithNoEcho+0x6c>)
 800d942:	f002 fff4 	bl	801092e <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 45, 100);
 800d946:	2364      	movs	r3, #100	; 0x64
 800d948:	222d      	movs	r2, #45	; 0x2d
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	4810      	ldr	r0, [pc, #64]	; (800d990 <ckeckQuectelSignalWithNoEcho+0x6c>)
 800d94e:	f003 f880 	bl	8010a52 <HAL_UART_Receive>
		status = checkCommand(RXBuffer, (uint8_t*)"MAGT");
 800d952:	4910      	ldr	r1, [pc, #64]	; (800d994 <ckeckQuectelSignalWithNoEcho+0x70>)
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7ff ff6a 	bl	800d82e <checkCommand>
 800d95a:	4603      	mov	r3, r0
 800d95c:	73fb      	strb	r3, [r7, #15]

		if(status){
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10e      	bne.n	800d982 <ckeckQuectelSignalWithNoEcho+0x5e>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 800d964:	f001 f8aa 	bl	800eabc <HAL_GetTick>
 800d968:	4602      	mov	r2, r0
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	f242 720f 	movw	r2, #9999	; 0x270f
 800d972:	4293      	cmp	r3, r2
 800d974:	d901      	bls.n	800d97a <ckeckQuectelSignalWithNoEcho+0x56>
			HAL_NVIC_SystemReset();
 800d976:	f001 f9e6 	bl	800ed46 <HAL_NVIC_SystemReset>
	while (status == 0) {
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d0dc      	beq.n	800d93a <ckeckQuectelSignalWithNoEcho+0x16>
		}
	}
}
 800d980:	e000      	b.n	800d984 <ckeckQuectelSignalWithNoEcho+0x60>
			break;
 800d982:	bf00      	nop
}
 800d984:	bf00      	nop
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	200000c0 	.word	0x200000c0
 800d990:	200004d0 	.word	0x200004d0
 800d994:	08011f70 	.word	0x08011f70

0800d998 <MQTTRecMod>:
void MQTTRecMod(uint8_t *RXBuffer){
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800d9a4:	f001 f88a 	bl	800eabc <HAL_GetTick>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	60bb      	str	r3, [r7, #8]
	while(status == 0){
 800d9ac:	e028      	b.n	800da00 <MQTTRecMod+0x68>
		HAL_UART_Transmit(&huart1, config_recive_mod, sizeof config_recive_mod / sizeof config_recive_mod[0], 100);
 800d9ae:	2364      	movs	r3, #100	; 0x64
 800d9b0:	221e      	movs	r2, #30
 800d9b2:	4918      	ldr	r1, [pc, #96]	; (800da14 <MQTTRecMod+0x7c>)
 800d9b4:	4818      	ldr	r0, [pc, #96]	; (800da18 <MQTTRecMod+0x80>)
 800d9b6:	f002 ffba 	bl	801092e <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 10, 100);
 800d9ba:	2364      	movs	r3, #100	; 0x64
 800d9bc:	220a      	movs	r2, #10
 800d9be:	6879      	ldr	r1, [r7, #4]
 800d9c0:	4815      	ldr	r0, [pc, #84]	; (800da18 <MQTTRecMod+0x80>)
 800d9c2:	f003 f846 	bl	8010a52 <HAL_UART_Receive>
		status = checkCommand(RXBuffer, (uint8_t*)"OK");
 800d9c6:	4915      	ldr	r1, [pc, #84]	; (800da1c <MQTTRecMod+0x84>)
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff ff30 	bl	800d82e <checkCommand>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	73fb      	strb	r3, [r7, #15]
		if(status == 0){
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d105      	bne.n	800d9e4 <MQTTRecMod+0x4c>
			status = checkCommand(RXBuffer, (uint8_t*)"ERROR");
 800d9d8:	4911      	ldr	r1, [pc, #68]	; (800da20 <MQTTRecMod+0x88>)
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7ff ff27 	bl	800d82e <checkCommand>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	73fb      	strb	r3, [r7, #15]
		}
		if(status){
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10e      	bne.n	800da08 <MQTTRecMod+0x70>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 800d9ea:	f001 f867 	bl	800eabc <HAL_GetTick>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	f242 720f 	movw	r2, #9999	; 0x270f
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d901      	bls.n	800da00 <MQTTRecMod+0x68>
			HAL_NVIC_SystemReset();
 800d9fc:	f001 f9a3 	bl	800ed46 <HAL_NVIC_SystemReset>
	while(status == 0){
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d0d3      	beq.n	800d9ae <MQTTRecMod+0x16>
		}
	}
}
 800da06:	e000      	b.n	800da0a <MQTTRecMod+0x72>
			break;
 800da08:	bf00      	nop
}
 800da0a:	bf00      	nop
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	200000cc 	.word	0x200000cc
 800da18:	200004d0 	.word	0x200004d0
 800da1c:	08011f6c 	.word	0x08011f6c
 800da20:	08011f78 	.word	0x08011f78

0800da24 <MQTTOpenPort>:

void MQTTOpenPort(uint8_t *RXBuffer){
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800da30:	f001 f844 	bl	800eabc <HAL_GetTick>
 800da34:	4603      	mov	r3, r0
 800da36:	60bb      	str	r3, [r7, #8]
	while(status == 0){
 800da38:	e029      	b.n	800da8e <MQTTOpenPort+0x6a>
		HAL_UART_Transmit(&huart1, MQTT_OPEN_PORT, sizeof MQTT_OPEN_PORT / sizeof MQTT_OPEN_PORT[0], 100);
 800da3a:	2364      	movs	r3, #100	; 0x64
 800da3c:	2223      	movs	r2, #35	; 0x23
 800da3e:	4918      	ldr	r1, [pc, #96]	; (800daa0 <MQTTOpenPort+0x7c>)
 800da40:	4818      	ldr	r0, [pc, #96]	; (800daa4 <MQTTOpenPort+0x80>)
 800da42:	f002 ff74 	bl	801092e <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 21, 4000);
 800da46:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800da4a:	2215      	movs	r2, #21
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	4815      	ldr	r0, [pc, #84]	; (800daa4 <MQTTOpenPort+0x80>)
 800da50:	f002 ffff 	bl	8010a52 <HAL_UART_Receive>

		status = checkCommand(RXBuffer, (uint8_t*)"+QMTOPEN: 0,0");
 800da54:	4914      	ldr	r1, [pc, #80]	; (800daa8 <MQTTOpenPort+0x84>)
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff fee9 	bl	800d82e <checkCommand>
 800da5c:	4603      	mov	r3, r0
 800da5e:	73fb      	strb	r3, [r7, #15]
		if(status == 0){
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d105      	bne.n	800da72 <MQTTOpenPort+0x4e>
			status = checkCommand(RXBuffer, (uint8_t*)"+QMTOPEN: 0,2");
 800da66:	4911      	ldr	r1, [pc, #68]	; (800daac <MQTTOpenPort+0x88>)
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff fee0 	bl	800d82e <checkCommand>
 800da6e:	4603      	mov	r3, r0
 800da70:	73fb      	strb	r3, [r7, #15]
		}


		if(status){
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10e      	bne.n	800da96 <MQTTOpenPort+0x72>
			break;
		}

		if(HAL_GetTick() - timeOut >= 10000){
 800da78:	f001 f820 	bl	800eabc <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	f242 720f 	movw	r2, #9999	; 0x270f
 800da86:	4293      	cmp	r3, r2
 800da88:	d901      	bls.n	800da8e <MQTTOpenPort+0x6a>
			HAL_NVIC_SystemReset();
 800da8a:	f001 f95c 	bl	800ed46 <HAL_NVIC_SystemReset>
	while(status == 0){
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0d2      	beq.n	800da3a <MQTTOpenPort+0x16>
		}

	}
}
 800da94:	e000      	b.n	800da98 <MQTTOpenPort+0x74>
			break;
 800da96:	bf00      	nop
}
 800da98:	bf00      	nop
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	200000ec 	.word	0x200000ec
 800daa4:	200004d0 	.word	0x200004d0
 800daa8:	08011f80 	.word	0x08011f80
 800daac:	08011f90 	.word	0x08011f90

0800dab0 <MQTTConnect>:

void MQTTConnect(uint8_t *RXBuffer){
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800dabc:	f000 fffe 	bl	800eabc <HAL_GetTick>
 800dac0:	4603      	mov	r3, r0
 800dac2:	60bb      	str	r3, [r7, #8]
	while(status == 0){
 800dac4:	e029      	b.n	800db1a <MQTTConnect+0x6a>
		HAL_UART_Transmit(&huart1, MQTT_CONNECT, sizeof MQTT_CONNECT / sizeof MQTT_CONNECT[0], 100);
 800dac6:	2364      	movs	r3, #100	; 0x64
 800dac8:	2211      	movs	r2, #17
 800daca:	4918      	ldr	r1, [pc, #96]	; (800db2c <MQTTConnect+0x7c>)
 800dacc:	4818      	ldr	r0, [pc, #96]	; (800db30 <MQTTConnect+0x80>)
 800dace:	f002 ff2e 	bl	801092e <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 9, 4000);
 800dad2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800dad6:	2209      	movs	r2, #9
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	4815      	ldr	r0, [pc, #84]	; (800db30 <MQTTConnect+0x80>)
 800dadc:	f002 ffb9 	bl	8010a52 <HAL_UART_Receive>

		status = checkCommand(RXBuffer, (uint8_t*)"+QMT");
 800dae0:	4914      	ldr	r1, [pc, #80]	; (800db34 <MQTTConnect+0x84>)
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fea3 	bl	800d82e <checkCommand>
 800dae8:	4603      	mov	r3, r0
 800daea:	73fb      	strb	r3, [r7, #15]

		if(status == 0){
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d105      	bne.n	800dafe <MQTTConnect+0x4e>
			status = checkCommand(RXBuffer, (uint8_t*)"ERROR");
 800daf2:	4911      	ldr	r1, [pc, #68]	; (800db38 <MQTTConnect+0x88>)
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff fe9a 	bl	800d82e <checkCommand>
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]

		}

		if(status){
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10e      	bne.n	800db22 <MQTTConnect+0x72>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 800db04:	f000 ffda 	bl	800eabc <HAL_GetTick>
 800db08:	4602      	mov	r2, r0
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	f242 720f 	movw	r2, #9999	; 0x270f
 800db12:	4293      	cmp	r3, r2
 800db14:	d901      	bls.n	800db1a <MQTTConnect+0x6a>
			HAL_NVIC_SystemReset();
 800db16:	f001 f916 	bl	800ed46 <HAL_NVIC_SystemReset>
	while(status == 0){
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0d2      	beq.n	800dac6 <MQTTConnect+0x16>
		}
	}
}
 800db20:	e000      	b.n	800db24 <MQTTConnect+0x74>
			break;
 800db22:	bf00      	nop
}
 800db24:	bf00      	nop
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	20000110 	.word	0x20000110
 800db30:	200004d0 	.word	0x200004d0
 800db34:	08011fa0 	.word	0x08011fa0
 800db38:	08011f78 	.word	0x08011f78

0800db3c <MQTTSubToTopic>:

void MQTTSubToTopic(uint8_t *RXBuffer){
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
//	uint8_t status = 0;
//	while(status == 0){
		HAL_UART_Transmit(&huart1, MQTT_SUB_TO_TOPIC, sizeof MQTT_SUB_TO_TOPIC / sizeof MQTT_SUB_TO_TOPIC[0], 100);
 800db44:	2364      	movs	r3, #100	; 0x64
 800db46:	2226      	movs	r2, #38	; 0x26
 800db48:	4905      	ldr	r1, [pc, #20]	; (800db60 <MQTTSubToTopic+0x24>)
 800db4a:	4806      	ldr	r0, [pc, #24]	; (800db64 <MQTTSubToTopic+0x28>)
 800db4c:	f002 feef 	bl	801092e <HAL_UART_Transmit>
//		HAL_UART_Receive(&huart1, RXBuffer, 25, 2000);
		HAL_Delay(500);
 800db50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db54:	f000 ffbc 	bl	800ead0 <HAL_Delay>
//		}
//		if(status){
//			break;
//		}
//	}
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	20000124 	.word	0x20000124
 800db64:	200004d0 	.word	0x200004d0

0800db68 <MQTTPubToTopic>:

void MQTTPubToTopic(int length){
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\"liftos08765546789\",%d\r\n", (length));
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	4908      	ldr	r1, [pc, #32]	; (800db94 <MQTTPubToTopic+0x2c>)
 800db74:	4808      	ldr	r0, [pc, #32]	; (800db98 <MQTTPubToTopic+0x30>)
 800db76:	f003 fcab 	bl	80114d0 <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800db7a:	2364      	movs	r3, #100	; 0x64
 800db7c:	222e      	movs	r2, #46	; 0x2e
 800db7e:	4906      	ldr	r1, [pc, #24]	; (800db98 <MQTTPubToTopic+0x30>)
 800db80:	4806      	ldr	r0, [pc, #24]	; (800db9c <MQTTPubToTopic+0x34>)
 800db82:	f002 fed4 	bl	801092e <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800db86:	201e      	movs	r0, #30
 800db88:	f000 ffa2 	bl	800ead0 <HAL_Delay>

}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	08011fa8 	.word	0x08011fa8
 800db98:	2000014c 	.word	0x2000014c
 800db9c:	200004d0 	.word	0x200004d0

0800dba0 <SPI1SendByte>:
extern void MFRC522_Halt(void);
extern void cardOperation(uint8_t* finalData, uint8_t* p);
extern void led(uint8_t n);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

uint8_t SPI1SendByte(uint8_t data) {
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af02      	add	r7, sp, #8
 800dba6:	4603      	mov	r3, r0
 800dba8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800dbaa:	79fb      	ldrb	r3, [r7, #7]
 800dbac:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800dbae:	f107 0208 	add.w	r2, r7, #8
 800dbb2:	f107 010c 	add.w	r1, r7, #12
 800dbb6:	230a      	movs	r3, #10
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	2301      	movs	r3, #1
 800dbbc:	4803      	ldr	r0, [pc, #12]	; (800dbcc <SPI1SendByte+0x2c>)
 800dbbe:	f002 fc21 	bl	8010404 <HAL_SPI_TransmitReceive>
	return readValue[0];
 800dbc2:	7a3b      	ldrb	r3, [r7, #8]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	20000478 	.word	0x20000478

0800dbd0 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	460a      	mov	r2, r1
 800dbda:	71fb      	strb	r3, [r7, #7]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	2110      	movs	r1, #16
 800dbe4:	4809      	ldr	r0, [pc, #36]	; (800dc0c <SPI1_WriteReg+0x3c>)
 800dbe6:	f001 faf3 	bl	800f1d0 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7ff ffd7 	bl	800dba0 <SPI1SendByte>
	SPI1SendByte(value);
 800dbf2:	79bb      	ldrb	r3, [r7, #6]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7ff ffd3 	bl	800dba0 <SPI1SendByte>
	cs_set();
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	2110      	movs	r1, #16
 800dbfe:	4803      	ldr	r0, [pc, #12]	; (800dc0c <SPI1_WriteReg+0x3c>)
 800dc00:	f001 fae6 	bl	800f1d0 <HAL_GPIO_WritePin>
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	40010800 	.word	0x40010800

0800dc10 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2110      	movs	r1, #16
 800dc1e:	480b      	ldr	r0, [pc, #44]	; (800dc4c <SPI1_ReadReg+0x3c>)
 800dc20:	f001 fad6 	bl	800f1d0 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff ffba 	bl	800dba0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	f7ff ffb7 	bl	800dba0 <SPI1SendByte>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800dc36:	2201      	movs	r2, #1
 800dc38:	2110      	movs	r1, #16
 800dc3a:	4804      	ldr	r0, [pc, #16]	; (800dc4c <SPI1_ReadReg+0x3c>)
 800dc3c:	f001 fac8 	bl	800f1d0 <HAL_GPIO_WritePin>
	return val;
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	40010800 	.word	0x40010800

0800dc50 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	460a      	mov	r2, r1
 800dc5a:	71fb      	strb	r3, [r7, #7]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	005b      	lsls	r3, r3, #1
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800dc6a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800dc6c:	79ba      	ldrb	r2, [r7, #6]
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	4611      	mov	r1, r2
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff ffac 	bl	800dbd0 <SPI1_WriteReg>
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	b25b      	sxtb	r3, r3
 800dc90:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800dc94:	b25b      	sxtb	r3, r3
 800dc96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc9a:	b25b      	sxtb	r3, r3
 800dc9c:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff ffb5 	bl	800dc10 <SPI1_ReadReg>
 800dca6:	4603      	mov	r3, r0
 800dca8:	73fb      	strb	r3, [r7, #15]
	return val;	
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	460a      	mov	r2, r1
 800dcbe:	71fb      	strb	r3, [r7, #7]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800dcc4:	79fb      	ldrb	r3, [r7, #7]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7ff ffda 	bl	800dc80 <MFRC522_ReadRegister>
 800dccc:	4603      	mov	r3, r0
 800dcce:	461a      	mov	r2, r3
 800dcd0:	79bb      	ldrb	r3, [r7, #6]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	4611      	mov	r1, r2
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff ffb8 	bl	800dc50 <MFRC522_WriteRegister>
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	460a      	mov	r2, r1
 800dcf2:	71fb      	strb	r3, [r7, #7]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800dcf8:	79fb      	ldrb	r3, [r7, #7]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7ff ffc0 	bl	800dc80 <MFRC522_ReadRegister>
 800dd00:	4603      	mov	r3, r0
 800dd02:	b25a      	sxtb	r2, r3
 800dd04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd08:	43db      	mvns	r3, r3
 800dd0a:	b25b      	sxtb	r3, r3
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	b25b      	sxtb	r3, r3
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	79fb      	ldrb	r3, [r7, #7]
 800dd14:	4611      	mov	r1, r2
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7ff ff9a 	bl	800dc50 <MFRC522_WriteRegister>
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b086      	sub	sp, #24
 800dd28:	af02      	add	r7, sp, #8
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	6039      	str	r1, [r7, #0]
 800dd2e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800dd30:	2107      	movs	r1, #7
 800dd32:	200d      	movs	r0, #13
 800dd34:	f7ff ff8c 	bl	800dc50 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	79fa      	ldrb	r2, [r7, #7]
 800dd3c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800dd3e:	f107 030c 	add.w	r3, r7, #12
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2201      	movs	r2, #1
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	200c      	movs	r0, #12
 800dd4c:	f000 f80f 	bl	800dd6e <MFRC522_ToCard>
 800dd50:	4603      	mov	r3, r0
 800dd52:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800dd54:	7bfb      	ldrb	r3, [r7, #15]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d102      	bne.n	800dd60 <MFRC522_Request+0x3c>
 800dd5a:	89bb      	ldrh	r3, [r7, #12]
 800dd5c:	2b10      	cmp	r3, #16
 800dd5e:	d001      	beq.n	800dd64 <MFRC522_Request+0x40>
 800dd60:	2302      	movs	r3, #2
 800dd62:	73fb      	strb	r3, [r7, #15]
	return status;
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800dd6e:	b590      	push	{r4, r7, lr}
 800dd70:	b087      	sub	sp, #28
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607b      	str	r3, [r7, #4]
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73fb      	strb	r3, [r7, #15]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800dd80:	2302      	movs	r3, #2
 800dd82:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800dd84:	2300      	movs	r3, #0
 800dd86:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	2b0c      	cmp	r3, #12
 800dd90:	d006      	beq.n	800dda0 <MFRC522_ToCard+0x32>
 800dd92:	2b0e      	cmp	r3, #14
 800dd94:	d109      	bne.n	800ddaa <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800dd96:	2312      	movs	r3, #18
 800dd98:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800dd9a:	2310      	movs	r3, #16
 800dd9c:	757b      	strb	r3, [r7, #21]
			break;
 800dd9e:	e005      	b.n	800ddac <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800dda0:	2377      	movs	r3, #119	; 0x77
 800dda2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800dda4:	2330      	movs	r3, #48	; 0x30
 800dda6:	757b      	strb	r3, [r7, #21]
			break;
 800dda8:	e000      	b.n	800ddac <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800ddaa:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800ddac:	7dbb      	ldrb	r3, [r7, #22]
 800ddae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	2002      	movs	r0, #2
 800ddb8:	f7ff ff4a 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800ddbc:	2180      	movs	r1, #128	; 0x80
 800ddbe:	2004      	movs	r0, #4
 800ddc0:	f7ff ff92 	bl	800dce8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800ddc4:	2180      	movs	r1, #128	; 0x80
 800ddc6:	200a      	movs	r0, #10
 800ddc8:	f7ff ff74 	bl	800dcb4 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800ddcc:	2100      	movs	r1, #0
 800ddce:	2001      	movs	r0, #1
 800ddd0:	f7ff ff3e 	bl	800dc50 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	827b      	strh	r3, [r7, #18]
 800ddd8:	e00a      	b.n	800ddf0 <MFRC522_ToCard+0x82>
 800ddda:	8a7b      	ldrh	r3, [r7, #18]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	4413      	add	r3, r2
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	4619      	mov	r1, r3
 800dde4:	2009      	movs	r0, #9
 800dde6:	f7ff ff33 	bl	800dc50 <MFRC522_WriteRegister>
 800ddea:	8a7b      	ldrh	r3, [r7, #18]
 800ddec:	3301      	adds	r3, #1
 800ddee:	827b      	strh	r3, [r7, #18]
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	8a7a      	ldrh	r2, [r7, #18]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d3ef      	bcc.n	800ddda <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	2001      	movs	r0, #1
 800de00:	f7ff ff26 	bl	800dc50 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	2b0c      	cmp	r3, #12
 800de08:	d103      	bne.n	800de12 <MFRC522_ToCard+0xa4>
 800de0a:	2180      	movs	r1, #128	; 0x80
 800de0c:	200d      	movs	r0, #13
 800de0e:	f7ff ff51 	bl	800dcb4 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800de12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800de16:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800de18:	2004      	movs	r0, #4
 800de1a:	f7ff ff31 	bl	800dc80 <MFRC522_ReadRegister>
 800de1e:	4603      	mov	r3, r0
 800de20:	753b      	strb	r3, [r7, #20]
		i--;
 800de22:	8a7b      	ldrh	r3, [r7, #18]
 800de24:	3b01      	subs	r3, #1
 800de26:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800de28:	8a7b      	ldrh	r3, [r7, #18]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <MFRC522_ToCard+0xd6>
 800de2e:	7d3b      	ldrb	r3, [r7, #20]
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d105      	bne.n	800de44 <MFRC522_ToCard+0xd6>
 800de38:	7d3a      	ldrb	r2, [r7, #20]
 800de3a:	7d7b      	ldrb	r3, [r7, #21]
 800de3c:	4013      	ands	r3, r2
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0e9      	beq.n	800de18 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800de44:	2180      	movs	r1, #128	; 0x80
 800de46:	200d      	movs	r0, #13
 800de48:	f7ff ff4e 	bl	800dce8 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800de4c:	8a7b      	ldrh	r3, [r7, #18]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d057      	beq.n	800df02 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800de52:	2006      	movs	r0, #6
 800de54:	f7ff ff14 	bl	800dc80 <MFRC522_ReadRegister>
 800de58:	4603      	mov	r3, r0
 800de5a:	f003 031b 	and.w	r3, r3, #27
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d14d      	bne.n	800defe <MFRC522_ToCard+0x190>
			status = MI_OK;
 800de62:	2300      	movs	r3, #0
 800de64:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800de66:	7d3a      	ldrb	r2, [r7, #20]
 800de68:	7dbb      	ldrb	r3, [r7, #22]
 800de6a:	4013      	ands	r3, r2
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <MFRC522_ToCard+0x10c>
 800de76:	2301      	movs	r3, #1
 800de78:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800de7a:	7bfb      	ldrb	r3, [r7, #15]
 800de7c:	2b0c      	cmp	r3, #12
 800de7e:	d140      	bne.n	800df02 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800de80:	200a      	movs	r0, #10
 800de82:	f7ff fefd 	bl	800dc80 <MFRC522_ReadRegister>
 800de86:	4603      	mov	r3, r0
 800de88:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800de8a:	200c      	movs	r0, #12
 800de8c:	f7ff fef8 	bl	800dc80 <MFRC522_ReadRegister>
 800de90:	4603      	mov	r3, r0
 800de92:	f003 0307 	and.w	r3, r3, #7
 800de96:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800de98:	7c7b      	ldrb	r3, [r7, #17]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00b      	beq.n	800deb6 <MFRC522_ToCard+0x148>
 800de9e:	7d3b      	ldrb	r3, [r7, #20]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	00db      	lsls	r3, r3, #3
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	7c7b      	ldrb	r3, [r7, #17]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	4413      	add	r3, r2
 800deae:	b29a      	uxth	r2, r3
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	801a      	strh	r2, [r3, #0]
 800deb4:	e005      	b.n	800dec2 <MFRC522_ToCard+0x154>
 800deb6:	7d3b      	ldrb	r3, [r7, #20]
 800deb8:	b29b      	uxth	r3, r3
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	b29a      	uxth	r2, r3
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800dec2:	7d3b      	ldrb	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d101      	bne.n	800decc <MFRC522_ToCard+0x15e>
 800dec8:	2301      	movs	r3, #1
 800deca:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800decc:	7d3b      	ldrb	r3, [r7, #20]
 800dece:	2b10      	cmp	r3, #16
 800ded0:	d901      	bls.n	800ded6 <MFRC522_ToCard+0x168>
 800ded2:	2310      	movs	r3, #16
 800ded4:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800ded6:	2300      	movs	r3, #0
 800ded8:	827b      	strh	r3, [r7, #18]
 800deda:	e00a      	b.n	800def2 <MFRC522_ToCard+0x184>
 800dedc:	8a7b      	ldrh	r3, [r7, #18]
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	18d4      	adds	r4, r2, r3
 800dee2:	2009      	movs	r0, #9
 800dee4:	f7ff fecc 	bl	800dc80 <MFRC522_ReadRegister>
 800dee8:	4603      	mov	r3, r0
 800deea:	7023      	strb	r3, [r4, #0]
 800deec:	8a7b      	ldrh	r3, [r7, #18]
 800deee:	3301      	adds	r3, #1
 800def0:	827b      	strh	r3, [r7, #18]
 800def2:	7d3b      	ldrb	r3, [r7, #20]
 800def4:	b29b      	uxth	r3, r3
 800def6:	8a7a      	ldrh	r2, [r7, #18]
 800def8:	429a      	cmp	r2, r3
 800defa:	d3ef      	bcc.n	800dedc <MFRC522_ToCard+0x16e>
 800defc:	e001      	b.n	800df02 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800defe:	2302      	movs	r3, #2
 800df00:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800df02:	7dfb      	ldrb	r3, [r7, #23]
}
 800df04:	4618      	mov	r0, r3
 800df06:	371c      	adds	r7, #28
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd90      	pop	{r4, r7, pc}

0800df0c <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af02      	add	r7, sp, #8
 800df12:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800df18:	2100      	movs	r1, #0
 800df1a:	200d      	movs	r0, #13
 800df1c:	f7ff fe98 	bl	800dc50 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2293      	movs	r2, #147	; 0x93
 800df24:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3301      	adds	r3, #1
 800df2a:	2220      	movs	r2, #32
 800df2c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800df2e:	f107 030a 	add.w	r3, r7, #10
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2202      	movs	r2, #2
 800df38:	6879      	ldr	r1, [r7, #4]
 800df3a:	200c      	movs	r0, #12
 800df3c:	f7ff ff17 	bl	800dd6e <MFRC522_ToCard>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d118      	bne.n	800df7c <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800df4a:	2300      	movs	r3, #0
 800df4c:	73bb      	strb	r3, [r7, #14]
 800df4e:	e009      	b.n	800df64 <MFRC522_Anticoll+0x58>
 800df50:	7bbb      	ldrb	r3, [r7, #14]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	4413      	add	r3, r2
 800df56:	781a      	ldrb	r2, [r3, #0]
 800df58:	7b7b      	ldrb	r3, [r7, #13]
 800df5a:	4053      	eors	r3, r2
 800df5c:	737b      	strb	r3, [r7, #13]
 800df5e:	7bbb      	ldrb	r3, [r7, #14]
 800df60:	3301      	adds	r3, #1
 800df62:	73bb      	strb	r3, [r7, #14]
 800df64:	7bbb      	ldrb	r3, [r7, #14]
 800df66:	2b03      	cmp	r3, #3
 800df68:	d9f2      	bls.n	800df50 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	4413      	add	r3, r2
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	7b7a      	ldrb	r2, [r7, #13]
 800df74:	429a      	cmp	r2, r3
 800df76:	d001      	beq.n	800df7c <MFRC522_Anticoll+0x70>
 800df78:	2302      	movs	r3, #2
 800df7a:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800df86:	b590      	push	{r4, r7, lr}
 800df88:	b087      	sub	sp, #28
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	460b      	mov	r3, r1
 800df90:	607a      	str	r2, [r7, #4]
 800df92:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800df94:	2104      	movs	r1, #4
 800df96:	2005      	movs	r0, #5
 800df98:	f7ff fea6 	bl	800dce8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800df9c:	2180      	movs	r1, #128	; 0x80
 800df9e:	200a      	movs	r0, #10
 800dfa0:	f7ff fe88 	bl	800dcb4 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75fb      	strb	r3, [r7, #23]
 800dfa8:	e00a      	b.n	800dfc0 <MFRC522_CalculateCRC+0x3a>
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	68fa      	ldr	r2, [r7, #12]
 800dfae:	4413      	add	r3, r2
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	2009      	movs	r0, #9
 800dfb6:	f7ff fe4b 	bl	800dc50 <MFRC522_WriteRegister>
 800dfba:	7dfb      	ldrb	r3, [r7, #23]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	75fb      	strb	r3, [r7, #23]
 800dfc0:	7dfa      	ldrb	r2, [r7, #23]
 800dfc2:	7afb      	ldrb	r3, [r7, #11]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d3f0      	bcc.n	800dfaa <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800dfc8:	2103      	movs	r1, #3
 800dfca:	2001      	movs	r0, #1
 800dfcc:	f7ff fe40 	bl	800dc50 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800dfd0:	23ff      	movs	r3, #255	; 0xff
 800dfd2:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800dfd4:	2005      	movs	r0, #5
 800dfd6:	f7ff fe53 	bl	800dc80 <MFRC522_ReadRegister>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	75bb      	strb	r3, [r7, #22]
		i--;
 800dfde:	7dfb      	ldrb	r3, [r7, #23]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 800dfe4:	7dfb      	ldrb	r3, [r7, #23]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d004      	beq.n	800dff4 <MFRC522_CalculateCRC+0x6e>
 800dfea:	7dbb      	ldrb	r3, [r7, #22]
 800dfec:	f003 0304 	and.w	r3, r3, #4
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0ef      	beq.n	800dfd4 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800dff4:	2022      	movs	r0, #34	; 0x22
 800dff6:	f7ff fe43 	bl	800dc80 <MFRC522_ReadRegister>
 800dffa:	4603      	mov	r3, r0
 800dffc:	461a      	mov	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	1c5c      	adds	r4, r3, #1
 800e006:	2021      	movs	r0, #33	; 0x21
 800e008:	f7ff fe3a 	bl	800dc80 <MFRC522_ReadRegister>
 800e00c:	4603      	mov	r3, r0
 800e00e:	7023      	strb	r3, [r4, #0]
}
 800e010:	bf00      	nop
 800e012:	371c      	adds	r7, #28
 800e014:	46bd      	mov	sp, r7
 800e016:	bd90      	pop	{r4, r7, pc}

0800e018 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b088      	sub	sp, #32
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 800e020:	2393      	movs	r3, #147	; 0x93
 800e022:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 800e024:	2370      	movs	r3, #112	; 0x70
 800e026:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 800e028:	2300      	movs	r3, #0
 800e02a:	75fb      	strb	r3, [r7, #23]
 800e02c:	e00c      	b.n	800e048 <MFRC522_SelectTag+0x30>
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	441a      	add	r2, r3
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	3302      	adds	r3, #2
 800e038:	7812      	ldrb	r2, [r2, #0]
 800e03a:	3318      	adds	r3, #24
 800e03c:	443b      	add	r3, r7
 800e03e:	f803 2c10 	strb.w	r2, [r3, #-16]
 800e042:	7dfb      	ldrb	r3, [r7, #23]
 800e044:	3301      	adds	r3, #1
 800e046:	75fb      	strb	r3, [r7, #23]
 800e048:	7dfb      	ldrb	r3, [r7, #23]
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	d9ef      	bls.n	800e02e <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800e04e:	f107 0308 	add.w	r3, r7, #8
 800e052:	1dda      	adds	r2, r3, #7
 800e054:	f107 0308 	add.w	r3, r7, #8
 800e058:	2107      	movs	r1, #7
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff ff93 	bl	800df86 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800e060:	f107 0208 	add.w	r2, r7, #8
 800e064:	f107 0108 	add.w	r1, r7, #8
 800e068:	f107 0312 	add.w	r3, r7, #18
 800e06c:	9300      	str	r3, [sp, #0]
 800e06e:	4613      	mov	r3, r2
 800e070:	2209      	movs	r2, #9
 800e072:	200c      	movs	r0, #12
 800e074:	f7ff fe7b 	bl	800dd6e <MFRC522_ToCard>
 800e078:	4603      	mov	r3, r0
 800e07a:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 800e07c:	7d7b      	ldrb	r3, [r7, #21]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d105      	bne.n	800e08e <MFRC522_SelectTag+0x76>
 800e082:	8a7b      	ldrh	r3, [r7, #18]
 800e084:	2b18      	cmp	r3, #24
 800e086:	d102      	bne.n	800e08e <MFRC522_SelectTag+0x76>
 800e088:	7a3b      	ldrb	r3, [r7, #8]
 800e08a:	75bb      	strb	r3, [r7, #22]
 800e08c:	e001      	b.n	800e092 <MFRC522_SelectTag+0x7a>
 800e08e:	2300      	movs	r3, #0
 800e090:	75bb      	strb	r3, [r7, #22]
	return size;
 800e092:	7dbb      	ldrb	r3, [r7, #22]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3718      	adds	r7, #24
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08a      	sub	sp, #40	; 0x28
 800e0a0:	af02      	add	r7, sp, #8
 800e0a2:	60ba      	str	r2, [r7, #8]
 800e0a4:	607b      	str	r3, [r7, #4]
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	73fb      	strb	r3, [r7, #15]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800e0ae:	7bfb      	ldrb	r3, [r7, #15]
 800e0b0:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800e0b2:	7bbb      	ldrb	r3, [r7, #14]
 800e0b4:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	77bb      	strb	r3, [r7, #30]
 800e0ba:	e00c      	b.n	800e0d6 <MFRC522_Auth+0x3a>
 800e0bc:	7fbb      	ldrb	r3, [r7, #30]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	441a      	add	r2, r3
 800e0c2:	7fbb      	ldrb	r3, [r7, #30]
 800e0c4:	3302      	adds	r3, #2
 800e0c6:	7812      	ldrb	r2, [r2, #0]
 800e0c8:	3320      	adds	r3, #32
 800e0ca:	443b      	add	r3, r7
 800e0cc:	f803 2c10 	strb.w	r2, [r3, #-16]
 800e0d0:	7fbb      	ldrb	r3, [r7, #30]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	77bb      	strb	r3, [r7, #30]
 800e0d6:	7fbb      	ldrb	r3, [r7, #30]
 800e0d8:	2b05      	cmp	r3, #5
 800e0da:	d9ef      	bls.n	800e0bc <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 800e0dc:	2300      	movs	r3, #0
 800e0de:	77bb      	strb	r3, [r7, #30]
 800e0e0:	e00c      	b.n	800e0fc <MFRC522_Auth+0x60>
 800e0e2:	7fbb      	ldrb	r3, [r7, #30]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	441a      	add	r2, r3
 800e0e8:	7fbb      	ldrb	r3, [r7, #30]
 800e0ea:	3308      	adds	r3, #8
 800e0ec:	7812      	ldrb	r2, [r2, #0]
 800e0ee:	3320      	adds	r3, #32
 800e0f0:	443b      	add	r3, r7
 800e0f2:	f803 2c10 	strb.w	r2, [r3, #-16]
 800e0f6:	7fbb      	ldrb	r3, [r7, #30]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	77bb      	strb	r3, [r7, #30]
 800e0fc:	7fbb      	ldrb	r3, [r7, #30]
 800e0fe:	2b03      	cmp	r3, #3
 800e100:	d9ef      	bls.n	800e0e2 <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800e102:	f107 0210 	add.w	r2, r7, #16
 800e106:	f107 0110 	add.w	r1, r7, #16
 800e10a:	f107 031c 	add.w	r3, r7, #28
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	4613      	mov	r3, r2
 800e112:	220c      	movs	r2, #12
 800e114:	200e      	movs	r0, #14
 800e116:	f7ff fe2a 	bl	800dd6e <MFRC522_ToCard>
 800e11a:	4603      	mov	r3, r0
 800e11c:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 800e11e:	7ffb      	ldrb	r3, [r7, #31]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d107      	bne.n	800e134 <MFRC522_Auth+0x98>
 800e124:	2008      	movs	r0, #8
 800e126:	f7ff fdab 	bl	800dc80 <MFRC522_ReadRegister>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f003 0308 	and.w	r3, r3, #8
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <MFRC522_Auth+0x9c>
 800e134:	2302      	movs	r3, #2
 800e136:	77fb      	strb	r3, [r7, #31]
	return status;
 800e138:	7ffb      	ldrb	r3, [r7, #31]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3720      	adds	r7, #32
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 800e142:	b580      	push	{r7, lr}
 800e144:	b086      	sub	sp, #24
 800e146:	af02      	add	r7, sp, #8
 800e148:	4603      	mov	r3, r0
 800e14a:	6039      	str	r1, [r7, #0]
 800e14c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2230      	movs	r2, #48	; 0x30
 800e152:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	3301      	adds	r3, #1
 800e158:	79fa      	ldrb	r2, [r7, #7]
 800e15a:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	3302      	adds	r3, #2
 800e160:	461a      	mov	r2, r3
 800e162:	2102      	movs	r1, #2
 800e164:	6838      	ldr	r0, [r7, #0]
 800e166:	f7ff ff0e 	bl	800df86 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800e16a:	f107 030c 	add.w	r3, r7, #12
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2204      	movs	r2, #4
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	200c      	movs	r0, #12
 800e178:	f7ff fdf9 	bl	800dd6e <MFRC522_ToCard>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d102      	bne.n	800e18c <MFRC522_Read+0x4a>
 800e186:	89bb      	ldrh	r3, [r7, #12]
 800e188:	2b90      	cmp	r3, #144	; 0x90
 800e18a:	d001      	beq.n	800e190 <MFRC522_Read+0x4e>
 800e18c:	2302      	movs	r3, #2
 800e18e:	73fb      	strb	r3, [r7, #15]
	return status;
 800e190:	7bfb      	ldrb	r3, [r7, #15]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800e19a:	b580      	push	{r7, lr}
 800e19c:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800e19e:	f000 f820 	bl	800e1e2 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800e1a2:	218d      	movs	r1, #141	; 0x8d
 800e1a4:	202a      	movs	r0, #42	; 0x2a
 800e1a6:	f7ff fd53 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800e1aa:	213e      	movs	r1, #62	; 0x3e
 800e1ac:	202b      	movs	r0, #43	; 0x2b
 800e1ae:	f7ff fd4f 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800e1b2:	211e      	movs	r1, #30
 800e1b4:	202d      	movs	r0, #45	; 0x2d
 800e1b6:	f7ff fd4b 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	202c      	movs	r0, #44	; 0x2c
 800e1be:	f7ff fd47 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800e1c2:	2170      	movs	r1, #112	; 0x70
 800e1c4:	2026      	movs	r0, #38	; 0x26
 800e1c6:	f7ff fd43 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800e1ca:	2140      	movs	r1, #64	; 0x40
 800e1cc:	2015      	movs	r0, #21
 800e1ce:	f7ff fd3f 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800e1d2:	213d      	movs	r1, #61	; 0x3d
 800e1d4:	2011      	movs	r0, #17
 800e1d6:	f7ff fd3b 	bl	800dc50 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800e1da:	f000 f80a 	bl	800e1f2 <MFRC522_AntennaOn>
}
 800e1de:	bf00      	nop
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800e1e6:	210f      	movs	r1, #15
 800e1e8:	2001      	movs	r0, #1
 800e1ea:	f7ff fd31 	bl	800dc50 <MFRC522_WriteRegister>
}
 800e1ee:	bf00      	nop
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b082      	sub	sp, #8
 800e1f6:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800e1f8:	2014      	movs	r0, #20
 800e1fa:	f7ff fd41 	bl	800dc80 <MFRC522_ReadRegister>
 800e1fe:	4603      	mov	r3, r0
 800e200:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	f003 0303 	and.w	r3, r3, #3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d103      	bne.n	800e214 <MFRC522_AntennaOn+0x22>
 800e20c:	2103      	movs	r1, #3
 800e20e:	2014      	movs	r0, #20
 800e210:	f7ff fd50 	bl	800dcb4 <MFRC522_SetBitMask>
}
 800e214:	bf00      	nop
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 800e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e21e:	b0f1      	sub	sp, #452	; 0x1c4
 800e220:	af0e      	add	r7, sp, #56	; 0x38
 800e222:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e226:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e22a:	6018      	str	r0, [r3, #0]
	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 800e22c:	4aad      	ldr	r2, [pc, #692]	; (800e4e4 <cardOperationWithBlockedSector+0x2c8>)
 800e22e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800e232:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e236:	6018      	str	r0, [r3, #0]
 800e238:	3304      	adds	r3, #4
 800e23a:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 800e23c:	2300      	movs	r3, #0
 800e23e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 800e248:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d13b      	bne.n	800e2c8 <cardOperationWithBlockedSector+0xac>
	     MFRC522_Init();
 800e250:	f7ff ffa3 	bl	800e19a <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 800e254:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e258:	4619      	mov	r1, r3
 800e25a:	2026      	movs	r0, #38	; 0x26
 800e25c:	f7ff fd62 	bl	800dd24 <MFRC522_Request>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d130      	bne.n	800e2c8 <cardOperationWithBlockedSector+0xac>
	       if (!MFRC522_Anticoll(str)) {
 800e266:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff fe4e 	bl	800df0c <MFRC522_Anticoll>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d128      	bne.n	800e2c8 <cardOperationWithBlockedSector+0xac>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\"164522975789130\",\"cardID\":\"%x%x%x%x\",", str[0],str[1], str[2], str[3]);
 800e276:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800e27a:	4619      	mov	r1, r3
 800e27c:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800e280:	461c      	mov	r4, r3
 800e282:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800e286:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 800e28a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e28e:	9201      	str	r2, [sp, #4]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	4623      	mov	r3, r4
 800e294:	460a      	mov	r2, r1
 800e296:	4994      	ldr	r1, [pc, #592]	; (800e4e8 <cardOperationWithBlockedSector+0x2cc>)
 800e298:	f003 f91a 	bl	80114d0 <siprintf>

	         l = strlen((char*)IDBuff);
 800e29c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7fd ff53 	bl	800c14c <strlen>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 800e2ac:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800e2b0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800e2b4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e2b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e2bc:	6818      	ldr	r0, [r3, #0]
 800e2be:	f003 f8f1 	bl	80114a4 <memcpy>

	         cardIDStatus = 1;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 800e2c8:	2014      	movs	r0, #20
 800e2ca:	f000 fc01 	bl	800ead0 <HAL_Delay>
	  MFRC522_Init();
 800e2ce:	f7ff ff64 	bl	800e19a <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 800e2d2:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	f040 80ed 	bne.w	800e4b6 <cardOperationWithBlockedSector+0x29a>
 800e2dc:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f040 80e8 	bne.w	800e4b6 <cardOperationWithBlockedSector+0x29a>
	    MFRC522_Init();
 800e2e6:	f7ff ff58 	bl	800e19a <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 800e2ea:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	2026      	movs	r0, #38	; 0x26
 800e2f2:	f7ff fd17 	bl	800dd24 <MFRC522_Request>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 800e2fc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e300:	2b00      	cmp	r3, #0
 800e302:	f040 80ce 	bne.w	800e4a2 <cardOperationWithBlockedSector+0x286>
	      status = MFRC522_Anticoll(str);
 800e306:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7ff fdfe 	bl	800df0c <MFRC522_Anticoll>
 800e310:	4603      	mov	r3, r0
 800e312:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 800e316:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f040 80b7 	bne.w	800e48e <cardOperationWithBlockedSector+0x272>
	        status = MFRC522_SelectTag(str);
 800e320:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff fe77 	bl	800e018 <MFRC522_SelectTag>
 800e32a:	4603      	mov	r3, r0
 800e32c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 800e330:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80a0 	beq.w	800e47a <cardOperationWithBlockedSector+0x25e>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 800e33a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e33e:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800e342:	2102      	movs	r1, #2
 800e344:	2061      	movs	r0, #97	; 0x61
 800e346:	f7ff fea9 	bl	800e09c <MFRC522_Auth>
 800e34a:	4603      	mov	r3, r0
 800e34c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 800e350:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e354:	2b00      	cmp	r3, #0
 800e356:	f040 8086 	bne.w	800e466 <cardOperationWithBlockedSector+0x24a>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 800e35a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e35e:	4619      	mov	r1, r3
 800e360:	2002      	movs	r0, #2
 800e362:	f7ff feee 	bl	800e142 <MFRC522_Read>
 800e366:	4603      	mov	r3, r0
 800e368:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 800e36c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e370:	2b00      	cmp	r3, #0
 800e372:	d16e      	bne.n	800e452 <cardOperationWithBlockedSector+0x236>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 800e374:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800e378:	469c      	mov	ip, r3
 800e37a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800e37e:	469e      	mov	lr, r3
 800e380:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800e384:	461c      	mov	r4, r3
 800e386:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800e38a:	461d      	mov	r5, r3
 800e38c:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800e390:	461e      	mov	r6, r3
 800e392:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800e396:	623b      	str	r3, [r7, #32]
 800e398:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800e39c:	61fb      	str	r3, [r7, #28]
 800e39e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800e3a2:	61bb      	str	r3, [r7, #24]
 800e3a4:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800e3a8:	617b      	str	r3, [r7, #20]
 800e3aa:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800e3ae:	613b      	str	r3, [r7, #16]
 800e3b0:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800e3ba:	60bb      	str	r3, [r7, #8]
 800e3bc:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800e3c0:	607b      	str	r3, [r7, #4]
 800e3c2:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800e3d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e3d6:	930d      	str	r3, [sp, #52]	; 0x34
 800e3d8:	920c      	str	r2, [sp, #48]	; 0x30
 800e3da:	910b      	str	r1, [sp, #44]	; 0x2c
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	920a      	str	r2, [sp, #40]	; 0x28
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	9208      	str	r2, [sp, #32]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	9207      	str	r2, [sp, #28]
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	9206      	str	r2, [sp, #24]
 800e3f0:	69ba      	ldr	r2, [r7, #24]
 800e3f2:	9205      	str	r2, [sp, #20]
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	9204      	str	r2, [sp, #16]
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	9303      	str	r3, [sp, #12]
 800e3fc:	9602      	str	r6, [sp, #8]
 800e3fe:	9501      	str	r5, [sp, #4]
 800e400:	9400      	str	r4, [sp, #0]
 800e402:	4673      	mov	r3, lr
 800e404:	4662      	mov	r2, ip
 800e406:	4939      	ldr	r1, [pc, #228]	; (800e4ec <cardOperationWithBlockedSector+0x2d0>)
 800e408:	f003 f862 	bl	80114d0 <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800e40c:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e410:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800e414:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800e418:	6812      	ldr	r2, [r2, #0]
 800e41a:	18d4      	adds	r4, r2, r3
 800e41c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd fe93 	bl	800c14c <strlen>
 800e426:	4602      	mov	r2, r0
 800e428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e42c:	4619      	mov	r1, r3
 800e42e:	4620      	mov	r0, r4
 800e430:	f003 f838 	bl	80114a4 <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 800e434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd fe87 	bl	800c14c <strlen>
 800e43e:	4603      	mov	r3, r0
 800e440:	b2da      	uxtb	r2, r3
 800e442:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e446:	4413      	add	r3, r2
 800e448:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 800e44c:	2301      	movs	r3, #1
 800e44e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 800e452:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e456:	2b02      	cmp	r3, #2
 800e458:	d105      	bne.n	800e466 <cardOperationWithBlockedSector+0x24a>
	              led(READ_ERR);
 800e45a:	2005      	movs	r0, #5
 800e45c:	f000 f848 	bl	800e4f0 <led>
	              cardIDStatus = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800e466:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d005      	beq.n	800e47a <cardOperationWithBlockedSector+0x25e>
	            led(AUTH_ERR);
 800e46e:	2004      	movs	r0, #4
 800e470:	f000 f83e 	bl	800e4f0 <led>
	            cardIDStatus = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800e47a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d005      	beq.n	800e48e <cardOperationWithBlockedSector+0x272>
	          led(TAG_SELECT_ERR);
 800e482:	2003      	movs	r0, #3
 800e484:	f000 f834 	bl	800e4f0 <led>
	          cardIDStatus = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 800e48e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e492:	2b00      	cmp	r3, #0
 800e494:	d005      	beq.n	800e4a2 <cardOperationWithBlockedSector+0x286>
	        led(ANTICOL_ERR);
 800e496:	2002      	movs	r0, #2
 800e498:	f000 f82a 	bl	800e4f0 <led>
	        cardIDStatus = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 800e4a2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d005      	beq.n	800e4b6 <cardOperationWithBlockedSector+0x29a>
	      led(REQUEST_ERR);
 800e4aa:	2001      	movs	r0, #1
 800e4ac:	f000 f820 	bl	800e4f0 <led>
	      cardIDStatus = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800e4b6:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d10b      	bne.n	800e4d6 <cardOperationWithBlockedSector+0x2ba>
 800e4be:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d107      	bne.n	800e4d6 <cardOperationWithBlockedSector+0x2ba>

	      cardIDStatus = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e000      	b.n	800e4d8 <cardOperationWithBlockedSector+0x2bc>
	    }
	  return 0;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	08012074 	.word	0x08012074
 800e4e8:	08011fe8 	.word	0x08011fe8
 800e4ec:	08012044 	.word	0x08012044

0800e4f0 <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	73fb      	strb	r3, [r7, #15]
 800e4fe:	e014      	b.n	800e52a <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800e500:	2200      	movs	r2, #0
 800e502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e506:	480d      	ldr	r0, [pc, #52]	; (800e53c <led+0x4c>)
 800e508:	f000 fe62 	bl	800f1d0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e50c:	2064      	movs	r0, #100	; 0x64
 800e50e:	f000 fadf 	bl	800ead0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800e512:	2201      	movs	r2, #1
 800e514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e518:	4808      	ldr	r0, [pc, #32]	; (800e53c <led+0x4c>)
 800e51a:	f000 fe59 	bl	800f1d0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e51e:	2064      	movs	r0, #100	; 0x64
 800e520:	f000 fad6 	bl	800ead0 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	3301      	adds	r3, #1
 800e528:	73fb      	strb	r3, [r7, #15]
 800e52a:	7bfa      	ldrb	r2, [r7, #15]
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d3e6      	bcc.n	800e500 <led+0x10>
	}
}
 800e532:	bf00      	nop
 800e534:	bf00      	nop
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	40011000 	.word	0x40011000

0800e540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800e546:	4b15      	ldr	r3, [pc, #84]	; (800e59c <HAL_MspInit+0x5c>)
 800e548:	699b      	ldr	r3, [r3, #24]
 800e54a:	4a14      	ldr	r2, [pc, #80]	; (800e59c <HAL_MspInit+0x5c>)
 800e54c:	f043 0301 	orr.w	r3, r3, #1
 800e550:	6193      	str	r3, [r2, #24]
 800e552:	4b12      	ldr	r3, [pc, #72]	; (800e59c <HAL_MspInit+0x5c>)
 800e554:	699b      	ldr	r3, [r3, #24]
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e55e:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <HAL_MspInit+0x5c>)
 800e560:	69db      	ldr	r3, [r3, #28]
 800e562:	4a0e      	ldr	r2, [pc, #56]	; (800e59c <HAL_MspInit+0x5c>)
 800e564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e568:	61d3      	str	r3, [r2, #28]
 800e56a:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <HAL_MspInit+0x5c>)
 800e56c:	69db      	ldr	r3, [r3, #28]
 800e56e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e572:	607b      	str	r3, [r7, #4]
 800e574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800e576:	4b0a      	ldr	r3, [pc, #40]	; (800e5a0 <HAL_MspInit+0x60>)
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	4a04      	ldr	r2, [pc, #16]	; (800e5a0 <HAL_MspInit+0x60>)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e592:	bf00      	nop
 800e594:	3714      	adds	r7, #20
 800e596:	46bd      	mov	sp, r7
 800e598:	bc80      	pop	{r7}
 800e59a:	4770      	bx	lr
 800e59c:	40021000 	.word	0x40021000
 800e5a0:	40010000 	.word	0x40010000

0800e5a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b088      	sub	sp, #32
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5ac:	f107 0310 	add.w	r3, r7, #16
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	601a      	str	r2, [r3, #0]
 800e5b4:	605a      	str	r2, [r3, #4]
 800e5b6:	609a      	str	r2, [r3, #8]
 800e5b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a15      	ldr	r2, [pc, #84]	; (800e614 <HAL_I2C_MspInit+0x70>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d123      	bne.n	800e60c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e5c4:	4b14      	ldr	r3, [pc, #80]	; (800e618 <HAL_I2C_MspInit+0x74>)
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	4a13      	ldr	r2, [pc, #76]	; (800e618 <HAL_I2C_MspInit+0x74>)
 800e5ca:	f043 0308 	orr.w	r3, r3, #8
 800e5ce:	6193      	str	r3, [r2, #24]
 800e5d0:	4b11      	ldr	r3, [pc, #68]	; (800e618 <HAL_I2C_MspInit+0x74>)
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	f003 0308 	and.w	r3, r3, #8
 800e5d8:	60fb      	str	r3, [r7, #12]
 800e5da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e5dc:	23c0      	movs	r3, #192	; 0xc0
 800e5de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e5e0:	2312      	movs	r3, #18
 800e5e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5e8:	f107 0310 	add.w	r3, r7, #16
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	480b      	ldr	r0, [pc, #44]	; (800e61c <HAL_I2C_MspInit+0x78>)
 800e5f0:	f000 fc6a 	bl	800eec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e5f4:	4b08      	ldr	r3, [pc, #32]	; (800e618 <HAL_I2C_MspInit+0x74>)
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	4a07      	ldr	r2, [pc, #28]	; (800e618 <HAL_I2C_MspInit+0x74>)
 800e5fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e5fe:	61d3      	str	r3, [r2, #28]
 800e600:	4b05      	ldr	r3, [pc, #20]	; (800e618 <HAL_I2C_MspInit+0x74>)
 800e602:	69db      	ldr	r3, [r3, #28]
 800e604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e608:	60bb      	str	r3, [r7, #8]
 800e60a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e60c:	bf00      	nop
 800e60e:	3720      	adds	r7, #32
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	40005400 	.word	0x40005400
 800e618:	40021000 	.word	0x40021000
 800e61c:	40010c00 	.word	0x40010c00

0800e620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b088      	sub	sp, #32
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e628:	f107 0310 	add.w	r3, r7, #16
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	605a      	str	r2, [r3, #4]
 800e632:	609a      	str	r2, [r3, #8]
 800e634:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a1b      	ldr	r2, [pc, #108]	; (800e6a8 <HAL_SPI_MspInit+0x88>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d12f      	bne.n	800e6a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e640:	4b1a      	ldr	r3, [pc, #104]	; (800e6ac <HAL_SPI_MspInit+0x8c>)
 800e642:	699b      	ldr	r3, [r3, #24]
 800e644:	4a19      	ldr	r2, [pc, #100]	; (800e6ac <HAL_SPI_MspInit+0x8c>)
 800e646:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e64a:	6193      	str	r3, [r2, #24]
 800e64c:	4b17      	ldr	r3, [pc, #92]	; (800e6ac <HAL_SPI_MspInit+0x8c>)
 800e64e:	699b      	ldr	r3, [r3, #24]
 800e650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e654:	60fb      	str	r3, [r7, #12]
 800e656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e658:	4b14      	ldr	r3, [pc, #80]	; (800e6ac <HAL_SPI_MspInit+0x8c>)
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	4a13      	ldr	r2, [pc, #76]	; (800e6ac <HAL_SPI_MspInit+0x8c>)
 800e65e:	f043 0304 	orr.w	r3, r3, #4
 800e662:	6193      	str	r3, [r2, #24]
 800e664:	4b11      	ldr	r3, [pc, #68]	; (800e6ac <HAL_SPI_MspInit+0x8c>)
 800e666:	699b      	ldr	r3, [r3, #24]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	60bb      	str	r3, [r7, #8]
 800e66e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800e670:	23a0      	movs	r3, #160	; 0xa0
 800e672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e674:	2302      	movs	r3, #2
 800e676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e678:	2303      	movs	r3, #3
 800e67a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e67c:	f107 0310 	add.w	r3, r7, #16
 800e680:	4619      	mov	r1, r3
 800e682:	480b      	ldr	r0, [pc, #44]	; (800e6b0 <HAL_SPI_MspInit+0x90>)
 800e684:	f000 fc20 	bl	800eec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e688:	2340      	movs	r3, #64	; 0x40
 800e68a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e68c:	2300      	movs	r3, #0
 800e68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e690:	2300      	movs	r3, #0
 800e692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e694:	f107 0310 	add.w	r3, r7, #16
 800e698:	4619      	mov	r1, r3
 800e69a:	4805      	ldr	r0, [pc, #20]	; (800e6b0 <HAL_SPI_MspInit+0x90>)
 800e69c:	f000 fc14 	bl	800eec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e6a0:	bf00      	nop
 800e6a2:	3720      	adds	r7, #32
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	40013000 	.word	0x40013000
 800e6ac:	40021000 	.word	0x40021000
 800e6b0:	40010800 	.word	0x40010800

0800e6b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6bc:	f107 0318 	add.w	r3, r7, #24
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	605a      	str	r2, [r3, #4]
 800e6c6:	609a      	str	r2, [r3, #8]
 800e6c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a3b      	ldr	r2, [pc, #236]	; (800e7bc <HAL_UART_MspInit+0x108>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d13a      	bne.n	800e74a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e6d4:	4b3a      	ldr	r3, [pc, #232]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e6d6:	699b      	ldr	r3, [r3, #24]
 800e6d8:	4a39      	ldr	r2, [pc, #228]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e6da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6de:	6193      	str	r3, [r2, #24]
 800e6e0:	4b37      	ldr	r3, [pc, #220]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e6e2:	699b      	ldr	r3, [r3, #24]
 800e6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6ec:	4b34      	ldr	r3, [pc, #208]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e6ee:	699b      	ldr	r3, [r3, #24]
 800e6f0:	4a33      	ldr	r2, [pc, #204]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e6f2:	f043 0304 	orr.w	r3, r3, #4
 800e6f6:	6193      	str	r3, [r2, #24]
 800e6f8:	4b31      	ldr	r3, [pc, #196]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e6fa:	699b      	ldr	r3, [r3, #24]
 800e6fc:	f003 0304 	and.w	r3, r3, #4
 800e700:	613b      	str	r3, [r7, #16]
 800e702:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e704:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e70a:	2302      	movs	r3, #2
 800e70c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e70e:	2303      	movs	r3, #3
 800e710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e712:	f107 0318 	add.w	r3, r7, #24
 800e716:	4619      	mov	r1, r3
 800e718:	482a      	ldr	r0, [pc, #168]	; (800e7c4 <HAL_UART_MspInit+0x110>)
 800e71a:	f000 fbd5 	bl	800eec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e724:	2300      	movs	r3, #0
 800e726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e72c:	f107 0318 	add.w	r3, r7, #24
 800e730:	4619      	mov	r1, r3
 800e732:	4824      	ldr	r0, [pc, #144]	; (800e7c4 <HAL_UART_MspInit+0x110>)
 800e734:	f000 fbc8 	bl	800eec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e738:	2200      	movs	r2, #0
 800e73a:	2100      	movs	r1, #0
 800e73c:	2025      	movs	r0, #37	; 0x25
 800e73e:	f000 fad8 	bl	800ecf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e742:	2025      	movs	r0, #37	; 0x25
 800e744:	f000 faf1 	bl	800ed2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e748:	e034      	b.n	800e7b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a1e      	ldr	r2, [pc, #120]	; (800e7c8 <HAL_UART_MspInit+0x114>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d12f      	bne.n	800e7b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e754:	4b1a      	ldr	r3, [pc, #104]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	4a19      	ldr	r2, [pc, #100]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e75e:	61d3      	str	r3, [r2, #28]
 800e760:	4b17      	ldr	r3, [pc, #92]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e768:	60fb      	str	r3, [r7, #12]
 800e76a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e76c:	4b14      	ldr	r3, [pc, #80]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	4a13      	ldr	r2, [pc, #76]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e772:	f043 0304 	orr.w	r3, r3, #4
 800e776:	6193      	str	r3, [r2, #24]
 800e778:	4b11      	ldr	r3, [pc, #68]	; (800e7c0 <HAL_UART_MspInit+0x10c>)
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	60bb      	str	r3, [r7, #8]
 800e782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e784:	2304      	movs	r3, #4
 800e786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e788:	2302      	movs	r3, #2
 800e78a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e78c:	2303      	movs	r3, #3
 800e78e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e790:	f107 0318 	add.w	r3, r7, #24
 800e794:	4619      	mov	r1, r3
 800e796:	480b      	ldr	r0, [pc, #44]	; (800e7c4 <HAL_UART_MspInit+0x110>)
 800e798:	f000 fb96 	bl	800eec8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e79c:	2308      	movs	r3, #8
 800e79e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7a8:	f107 0318 	add.w	r3, r7, #24
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	4805      	ldr	r0, [pc, #20]	; (800e7c4 <HAL_UART_MspInit+0x110>)
 800e7b0:	f000 fb8a 	bl	800eec8 <HAL_GPIO_Init>
}
 800e7b4:	bf00      	nop
 800e7b6:	3728      	adds	r7, #40	; 0x28
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	40013800 	.word	0x40013800
 800e7c0:	40021000 	.word	0x40021000
 800e7c4:	40010800 	.word	0x40010800
 800e7c8:	40004400 	.word	0x40004400

0800e7cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e7d0:	f3bf 8f4f 	dsb	sy
}
 800e7d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e7d6:	4b06      	ldr	r3, [pc, #24]	; (800e7f0 <__NVIC_SystemReset+0x24>)
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e7de:	4904      	ldr	r1, [pc, #16]	; (800e7f0 <__NVIC_SystemReset+0x24>)
 800e7e0:	4b04      	ldr	r3, [pc, #16]	; (800e7f4 <__NVIC_SystemReset+0x28>)
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e7e6:	f3bf 8f4f 	dsb	sy
}
 800e7ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e7ec:	bf00      	nop
 800e7ee:	e7fd      	b.n	800e7ec <__NVIC_SystemReset+0x20>
 800e7f0:	e000ed00 	.word	0xe000ed00
 800e7f4:	05fa0004 	.word	0x05fa0004

0800e7f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e7fc:	e7fe      	b.n	800e7fc <NMI_Handler+0x4>

0800e7fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 800e802:	f7ff ffe3 	bl	800e7cc <__NVIC_SystemReset>

0800e806 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e806:	b480      	push	{r7}
 800e808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e80a:	e7fe      	b.n	800e80a <MemManage_Handler+0x4>

0800e80c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e80c:	b480      	push	{r7}
 800e80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e810:	e7fe      	b.n	800e810 <BusFault_Handler+0x4>

0800e812 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e812:	b480      	push	{r7}
 800e814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e816:	e7fe      	b.n	800e816 <UsageFault_Handler+0x4>

0800e818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e818:	b480      	push	{r7}
 800e81a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e81c:	bf00      	nop
 800e81e:	46bd      	mov	sp, r7
 800e820:	bc80      	pop	{r7}
 800e822:	4770      	bx	lr

0800e824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e824:	b480      	push	{r7}
 800e826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e828:	bf00      	nop
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bc80      	pop	{r7}
 800e82e:	4770      	bx	lr

0800e830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e830:	b480      	push	{r7}
 800e832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e834:	bf00      	nop
 800e836:	46bd      	mov	sp, r7
 800e838:	bc80      	pop	{r7}
 800e83a:	4770      	bx	lr

0800e83c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e840:	f000 f92a 	bl	800ea98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e844:	bf00      	nop
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e84c:	4802      	ldr	r0, [pc, #8]	; (800e858 <USART1_IRQHandler+0x10>)
 800e84e:	f002 f9d3 	bl	8010bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e852:	bf00      	nop
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	200004d0 	.word	0x200004d0

0800e85c <AppruveSound>:

#include "stm32f1xx_hal.h"
#include "switchSounds.h"
#include "main.h"

void AppruveSound() {
 800e85c:	b580      	push	{r7, lr}
 800e85e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e860:	2101      	movs	r1, #1
 800e862:	4815      	ldr	r0, [pc, #84]	; (800e8b8 <AppruveSound+0x5c>)
 800e864:	f000 fccc 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e868:	2050      	movs	r0, #80	; 0x50
 800e86a:	f000 f931 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e86e:	2101      	movs	r1, #1
 800e870:	4811      	ldr	r0, [pc, #68]	; (800e8b8 <AppruveSound+0x5c>)
 800e872:	f000 fcc5 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e876:	2050      	movs	r0, #80	; 0x50
 800e878:	f000 f92a 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e87c:	2101      	movs	r1, #1
 800e87e:	480e      	ldr	r0, [pc, #56]	; (800e8b8 <AppruveSound+0x5c>)
 800e880:	f000 fcbe 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e884:	2050      	movs	r0, #80	; 0x50
 800e886:	f000 f923 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e88a:	2101      	movs	r1, #1
 800e88c:	480a      	ldr	r0, [pc, #40]	; (800e8b8 <AppruveSound+0x5c>)
 800e88e:	f000 fcb7 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e892:	2050      	movs	r0, #80	; 0x50
 800e894:	f000 f91c 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e898:	2101      	movs	r1, #1
 800e89a:	4807      	ldr	r0, [pc, #28]	; (800e8b8 <AppruveSound+0x5c>)
 800e89c:	f000 fcb0 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e8a0:	2050      	movs	r0, #80	; 0x50
 800e8a2:	f000 f915 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	4803      	ldr	r0, [pc, #12]	; (800e8b8 <AppruveSound+0x5c>)
 800e8aa:	f000 fca9 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e8ae:	2050      	movs	r0, #80	; 0x50
 800e8b0:	f000 f90e 	bl	800ead0 <HAL_Delay>
}
 800e8b4:	bf00      	nop
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	40010c00 	.word	0x40010c00

0800e8bc <RelaySwitch>:
void RelaySwitch() {
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800e8c0:	2102      	movs	r1, #2
 800e8c2:	4806      	ldr	r0, [pc, #24]	; (800e8dc <RelaySwitch+0x20>)
 800e8c4:	f000 fc9c 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e8c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e8cc:	f000 f900 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800e8d0:	2102      	movs	r1, #2
 800e8d2:	4802      	ldr	r0, [pc, #8]	; (800e8dc <RelaySwitch+0x20>)
 800e8d4:	f000 fc94 	bl	800f200 <HAL_GPIO_TogglePin>

}
 800e8d8:	bf00      	nop
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	40010c00 	.word	0x40010c00

0800e8e0 <ErrorSound>:
void ErrorSound() {
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	480e      	ldr	r0, [pc, #56]	; (800e920 <ErrorSound+0x40>)
 800e8e8:	f000 fc8a 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e8ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e8f0:	f000 f8ee 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	480a      	ldr	r0, [pc, #40]	; (800e920 <ErrorSound+0x40>)
 800e8f8:	f000 fc82 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800e8fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e900:	f000 f8e6 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e904:	2101      	movs	r1, #1
 800e906:	4806      	ldr	r0, [pc, #24]	; (800e920 <ErrorSound+0x40>)
 800e908:	f000 fc7a 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e90c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e910:	f000 f8de 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e914:	2101      	movs	r1, #1
 800e916:	4802      	ldr	r0, [pc, #8]	; (800e920 <ErrorSound+0x40>)
 800e918:	f000 fc72 	bl	800f200 <HAL_GPIO_TogglePin>

}
 800e91c:	bf00      	nop
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	40010c00 	.word	0x40010c00

0800e924 <CardReadSound>:
void CardReadSound() {
 800e924:	b580      	push	{r7, lr}
 800e926:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e928:	2101      	movs	r1, #1
 800e92a:	4806      	ldr	r0, [pc, #24]	; (800e944 <CardReadSound+0x20>)
 800e92c:	f000 fc68 	bl	800f200 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800e930:	2032      	movs	r0, #50	; 0x32
 800e932:	f000 f8cd 	bl	800ead0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e936:	2101      	movs	r1, #1
 800e938:	4802      	ldr	r0, [pc, #8]	; (800e944 <CardReadSound+0x20>)
 800e93a:	f000 fc61 	bl	800f200 <HAL_GPIO_TogglePin>

}
 800e93e:	bf00      	nop
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	40010c00 	.word	0x40010c00

0800e948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e950:	4a14      	ldr	r2, [pc, #80]	; (800e9a4 <_sbrk+0x5c>)
 800e952:	4b15      	ldr	r3, [pc, #84]	; (800e9a8 <_sbrk+0x60>)
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e95c:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <_sbrk+0x64>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d102      	bne.n	800e96a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e964:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <_sbrk+0x64>)
 800e966:	4a12      	ldr	r2, [pc, #72]	; (800e9b0 <_sbrk+0x68>)
 800e968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e96a:	4b10      	ldr	r3, [pc, #64]	; (800e9ac <_sbrk+0x64>)
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4413      	add	r3, r2
 800e972:	693a      	ldr	r2, [r7, #16]
 800e974:	429a      	cmp	r2, r3
 800e976:	d207      	bcs.n	800e988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e978:	f002 fd6a 	bl	8011450 <__errno>
 800e97c:	4603      	mov	r3, r0
 800e97e:	220c      	movs	r2, #12
 800e980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e982:	f04f 33ff 	mov.w	r3, #4294967295
 800e986:	e009      	b.n	800e99c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e988:	4b08      	ldr	r3, [pc, #32]	; (800e9ac <_sbrk+0x64>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e98e:	4b07      	ldr	r3, [pc, #28]	; (800e9ac <_sbrk+0x64>)
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4413      	add	r3, r2
 800e996:	4a05      	ldr	r2, [pc, #20]	; (800e9ac <_sbrk+0x64>)
 800e998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e99a:	68fb      	ldr	r3, [r7, #12]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20005000 	.word	0x20005000
 800e9a8:	00000400 	.word	0x00000400
 800e9ac:	20000558 	.word	0x20000558
 800e9b0:	20000570 	.word	0x20000570

0800e9b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e9b8:	bf00      	nop
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bc80      	pop	{r7}
 800e9be:	4770      	bx	lr

0800e9c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e9c0:	480c      	ldr	r0, [pc, #48]	; (800e9f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e9c2:	490d      	ldr	r1, [pc, #52]	; (800e9f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e9c4:	4a0d      	ldr	r2, [pc, #52]	; (800e9fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e9c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e9c8:	e002      	b.n	800e9d0 <LoopCopyDataInit>

0800e9ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e9ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e9cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e9ce:	3304      	adds	r3, #4

0800e9d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e9d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e9d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e9d4:	d3f9      	bcc.n	800e9ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e9d6:	4a0a      	ldr	r2, [pc, #40]	; (800ea00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e9d8:	4c0a      	ldr	r4, [pc, #40]	; (800ea04 <LoopFillZerobss+0x22>)
  movs r3, #0
 800e9da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e9dc:	e001      	b.n	800e9e2 <LoopFillZerobss>

0800e9de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e9de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e9e0:	3204      	adds	r2, #4

0800e9e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e9e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e9e4:	d3fb      	bcc.n	800e9de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e9e6:	f7ff ffe5 	bl	800e9b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e9ea:	f002 fd37 	bl	801145c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e9ee:	f7fe fb39 	bl	800d064 <main>
  bx lr
 800e9f2:	4770      	bx	lr
  ldr r0, =_sdata
 800e9f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e9f8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800e9fc:	08012298 	.word	0x08012298
  ldr r2, =_sbss
 800ea00:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800ea04:	20000570 	.word	0x20000570

0800ea08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ea08:	e7fe      	b.n	800ea08 <ADC1_2_IRQHandler>
	...

0800ea0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ea10:	4b08      	ldr	r3, [pc, #32]	; (800ea34 <HAL_Init+0x28>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a07      	ldr	r2, [pc, #28]	; (800ea34 <HAL_Init+0x28>)
 800ea16:	f043 0310 	orr.w	r3, r3, #16
 800ea1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ea1c:	2003      	movs	r0, #3
 800ea1e:	f000 f95d 	bl	800ecdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ea22:	200f      	movs	r0, #15
 800ea24:	f000 f808 	bl	800ea38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ea28:	f7ff fd8a 	bl	800e540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	40022000 	.word	0x40022000

0800ea38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ea40:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <HAL_InitTick+0x54>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	4b12      	ldr	r3, [pc, #72]	; (800ea90 <HAL_InitTick+0x58>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea56:	4618      	mov	r0, r3
 800ea58:	f000 f979 	bl	800ed4e <HAL_SYSTICK_Config>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e00e      	b.n	800ea84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b0f      	cmp	r3, #15
 800ea6a:	d80a      	bhi.n	800ea82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	f04f 30ff 	mov.w	r0, #4294967295
 800ea74:	f000 f93d 	bl	800ecf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ea78:	4a06      	ldr	r2, [pc, #24]	; (800ea94 <HAL_InitTick+0x5c>)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	e000      	b.n	800ea84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	2000017c 	.word	0x2000017c
 800ea90:	20000184 	.word	0x20000184
 800ea94:	20000180 	.word	0x20000180

0800ea98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ea9c:	4b05      	ldr	r3, [pc, #20]	; (800eab4 <HAL_IncTick+0x1c>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <HAL_IncTick+0x20>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	4a03      	ldr	r2, [pc, #12]	; (800eab8 <HAL_IncTick+0x20>)
 800eaaa:	6013      	str	r3, [r2, #0]
}
 800eaac:	bf00      	nop
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bc80      	pop	{r7}
 800eab2:	4770      	bx	lr
 800eab4:	20000184 	.word	0x20000184
 800eab8:	2000055c 	.word	0x2000055c

0800eabc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
  return uwTick;
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <HAL_GetTick+0x10>)
 800eac2:	681b      	ldr	r3, [r3, #0]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bc80      	pop	{r7}
 800eaca:	4770      	bx	lr
 800eacc:	2000055c 	.word	0x2000055c

0800ead0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ead8:	f7ff fff0 	bl	800eabc <HAL_GetTick>
 800eadc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae8:	d005      	beq.n	800eaf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800eaea:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <HAL_Delay+0x44>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800eaf6:	bf00      	nop
 800eaf8:	f7ff ffe0 	bl	800eabc <HAL_GetTick>
 800eafc:	4602      	mov	r2, r0
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d8f7      	bhi.n	800eaf8 <HAL_Delay+0x28>
  {
  }
}
 800eb08:	bf00      	nop
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20000184 	.word	0x20000184

0800eb18 <__NVIC_SetPriorityGrouping>:
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f003 0307 	and.w	r3, r3, #7
 800eb26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800eb28:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <__NVIC_SetPriorityGrouping+0x44>)
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800eb34:	4013      	ands	r3, r2
 800eb36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800eb40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800eb44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800eb4a:	4a04      	ldr	r2, [pc, #16]	; (800eb5c <__NVIC_SetPriorityGrouping+0x44>)
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	60d3      	str	r3, [r2, #12]
}
 800eb50:	bf00      	nop
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bc80      	pop	{r7}
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	e000ed00 	.word	0xe000ed00

0800eb60 <__NVIC_GetPriorityGrouping>:
{
 800eb60:	b480      	push	{r7}
 800eb62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800eb64:	4b04      	ldr	r3, [pc, #16]	; (800eb78 <__NVIC_GetPriorityGrouping+0x18>)
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	0a1b      	lsrs	r3, r3, #8
 800eb6a:	f003 0307 	and.w	r3, r3, #7
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bc80      	pop	{r7}
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	e000ed00 	.word	0xe000ed00

0800eb7c <__NVIC_EnableIRQ>:
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	4603      	mov	r3, r0
 800eb84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	db0b      	blt.n	800eba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	f003 021f 	and.w	r2, r3, #31
 800eb94:	4906      	ldr	r1, [pc, #24]	; (800ebb0 <__NVIC_EnableIRQ+0x34>)
 800eb96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb9a:	095b      	lsrs	r3, r3, #5
 800eb9c:	2001      	movs	r0, #1
 800eb9e:	fa00 f202 	lsl.w	r2, r0, r2
 800eba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800eba6:	bf00      	nop
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bc80      	pop	{r7}
 800ebae:	4770      	bx	lr
 800ebb0:	e000e100 	.word	0xe000e100

0800ebb4 <__NVIC_SetPriority>:
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6039      	str	r1, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ebc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	db0a      	blt.n	800ebde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	490c      	ldr	r1, [pc, #48]	; (800ec00 <__NVIC_SetPriority+0x4c>)
 800ebce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebd2:	0112      	lsls	r2, r2, #4
 800ebd4:	b2d2      	uxtb	r2, r2
 800ebd6:	440b      	add	r3, r1
 800ebd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ebdc:	e00a      	b.n	800ebf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	4908      	ldr	r1, [pc, #32]	; (800ec04 <__NVIC_SetPriority+0x50>)
 800ebe4:	79fb      	ldrb	r3, [r7, #7]
 800ebe6:	f003 030f 	and.w	r3, r3, #15
 800ebea:	3b04      	subs	r3, #4
 800ebec:	0112      	lsls	r2, r2, #4
 800ebee:	b2d2      	uxtb	r2, r2
 800ebf0:	440b      	add	r3, r1
 800ebf2:	761a      	strb	r2, [r3, #24]
}
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bc80      	pop	{r7}
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	e000e100 	.word	0xe000e100
 800ec04:	e000ed00 	.word	0xe000ed00

0800ec08 <NVIC_EncodePriority>:
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b089      	sub	sp, #36	; 0x24
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f003 0307 	and.w	r3, r3, #7
 800ec1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	f1c3 0307 	rsb	r3, r3, #7
 800ec22:	2b04      	cmp	r3, #4
 800ec24:	bf28      	it	cs
 800ec26:	2304      	movcs	r3, #4
 800ec28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	2b06      	cmp	r3, #6
 800ec30:	d902      	bls.n	800ec38 <NVIC_EncodePriority+0x30>
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	3b03      	subs	r3, #3
 800ec36:	e000      	b.n	800ec3a <NVIC_EncodePriority+0x32>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	fa02 f303 	lsl.w	r3, r2, r3
 800ec46:	43da      	mvns	r2, r3
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	401a      	ands	r2, r3
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ec50:	f04f 31ff 	mov.w	r1, #4294967295
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	fa01 f303 	lsl.w	r3, r1, r3
 800ec5a:	43d9      	mvns	r1, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec60:	4313      	orrs	r3, r2
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3724      	adds	r7, #36	; 0x24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bc80      	pop	{r7}
 800ec6a:	4770      	bx	lr

0800ec6c <__NVIC_SystemReset>:
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ec70:	f3bf 8f4f 	dsb	sy
}
 800ec74:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ec76:	4b06      	ldr	r3, [pc, #24]	; (800ec90 <__NVIC_SystemReset+0x24>)
 800ec78:	68db      	ldr	r3, [r3, #12]
 800ec7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ec7e:	4904      	ldr	r1, [pc, #16]	; (800ec90 <__NVIC_SystemReset+0x24>)
 800ec80:	4b04      	ldr	r3, [pc, #16]	; (800ec94 <__NVIC_SystemReset+0x28>)
 800ec82:	4313      	orrs	r3, r2
 800ec84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ec86:	f3bf 8f4f 	dsb	sy
}
 800ec8a:	bf00      	nop
    __NOP();
 800ec8c:	bf00      	nop
 800ec8e:	e7fd      	b.n	800ec8c <__NVIC_SystemReset+0x20>
 800ec90:	e000ed00 	.word	0xe000ed00
 800ec94:	05fa0004 	.word	0x05fa0004

0800ec98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3b01      	subs	r3, #1
 800eca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eca8:	d301      	bcc.n	800ecae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e00f      	b.n	800ecce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ecae:	4a0a      	ldr	r2, [pc, #40]	; (800ecd8 <SysTick_Config+0x40>)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ecb6:	210f      	movs	r1, #15
 800ecb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecbc:	f7ff ff7a 	bl	800ebb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ecc0:	4b05      	ldr	r3, [pc, #20]	; (800ecd8 <SysTick_Config+0x40>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ecc6:	4b04      	ldr	r3, [pc, #16]	; (800ecd8 <SysTick_Config+0x40>)
 800ecc8:	2207      	movs	r2, #7
 800ecca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	e000e010 	.word	0xe000e010

0800ecdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff ff17 	bl	800eb18 <__NVIC_SetPriorityGrouping>
}
 800ecea:	bf00      	nop
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b086      	sub	sp, #24
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ed04:	f7ff ff2c 	bl	800eb60 <__NVIC_GetPriorityGrouping>
 800ed08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	68b9      	ldr	r1, [r7, #8]
 800ed0e:	6978      	ldr	r0, [r7, #20]
 800ed10:	f7ff ff7a 	bl	800ec08 <NVIC_EncodePriority>
 800ed14:	4602      	mov	r2, r0
 800ed16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff ff49 	bl	800ebb4 <__NVIC_SetPriority>
}
 800ed22:	bf00      	nop
 800ed24:	3718      	adds	r7, #24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	4603      	mov	r3, r0
 800ed32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ed34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff ff1f 	bl	800eb7c <__NVIC_EnableIRQ>
}
 800ed3e:	bf00      	nop
 800ed40:	3708      	adds	r7, #8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800ed4a:	f7ff ff8f 	bl	800ec6c <__NVIC_SystemReset>

0800ed4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7ff ff9e 	bl	800ec98 <SysTick_Config>
 800ed5c:	4603      	mov	r3, r0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ed66:	b480      	push	{r7}
 800ed68:	b085      	sub	sp, #20
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ed78:	2b02      	cmp	r3, #2
 800ed7a:	d008      	beq.n	800ed8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2204      	movs	r2, #4
 800ed80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e020      	b.n	800edd0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f022 020e 	bic.w	r2, r2, #14
 800ed9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f022 0201 	bic.w	r2, r2, #1
 800edac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb6:	2101      	movs	r1, #1
 800edb8:	fa01 f202 	lsl.w	r2, r1, r2
 800edbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800edce:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3714      	adds	r7, #20
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bc80      	pop	{r7}
 800edd8:	4770      	bx	lr
	...

0800eddc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d005      	beq.n	800edfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2204      	movs	r2, #4
 800edf6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	73fb      	strb	r3, [r7, #15]
 800edfc:	e051      	b.n	800eea2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f022 020e 	bic.w	r2, r2, #14
 800ee0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f022 0201 	bic.w	r2, r2, #1
 800ee1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a22      	ldr	r2, [pc, #136]	; (800eeac <HAL_DMA_Abort_IT+0xd0>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d029      	beq.n	800ee7c <HAL_DMA_Abort_IT+0xa0>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a20      	ldr	r2, [pc, #128]	; (800eeb0 <HAL_DMA_Abort_IT+0xd4>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d022      	beq.n	800ee78 <HAL_DMA_Abort_IT+0x9c>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a1f      	ldr	r2, [pc, #124]	; (800eeb4 <HAL_DMA_Abort_IT+0xd8>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d01a      	beq.n	800ee72 <HAL_DMA_Abort_IT+0x96>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a1d      	ldr	r2, [pc, #116]	; (800eeb8 <HAL_DMA_Abort_IT+0xdc>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d012      	beq.n	800ee6c <HAL_DMA_Abort_IT+0x90>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a1c      	ldr	r2, [pc, #112]	; (800eebc <HAL_DMA_Abort_IT+0xe0>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d00a      	beq.n	800ee66 <HAL_DMA_Abort_IT+0x8a>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a1a      	ldr	r2, [pc, #104]	; (800eec0 <HAL_DMA_Abort_IT+0xe4>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d102      	bne.n	800ee60 <HAL_DMA_Abort_IT+0x84>
 800ee5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ee5e:	e00e      	b.n	800ee7e <HAL_DMA_Abort_IT+0xa2>
 800ee60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ee64:	e00b      	b.n	800ee7e <HAL_DMA_Abort_IT+0xa2>
 800ee66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ee6a:	e008      	b.n	800ee7e <HAL_DMA_Abort_IT+0xa2>
 800ee6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee70:	e005      	b.n	800ee7e <HAL_DMA_Abort_IT+0xa2>
 800ee72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee76:	e002      	b.n	800ee7e <HAL_DMA_Abort_IT+0xa2>
 800ee78:	2310      	movs	r3, #16
 800ee7a:	e000      	b.n	800ee7e <HAL_DMA_Abort_IT+0xa2>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	4a11      	ldr	r2, [pc, #68]	; (800eec4 <HAL_DMA_Abort_IT+0xe8>)
 800ee80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d003      	beq.n	800eea2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	4798      	blx	r3
    } 
  }
  return status;
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	40020008 	.word	0x40020008
 800eeb0:	4002001c 	.word	0x4002001c
 800eeb4:	40020030 	.word	0x40020030
 800eeb8:	40020044 	.word	0x40020044
 800eebc:	40020058 	.word	0x40020058
 800eec0:	4002006c 	.word	0x4002006c
 800eec4:	40020000 	.word	0x40020000

0800eec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b08b      	sub	sp, #44	; 0x2c
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800eed2:	2300      	movs	r3, #0
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800eed6:	2300      	movs	r3, #0
 800eed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800eeda:	e169      	b.n	800f1b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800eedc:	2201      	movs	r2, #1
 800eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee0:	fa02 f303 	lsl.w	r3, r2, r3
 800eee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	69fa      	ldr	r2, [r7, #28]
 800eeec:	4013      	ands	r3, r2
 800eeee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800eef0:	69ba      	ldr	r2, [r7, #24]
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	f040 8158 	bne.w	800f1aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	4a9a      	ldr	r2, [pc, #616]	; (800f168 <HAL_GPIO_Init+0x2a0>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d05e      	beq.n	800efc2 <HAL_GPIO_Init+0xfa>
 800ef04:	4a98      	ldr	r2, [pc, #608]	; (800f168 <HAL_GPIO_Init+0x2a0>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d875      	bhi.n	800eff6 <HAL_GPIO_Init+0x12e>
 800ef0a:	4a98      	ldr	r2, [pc, #608]	; (800f16c <HAL_GPIO_Init+0x2a4>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d058      	beq.n	800efc2 <HAL_GPIO_Init+0xfa>
 800ef10:	4a96      	ldr	r2, [pc, #600]	; (800f16c <HAL_GPIO_Init+0x2a4>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d86f      	bhi.n	800eff6 <HAL_GPIO_Init+0x12e>
 800ef16:	4a96      	ldr	r2, [pc, #600]	; (800f170 <HAL_GPIO_Init+0x2a8>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d052      	beq.n	800efc2 <HAL_GPIO_Init+0xfa>
 800ef1c:	4a94      	ldr	r2, [pc, #592]	; (800f170 <HAL_GPIO_Init+0x2a8>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d869      	bhi.n	800eff6 <HAL_GPIO_Init+0x12e>
 800ef22:	4a94      	ldr	r2, [pc, #592]	; (800f174 <HAL_GPIO_Init+0x2ac>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d04c      	beq.n	800efc2 <HAL_GPIO_Init+0xfa>
 800ef28:	4a92      	ldr	r2, [pc, #584]	; (800f174 <HAL_GPIO_Init+0x2ac>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d863      	bhi.n	800eff6 <HAL_GPIO_Init+0x12e>
 800ef2e:	4a92      	ldr	r2, [pc, #584]	; (800f178 <HAL_GPIO_Init+0x2b0>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d046      	beq.n	800efc2 <HAL_GPIO_Init+0xfa>
 800ef34:	4a90      	ldr	r2, [pc, #576]	; (800f178 <HAL_GPIO_Init+0x2b0>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d85d      	bhi.n	800eff6 <HAL_GPIO_Init+0x12e>
 800ef3a:	2b12      	cmp	r3, #18
 800ef3c:	d82a      	bhi.n	800ef94 <HAL_GPIO_Init+0xcc>
 800ef3e:	2b12      	cmp	r3, #18
 800ef40:	d859      	bhi.n	800eff6 <HAL_GPIO_Init+0x12e>
 800ef42:	a201      	add	r2, pc, #4	; (adr r2, 800ef48 <HAL_GPIO_Init+0x80>)
 800ef44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef48:	0800efc3 	.word	0x0800efc3
 800ef4c:	0800ef9d 	.word	0x0800ef9d
 800ef50:	0800efaf 	.word	0x0800efaf
 800ef54:	0800eff1 	.word	0x0800eff1
 800ef58:	0800eff7 	.word	0x0800eff7
 800ef5c:	0800eff7 	.word	0x0800eff7
 800ef60:	0800eff7 	.word	0x0800eff7
 800ef64:	0800eff7 	.word	0x0800eff7
 800ef68:	0800eff7 	.word	0x0800eff7
 800ef6c:	0800eff7 	.word	0x0800eff7
 800ef70:	0800eff7 	.word	0x0800eff7
 800ef74:	0800eff7 	.word	0x0800eff7
 800ef78:	0800eff7 	.word	0x0800eff7
 800ef7c:	0800eff7 	.word	0x0800eff7
 800ef80:	0800eff7 	.word	0x0800eff7
 800ef84:	0800eff7 	.word	0x0800eff7
 800ef88:	0800eff7 	.word	0x0800eff7
 800ef8c:	0800efa5 	.word	0x0800efa5
 800ef90:	0800efb9 	.word	0x0800efb9
 800ef94:	4a79      	ldr	r2, [pc, #484]	; (800f17c <HAL_GPIO_Init+0x2b4>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d013      	beq.n	800efc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ef9a:	e02c      	b.n	800eff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	623b      	str	r3, [r7, #32]
          break;
 800efa2:	e029      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	3304      	adds	r3, #4
 800efaa:	623b      	str	r3, [r7, #32]
          break;
 800efac:	e024      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	3308      	adds	r3, #8
 800efb4:	623b      	str	r3, [r7, #32]
          break;
 800efb6:	e01f      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	330c      	adds	r3, #12
 800efbe:	623b      	str	r3, [r7, #32]
          break;
 800efc0:	e01a      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d102      	bne.n	800efd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800efca:	2304      	movs	r3, #4
 800efcc:	623b      	str	r3, [r7, #32]
          break;
 800efce:	e013      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d105      	bne.n	800efe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800efd8:	2308      	movs	r3, #8
 800efda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	611a      	str	r2, [r3, #16]
          break;
 800efe2:	e009      	b.n	800eff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800efe4:	2308      	movs	r3, #8
 800efe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	69fa      	ldr	r2, [r7, #28]
 800efec:	615a      	str	r2, [r3, #20]
          break;
 800efee:	e003      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800eff0:	2300      	movs	r3, #0
 800eff2:	623b      	str	r3, [r7, #32]
          break;
 800eff4:	e000      	b.n	800eff8 <HAL_GPIO_Init+0x130>
          break;
 800eff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	2bff      	cmp	r3, #255	; 0xff
 800effc:	d801      	bhi.n	800f002 <HAL_GPIO_Init+0x13a>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	e001      	b.n	800f006 <HAL_GPIO_Init+0x13e>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	3304      	adds	r3, #4
 800f006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	2bff      	cmp	r3, #255	; 0xff
 800f00c:	d802      	bhi.n	800f014 <HAL_GPIO_Init+0x14c>
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	e002      	b.n	800f01a <HAL_GPIO_Init+0x152>
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	3b08      	subs	r3, #8
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	210f      	movs	r1, #15
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	fa01 f303 	lsl.w	r3, r1, r3
 800f028:	43db      	mvns	r3, r3
 800f02a:	401a      	ands	r2, r3
 800f02c:	6a39      	ldr	r1, [r7, #32]
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	fa01 f303 	lsl.w	r3, r1, r3
 800f034:	431a      	orrs	r2, r3
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f042:	2b00      	cmp	r3, #0
 800f044:	f000 80b1 	beq.w	800f1aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800f048:	4b4d      	ldr	r3, [pc, #308]	; (800f180 <HAL_GPIO_Init+0x2b8>)
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	4a4c      	ldr	r2, [pc, #304]	; (800f180 <HAL_GPIO_Init+0x2b8>)
 800f04e:	f043 0301 	orr.w	r3, r3, #1
 800f052:	6193      	str	r3, [r2, #24]
 800f054:	4b4a      	ldr	r3, [pc, #296]	; (800f180 <HAL_GPIO_Init+0x2b8>)
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	60bb      	str	r3, [r7, #8]
 800f05e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800f060:	4a48      	ldr	r2, [pc, #288]	; (800f184 <HAL_GPIO_Init+0x2bc>)
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	089b      	lsrs	r3, r3, #2
 800f066:	3302      	adds	r3, #2
 800f068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f06c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f070:	f003 0303 	and.w	r3, r3, #3
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	220f      	movs	r2, #15
 800f078:	fa02 f303 	lsl.w	r3, r2, r3
 800f07c:	43db      	mvns	r3, r3
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	4013      	ands	r3, r2
 800f082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a40      	ldr	r2, [pc, #256]	; (800f188 <HAL_GPIO_Init+0x2c0>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d013      	beq.n	800f0b4 <HAL_GPIO_Init+0x1ec>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a3f      	ldr	r2, [pc, #252]	; (800f18c <HAL_GPIO_Init+0x2c4>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d00d      	beq.n	800f0b0 <HAL_GPIO_Init+0x1e8>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a3e      	ldr	r2, [pc, #248]	; (800f190 <HAL_GPIO_Init+0x2c8>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d007      	beq.n	800f0ac <HAL_GPIO_Init+0x1e4>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a3d      	ldr	r2, [pc, #244]	; (800f194 <HAL_GPIO_Init+0x2cc>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d101      	bne.n	800f0a8 <HAL_GPIO_Init+0x1e0>
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	e006      	b.n	800f0b6 <HAL_GPIO_Init+0x1ee>
 800f0a8:	2304      	movs	r3, #4
 800f0aa:	e004      	b.n	800f0b6 <HAL_GPIO_Init+0x1ee>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e002      	b.n	800f0b6 <HAL_GPIO_Init+0x1ee>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e000      	b.n	800f0b6 <HAL_GPIO_Init+0x1ee>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b8:	f002 0203 	and.w	r2, r2, #3
 800f0bc:	0092      	lsls	r2, r2, #2
 800f0be:	4093      	lsls	r3, r2
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800f0c6:	492f      	ldr	r1, [pc, #188]	; (800f184 <HAL_GPIO_Init+0x2bc>)
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	089b      	lsrs	r3, r3, #2
 800f0cc:	3302      	adds	r3, #2
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d006      	beq.n	800f0ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800f0e0:	4b2d      	ldr	r3, [pc, #180]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	492c      	ldr	r1, [pc, #176]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	600b      	str	r3, [r1, #0]
 800f0ec:	e006      	b.n	800f0fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800f0ee:	4b2a      	ldr	r3, [pc, #168]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	43db      	mvns	r3, r3
 800f0f6:	4928      	ldr	r1, [pc, #160]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f104:	2b00      	cmp	r3, #0
 800f106:	d006      	beq.n	800f116 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800f108:	4b23      	ldr	r3, [pc, #140]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	4922      	ldr	r1, [pc, #136]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	4313      	orrs	r3, r2
 800f112:	604b      	str	r3, [r1, #4]
 800f114:	e006      	b.n	800f124 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800f116:	4b20      	ldr	r3, [pc, #128]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	43db      	mvns	r3, r3
 800f11e:	491e      	ldr	r1, [pc, #120]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f120:	4013      	ands	r3, r2
 800f122:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d006      	beq.n	800f13e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800f130:	4b19      	ldr	r3, [pc, #100]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f132:	689a      	ldr	r2, [r3, #8]
 800f134:	4918      	ldr	r1, [pc, #96]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	4313      	orrs	r3, r2
 800f13a:	608b      	str	r3, [r1, #8]
 800f13c:	e006      	b.n	800f14c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800f13e:	4b16      	ldr	r3, [pc, #88]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f140:	689a      	ldr	r2, [r3, #8]
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	43db      	mvns	r3, r3
 800f146:	4914      	ldr	r1, [pc, #80]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f148:	4013      	ands	r3, r2
 800f14a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f154:	2b00      	cmp	r3, #0
 800f156:	d021      	beq.n	800f19c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800f158:	4b0f      	ldr	r3, [pc, #60]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f15a:	68da      	ldr	r2, [r3, #12]
 800f15c:	490e      	ldr	r1, [pc, #56]	; (800f198 <HAL_GPIO_Init+0x2d0>)
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	4313      	orrs	r3, r2
 800f162:	60cb      	str	r3, [r1, #12]
 800f164:	e021      	b.n	800f1aa <HAL_GPIO_Init+0x2e2>
 800f166:	bf00      	nop
 800f168:	10320000 	.word	0x10320000
 800f16c:	10310000 	.word	0x10310000
 800f170:	10220000 	.word	0x10220000
 800f174:	10210000 	.word	0x10210000
 800f178:	10120000 	.word	0x10120000
 800f17c:	10110000 	.word	0x10110000
 800f180:	40021000 	.word	0x40021000
 800f184:	40010000 	.word	0x40010000
 800f188:	40010800 	.word	0x40010800
 800f18c:	40010c00 	.word	0x40010c00
 800f190:	40011000 	.word	0x40011000
 800f194:	40011400 	.word	0x40011400
 800f198:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800f19c:	4b0b      	ldr	r3, [pc, #44]	; (800f1cc <HAL_GPIO_Init+0x304>)
 800f19e:	68da      	ldr	r2, [r3, #12]
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	43db      	mvns	r3, r3
 800f1a4:	4909      	ldr	r1, [pc, #36]	; (800f1cc <HAL_GPIO_Init+0x304>)
 800f1a6:	4013      	ands	r3, r2
 800f1a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f47f ae8e 	bne.w	800eedc <HAL_GPIO_Init+0x14>
  }
}
 800f1c0:	bf00      	nop
 800f1c2:	bf00      	nop
 800f1c4:	372c      	adds	r7, #44	; 0x2c
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bc80      	pop	{r7}
 800f1ca:	4770      	bx	lr
 800f1cc:	40010400 	.word	0x40010400

0800f1d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	807b      	strh	r3, [r7, #2]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f1e0:	787b      	ldrb	r3, [r7, #1]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d003      	beq.n	800f1ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f1e6:	887a      	ldrh	r2, [r7, #2]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800f1ec:	e003      	b.n	800f1f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800f1ee:	887b      	ldrh	r3, [r7, #2]
 800f1f0:	041a      	lsls	r2, r3, #16
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	611a      	str	r2, [r3, #16]
}
 800f1f6:	bf00      	nop
 800f1f8:	370c      	adds	r7, #12
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bc80      	pop	{r7}
 800f1fe:	4770      	bx	lr

0800f200 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f212:	887a      	ldrh	r2, [r7, #2]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	4013      	ands	r3, r2
 800f218:	041a      	lsls	r2, r3, #16
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	43d9      	mvns	r1, r3
 800f21e:	887b      	ldrh	r3, [r7, #2]
 800f220:	400b      	ands	r3, r1
 800f222:	431a      	orrs	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	611a      	str	r2, [r3, #16]
}
 800f228:	bf00      	nop
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bc80      	pop	{r7}
 800f230:	4770      	bx	lr
	...

0800f234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f242:	2301      	movs	r3, #1
 800f244:	e12b      	b.n	800f49e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d106      	bne.n	800f260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff f9a2 	bl	800e5a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2224      	movs	r2, #36	; 0x24
 800f264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f022 0201 	bic.w	r2, r2, #1
 800f276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800f298:	f000 ffea 	bl	8010270 <HAL_RCC_GetPCLK1Freq>
 800f29c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	4a81      	ldr	r2, [pc, #516]	; (800f4a8 <HAL_I2C_Init+0x274>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d807      	bhi.n	800f2b8 <HAL_I2C_Init+0x84>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	4a80      	ldr	r2, [pc, #512]	; (800f4ac <HAL_I2C_Init+0x278>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	bf94      	ite	ls
 800f2b0:	2301      	movls	r3, #1
 800f2b2:	2300      	movhi	r3, #0
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	e006      	b.n	800f2c6 <HAL_I2C_Init+0x92>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4a7d      	ldr	r2, [pc, #500]	; (800f4b0 <HAL_I2C_Init+0x27c>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	bf94      	ite	ls
 800f2c0:	2301      	movls	r3, #1
 800f2c2:	2300      	movhi	r3, #0
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e0e7      	b.n	800f49e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4a78      	ldr	r2, [pc, #480]	; (800f4b4 <HAL_I2C_Init+0x280>)
 800f2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d6:	0c9b      	lsrs	r3, r3, #18
 800f2d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	430a      	orrs	r2, r1
 800f2ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	6a1b      	ldr	r3, [r3, #32]
 800f2f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	4a6a      	ldr	r2, [pc, #424]	; (800f4a8 <HAL_I2C_Init+0x274>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d802      	bhi.n	800f308 <HAL_I2C_Init+0xd4>
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	3301      	adds	r3, #1
 800f306:	e009      	b.n	800f31c <HAL_I2C_Init+0xe8>
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f30e:	fb02 f303 	mul.w	r3, r2, r3
 800f312:	4a69      	ldr	r2, [pc, #420]	; (800f4b8 <HAL_I2C_Init+0x284>)
 800f314:	fba2 2303 	umull	r2, r3, r2, r3
 800f318:	099b      	lsrs	r3, r3, #6
 800f31a:	3301      	adds	r3, #1
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	6812      	ldr	r2, [r2, #0]
 800f320:	430b      	orrs	r3, r1
 800f322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	69db      	ldr	r3, [r3, #28]
 800f32a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800f32e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	495c      	ldr	r1, [pc, #368]	; (800f4a8 <HAL_I2C_Init+0x274>)
 800f338:	428b      	cmp	r3, r1
 800f33a:	d819      	bhi.n	800f370 <HAL_I2C_Init+0x13c>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	1e59      	subs	r1, r3, #1
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	005b      	lsls	r3, r3, #1
 800f346:	fbb1 f3f3 	udiv	r3, r1, r3
 800f34a:	1c59      	adds	r1, r3, #1
 800f34c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f350:	400b      	ands	r3, r1
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00a      	beq.n	800f36c <HAL_I2C_Init+0x138>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	1e59      	subs	r1, r3, #1
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	fbb1 f3f3 	udiv	r3, r1, r3
 800f364:	3301      	adds	r3, #1
 800f366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f36a:	e051      	b.n	800f410 <HAL_I2C_Init+0x1dc>
 800f36c:	2304      	movs	r3, #4
 800f36e:	e04f      	b.n	800f410 <HAL_I2C_Init+0x1dc>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d111      	bne.n	800f39c <HAL_I2C_Init+0x168>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	1e58      	subs	r0, r3, #1
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6859      	ldr	r1, [r3, #4]
 800f380:	460b      	mov	r3, r1
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	440b      	add	r3, r1
 800f386:	fbb0 f3f3 	udiv	r3, r0, r3
 800f38a:	3301      	adds	r3, #1
 800f38c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f390:	2b00      	cmp	r3, #0
 800f392:	bf0c      	ite	eq
 800f394:	2301      	moveq	r3, #1
 800f396:	2300      	movne	r3, #0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	e012      	b.n	800f3c2 <HAL_I2C_Init+0x18e>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	1e58      	subs	r0, r3, #1
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6859      	ldr	r1, [r3, #4]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	440b      	add	r3, r1
 800f3aa:	0099      	lsls	r1, r3, #2
 800f3ac:	440b      	add	r3, r1
 800f3ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bf0c      	ite	eq
 800f3bc:	2301      	moveq	r3, #1
 800f3be:	2300      	movne	r3, #0
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <HAL_I2C_Init+0x196>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	e022      	b.n	800f410 <HAL_I2C_Init+0x1dc>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10e      	bne.n	800f3f0 <HAL_I2C_Init+0x1bc>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	1e58      	subs	r0, r3, #1
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6859      	ldr	r1, [r3, #4]
 800f3da:	460b      	mov	r3, r1
 800f3dc:	005b      	lsls	r3, r3, #1
 800f3de:	440b      	add	r3, r1
 800f3e0:	fbb0 f3f3 	udiv	r3, r0, r3
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3ee:	e00f      	b.n	800f410 <HAL_I2C_Init+0x1dc>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	1e58      	subs	r0, r3, #1
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6859      	ldr	r1, [r3, #4]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	440b      	add	r3, r1
 800f3fe:	0099      	lsls	r1, r3, #2
 800f400:	440b      	add	r3, r1
 800f402:	fbb0 f3f3 	udiv	r3, r0, r3
 800f406:	3301      	adds	r3, #1
 800f408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f40c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	6809      	ldr	r1, [r1, #0]
 800f414:	4313      	orrs	r3, r2
 800f416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	69da      	ldr	r2, [r3, #28]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a1b      	ldr	r3, [r3, #32]
 800f42a:	431a      	orrs	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	430a      	orrs	r2, r1
 800f432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800f43e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	6911      	ldr	r1, [r2, #16]
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	68d2      	ldr	r2, [r2, #12]
 800f44a:	4311      	orrs	r1, r2
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	6812      	ldr	r2, [r2, #0]
 800f450:	430b      	orrs	r3, r1
 800f452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	695a      	ldr	r2, [r3, #20]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	699b      	ldr	r3, [r3, #24]
 800f466:	431a      	orrs	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	430a      	orrs	r2, r1
 800f46e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0201 	orr.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2220      	movs	r2, #32
 800f48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3710      	adds	r7, #16
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	000186a0 	.word	0x000186a0
 800f4ac:	001e847f 	.word	0x001e847f
 800f4b0:	003d08ff 	.word	0x003d08ff
 800f4b4:	431bde83 	.word	0x431bde83
 800f4b8:	10624dd3 	.word	0x10624dd3

0800f4bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b088      	sub	sp, #32
 800f4c0:	af02      	add	r7, sp, #8
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	607a      	str	r2, [r7, #4]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	817b      	strh	r3, [r7, #10]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f4d0:	f7ff faf4 	bl	800eabc <HAL_GetTick>
 800f4d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	2b20      	cmp	r3, #32
 800f4e0:	f040 80e0 	bne.w	800f6a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	2319      	movs	r3, #25
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	4970      	ldr	r1, [pc, #448]	; (800f6b0 <HAL_I2C_Master_Transmit+0x1f4>)
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f000 f964 	bl	800f7bc <I2C_WaitOnFlagUntilTimeout>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	e0d3      	b.n	800f6a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f504:	2b01      	cmp	r3, #1
 800f506:	d101      	bne.n	800f50c <HAL_I2C_Master_Transmit+0x50>
 800f508:	2302      	movs	r3, #2
 800f50a:	e0cc      	b.n	800f6a6 <HAL_I2C_Master_Transmit+0x1ea>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2201      	movs	r2, #1
 800f510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f003 0301 	and.w	r3, r3, #1
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d007      	beq.n	800f532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f042 0201 	orr.w	r2, r2, #1
 800f530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2221      	movs	r2, #33	; 0x21
 800f546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2210      	movs	r2, #16
 800f54e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	893a      	ldrh	r2, [r7, #8]
 800f562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f568:	b29a      	uxth	r2, r3
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	4a50      	ldr	r2, [pc, #320]	; (800f6b4 <HAL_I2C_Master_Transmit+0x1f8>)
 800f572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f574:	8979      	ldrh	r1, [r7, #10]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	6a3a      	ldr	r2, [r7, #32]
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f000 f89c 	bl	800f6b8 <I2C_MasterRequestWrite>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e08d      	b.n	800f6a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f58a:	2300      	movs	r3, #0
 800f58c:	613b      	str	r3, [r7, #16]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	695b      	ldr	r3, [r3, #20]
 800f594:	613b      	str	r3, [r7, #16]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	613b      	str	r3, [r7, #16]
 800f59e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f5a0:	e066      	b.n	800f670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	6a39      	ldr	r1, [r7, #32]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f000 f9de 	bl	800f968 <I2C_WaitOnTXEFlagUntilTimeout>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00d      	beq.n	800f5ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b6:	2b04      	cmp	r3, #4
 800f5b8:	d107      	bne.n	800f5ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e06b      	b.n	800f6a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d2:	781a      	ldrb	r2, [r3, #0]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	695b      	ldr	r3, [r3, #20]
 800f604:	f003 0304 	and.w	r3, r3, #4
 800f608:	2b04      	cmp	r3, #4
 800f60a:	d11b      	bne.n	800f644 <HAL_I2C_Master_Transmit+0x188>
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f610:	2b00      	cmp	r3, #0
 800f612:	d017      	beq.n	800f644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	781a      	ldrb	r2, [r3, #0]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f624:	1c5a      	adds	r2, r3, #1
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f62e:	b29b      	uxth	r3, r3
 800f630:	3b01      	subs	r3, #1
 800f632:	b29a      	uxth	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f63c:	3b01      	subs	r3, #1
 800f63e:	b29a      	uxth	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f644:	697a      	ldr	r2, [r7, #20]
 800f646:	6a39      	ldr	r1, [r7, #32]
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 f9ce 	bl	800f9ea <I2C_WaitOnBTFFlagUntilTimeout>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00d      	beq.n	800f670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f658:	2b04      	cmp	r3, #4
 800f65a:	d107      	bne.n	800f66c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f66a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e01a      	b.n	800f6a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f674:	2b00      	cmp	r3, #0
 800f676:	d194      	bne.n	800f5a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2220      	movs	r2, #32
 800f68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2200      	movs	r2, #0
 800f694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	e000      	b.n	800f6a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f6a4:	2302      	movs	r3, #2
  }
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	00100002 	.word	0x00100002
 800f6b4:	ffff0000 	.word	0xffff0000

0800f6b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b088      	sub	sp, #32
 800f6bc:	af02      	add	r7, sp, #8
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	607a      	str	r2, [r7, #4]
 800f6c2:	603b      	str	r3, [r7, #0]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2b08      	cmp	r3, #8
 800f6d2:	d006      	beq.n	800f6e2 <I2C_MasterRequestWrite+0x2a>
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d003      	beq.n	800f6e2 <I2C_MasterRequestWrite+0x2a>
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f6e0:	d108      	bne.n	800f6f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	e00b      	b.n	800f70c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f8:	2b12      	cmp	r3, #18
 800f6fa:	d107      	bne.n	800f70c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f70a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2200      	movs	r2, #0
 800f714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f000 f84f 	bl	800f7bc <I2C_WaitOnFlagUntilTimeout>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00d      	beq.n	800f740 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f72e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f732:	d103      	bne.n	800f73c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f73a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f73c:	2303      	movs	r3, #3
 800f73e:	e035      	b.n	800f7ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f748:	d108      	bne.n	800f75c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f74a:	897b      	ldrh	r3, [r7, #10]
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	461a      	mov	r2, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f758:	611a      	str	r2, [r3, #16]
 800f75a:	e01b      	b.n	800f794 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f75c:	897b      	ldrh	r3, [r7, #10]
 800f75e:	11db      	asrs	r3, r3, #7
 800f760:	b2db      	uxtb	r3, r3
 800f762:	f003 0306 	and.w	r3, r3, #6
 800f766:	b2db      	uxtb	r3, r3
 800f768:	f063 030f 	orn	r3, r3, #15
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	490e      	ldr	r1, [pc, #56]	; (800f7b4 <I2C_MasterRequestWrite+0xfc>)
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 f875 	bl	800f86a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d001      	beq.n	800f78a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800f786:	2301      	movs	r3, #1
 800f788:	e010      	b.n	800f7ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f78a:	897b      	ldrh	r3, [r7, #10]
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	4907      	ldr	r1, [pc, #28]	; (800f7b8 <I2C_MasterRequestWrite+0x100>)
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f000 f865 	bl	800f86a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d001      	beq.n	800f7aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e000      	b.n	800f7ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3718      	adds	r7, #24
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	00010008 	.word	0x00010008
 800f7b8:	00010002 	.word	0x00010002

0800f7bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	603b      	str	r3, [r7, #0]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f7cc:	e025      	b.n	800f81a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d4:	d021      	beq.n	800f81a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7d6:	f7ff f971 	bl	800eabc <HAL_GetTick>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	683a      	ldr	r2, [r7, #0]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d302      	bcc.n	800f7ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d116      	bne.n	800f81a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2220      	movs	r2, #32
 800f7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f806:	f043 0220 	orr.w	r2, r3, #32
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2200      	movs	r2, #0
 800f812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f816:	2301      	movs	r3, #1
 800f818:	e023      	b.n	800f862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	0c1b      	lsrs	r3, r3, #16
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b01      	cmp	r3, #1
 800f822:	d10d      	bne.n	800f840 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	695b      	ldr	r3, [r3, #20]
 800f82a:	43da      	mvns	r2, r3
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	4013      	ands	r3, r2
 800f830:	b29b      	uxth	r3, r3
 800f832:	2b00      	cmp	r3, #0
 800f834:	bf0c      	ite	eq
 800f836:	2301      	moveq	r3, #1
 800f838:	2300      	movne	r3, #0
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	461a      	mov	r2, r3
 800f83e:	e00c      	b.n	800f85a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	699b      	ldr	r3, [r3, #24]
 800f846:	43da      	mvns	r2, r3
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	4013      	ands	r3, r2
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	bf0c      	ite	eq
 800f852:	2301      	moveq	r3, #1
 800f854:	2300      	movne	r3, #0
 800f856:	b2db      	uxtb	r3, r3
 800f858:	461a      	mov	r2, r3
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d0b6      	beq.n	800f7ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b084      	sub	sp, #16
 800f86e:	af00      	add	r7, sp, #0
 800f870:	60f8      	str	r0, [r7, #12]
 800f872:	60b9      	str	r1, [r7, #8]
 800f874:	607a      	str	r2, [r7, #4]
 800f876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f878:	e051      	b.n	800f91e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f888:	d123      	bne.n	800f8d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f8a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2220      	movs	r2, #32
 800f8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8be:	f043 0204 	orr.w	r2, r3, #4
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e046      	b.n	800f960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8d8:	d021      	beq.n	800f91e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8da:	f7ff f8ef 	bl	800eabc <HAL_GetTick>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	1ad3      	subs	r3, r2, r3
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d302      	bcc.n	800f8f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d116      	bne.n	800f91e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2220      	movs	r2, #32
 800f8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90a:	f043 0220 	orr.w	r2, r3, #32
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e020      	b.n	800f960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	0c1b      	lsrs	r3, r3, #16
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b01      	cmp	r3, #1
 800f926:	d10c      	bne.n	800f942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	43da      	mvns	r2, r3
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	4013      	ands	r3, r2
 800f934:	b29b      	uxth	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	bf14      	ite	ne
 800f93a:	2301      	movne	r3, #1
 800f93c:	2300      	moveq	r3, #0
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	e00b      	b.n	800f95a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	43da      	mvns	r2, r3
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	4013      	ands	r3, r2
 800f94e:	b29b      	uxth	r3, r3
 800f950:	2b00      	cmp	r3, #0
 800f952:	bf14      	ite	ne
 800f954:	2301      	movne	r3, #1
 800f956:	2300      	moveq	r3, #0
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d18d      	bne.n	800f87a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f974:	e02d      	b.n	800f9d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f000 f878 	bl	800fa6c <I2C_IsAcknowledgeFailed>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f982:	2301      	movs	r3, #1
 800f984:	e02d      	b.n	800f9e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98c:	d021      	beq.n	800f9d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f98e:	f7ff f895 	bl	800eabc <HAL_GetTick>
 800f992:	4602      	mov	r2, r0
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	68ba      	ldr	r2, [r7, #8]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d302      	bcc.n	800f9a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d116      	bne.n	800f9d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2220      	movs	r2, #32
 800f9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9be:	f043 0220 	orr.w	r2, r3, #32
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e007      	b.n	800f9e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	695b      	ldr	r3, [r3, #20]
 800f9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9dc:	2b80      	cmp	r3, #128	; 0x80
 800f9de:	d1ca      	bne.n	800f976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b084      	sub	sp, #16
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	60f8      	str	r0, [r7, #12]
 800f9f2:	60b9      	str	r1, [r7, #8]
 800f9f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f9f6:	e02d      	b.n	800fa54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f000 f837 	bl	800fa6c <I2C_IsAcknowledgeFailed>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d001      	beq.n	800fa08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	e02d      	b.n	800fa64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0e:	d021      	beq.n	800fa54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa10:	f7ff f854 	bl	800eabc <HAL_GetTick>
 800fa14:	4602      	mov	r2, r0
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d302      	bcc.n	800fa26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d116      	bne.n	800fa54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2220      	movs	r2, #32
 800fa30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa40:	f043 0220 	orr.w	r2, r3, #32
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e007      	b.n	800fa64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	695b      	ldr	r3, [r3, #20]
 800fa5a:	f003 0304 	and.w	r3, r3, #4
 800fa5e:	2b04      	cmp	r3, #4
 800fa60:	d1ca      	bne.n	800f9f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	695b      	ldr	r3, [r3, #20]
 800fa7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa82:	d11b      	bne.n	800fabc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fa8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2220      	movs	r2, #32
 800fa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa8:	f043 0204 	orr.w	r2, r3, #4
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	e000      	b.n	800fabe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bc80      	pop	{r7}
 800fac6:	4770      	bx	lr

0800fac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fad6:	2301      	movs	r3, #1
 800fad8:	e272      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f003 0301 	and.w	r3, r3, #1
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 8087 	beq.w	800fbf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fae8:	4b92      	ldr	r3, [pc, #584]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	f003 030c 	and.w	r3, r3, #12
 800faf0:	2b04      	cmp	r3, #4
 800faf2:	d00c      	beq.n	800fb0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800faf4:	4b8f      	ldr	r3, [pc, #572]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	f003 030c 	and.w	r3, r3, #12
 800fafc:	2b08      	cmp	r3, #8
 800fafe:	d112      	bne.n	800fb26 <HAL_RCC_OscConfig+0x5e>
 800fb00:	4b8c      	ldr	r3, [pc, #560]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb0c:	d10b      	bne.n	800fb26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fb0e:	4b89      	ldr	r3, [pc, #548]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d06c      	beq.n	800fbf4 <HAL_RCC_OscConfig+0x12c>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d168      	bne.n	800fbf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800fb22:	2301      	movs	r3, #1
 800fb24:	e24c      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb2e:	d106      	bne.n	800fb3e <HAL_RCC_OscConfig+0x76>
 800fb30:	4b80      	ldr	r3, [pc, #512]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a7f      	ldr	r2, [pc, #508]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	e02e      	b.n	800fb9c <HAL_RCC_OscConfig+0xd4>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d10c      	bne.n	800fb60 <HAL_RCC_OscConfig+0x98>
 800fb46:	4b7b      	ldr	r3, [pc, #492]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a7a      	ldr	r2, [pc, #488]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb50:	6013      	str	r3, [r2, #0]
 800fb52:	4b78      	ldr	r3, [pc, #480]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a77      	ldr	r2, [pc, #476]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb5c:	6013      	str	r3, [r2, #0]
 800fb5e:	e01d      	b.n	800fb9c <HAL_RCC_OscConfig+0xd4>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fb68:	d10c      	bne.n	800fb84 <HAL_RCC_OscConfig+0xbc>
 800fb6a:	4b72      	ldr	r3, [pc, #456]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4a71      	ldr	r2, [pc, #452]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fb74:	6013      	str	r3, [r2, #0]
 800fb76:	4b6f      	ldr	r3, [pc, #444]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4a6e      	ldr	r2, [pc, #440]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb80:	6013      	str	r3, [r2, #0]
 800fb82:	e00b      	b.n	800fb9c <HAL_RCC_OscConfig+0xd4>
 800fb84:	4b6b      	ldr	r3, [pc, #428]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a6a      	ldr	r2, [pc, #424]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb8e:	6013      	str	r3, [r2, #0]
 800fb90:	4b68      	ldr	r3, [pc, #416]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a67      	ldr	r2, [pc, #412]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fb96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d013      	beq.n	800fbcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fba4:	f7fe ff8a 	bl	800eabc <HAL_GetTick>
 800fba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fbaa:	e008      	b.n	800fbbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fbac:	f7fe ff86 	bl	800eabc <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	2b64      	cmp	r3, #100	; 0x64
 800fbb8:	d901      	bls.n	800fbbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800fbba:	2303      	movs	r3, #3
 800fbbc:	e200      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fbbe:	4b5d      	ldr	r3, [pc, #372]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d0f0      	beq.n	800fbac <HAL_RCC_OscConfig+0xe4>
 800fbca:	e014      	b.n	800fbf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbcc:	f7fe ff76 	bl	800eabc <HAL_GetTick>
 800fbd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fbd2:	e008      	b.n	800fbe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fbd4:	f7fe ff72 	bl	800eabc <HAL_GetTick>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	2b64      	cmp	r3, #100	; 0x64
 800fbe0:	d901      	bls.n	800fbe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	e1ec      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fbe6:	4b53      	ldr	r3, [pc, #332]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1f0      	bne.n	800fbd4 <HAL_RCC_OscConfig+0x10c>
 800fbf2:	e000      	b.n	800fbf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fbf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f003 0302 	and.w	r3, r3, #2
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d063      	beq.n	800fcca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fc02:	4b4c      	ldr	r3, [pc, #304]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	f003 030c 	and.w	r3, r3, #12
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00b      	beq.n	800fc26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800fc0e:	4b49      	ldr	r3, [pc, #292]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	f003 030c 	and.w	r3, r3, #12
 800fc16:	2b08      	cmp	r3, #8
 800fc18:	d11c      	bne.n	800fc54 <HAL_RCC_OscConfig+0x18c>
 800fc1a:	4b46      	ldr	r3, [pc, #280]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d116      	bne.n	800fc54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fc26:	4b43      	ldr	r3, [pc, #268]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f003 0302 	and.w	r3, r3, #2
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d005      	beq.n	800fc3e <HAL_RCC_OscConfig+0x176>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d001      	beq.n	800fc3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e1c0      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc3e:	4b3d      	ldr	r3, [pc, #244]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	695b      	ldr	r3, [r3, #20]
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	4939      	ldr	r1, [pc, #228]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fc52:	e03a      	b.n	800fcca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	691b      	ldr	r3, [r3, #16]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d020      	beq.n	800fc9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fc5c:	4b36      	ldr	r3, [pc, #216]	; (800fd38 <HAL_RCC_OscConfig+0x270>)
 800fc5e:	2201      	movs	r2, #1
 800fc60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc62:	f7fe ff2b 	bl	800eabc <HAL_GetTick>
 800fc66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fc68:	e008      	b.n	800fc7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fc6a:	f7fe ff27 	bl	800eabc <HAL_GetTick>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d901      	bls.n	800fc7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800fc78:	2303      	movs	r3, #3
 800fc7a:	e1a1      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fc7c:	4b2d      	ldr	r3, [pc, #180]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f003 0302 	and.w	r3, r3, #2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d0f0      	beq.n	800fc6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc88:	4b2a      	ldr	r3, [pc, #168]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	695b      	ldr	r3, [r3, #20]
 800fc94:	00db      	lsls	r3, r3, #3
 800fc96:	4927      	ldr	r1, [pc, #156]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	600b      	str	r3, [r1, #0]
 800fc9c:	e015      	b.n	800fcca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fc9e:	4b26      	ldr	r3, [pc, #152]	; (800fd38 <HAL_RCC_OscConfig+0x270>)
 800fca0:	2200      	movs	r2, #0
 800fca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fca4:	f7fe ff0a 	bl	800eabc <HAL_GetTick>
 800fca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fcaa:	e008      	b.n	800fcbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fcac:	f7fe ff06 	bl	800eabc <HAL_GetTick>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	1ad3      	subs	r3, r2, r3
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d901      	bls.n	800fcbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800fcba:	2303      	movs	r3, #3
 800fcbc:	e180      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fcbe:	4b1d      	ldr	r3, [pc, #116]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f003 0302 	and.w	r3, r3, #2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1f0      	bne.n	800fcac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f003 0308 	and.w	r3, r3, #8
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d03a      	beq.n	800fd4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	699b      	ldr	r3, [r3, #24]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d019      	beq.n	800fd12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fcde:	4b17      	ldr	r3, [pc, #92]	; (800fd3c <HAL_RCC_OscConfig+0x274>)
 800fce0:	2201      	movs	r2, #1
 800fce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fce4:	f7fe feea 	bl	800eabc <HAL_GetTick>
 800fce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fcea:	e008      	b.n	800fcfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fcec:	f7fe fee6 	bl	800eabc <HAL_GetTick>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d901      	bls.n	800fcfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800fcfa:	2303      	movs	r3, #3
 800fcfc:	e160      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fcfe:	4b0d      	ldr	r3, [pc, #52]	; (800fd34 <HAL_RCC_OscConfig+0x26c>)
 800fd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd02:	f003 0302 	and.w	r3, r3, #2
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d0f0      	beq.n	800fcec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	f000 fad8 	bl	80102c0 <RCC_Delay>
 800fd10:	e01c      	b.n	800fd4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fd12:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <HAL_RCC_OscConfig+0x274>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd18:	f7fe fed0 	bl	800eabc <HAL_GetTick>
 800fd1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fd1e:	e00f      	b.n	800fd40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fd20:	f7fe fecc 	bl	800eabc <HAL_GetTick>
 800fd24:	4602      	mov	r2, r0
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d908      	bls.n	800fd40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800fd2e:	2303      	movs	r3, #3
 800fd30:	e146      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
 800fd32:	bf00      	nop
 800fd34:	40021000 	.word	0x40021000
 800fd38:	42420000 	.word	0x42420000
 800fd3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fd40:	4b92      	ldr	r3, [pc, #584]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd44:	f003 0302 	and.w	r3, r3, #2
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d1e9      	bne.n	800fd20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 80a6 	beq.w	800fea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fd5e:	4b8b      	ldr	r3, [pc, #556]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fd60:	69db      	ldr	r3, [r3, #28]
 800fd62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10d      	bne.n	800fd86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fd6a:	4b88      	ldr	r3, [pc, #544]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fd6c:	69db      	ldr	r3, [r3, #28]
 800fd6e:	4a87      	ldr	r2, [pc, #540]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fd70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd74:	61d3      	str	r3, [r2, #28]
 800fd76:	4b85      	ldr	r3, [pc, #532]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd7e:	60bb      	str	r3, [r7, #8]
 800fd80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fd82:	2301      	movs	r3, #1
 800fd84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fd86:	4b82      	ldr	r3, [pc, #520]	; (800ff90 <HAL_RCC_OscConfig+0x4c8>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d118      	bne.n	800fdc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fd92:	4b7f      	ldr	r3, [pc, #508]	; (800ff90 <HAL_RCC_OscConfig+0x4c8>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a7e      	ldr	r2, [pc, #504]	; (800ff90 <HAL_RCC_OscConfig+0x4c8>)
 800fd98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fd9e:	f7fe fe8d 	bl	800eabc <HAL_GetTick>
 800fda2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fda4:	e008      	b.n	800fdb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fda6:	f7fe fe89 	bl	800eabc <HAL_GetTick>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	1ad3      	subs	r3, r2, r3
 800fdb0:	2b64      	cmp	r3, #100	; 0x64
 800fdb2:	d901      	bls.n	800fdb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800fdb4:	2303      	movs	r3, #3
 800fdb6:	e103      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fdb8:	4b75      	ldr	r3, [pc, #468]	; (800ff90 <HAL_RCC_OscConfig+0x4c8>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d0f0      	beq.n	800fda6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d106      	bne.n	800fdda <HAL_RCC_OscConfig+0x312>
 800fdcc:	4b6f      	ldr	r3, [pc, #444]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fdce:	6a1b      	ldr	r3, [r3, #32]
 800fdd0:	4a6e      	ldr	r2, [pc, #440]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fdd2:	f043 0301 	orr.w	r3, r3, #1
 800fdd6:	6213      	str	r3, [r2, #32]
 800fdd8:	e02d      	b.n	800fe36 <HAL_RCC_OscConfig+0x36e>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10c      	bne.n	800fdfc <HAL_RCC_OscConfig+0x334>
 800fde2:	4b6a      	ldr	r3, [pc, #424]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	4a69      	ldr	r2, [pc, #420]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fde8:	f023 0301 	bic.w	r3, r3, #1
 800fdec:	6213      	str	r3, [r2, #32]
 800fdee:	4b67      	ldr	r3, [pc, #412]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	4a66      	ldr	r2, [pc, #408]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fdf4:	f023 0304 	bic.w	r3, r3, #4
 800fdf8:	6213      	str	r3, [r2, #32]
 800fdfa:	e01c      	b.n	800fe36 <HAL_RCC_OscConfig+0x36e>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	2b05      	cmp	r3, #5
 800fe02:	d10c      	bne.n	800fe1e <HAL_RCC_OscConfig+0x356>
 800fe04:	4b61      	ldr	r3, [pc, #388]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe06:	6a1b      	ldr	r3, [r3, #32]
 800fe08:	4a60      	ldr	r2, [pc, #384]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe0a:	f043 0304 	orr.w	r3, r3, #4
 800fe0e:	6213      	str	r3, [r2, #32]
 800fe10:	4b5e      	ldr	r3, [pc, #376]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe12:	6a1b      	ldr	r3, [r3, #32]
 800fe14:	4a5d      	ldr	r2, [pc, #372]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe16:	f043 0301 	orr.w	r3, r3, #1
 800fe1a:	6213      	str	r3, [r2, #32]
 800fe1c:	e00b      	b.n	800fe36 <HAL_RCC_OscConfig+0x36e>
 800fe1e:	4b5b      	ldr	r3, [pc, #364]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	4a5a      	ldr	r2, [pc, #360]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe24:	f023 0301 	bic.w	r3, r3, #1
 800fe28:	6213      	str	r3, [r2, #32]
 800fe2a:	4b58      	ldr	r3, [pc, #352]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe2c:	6a1b      	ldr	r3, [r3, #32]
 800fe2e:	4a57      	ldr	r2, [pc, #348]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe30:	f023 0304 	bic.w	r3, r3, #4
 800fe34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d015      	beq.n	800fe6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fe3e:	f7fe fe3d 	bl	800eabc <HAL_GetTick>
 800fe42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe44:	e00a      	b.n	800fe5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fe46:	f7fe fe39 	bl	800eabc <HAL_GetTick>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d901      	bls.n	800fe5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800fe58:	2303      	movs	r3, #3
 800fe5a:	e0b1      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe5c:	4b4b      	ldr	r3, [pc, #300]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe5e:	6a1b      	ldr	r3, [r3, #32]
 800fe60:	f003 0302 	and.w	r3, r3, #2
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d0ee      	beq.n	800fe46 <HAL_RCC_OscConfig+0x37e>
 800fe68:	e014      	b.n	800fe94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fe6a:	f7fe fe27 	bl	800eabc <HAL_GetTick>
 800fe6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fe70:	e00a      	b.n	800fe88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fe72:	f7fe fe23 	bl	800eabc <HAL_GetTick>
 800fe76:	4602      	mov	r2, r0
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d901      	bls.n	800fe88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800fe84:	2303      	movs	r3, #3
 800fe86:	e09b      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fe88:	4b40      	ldr	r3, [pc, #256]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe8a:	6a1b      	ldr	r3, [r3, #32]
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1ee      	bne.n	800fe72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800fe94:	7dfb      	ldrb	r3, [r7, #23]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d105      	bne.n	800fea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fe9a:	4b3c      	ldr	r3, [pc, #240]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fe9c:	69db      	ldr	r3, [r3, #28]
 800fe9e:	4a3b      	ldr	r2, [pc, #236]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	69db      	ldr	r3, [r3, #28]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f000 8087 	beq.w	800ffbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800feb0:	4b36      	ldr	r3, [pc, #216]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	f003 030c 	and.w	r3, r3, #12
 800feb8:	2b08      	cmp	r3, #8
 800feba:	d061      	beq.n	800ff80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	69db      	ldr	r3, [r3, #28]
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	d146      	bne.n	800ff52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fec4:	4b33      	ldr	r3, [pc, #204]	; (800ff94 <HAL_RCC_OscConfig+0x4cc>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800feca:	f7fe fdf7 	bl	800eabc <HAL_GetTick>
 800fece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fed0:	e008      	b.n	800fee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fed2:	f7fe fdf3 	bl	800eabc <HAL_GetTick>
 800fed6:	4602      	mov	r2, r0
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d901      	bls.n	800fee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800fee0:	2303      	movs	r3, #3
 800fee2:	e06d      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fee4:	4b29      	ldr	r3, [pc, #164]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800feec:	2b00      	cmp	r3, #0
 800feee:	d1f0      	bne.n	800fed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6a1b      	ldr	r3, [r3, #32]
 800fef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fef8:	d108      	bne.n	800ff0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800fefa:	4b24      	ldr	r3, [pc, #144]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	4921      	ldr	r1, [pc, #132]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ff0c:	4b1f      	ldr	r3, [pc, #124]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6a19      	ldr	r1, [r3, #32]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1c:	430b      	orrs	r3, r1
 800ff1e:	491b      	ldr	r1, [pc, #108]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800ff20:	4313      	orrs	r3, r2
 800ff22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ff24:	4b1b      	ldr	r3, [pc, #108]	; (800ff94 <HAL_RCC_OscConfig+0x4cc>)
 800ff26:	2201      	movs	r2, #1
 800ff28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff2a:	f7fe fdc7 	bl	800eabc <HAL_GetTick>
 800ff2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ff30:	e008      	b.n	800ff44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ff32:	f7fe fdc3 	bl	800eabc <HAL_GetTick>
 800ff36:	4602      	mov	r2, r0
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	1ad3      	subs	r3, r2, r3
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d901      	bls.n	800ff44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ff40:	2303      	movs	r3, #3
 800ff42:	e03d      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ff44:	4b11      	ldr	r3, [pc, #68]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d0f0      	beq.n	800ff32 <HAL_RCC_OscConfig+0x46a>
 800ff50:	e035      	b.n	800ffbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff52:	4b10      	ldr	r3, [pc, #64]	; (800ff94 <HAL_RCC_OscConfig+0x4cc>)
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff58:	f7fe fdb0 	bl	800eabc <HAL_GetTick>
 800ff5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ff5e:	e008      	b.n	800ff72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ff60:	f7fe fdac 	bl	800eabc <HAL_GetTick>
 800ff64:	4602      	mov	r2, r0
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	d901      	bls.n	800ff72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	e026      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ff72:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <HAL_RCC_OscConfig+0x4c4>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1f0      	bne.n	800ff60 <HAL_RCC_OscConfig+0x498>
 800ff7e:	e01e      	b.n	800ffbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	69db      	ldr	r3, [r3, #28]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d107      	bne.n	800ff98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e019      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
 800ff8c:	40021000 	.word	0x40021000
 800ff90:	40007000 	.word	0x40007000
 800ff94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ff98:	4b0b      	ldr	r3, [pc, #44]	; (800ffc8 <HAL_RCC_OscConfig+0x500>)
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a1b      	ldr	r3, [r3, #32]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d106      	bne.n	800ffba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d001      	beq.n	800ffbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e000      	b.n	800ffc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	40021000 	.word	0x40021000

0800ffcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e0d0      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ffe0:	4b6a      	ldr	r3, [pc, #424]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 0307 	and.w	r3, r3, #7
 800ffe8:	683a      	ldr	r2, [r7, #0]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d910      	bls.n	8010010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ffee:	4b67      	ldr	r3, [pc, #412]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f023 0207 	bic.w	r2, r3, #7
 800fff6:	4965      	ldr	r1, [pc, #404]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fffe:	4b63      	ldr	r3, [pc, #396]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f003 0307 	and.w	r3, r3, #7
 8010006:	683a      	ldr	r2, [r7, #0]
 8010008:	429a      	cmp	r2, r3
 801000a:	d001      	beq.n	8010010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	e0b8      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f003 0302 	and.w	r3, r3, #2
 8010018:	2b00      	cmp	r3, #0
 801001a:	d020      	beq.n	801005e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f003 0304 	and.w	r3, r3, #4
 8010024:	2b00      	cmp	r3, #0
 8010026:	d005      	beq.n	8010034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010028:	4b59      	ldr	r3, [pc, #356]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	4a58      	ldr	r2, [pc, #352]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801002e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8010032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f003 0308 	and.w	r3, r3, #8
 801003c:	2b00      	cmp	r3, #0
 801003e:	d005      	beq.n	801004c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010040:	4b53      	ldr	r3, [pc, #332]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	4a52      	ldr	r2, [pc, #328]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 801004a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801004c:	4b50      	ldr	r3, [pc, #320]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	689b      	ldr	r3, [r3, #8]
 8010058:	494d      	ldr	r1, [pc, #308]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801005a:	4313      	orrs	r3, r2
 801005c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	2b00      	cmp	r3, #0
 8010068:	d040      	beq.n	80100ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d107      	bne.n	8010082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010072:	4b47      	ldr	r3, [pc, #284]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801007a:	2b00      	cmp	r3, #0
 801007c:	d115      	bne.n	80100aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	e07f      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	2b02      	cmp	r3, #2
 8010088:	d107      	bne.n	801009a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801008a:	4b41      	ldr	r3, [pc, #260]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010092:	2b00      	cmp	r3, #0
 8010094:	d109      	bne.n	80100aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010096:	2301      	movs	r3, #1
 8010098:	e073      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801009a:	4b3d      	ldr	r3, [pc, #244]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f003 0302 	and.w	r3, r3, #2
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e06b      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80100aa:	4b39      	ldr	r3, [pc, #228]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	f023 0203 	bic.w	r2, r3, #3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	4936      	ldr	r1, [pc, #216]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 80100b8:	4313      	orrs	r3, r2
 80100ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80100bc:	f7fe fcfe 	bl	800eabc <HAL_GetTick>
 80100c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80100c2:	e00a      	b.n	80100da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100c4:	f7fe fcfa 	bl	800eabc <HAL_GetTick>
 80100c8:	4602      	mov	r2, r0
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d901      	bls.n	80100da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80100d6:	2303      	movs	r3, #3
 80100d8:	e053      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80100da:	4b2d      	ldr	r3, [pc, #180]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	f003 020c 	and.w	r2, r3, #12
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d1eb      	bne.n	80100c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80100ec:	4b27      	ldr	r3, [pc, #156]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f003 0307 	and.w	r3, r3, #7
 80100f4:	683a      	ldr	r2, [r7, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d210      	bcs.n	801011c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100fa:	4b24      	ldr	r3, [pc, #144]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f023 0207 	bic.w	r2, r3, #7
 8010102:	4922      	ldr	r1, [pc, #136]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	4313      	orrs	r3, r2
 8010108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801010a:	4b20      	ldr	r3, [pc, #128]	; (801018c <HAL_RCC_ClockConfig+0x1c0>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f003 0307 	and.w	r3, r3, #7
 8010112:	683a      	ldr	r2, [r7, #0]
 8010114:	429a      	cmp	r2, r3
 8010116:	d001      	beq.n	801011c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8010118:	2301      	movs	r3, #1
 801011a:	e032      	b.n	8010182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f003 0304 	and.w	r3, r3, #4
 8010124:	2b00      	cmp	r3, #0
 8010126:	d008      	beq.n	801013a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010128:	4b19      	ldr	r3, [pc, #100]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	4916      	ldr	r1, [pc, #88]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010136:	4313      	orrs	r3, r2
 8010138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f003 0308 	and.w	r3, r3, #8
 8010142:	2b00      	cmp	r3, #0
 8010144:	d009      	beq.n	801015a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010146:	4b12      	ldr	r3, [pc, #72]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	490e      	ldr	r1, [pc, #56]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010156:	4313      	orrs	r3, r2
 8010158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801015a:	f000 f821 	bl	80101a0 <HAL_RCC_GetSysClockFreq>
 801015e:	4602      	mov	r2, r0
 8010160:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <HAL_RCC_ClockConfig+0x1c4>)
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	091b      	lsrs	r3, r3, #4
 8010166:	f003 030f 	and.w	r3, r3, #15
 801016a:	490a      	ldr	r1, [pc, #40]	; (8010194 <HAL_RCC_ClockConfig+0x1c8>)
 801016c:	5ccb      	ldrb	r3, [r1, r3]
 801016e:	fa22 f303 	lsr.w	r3, r2, r3
 8010172:	4a09      	ldr	r2, [pc, #36]	; (8010198 <HAL_RCC_ClockConfig+0x1cc>)
 8010174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8010176:	4b09      	ldr	r3, [pc, #36]	; (801019c <HAL_RCC_ClockConfig+0x1d0>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe fc5c 	bl	800ea38 <HAL_InitTick>

  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	40022000 	.word	0x40022000
 8010190:	40021000 	.word	0x40021000
 8010194:	08012144 	.word	0x08012144
 8010198:	2000017c 	.word	0x2000017c
 801019c:	20000180 	.word	0x20000180

080101a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80101a0:	b490      	push	{r4, r7}
 80101a2:	b08a      	sub	sp, #40	; 0x28
 80101a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80101a6:	4b29      	ldr	r3, [pc, #164]	; (801024c <HAL_RCC_GetSysClockFreq+0xac>)
 80101a8:	1d3c      	adds	r4, r7, #4
 80101aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80101b0:	f240 2301 	movw	r3, #513	; 0x201
 80101b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80101b6:	2300      	movs	r3, #0
 80101b8:	61fb      	str	r3, [r7, #28]
 80101ba:	2300      	movs	r3, #0
 80101bc:	61bb      	str	r3, [r7, #24]
 80101be:	2300      	movs	r3, #0
 80101c0:	627b      	str	r3, [r7, #36]	; 0x24
 80101c2:	2300      	movs	r3, #0
 80101c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80101c6:	2300      	movs	r3, #0
 80101c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80101ca:	4b21      	ldr	r3, [pc, #132]	; (8010250 <HAL_RCC_GetSysClockFreq+0xb0>)
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	f003 030c 	and.w	r3, r3, #12
 80101d6:	2b04      	cmp	r3, #4
 80101d8:	d002      	beq.n	80101e0 <HAL_RCC_GetSysClockFreq+0x40>
 80101da:	2b08      	cmp	r3, #8
 80101dc:	d003      	beq.n	80101e6 <HAL_RCC_GetSysClockFreq+0x46>
 80101de:	e02b      	b.n	8010238 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80101e0:	4b1c      	ldr	r3, [pc, #112]	; (8010254 <HAL_RCC_GetSysClockFreq+0xb4>)
 80101e2:	623b      	str	r3, [r7, #32]
      break;
 80101e4:	e02b      	b.n	801023e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	0c9b      	lsrs	r3, r3, #18
 80101ea:	f003 030f 	and.w	r3, r3, #15
 80101ee:	3328      	adds	r3, #40	; 0x28
 80101f0:	443b      	add	r3, r7
 80101f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80101f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d012      	beq.n	8010228 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8010202:	4b13      	ldr	r3, [pc, #76]	; (8010250 <HAL_RCC_GetSysClockFreq+0xb0>)
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	0c5b      	lsrs	r3, r3, #17
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	3328      	adds	r3, #40	; 0x28
 801020e:	443b      	add	r3, r7
 8010210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010214:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	4a0e      	ldr	r2, [pc, #56]	; (8010254 <HAL_RCC_GetSysClockFreq+0xb4>)
 801021a:	fb03 f202 	mul.w	r2, r3, r2
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	fbb2 f3f3 	udiv	r3, r2, r3
 8010224:	627b      	str	r3, [r7, #36]	; 0x24
 8010226:	e004      	b.n	8010232 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	4a0b      	ldr	r2, [pc, #44]	; (8010258 <HAL_RCC_GetSysClockFreq+0xb8>)
 801022c:	fb02 f303 	mul.w	r3, r2, r3
 8010230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8010232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010234:	623b      	str	r3, [r7, #32]
      break;
 8010236:	e002      	b.n	801023e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8010238:	4b06      	ldr	r3, [pc, #24]	; (8010254 <HAL_RCC_GetSysClockFreq+0xb4>)
 801023a:	623b      	str	r3, [r7, #32]
      break;
 801023c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801023e:	6a3b      	ldr	r3, [r7, #32]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3728      	adds	r7, #40	; 0x28
 8010244:	46bd      	mov	sp, r7
 8010246:	bc90      	pop	{r4, r7}
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	08012134 	.word	0x08012134
 8010250:	40021000 	.word	0x40021000
 8010254:	007a1200 	.word	0x007a1200
 8010258:	003d0900 	.word	0x003d0900

0801025c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801025c:	b480      	push	{r7}
 801025e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010260:	4b02      	ldr	r3, [pc, #8]	; (801026c <HAL_RCC_GetHCLKFreq+0x10>)
 8010262:	681b      	ldr	r3, [r3, #0]
}
 8010264:	4618      	mov	r0, r3
 8010266:	46bd      	mov	sp, r7
 8010268:	bc80      	pop	{r7}
 801026a:	4770      	bx	lr
 801026c:	2000017c 	.word	0x2000017c

08010270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010274:	f7ff fff2 	bl	801025c <HAL_RCC_GetHCLKFreq>
 8010278:	4602      	mov	r2, r0
 801027a:	4b05      	ldr	r3, [pc, #20]	; (8010290 <HAL_RCC_GetPCLK1Freq+0x20>)
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	0a1b      	lsrs	r3, r3, #8
 8010280:	f003 0307 	and.w	r3, r3, #7
 8010284:	4903      	ldr	r1, [pc, #12]	; (8010294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010286:	5ccb      	ldrb	r3, [r1, r3]
 8010288:	fa22 f303 	lsr.w	r3, r2, r3
}
 801028c:	4618      	mov	r0, r3
 801028e:	bd80      	pop	{r7, pc}
 8010290:	40021000 	.word	0x40021000
 8010294:	08012154 	.word	0x08012154

08010298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801029c:	f7ff ffde 	bl	801025c <HAL_RCC_GetHCLKFreq>
 80102a0:	4602      	mov	r2, r0
 80102a2:	4b05      	ldr	r3, [pc, #20]	; (80102b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	0adb      	lsrs	r3, r3, #11
 80102a8:	f003 0307 	and.w	r3, r3, #7
 80102ac:	4903      	ldr	r1, [pc, #12]	; (80102bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80102ae:	5ccb      	ldrb	r3, [r1, r3]
 80102b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	40021000 	.word	0x40021000
 80102bc:	08012154 	.word	0x08012154

080102c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80102c8:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <RCC_Delay+0x34>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a0a      	ldr	r2, [pc, #40]	; (80102f8 <RCC_Delay+0x38>)
 80102ce:	fba2 2303 	umull	r2, r3, r2, r3
 80102d2:	0a5b      	lsrs	r3, r3, #9
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	fb02 f303 	mul.w	r3, r2, r3
 80102da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80102dc:	bf00      	nop
  }
  while (Delay --);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	1e5a      	subs	r2, r3, #1
 80102e2:	60fa      	str	r2, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1f9      	bne.n	80102dc <RCC_Delay+0x1c>
}
 80102e8:	bf00      	nop
 80102ea:	bf00      	nop
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bc80      	pop	{r7}
 80102f2:	4770      	bx	lr
 80102f4:	2000017c 	.word	0x2000017c
 80102f8:	10624dd3 	.word	0x10624dd3

080102fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d101      	bne.n	801030e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801030a:	2301      	movs	r3, #1
 801030c:	e076      	b.n	80103fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010312:	2b00      	cmp	r3, #0
 8010314:	d108      	bne.n	8010328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801031e:	d009      	beq.n	8010334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	61da      	str	r2, [r3, #28]
 8010326:	e005      	b.n	8010334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2200      	movs	r2, #0
 801032c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2200      	movs	r2, #0
 8010332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d106      	bne.n	8010354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7fe f966 	bl	800e620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2202      	movs	r2, #2
 8010358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801036a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801037c:	431a      	orrs	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010386:	431a      	orrs	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	f003 0302 	and.w	r3, r3, #2
 8010390:	431a      	orrs	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	695b      	ldr	r3, [r3, #20]
 8010396:	f003 0301 	and.w	r3, r3, #1
 801039a:	431a      	orrs	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	699b      	ldr	r3, [r3, #24]
 80103a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103a4:	431a      	orrs	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	69db      	ldr	r3, [r3, #28]
 80103aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80103ae:	431a      	orrs	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6a1b      	ldr	r3, [r3, #32]
 80103b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103b8:	ea42 0103 	orr.w	r1, r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	430a      	orrs	r2, r1
 80103ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	699b      	ldr	r3, [r3, #24]
 80103d0:	0c1a      	lsrs	r2, r3, #16
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f002 0204 	and.w	r2, r2, #4
 80103da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	69da      	ldr	r2, [r3, #28]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80103ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b08c      	sub	sp, #48	; 0x30
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010412:	2301      	movs	r3, #1
 8010414:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010416:	2300      	movs	r3, #0
 8010418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010422:	2b01      	cmp	r3, #1
 8010424:	d101      	bne.n	801042a <HAL_SPI_TransmitReceive+0x26>
 8010426:	2302      	movs	r3, #2
 8010428:	e18a      	b.n	8010740 <HAL_SPI_TransmitReceive+0x33c>
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010432:	f7fe fb43 	bl	800eabc <HAL_GetTick>
 8010436:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801043e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010448:	887b      	ldrh	r3, [r7, #2]
 801044a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801044c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010450:	2b01      	cmp	r3, #1
 8010452:	d00f      	beq.n	8010474 <HAL_SPI_TransmitReceive+0x70>
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801045a:	d107      	bne.n	801046c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d103      	bne.n	801046c <HAL_SPI_TransmitReceive+0x68>
 8010464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010468:	2b04      	cmp	r3, #4
 801046a:	d003      	beq.n	8010474 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801046c:	2302      	movs	r3, #2
 801046e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010472:	e15b      	b.n	801072c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d005      	beq.n	8010486 <HAL_SPI_TransmitReceive+0x82>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <HAL_SPI_TransmitReceive+0x82>
 8010480:	887b      	ldrh	r3, [r7, #2]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d103      	bne.n	801048e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010486:	2301      	movs	r3, #1
 8010488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801048c:	e14e      	b.n	801072c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010494:	b2db      	uxtb	r3, r3
 8010496:	2b04      	cmp	r3, #4
 8010498:	d003      	beq.n	80104a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2205      	movs	r2, #5
 801049e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2200      	movs	r2, #0
 80104a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	887a      	ldrh	r2, [r7, #2]
 80104b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	887a      	ldrh	r2, [r7, #2]
 80104b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	887a      	ldrh	r2, [r7, #2]
 80104c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	887a      	ldrh	r2, [r7, #2]
 80104ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2200      	movs	r2, #0
 80104d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2200      	movs	r2, #0
 80104d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104e2:	2b40      	cmp	r3, #64	; 0x40
 80104e4:	d007      	beq.n	80104f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80104f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104fe:	d178      	bne.n	80105f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d002      	beq.n	801050e <HAL_SPI_TransmitReceive+0x10a>
 8010508:	8b7b      	ldrh	r3, [r7, #26]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d166      	bne.n	80105dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010512:	881a      	ldrh	r2, [r3, #0]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051e:	1c9a      	adds	r2, r3, #2
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010528:	b29b      	uxth	r3, r3
 801052a:	3b01      	subs	r3, #1
 801052c:	b29a      	uxth	r2, r3
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010532:	e053      	b.n	80105dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	f003 0302 	and.w	r3, r3, #2
 801053e:	2b02      	cmp	r3, #2
 8010540:	d11b      	bne.n	801057a <HAL_SPI_TransmitReceive+0x176>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010546:	b29b      	uxth	r3, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	d016      	beq.n	801057a <HAL_SPI_TransmitReceive+0x176>
 801054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054e:	2b01      	cmp	r3, #1
 8010550:	d113      	bne.n	801057a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010556:	881a      	ldrh	r2, [r3, #0]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010562:	1c9a      	adds	r2, r3, #2
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801056c:	b29b      	uxth	r3, r3
 801056e:	3b01      	subs	r3, #1
 8010570:	b29a      	uxth	r2, r3
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010576:	2300      	movs	r3, #0
 8010578:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	f003 0301 	and.w	r3, r3, #1
 8010584:	2b01      	cmp	r3, #1
 8010586:	d119      	bne.n	80105bc <HAL_SPI_TransmitReceive+0x1b8>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801058c:	b29b      	uxth	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	d014      	beq.n	80105bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68da      	ldr	r2, [r3, #12]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059c:	b292      	uxth	r2, r2
 801059e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a4:	1c9a      	adds	r2, r3, #2
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	3b01      	subs	r3, #1
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80105b8:	2301      	movs	r3, #1
 80105ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80105bc:	f7fe fa7e 	bl	800eabc <HAL_GetTick>
 80105c0:	4602      	mov	r2, r0
 80105c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d807      	bhi.n	80105dc <HAL_SPI_TransmitReceive+0x1d8>
 80105cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d2:	d003      	beq.n	80105dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80105d4:	2303      	movs	r3, #3
 80105d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80105da:	e0a7      	b.n	801072c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d1a6      	bne.n	8010534 <HAL_SPI_TransmitReceive+0x130>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1a1      	bne.n	8010534 <HAL_SPI_TransmitReceive+0x130>
 80105f0:	e07c      	b.n	80106ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <HAL_SPI_TransmitReceive+0x1fc>
 80105fa:	8b7b      	ldrh	r3, [r7, #26]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d16b      	bne.n	80106d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	330c      	adds	r3, #12
 801060a:	7812      	ldrb	r2, [r2, #0]
 801060c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010612:	1c5a      	adds	r2, r3, #1
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801061c:	b29b      	uxth	r3, r3
 801061e:	3b01      	subs	r3, #1
 8010620:	b29a      	uxth	r2, r3
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010626:	e057      	b.n	80106d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	689b      	ldr	r3, [r3, #8]
 801062e:	f003 0302 	and.w	r3, r3, #2
 8010632:	2b02      	cmp	r3, #2
 8010634:	d11c      	bne.n	8010670 <HAL_SPI_TransmitReceive+0x26c>
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801063a:	b29b      	uxth	r3, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	d017      	beq.n	8010670 <HAL_SPI_TransmitReceive+0x26c>
 8010640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010642:	2b01      	cmp	r3, #1
 8010644:	d114      	bne.n	8010670 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	330c      	adds	r3, #12
 8010650:	7812      	ldrb	r2, [r2, #0]
 8010652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010658:	1c5a      	adds	r2, r3, #1
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010662:	b29b      	uxth	r3, r3
 8010664:	3b01      	subs	r3, #1
 8010666:	b29a      	uxth	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801066c:	2300      	movs	r3, #0
 801066e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	689b      	ldr	r3, [r3, #8]
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b01      	cmp	r3, #1
 801067c:	d119      	bne.n	80106b2 <HAL_SPI_TransmitReceive+0x2ae>
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010682:	b29b      	uxth	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d014      	beq.n	80106b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68da      	ldr	r2, [r3, #12]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010692:	b2d2      	uxtb	r2, r2
 8010694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801069a:	1c5a      	adds	r2, r3, #1
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	3b01      	subs	r3, #1
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80106ae:	2301      	movs	r3, #1
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80106b2:	f7fe fa03 	bl	800eabc <HAL_GetTick>
 80106b6:	4602      	mov	r2, r0
 80106b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ba:	1ad3      	subs	r3, r2, r3
 80106bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106be:	429a      	cmp	r2, r3
 80106c0:	d803      	bhi.n	80106ca <HAL_SPI_TransmitReceive+0x2c6>
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c8:	d102      	bne.n	80106d0 <HAL_SPI_TransmitReceive+0x2cc>
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d103      	bne.n	80106d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80106d0:	2303      	movs	r3, #3
 80106d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80106d6:	e029      	b.n	801072c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106dc:	b29b      	uxth	r3, r3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1a2      	bne.n	8010628 <HAL_SPI_TransmitReceive+0x224>
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d19d      	bne.n	8010628 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80106ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f000 f8b1 	bl	8010858 <SPI_EndRxTxTransaction>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d006      	beq.n	801070a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80106fc:	2301      	movs	r3, #1
 80106fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2220      	movs	r2, #32
 8010706:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010708:	e010      	b.n	801072c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d10b      	bne.n	801072a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010712:	2300      	movs	r3, #0
 8010714:	617b      	str	r3, [r7, #20]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	617b      	str	r3, [r7, #20]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	617b      	str	r3, [r7, #20]
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	e000      	b.n	801072c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801072a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2201      	movs	r2, #1
 8010730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801073c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010740:	4618      	mov	r0, r3
 8010742:	3730      	adds	r7, #48	; 0x30
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b088      	sub	sp, #32
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	4613      	mov	r3, r2
 8010756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010758:	f7fe f9b0 	bl	800eabc <HAL_GetTick>
 801075c:	4602      	mov	r2, r0
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	1a9b      	subs	r3, r3, r2
 8010762:	683a      	ldr	r2, [r7, #0]
 8010764:	4413      	add	r3, r2
 8010766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010768:	f7fe f9a8 	bl	800eabc <HAL_GetTick>
 801076c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801076e:	4b39      	ldr	r3, [pc, #228]	; (8010854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	015b      	lsls	r3, r3, #5
 8010774:	0d1b      	lsrs	r3, r3, #20
 8010776:	69fa      	ldr	r2, [r7, #28]
 8010778:	fb02 f303 	mul.w	r3, r2, r3
 801077c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801077e:	e054      	b.n	801082a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010786:	d050      	beq.n	801082a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010788:	f7fe f998 	bl	800eabc <HAL_GetTick>
 801078c:	4602      	mov	r2, r0
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	69fa      	ldr	r2, [r7, #28]
 8010794:	429a      	cmp	r2, r3
 8010796:	d902      	bls.n	801079e <SPI_WaitFlagStateUntilTimeout+0x56>
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d13d      	bne.n	801081a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	685a      	ldr	r2, [r3, #4]
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80107ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80107b6:	d111      	bne.n	80107dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107c0:	d004      	beq.n	80107cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	689b      	ldr	r3, [r3, #8]
 80107c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80107ca:	d107      	bne.n	80107dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80107e4:	d10f      	bne.n	8010806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80107f4:	601a      	str	r2, [r3, #0]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2201      	movs	r2, #1
 801080a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2200      	movs	r2, #0
 8010812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010816:	2303      	movs	r3, #3
 8010818:	e017      	b.n	801084a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d101      	bne.n	8010824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010820:	2300      	movs	r3, #0
 8010822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	3b01      	subs	r3, #1
 8010828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	689a      	ldr	r2, [r3, #8]
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	4013      	ands	r3, r2
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	429a      	cmp	r2, r3
 8010838:	bf0c      	ite	eq
 801083a:	2301      	moveq	r3, #1
 801083c:	2300      	movne	r3, #0
 801083e:	b2db      	uxtb	r3, r3
 8010840:	461a      	mov	r2, r3
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	429a      	cmp	r2, r3
 8010846:	d19b      	bne.n	8010780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	3720      	adds	r7, #32
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	2000017c 	.word	0x2000017c

08010858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af02      	add	r7, sp, #8
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2200      	movs	r2, #0
 801086c:	2180      	movs	r1, #128	; 0x80
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f7ff ff6a 	bl	8010748 <SPI_WaitFlagStateUntilTimeout>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d007      	beq.n	801088a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801087e:	f043 0220 	orr.w	r2, r3, #32
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8010886:	2303      	movs	r3, #3
 8010888:	e000      	b.n	801088c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	e03f      	b.n	8010926 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d106      	bne.n	80108c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f7fd fefa 	bl	800e6b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2224      	movs	r2, #36	; 0x24
 80108c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68da      	ldr	r2, [r3, #12]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80108d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fd27 	bl	801132c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	691a      	ldr	r2, [r3, #16]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80108ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	695a      	ldr	r2, [r3, #20]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80108fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	68da      	ldr	r2, [r3, #12]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801090c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2200      	movs	r2, #0
 8010912:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2220      	movs	r2, #32
 8010918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2220      	movs	r2, #32
 8010920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b08a      	sub	sp, #40	; 0x28
 8010932:	af02      	add	r7, sp, #8
 8010934:	60f8      	str	r0, [r7, #12]
 8010936:	60b9      	str	r1, [r7, #8]
 8010938:	603b      	str	r3, [r7, #0]
 801093a:	4613      	mov	r3, r2
 801093c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801093e:	2300      	movs	r3, #0
 8010940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b20      	cmp	r3, #32
 801094c:	d17c      	bne.n	8010a48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d002      	beq.n	801095a <HAL_UART_Transmit+0x2c>
 8010954:	88fb      	ldrh	r3, [r7, #6]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d101      	bne.n	801095e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801095a:	2301      	movs	r3, #1
 801095c:	e075      	b.n	8010a4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010964:	2b01      	cmp	r3, #1
 8010966:	d101      	bne.n	801096c <HAL_UART_Transmit+0x3e>
 8010968:	2302      	movs	r3, #2
 801096a:	e06e      	b.n	8010a4a <HAL_UART_Transmit+0x11c>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2201      	movs	r2, #1
 8010970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2200      	movs	r2, #0
 8010978:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2221      	movs	r2, #33	; 0x21
 801097e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010982:	f7fe f89b 	bl	800eabc <HAL_GetTick>
 8010986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	88fa      	ldrh	r2, [r7, #6]
 801098c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	88fa      	ldrh	r2, [r7, #6]
 8010992:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801099c:	d108      	bne.n	80109b0 <HAL_UART_Transmit+0x82>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	691b      	ldr	r3, [r3, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d104      	bne.n	80109b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80109a6:	2300      	movs	r3, #0
 80109a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	61bb      	str	r3, [r7, #24]
 80109ae:	e003      	b.n	80109b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80109b4:	2300      	movs	r3, #0
 80109b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80109c0:	e02a      	b.n	8010a18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	2200      	movs	r2, #0
 80109ca:	2180      	movs	r1, #128	; 0x80
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f000 fada 	bl	8010f86 <UART_WaitOnFlagUntilTimeout>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80109d8:	2303      	movs	r3, #3
 80109da:	e036      	b.n	8010a4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d10b      	bne.n	80109fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	461a      	mov	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80109f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80109f2:	69bb      	ldr	r3, [r7, #24]
 80109f4:	3302      	adds	r3, #2
 80109f6:	61bb      	str	r3, [r7, #24]
 80109f8:	e007      	b.n	8010a0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	781a      	ldrb	r2, [r3, #0]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	3301      	adds	r3, #1
 8010a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	3b01      	subs	r3, #1
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d1cf      	bne.n	80109c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2140      	movs	r1, #64	; 0x40
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f000 faaa 	bl	8010f86 <UART_WaitOnFlagUntilTimeout>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d001      	beq.n	8010a3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010a38:	2303      	movs	r3, #3
 8010a3a:	e006      	b.n	8010a4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2220      	movs	r2, #32
 8010a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	e000      	b.n	8010a4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010a48:	2302      	movs	r3, #2
  }
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3720      	adds	r7, #32
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b08a      	sub	sp, #40	; 0x28
 8010a56:	af02      	add	r7, sp, #8
 8010a58:	60f8      	str	r0, [r7, #12]
 8010a5a:	60b9      	str	r1, [r7, #8]
 8010a5c:	603b      	str	r3, [r7, #0]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010a62:	2300      	movs	r3, #0
 8010a64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	2b20      	cmp	r3, #32
 8010a70:	f040 808c 	bne.w	8010b8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d002      	beq.n	8010a80 <HAL_UART_Receive+0x2e>
 8010a7a:	88fb      	ldrh	r3, [r7, #6]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d101      	bne.n	8010a84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8010a80:	2301      	movs	r3, #1
 8010a82:	e084      	b.n	8010b8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d101      	bne.n	8010a92 <HAL_UART_Receive+0x40>
 8010a8e:	2302      	movs	r3, #2
 8010a90:	e07d      	b.n	8010b8e <HAL_UART_Receive+0x13c>
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2201      	movs	r2, #1
 8010a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2222      	movs	r2, #34	; 0x22
 8010aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010aae:	f7fe f805 	bl	800eabc <HAL_GetTick>
 8010ab2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	88fa      	ldrh	r2, [r7, #6]
 8010ab8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	88fa      	ldrh	r2, [r7, #6]
 8010abe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ac8:	d108      	bne.n	8010adc <HAL_UART_Receive+0x8a>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d104      	bne.n	8010adc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	61bb      	str	r3, [r7, #24]
 8010ada:	e003      	b.n	8010ae4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8010aec:	e043      	b.n	8010b76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	2200      	movs	r2, #0
 8010af6:	2120      	movs	r1, #32
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	f000 fa44 	bl	8010f86 <UART_WaitOnFlagUntilTimeout>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8010b04:	2303      	movs	r3, #3
 8010b06:	e042      	b.n	8010b8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10c      	bne.n	8010b28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	3302      	adds	r3, #2
 8010b24:	61bb      	str	r3, [r7, #24]
 8010b26:	e01f      	b.n	8010b68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b30:	d007      	beq.n	8010b42 <HAL_UART_Receive+0xf0>
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	689b      	ldr	r3, [r3, #8]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10a      	bne.n	8010b50 <HAL_UART_Receive+0xfe>
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	691b      	ldr	r3, [r3, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	701a      	strb	r2, [r3, #0]
 8010b4e:	e008      	b.n	8010b62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b5c:	b2da      	uxtb	r2, r3
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	3301      	adds	r3, #1
 8010b66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1b6      	bne.n	8010aee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2220      	movs	r2, #32
 8010b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	e000      	b.n	8010b8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8010b8c:	2302      	movs	r3, #2
  }
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3720      	adds	r7, #32
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}

08010b96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b084      	sub	sp, #16
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	60f8      	str	r0, [r7, #12]
 8010b9e:	60b9      	str	r1, [r7, #8]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b20      	cmp	r3, #32
 8010bae:	d11d      	bne.n	8010bec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d002      	beq.n	8010bbc <HAL_UART_Receive_IT+0x26>
 8010bb6:	88fb      	ldrh	r3, [r7, #6]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d101      	bne.n	8010bc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e016      	b.n	8010bee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d101      	bne.n	8010bce <HAL_UART_Receive_IT+0x38>
 8010bca:	2302      	movs	r3, #2
 8010bcc:	e00f      	b.n	8010bee <HAL_UART_Receive_IT+0x58>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8010bdc:	88fb      	ldrh	r3, [r7, #6]
 8010bde:	461a      	mov	r2, r3
 8010be0:	68b9      	ldr	r1, [r7, #8]
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f000 fa19 	bl	801101a <UART_Start_Receive_IT>
 8010be8:	4603      	mov	r3, r0
 8010bea:	e000      	b.n	8010bee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010bec:	2302      	movs	r3, #2
  }
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
	...

08010bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08a      	sub	sp, #40	; 0x28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	695b      	ldr	r3, [r3, #20]
 8010c16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	f003 030f 	and.w	r3, r3, #15
 8010c26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d10d      	bne.n	8010c4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	f003 0320 	and.w	r3, r3, #32
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d008      	beq.n	8010c4a <HAL_UART_IRQHandler+0x52>
 8010c38:	6a3b      	ldr	r3, [r7, #32]
 8010c3a:	f003 0320 	and.w	r3, r3, #32
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d003      	beq.n	8010c4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fac9 	bl	80111da <UART_Receive_IT>
      return;
 8010c48:	e17b      	b.n	8010f42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f000 80b1 	beq.w	8010db4 <HAL_UART_IRQHandler+0x1bc>
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d105      	bne.n	8010c68 <HAL_UART_IRQHandler+0x70>
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f000 80a6 	beq.w	8010db4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00a      	beq.n	8010c88 <HAL_UART_IRQHandler+0x90>
 8010c72:	6a3b      	ldr	r3, [r7, #32]
 8010c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d005      	beq.n	8010c88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c80:	f043 0201 	orr.w	r2, r3, #1
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8a:	f003 0304 	and.w	r3, r3, #4
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00a      	beq.n	8010ca8 <HAL_UART_IRQHandler+0xb0>
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	f003 0301 	and.w	r3, r3, #1
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d005      	beq.n	8010ca8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ca0:	f043 0202 	orr.w	r2, r3, #2
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00a      	beq.n	8010cc8 <HAL_UART_IRQHandler+0xd0>
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	f003 0301 	and.w	r3, r3, #1
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d005      	beq.n	8010cc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc0:	f043 0204 	orr.w	r2, r3, #4
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cca:	f003 0308 	and.w	r3, r3, #8
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d00f      	beq.n	8010cf2 <HAL_UART_IRQHandler+0xfa>
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	f003 0320 	and.w	r3, r3, #32
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d104      	bne.n	8010ce6 <HAL_UART_IRQHandler+0xee>
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	f003 0301 	and.w	r3, r3, #1
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d005      	beq.n	8010cf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cea:	f043 0208 	orr.w	r2, r3, #8
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f000 811e 	beq.w	8010f38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfe:	f003 0320 	and.w	r3, r3, #32
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d007      	beq.n	8010d16 <HAL_UART_IRQHandler+0x11e>
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	f003 0320 	and.w	r3, r3, #32
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 fa62 	bl	80111da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	695b      	ldr	r3, [r3, #20]
 8010d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bf14      	ite	ne
 8010d24:	2301      	movne	r3, #1
 8010d26:	2300      	moveq	r3, #0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d30:	f003 0308 	and.w	r3, r3, #8
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d102      	bne.n	8010d3e <HAL_UART_IRQHandler+0x146>
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d031      	beq.n	8010da2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 f9a4 	bl	801108c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	695b      	ldr	r3, [r3, #20]
 8010d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d023      	beq.n	8010d9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	695a      	ldr	r2, [r3, #20]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d013      	beq.n	8010d92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d6e:	4a76      	ldr	r2, [pc, #472]	; (8010f48 <HAL_UART_IRQHandler+0x350>)
 8010d70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fe f830 	bl	800eddc <HAL_DMA_Abort_IT>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d016      	beq.n	8010db0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010d8c:	4610      	mov	r0, r2
 8010d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d90:	e00e      	b.n	8010db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 f8e3 	bl	8010f5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d98:	e00a      	b.n	8010db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 f8df 	bl	8010f5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010da0:	e006      	b.n	8010db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f000 f8db 	bl	8010f5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2200      	movs	r2, #0
 8010dac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010dae:	e0c3      	b.n	8010f38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010db0:	bf00      	nop
    return;
 8010db2:	e0c1      	b.n	8010f38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	f040 80a1 	bne.w	8010f00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc0:	f003 0310 	and.w	r3, r3, #16
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 809b 	beq.w	8010f00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8010dca:	6a3b      	ldr	r3, [r7, #32]
 8010dcc:	f003 0310 	and.w	r3, r3, #16
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 8095 	beq.w	8010f00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	60fb      	str	r3, [r7, #12]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	60fb      	str	r3, [r7, #12]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	60fb      	str	r3, [r7, #12]
 8010dea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	695b      	ldr	r3, [r3, #20]
 8010df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d04e      	beq.n	8010e98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8010e04:	8a3b      	ldrh	r3, [r7, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f000 8098 	beq.w	8010f3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e10:	8a3a      	ldrh	r2, [r7, #16]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	f080 8092 	bcs.w	8010f3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	8a3a      	ldrh	r2, [r7, #16]
 8010e1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e22:	699b      	ldr	r3, [r3, #24]
 8010e24:	2b20      	cmp	r3, #32
 8010e26:	d02b      	beq.n	8010e80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	68da      	ldr	r2, [r3, #12]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	695a      	ldr	r2, [r3, #20]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f022 0201 	bic.w	r2, r2, #1
 8010e46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	695a      	ldr	r2, [r3, #20]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2220      	movs	r2, #32
 8010e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	68da      	ldr	r2, [r3, #12]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f022 0210 	bic.w	r2, r2, #16
 8010e74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fd ff73 	bl	800ed66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f86d 	bl	8010f70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010e96:	e051      	b.n	8010f3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	1ad3      	subs	r3, r2, r3
 8010ea4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d047      	beq.n	8010f40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8010eb0:	8a7b      	ldrh	r3, [r7, #18]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d044      	beq.n	8010f40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68da      	ldr	r2, [r3, #12]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010ec4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	695a      	ldr	r2, [r3, #20]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f022 0201 	bic.w	r2, r2, #1
 8010ed4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2220      	movs	r2, #32
 8010eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	68da      	ldr	r2, [r3, #12]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f022 0210 	bic.w	r2, r2, #16
 8010ef2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010ef4:	8a7b      	ldrh	r3, [r7, #18]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 f839 	bl	8010f70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010efe:	e01f      	b.n	8010f40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d008      	beq.n	8010f1c <HAL_UART_IRQHandler+0x324>
 8010f0a:	6a3b      	ldr	r3, [r7, #32]
 8010f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d003      	beq.n	8010f1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 f8f9 	bl	801110c <UART_Transmit_IT>
    return;
 8010f1a:	e012      	b.n	8010f42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00d      	beq.n	8010f42 <HAL_UART_IRQHandler+0x34a>
 8010f26:	6a3b      	ldr	r3, [r7, #32]
 8010f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d008      	beq.n	8010f42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 f93a 	bl	80111aa <UART_EndTransmit_IT>
    return;
 8010f36:	e004      	b.n	8010f42 <HAL_UART_IRQHandler+0x34a>
    return;
 8010f38:	bf00      	nop
 8010f3a:	e002      	b.n	8010f42 <HAL_UART_IRQHandler+0x34a>
      return;
 8010f3c:	bf00      	nop
 8010f3e:	e000      	b.n	8010f42 <HAL_UART_IRQHandler+0x34a>
      return;
 8010f40:	bf00      	nop
  }
}
 8010f42:	3728      	adds	r7, #40	; 0x28
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	080110e5 	.word	0x080110e5

08010f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010f54:	bf00      	nop
 8010f56:	370c      	adds	r7, #12
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bc80      	pop	{r7}
 8010f5c:	4770      	bx	lr

08010f5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010f66:	bf00      	nop
 8010f68:	370c      	adds	r7, #12
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bc80      	pop	{r7}
 8010f6e:	4770      	bx	lr

08010f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f7c:	bf00      	nop
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bc80      	pop	{r7}
 8010f84:	4770      	bx	lr

08010f86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b084      	sub	sp, #16
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	60f8      	str	r0, [r7, #12]
 8010f8e:	60b9      	str	r1, [r7, #8]
 8010f90:	603b      	str	r3, [r7, #0]
 8010f92:	4613      	mov	r3, r2
 8010f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f96:	e02c      	b.n	8010ff2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f9e:	d028      	beq.n	8010ff2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d007      	beq.n	8010fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8010fa6:	f7fd fd89 	bl	800eabc <HAL_GetTick>
 8010faa:	4602      	mov	r2, r0
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	69ba      	ldr	r2, [r7, #24]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d21d      	bcs.n	8010ff2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	68da      	ldr	r2, [r3, #12]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010fc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	695a      	ldr	r2, [r3, #20]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f022 0201 	bic.w	r2, r2, #1
 8010fd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2220      	movs	r2, #32
 8010fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2220      	movs	r2, #32
 8010fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010fee:	2303      	movs	r3, #3
 8010ff0:	e00f      	b.n	8011012 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	4013      	ands	r3, r2
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	bf0c      	ite	eq
 8011002:	2301      	moveq	r3, #1
 8011004:	2300      	movne	r3, #0
 8011006:	b2db      	uxtb	r3, r3
 8011008:	461a      	mov	r2, r3
 801100a:	79fb      	ldrb	r3, [r7, #7]
 801100c:	429a      	cmp	r2, r3
 801100e:	d0c3      	beq.n	8010f98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801101a:	b480      	push	{r7}
 801101c:	b085      	sub	sp, #20
 801101e:	af00      	add	r7, sp, #0
 8011020:	60f8      	str	r0, [r7, #12]
 8011022:	60b9      	str	r1, [r7, #8]
 8011024:	4613      	mov	r3, r2
 8011026:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	88fa      	ldrh	r2, [r7, #6]
 8011032:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	88fa      	ldrh	r2, [r7, #6]
 8011038:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2200      	movs	r2, #0
 801103e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2222      	movs	r2, #34	; 0x22
 8011044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2200      	movs	r2, #0
 801104c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	68da      	ldr	r2, [r3, #12]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801105e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	695a      	ldr	r2, [r3, #20]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f042 0201 	orr.w	r2, r2, #1
 801106e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	68da      	ldr	r2, [r3, #12]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f042 0220 	orr.w	r2, r2, #32
 801107e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011080:	2300      	movs	r3, #0
}
 8011082:	4618      	mov	r0, r3
 8011084:	3714      	adds	r7, #20
 8011086:	46bd      	mov	sp, r7
 8011088:	bc80      	pop	{r7}
 801108a:	4770      	bx	lr

0801108c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	68da      	ldr	r2, [r3, #12]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80110a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	695a      	ldr	r2, [r3, #20]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f022 0201 	bic.w	r2, r2, #1
 80110b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d107      	bne.n	80110cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68da      	ldr	r2, [r3, #12]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f022 0210 	bic.w	r2, r2, #16
 80110ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2220      	movs	r2, #32
 80110d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80110da:	bf00      	nop
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	bc80      	pop	{r7}
 80110e2:	4770      	bx	lr

080110e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2200      	movs	r2, #0
 80110f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2200      	movs	r2, #0
 80110fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f7ff ff2d 	bl	8010f5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011104:	bf00      	nop
 8011106:	3710      	adds	r7, #16
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801110c:	b480      	push	{r7}
 801110e:	b085      	sub	sp, #20
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801111a:	b2db      	uxtb	r3, r3
 801111c:	2b21      	cmp	r3, #33	; 0x21
 801111e:	d13e      	bne.n	801119e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011128:	d114      	bne.n	8011154 <UART_Transmit_IT+0x48>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d110      	bne.n	8011154 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6a1b      	ldr	r3, [r3, #32]
 8011136:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	461a      	mov	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011146:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6a1b      	ldr	r3, [r3, #32]
 801114c:	1c9a      	adds	r2, r3, #2
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	621a      	str	r2, [r3, #32]
 8011152:	e008      	b.n	8011166 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6a1b      	ldr	r3, [r3, #32]
 8011158:	1c59      	adds	r1, r3, #1
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	6211      	str	r1, [r2, #32]
 801115e:	781a      	ldrb	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801116a:	b29b      	uxth	r3, r3
 801116c:	3b01      	subs	r3, #1
 801116e:	b29b      	uxth	r3, r3
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	4619      	mov	r1, r3
 8011174:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011176:	2b00      	cmp	r3, #0
 8011178:	d10f      	bne.n	801119a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68da      	ldr	r2, [r3, #12]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011188:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	68da      	ldr	r2, [r3, #12]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011198:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801119a:	2300      	movs	r3, #0
 801119c:	e000      	b.n	80111a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801119e:	2302      	movs	r3, #2
  }
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3714      	adds	r7, #20
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bc80      	pop	{r7}
 80111a8:	4770      	bx	lr

080111aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b082      	sub	sp, #8
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	68da      	ldr	r2, [r3, #12]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2220      	movs	r2, #32
 80111c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7ff febe 	bl	8010f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b086      	sub	sp, #24
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	2b22      	cmp	r3, #34	; 0x22
 80111ec:	f040 8099 	bne.w	8011322 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111f8:	d117      	bne.n	801122a <UART_Receive_IT+0x50>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	691b      	ldr	r3, [r3, #16]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d113      	bne.n	801122a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011202:	2300      	movs	r3, #0
 8011204:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	b29b      	uxth	r3, r3
 8011214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011218:	b29a      	uxth	r2, r3
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011222:	1c9a      	adds	r2, r3, #2
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	629a      	str	r2, [r3, #40]	; 0x28
 8011228:	e026      	b.n	8011278 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801122e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8011230:	2300      	movs	r3, #0
 8011232:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801123c:	d007      	beq.n	801124e <UART_Receive_IT+0x74>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d10a      	bne.n	801125c <UART_Receive_IT+0x82>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	691b      	ldr	r3, [r3, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d106      	bne.n	801125c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	b2da      	uxtb	r2, r3
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	701a      	strb	r2, [r3, #0]
 801125a:	e008      	b.n	801126e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	b2db      	uxtb	r3, r3
 8011264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011268:	b2da      	uxtb	r2, r3
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011272:	1c5a      	adds	r2, r3, #1
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801127c:	b29b      	uxth	r3, r3
 801127e:	3b01      	subs	r3, #1
 8011280:	b29b      	uxth	r3, r3
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	4619      	mov	r1, r3
 8011286:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011288:	2b00      	cmp	r3, #0
 801128a:	d148      	bne.n	801131e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	68da      	ldr	r2, [r3, #12]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f022 0220 	bic.w	r2, r2, #32
 801129a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68da      	ldr	r2, [r3, #12]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80112aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	695a      	ldr	r2, [r3, #20]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f022 0201 	bic.w	r2, r2, #1
 80112ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2220      	movs	r2, #32
 80112c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d123      	bne.n	8011314 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2200      	movs	r2, #0
 80112d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68da      	ldr	r2, [r3, #12]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f022 0210 	bic.w	r2, r2, #16
 80112e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f003 0310 	and.w	r3, r3, #16
 80112ec:	2b10      	cmp	r3, #16
 80112ee:	d10a      	bne.n	8011306 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80112f0:	2300      	movs	r3, #0
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	60fb      	str	r3, [r7, #12]
 8011304:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801130a:	4619      	mov	r1, r3
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f7ff fe2f 	bl	8010f70 <HAL_UARTEx_RxEventCallback>
 8011312:	e002      	b.n	801131a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f7fb fd9f 	bl	800ce58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	e002      	b.n	8011324 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	e000      	b.n	8011324 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8011322:	2302      	movs	r3, #2
  }
}
 8011324:	4618      	mov	r0, r3
 8011326:	3718      	adds	r7, #24
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	691b      	ldr	r3, [r3, #16]
 801133a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	68da      	ldr	r2, [r3, #12]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	689a      	ldr	r2, [r3, #8]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	691b      	ldr	r3, [r3, #16]
 8011352:	431a      	orrs	r2, r3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	695b      	ldr	r3, [r3, #20]
 8011358:	4313      	orrs	r3, r2
 801135a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8011366:	f023 030c 	bic.w	r3, r3, #12
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	6812      	ldr	r2, [r2, #0]
 801136e:	68b9      	ldr	r1, [r7, #8]
 8011370:	430b      	orrs	r3, r1
 8011372:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	699a      	ldr	r2, [r3, #24]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	430a      	orrs	r2, r1
 8011388:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4a2c      	ldr	r2, [pc, #176]	; (8011440 <UART_SetConfig+0x114>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d103      	bne.n	801139c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011394:	f7fe ff80 	bl	8010298 <HAL_RCC_GetPCLK2Freq>
 8011398:	60f8      	str	r0, [r7, #12]
 801139a:	e002      	b.n	80113a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 801139c:	f7fe ff68 	bl	8010270 <HAL_RCC_GetPCLK1Freq>
 80113a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	4613      	mov	r3, r2
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	4413      	add	r3, r2
 80113aa:	009a      	lsls	r2, r3, #2
 80113ac:	441a      	add	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80113b8:	4a22      	ldr	r2, [pc, #136]	; (8011444 <UART_SetConfig+0x118>)
 80113ba:	fba2 2303 	umull	r2, r3, r2, r3
 80113be:	095b      	lsrs	r3, r3, #5
 80113c0:	0119      	lsls	r1, r3, #4
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	4613      	mov	r3, r2
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	4413      	add	r3, r2
 80113ca:	009a      	lsls	r2, r3, #2
 80113cc:	441a      	add	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80113d8:	4b1a      	ldr	r3, [pc, #104]	; (8011444 <UART_SetConfig+0x118>)
 80113da:	fba3 0302 	umull	r0, r3, r3, r2
 80113de:	095b      	lsrs	r3, r3, #5
 80113e0:	2064      	movs	r0, #100	; 0x64
 80113e2:	fb00 f303 	mul.w	r3, r0, r3
 80113e6:	1ad3      	subs	r3, r2, r3
 80113e8:	011b      	lsls	r3, r3, #4
 80113ea:	3332      	adds	r3, #50	; 0x32
 80113ec:	4a15      	ldr	r2, [pc, #84]	; (8011444 <UART_SetConfig+0x118>)
 80113ee:	fba2 2303 	umull	r2, r3, r2, r3
 80113f2:	095b      	lsrs	r3, r3, #5
 80113f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113f8:	4419      	add	r1, r3
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	4613      	mov	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	4413      	add	r3, r2
 8011402:	009a      	lsls	r2, r3, #2
 8011404:	441a      	add	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011410:	4b0c      	ldr	r3, [pc, #48]	; (8011444 <UART_SetConfig+0x118>)
 8011412:	fba3 0302 	umull	r0, r3, r3, r2
 8011416:	095b      	lsrs	r3, r3, #5
 8011418:	2064      	movs	r0, #100	; 0x64
 801141a:	fb00 f303 	mul.w	r3, r0, r3
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	011b      	lsls	r3, r3, #4
 8011422:	3332      	adds	r3, #50	; 0x32
 8011424:	4a07      	ldr	r2, [pc, #28]	; (8011444 <UART_SetConfig+0x118>)
 8011426:	fba2 2303 	umull	r2, r3, r2, r3
 801142a:	095b      	lsrs	r3, r3, #5
 801142c:	f003 020f 	and.w	r2, r3, #15
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	440a      	add	r2, r1
 8011436:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8011438:	bf00      	nop
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	40013800 	.word	0x40013800
 8011444:	51eb851f 	.word	0x51eb851f

08011448 <atoi>:
 8011448:	220a      	movs	r2, #10
 801144a:	2100      	movs	r1, #0
 801144c:	f000 b8f0 	b.w	8011630 <strtol>

08011450 <__errno>:
 8011450:	4b01      	ldr	r3, [pc, #4]	; (8011458 <__errno+0x8>)
 8011452:	6818      	ldr	r0, [r3, #0]
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	20000188 	.word	0x20000188

0801145c <__libc_init_array>:
 801145c:	b570      	push	{r4, r5, r6, lr}
 801145e:	2600      	movs	r6, #0
 8011460:	4d0c      	ldr	r5, [pc, #48]	; (8011494 <__libc_init_array+0x38>)
 8011462:	4c0d      	ldr	r4, [pc, #52]	; (8011498 <__libc_init_array+0x3c>)
 8011464:	1b64      	subs	r4, r4, r5
 8011466:	10a4      	asrs	r4, r4, #2
 8011468:	42a6      	cmp	r6, r4
 801146a:	d109      	bne.n	8011480 <__libc_init_array+0x24>
 801146c:	f000 fd36 	bl	8011edc <_init>
 8011470:	2600      	movs	r6, #0
 8011472:	4d0a      	ldr	r5, [pc, #40]	; (801149c <__libc_init_array+0x40>)
 8011474:	4c0a      	ldr	r4, [pc, #40]	; (80114a0 <__libc_init_array+0x44>)
 8011476:	1b64      	subs	r4, r4, r5
 8011478:	10a4      	asrs	r4, r4, #2
 801147a:	42a6      	cmp	r6, r4
 801147c:	d105      	bne.n	801148a <__libc_init_array+0x2e>
 801147e:	bd70      	pop	{r4, r5, r6, pc}
 8011480:	f855 3b04 	ldr.w	r3, [r5], #4
 8011484:	4798      	blx	r3
 8011486:	3601      	adds	r6, #1
 8011488:	e7ee      	b.n	8011468 <__libc_init_array+0xc>
 801148a:	f855 3b04 	ldr.w	r3, [r5], #4
 801148e:	4798      	blx	r3
 8011490:	3601      	adds	r6, #1
 8011492:	e7f2      	b.n	801147a <__libc_init_array+0x1e>
 8011494:	08012290 	.word	0x08012290
 8011498:	08012290 	.word	0x08012290
 801149c:	08012290 	.word	0x08012290
 80114a0:	08012294 	.word	0x08012294

080114a4 <memcpy>:
 80114a4:	440a      	add	r2, r1
 80114a6:	4291      	cmp	r1, r2
 80114a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80114ac:	d100      	bne.n	80114b0 <memcpy+0xc>
 80114ae:	4770      	bx	lr
 80114b0:	b510      	push	{r4, lr}
 80114b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114b6:	4291      	cmp	r1, r2
 80114b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114bc:	d1f9      	bne.n	80114b2 <memcpy+0xe>
 80114be:	bd10      	pop	{r4, pc}

080114c0 <memset>:
 80114c0:	4603      	mov	r3, r0
 80114c2:	4402      	add	r2, r0
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d100      	bne.n	80114ca <memset+0xa>
 80114c8:	4770      	bx	lr
 80114ca:	f803 1b01 	strb.w	r1, [r3], #1
 80114ce:	e7f9      	b.n	80114c4 <memset+0x4>

080114d0 <siprintf>:
 80114d0:	b40e      	push	{r1, r2, r3}
 80114d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80114d6:	b500      	push	{lr}
 80114d8:	b09c      	sub	sp, #112	; 0x70
 80114da:	ab1d      	add	r3, sp, #116	; 0x74
 80114dc:	9002      	str	r0, [sp, #8]
 80114de:	9006      	str	r0, [sp, #24]
 80114e0:	9107      	str	r1, [sp, #28]
 80114e2:	9104      	str	r1, [sp, #16]
 80114e4:	4808      	ldr	r0, [pc, #32]	; (8011508 <siprintf+0x38>)
 80114e6:	4909      	ldr	r1, [pc, #36]	; (801150c <siprintf+0x3c>)
 80114e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ec:	9105      	str	r1, [sp, #20]
 80114ee:	6800      	ldr	r0, [r0, #0]
 80114f0:	a902      	add	r1, sp, #8
 80114f2:	9301      	str	r3, [sp, #4]
 80114f4:	f000 f902 	bl	80116fc <_svfiprintf_r>
 80114f8:	2200      	movs	r2, #0
 80114fa:	9b02      	ldr	r3, [sp, #8]
 80114fc:	701a      	strb	r2, [r3, #0]
 80114fe:	b01c      	add	sp, #112	; 0x70
 8011500:	f85d eb04 	ldr.w	lr, [sp], #4
 8011504:	b003      	add	sp, #12
 8011506:	4770      	bx	lr
 8011508:	20000188 	.word	0x20000188
 801150c:	ffff0208 	.word	0xffff0208

08011510 <strncpy>:
 8011510:	4603      	mov	r3, r0
 8011512:	b510      	push	{r4, lr}
 8011514:	3901      	subs	r1, #1
 8011516:	b132      	cbz	r2, 8011526 <strncpy+0x16>
 8011518:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801151c:	3a01      	subs	r2, #1
 801151e:	f803 4b01 	strb.w	r4, [r3], #1
 8011522:	2c00      	cmp	r4, #0
 8011524:	d1f7      	bne.n	8011516 <strncpy+0x6>
 8011526:	2100      	movs	r1, #0
 8011528:	441a      	add	r2, r3
 801152a:	4293      	cmp	r3, r2
 801152c:	d100      	bne.n	8011530 <strncpy+0x20>
 801152e:	bd10      	pop	{r4, pc}
 8011530:	f803 1b01 	strb.w	r1, [r3], #1
 8011534:	e7f9      	b.n	801152a <strncpy+0x1a>
	...

08011538 <_strtol_l.constprop.0>:
 8011538:	2b01      	cmp	r3, #1
 801153a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801153e:	4680      	mov	r8, r0
 8011540:	d001      	beq.n	8011546 <_strtol_l.constprop.0+0xe>
 8011542:	2b24      	cmp	r3, #36	; 0x24
 8011544:	d906      	bls.n	8011554 <_strtol_l.constprop.0+0x1c>
 8011546:	f7ff ff83 	bl	8011450 <__errno>
 801154a:	2316      	movs	r3, #22
 801154c:	6003      	str	r3, [r0, #0]
 801154e:	2000      	movs	r0, #0
 8011550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011554:	460d      	mov	r5, r1
 8011556:	4f35      	ldr	r7, [pc, #212]	; (801162c <_strtol_l.constprop.0+0xf4>)
 8011558:	4628      	mov	r0, r5
 801155a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801155e:	5de6      	ldrb	r6, [r4, r7]
 8011560:	f016 0608 	ands.w	r6, r6, #8
 8011564:	d1f8      	bne.n	8011558 <_strtol_l.constprop.0+0x20>
 8011566:	2c2d      	cmp	r4, #45	; 0x2d
 8011568:	d12f      	bne.n	80115ca <_strtol_l.constprop.0+0x92>
 801156a:	2601      	movs	r6, #1
 801156c:	782c      	ldrb	r4, [r5, #0]
 801156e:	1c85      	adds	r5, r0, #2
 8011570:	2b00      	cmp	r3, #0
 8011572:	d057      	beq.n	8011624 <_strtol_l.constprop.0+0xec>
 8011574:	2b10      	cmp	r3, #16
 8011576:	d109      	bne.n	801158c <_strtol_l.constprop.0+0x54>
 8011578:	2c30      	cmp	r4, #48	; 0x30
 801157a:	d107      	bne.n	801158c <_strtol_l.constprop.0+0x54>
 801157c:	7828      	ldrb	r0, [r5, #0]
 801157e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011582:	2858      	cmp	r0, #88	; 0x58
 8011584:	d149      	bne.n	801161a <_strtol_l.constprop.0+0xe2>
 8011586:	2310      	movs	r3, #16
 8011588:	786c      	ldrb	r4, [r5, #1]
 801158a:	3502      	adds	r5, #2
 801158c:	2700      	movs	r7, #0
 801158e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8011592:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011596:	fbbe f9f3 	udiv	r9, lr, r3
 801159a:	4638      	mov	r0, r7
 801159c:	fb03 ea19 	mls	sl, r3, r9, lr
 80115a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80115a4:	f1bc 0f09 	cmp.w	ip, #9
 80115a8:	d814      	bhi.n	80115d4 <_strtol_l.constprop.0+0x9c>
 80115aa:	4664      	mov	r4, ip
 80115ac:	42a3      	cmp	r3, r4
 80115ae:	dd22      	ble.n	80115f6 <_strtol_l.constprop.0+0xbe>
 80115b0:	2f00      	cmp	r7, #0
 80115b2:	db1d      	blt.n	80115f0 <_strtol_l.constprop.0+0xb8>
 80115b4:	4581      	cmp	r9, r0
 80115b6:	d31b      	bcc.n	80115f0 <_strtol_l.constprop.0+0xb8>
 80115b8:	d101      	bne.n	80115be <_strtol_l.constprop.0+0x86>
 80115ba:	45a2      	cmp	sl, r4
 80115bc:	db18      	blt.n	80115f0 <_strtol_l.constprop.0+0xb8>
 80115be:	2701      	movs	r7, #1
 80115c0:	fb00 4003 	mla	r0, r0, r3, r4
 80115c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115c8:	e7ea      	b.n	80115a0 <_strtol_l.constprop.0+0x68>
 80115ca:	2c2b      	cmp	r4, #43	; 0x2b
 80115cc:	bf04      	itt	eq
 80115ce:	782c      	ldrbeq	r4, [r5, #0]
 80115d0:	1c85      	addeq	r5, r0, #2
 80115d2:	e7cd      	b.n	8011570 <_strtol_l.constprop.0+0x38>
 80115d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80115d8:	f1bc 0f19 	cmp.w	ip, #25
 80115dc:	d801      	bhi.n	80115e2 <_strtol_l.constprop.0+0xaa>
 80115de:	3c37      	subs	r4, #55	; 0x37
 80115e0:	e7e4      	b.n	80115ac <_strtol_l.constprop.0+0x74>
 80115e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80115e6:	f1bc 0f19 	cmp.w	ip, #25
 80115ea:	d804      	bhi.n	80115f6 <_strtol_l.constprop.0+0xbe>
 80115ec:	3c57      	subs	r4, #87	; 0x57
 80115ee:	e7dd      	b.n	80115ac <_strtol_l.constprop.0+0x74>
 80115f0:	f04f 37ff 	mov.w	r7, #4294967295
 80115f4:	e7e6      	b.n	80115c4 <_strtol_l.constprop.0+0x8c>
 80115f6:	2f00      	cmp	r7, #0
 80115f8:	da07      	bge.n	801160a <_strtol_l.constprop.0+0xd2>
 80115fa:	2322      	movs	r3, #34	; 0x22
 80115fc:	4670      	mov	r0, lr
 80115fe:	f8c8 3000 	str.w	r3, [r8]
 8011602:	2a00      	cmp	r2, #0
 8011604:	d0a4      	beq.n	8011550 <_strtol_l.constprop.0+0x18>
 8011606:	1e69      	subs	r1, r5, #1
 8011608:	e005      	b.n	8011616 <_strtol_l.constprop.0+0xde>
 801160a:	b106      	cbz	r6, 801160e <_strtol_l.constprop.0+0xd6>
 801160c:	4240      	negs	r0, r0
 801160e:	2a00      	cmp	r2, #0
 8011610:	d09e      	beq.n	8011550 <_strtol_l.constprop.0+0x18>
 8011612:	2f00      	cmp	r7, #0
 8011614:	d1f7      	bne.n	8011606 <_strtol_l.constprop.0+0xce>
 8011616:	6011      	str	r1, [r2, #0]
 8011618:	e79a      	b.n	8011550 <_strtol_l.constprop.0+0x18>
 801161a:	2430      	movs	r4, #48	; 0x30
 801161c:	2b00      	cmp	r3, #0
 801161e:	d1b5      	bne.n	801158c <_strtol_l.constprop.0+0x54>
 8011620:	2308      	movs	r3, #8
 8011622:	e7b3      	b.n	801158c <_strtol_l.constprop.0+0x54>
 8011624:	2c30      	cmp	r4, #48	; 0x30
 8011626:	d0a9      	beq.n	801157c <_strtol_l.constprop.0+0x44>
 8011628:	230a      	movs	r3, #10
 801162a:	e7af      	b.n	801158c <_strtol_l.constprop.0+0x54>
 801162c:	0801215d 	.word	0x0801215d

08011630 <strtol>:
 8011630:	4613      	mov	r3, r2
 8011632:	460a      	mov	r2, r1
 8011634:	4601      	mov	r1, r0
 8011636:	4802      	ldr	r0, [pc, #8]	; (8011640 <strtol+0x10>)
 8011638:	6800      	ldr	r0, [r0, #0]
 801163a:	f7ff bf7d 	b.w	8011538 <_strtol_l.constprop.0>
 801163e:	bf00      	nop
 8011640:	20000188 	.word	0x20000188

08011644 <__ssputs_r>:
 8011644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011648:	688e      	ldr	r6, [r1, #8]
 801164a:	4682      	mov	sl, r0
 801164c:	429e      	cmp	r6, r3
 801164e:	460c      	mov	r4, r1
 8011650:	4690      	mov	r8, r2
 8011652:	461f      	mov	r7, r3
 8011654:	d838      	bhi.n	80116c8 <__ssputs_r+0x84>
 8011656:	898a      	ldrh	r2, [r1, #12]
 8011658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801165c:	d032      	beq.n	80116c4 <__ssputs_r+0x80>
 801165e:	6825      	ldr	r5, [r4, #0]
 8011660:	6909      	ldr	r1, [r1, #16]
 8011662:	3301      	adds	r3, #1
 8011664:	eba5 0901 	sub.w	r9, r5, r1
 8011668:	6965      	ldr	r5, [r4, #20]
 801166a:	444b      	add	r3, r9
 801166c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011674:	106d      	asrs	r5, r5, #1
 8011676:	429d      	cmp	r5, r3
 8011678:	bf38      	it	cc
 801167a:	461d      	movcc	r5, r3
 801167c:	0553      	lsls	r3, r2, #21
 801167e:	d531      	bpl.n	80116e4 <__ssputs_r+0xa0>
 8011680:	4629      	mov	r1, r5
 8011682:	f000 fb61 	bl	8011d48 <_malloc_r>
 8011686:	4606      	mov	r6, r0
 8011688:	b950      	cbnz	r0, 80116a0 <__ssputs_r+0x5c>
 801168a:	230c      	movs	r3, #12
 801168c:	f04f 30ff 	mov.w	r0, #4294967295
 8011690:	f8ca 3000 	str.w	r3, [sl]
 8011694:	89a3      	ldrh	r3, [r4, #12]
 8011696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801169a:	81a3      	strh	r3, [r4, #12]
 801169c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a0:	464a      	mov	r2, r9
 80116a2:	6921      	ldr	r1, [r4, #16]
 80116a4:	f7ff fefe 	bl	80114a4 <memcpy>
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80116ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	6126      	str	r6, [r4, #16]
 80116b6:	444e      	add	r6, r9
 80116b8:	6026      	str	r6, [r4, #0]
 80116ba:	463e      	mov	r6, r7
 80116bc:	6165      	str	r5, [r4, #20]
 80116be:	eba5 0509 	sub.w	r5, r5, r9
 80116c2:	60a5      	str	r5, [r4, #8]
 80116c4:	42be      	cmp	r6, r7
 80116c6:	d900      	bls.n	80116ca <__ssputs_r+0x86>
 80116c8:	463e      	mov	r6, r7
 80116ca:	4632      	mov	r2, r6
 80116cc:	4641      	mov	r1, r8
 80116ce:	6820      	ldr	r0, [r4, #0]
 80116d0:	f000 fab8 	bl	8011c44 <memmove>
 80116d4:	68a3      	ldr	r3, [r4, #8]
 80116d6:	2000      	movs	r0, #0
 80116d8:	1b9b      	subs	r3, r3, r6
 80116da:	60a3      	str	r3, [r4, #8]
 80116dc:	6823      	ldr	r3, [r4, #0]
 80116de:	4433      	add	r3, r6
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	e7db      	b.n	801169c <__ssputs_r+0x58>
 80116e4:	462a      	mov	r2, r5
 80116e6:	f000 fba3 	bl	8011e30 <_realloc_r>
 80116ea:	4606      	mov	r6, r0
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d1e1      	bne.n	80116b4 <__ssputs_r+0x70>
 80116f0:	4650      	mov	r0, sl
 80116f2:	6921      	ldr	r1, [r4, #16]
 80116f4:	f000 fac0 	bl	8011c78 <_free_r>
 80116f8:	e7c7      	b.n	801168a <__ssputs_r+0x46>
	...

080116fc <_svfiprintf_r>:
 80116fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	4698      	mov	r8, r3
 8011702:	898b      	ldrh	r3, [r1, #12]
 8011704:	4607      	mov	r7, r0
 8011706:	061b      	lsls	r3, r3, #24
 8011708:	460d      	mov	r5, r1
 801170a:	4614      	mov	r4, r2
 801170c:	b09d      	sub	sp, #116	; 0x74
 801170e:	d50e      	bpl.n	801172e <_svfiprintf_r+0x32>
 8011710:	690b      	ldr	r3, [r1, #16]
 8011712:	b963      	cbnz	r3, 801172e <_svfiprintf_r+0x32>
 8011714:	2140      	movs	r1, #64	; 0x40
 8011716:	f000 fb17 	bl	8011d48 <_malloc_r>
 801171a:	6028      	str	r0, [r5, #0]
 801171c:	6128      	str	r0, [r5, #16]
 801171e:	b920      	cbnz	r0, 801172a <_svfiprintf_r+0x2e>
 8011720:	230c      	movs	r3, #12
 8011722:	603b      	str	r3, [r7, #0]
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	e0d1      	b.n	80118ce <_svfiprintf_r+0x1d2>
 801172a:	2340      	movs	r3, #64	; 0x40
 801172c:	616b      	str	r3, [r5, #20]
 801172e:	2300      	movs	r3, #0
 8011730:	9309      	str	r3, [sp, #36]	; 0x24
 8011732:	2320      	movs	r3, #32
 8011734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011738:	2330      	movs	r3, #48	; 0x30
 801173a:	f04f 0901 	mov.w	r9, #1
 801173e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80118e8 <_svfiprintf_r+0x1ec>
 8011746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801174a:	4623      	mov	r3, r4
 801174c:	469a      	mov	sl, r3
 801174e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011752:	b10a      	cbz	r2, 8011758 <_svfiprintf_r+0x5c>
 8011754:	2a25      	cmp	r2, #37	; 0x25
 8011756:	d1f9      	bne.n	801174c <_svfiprintf_r+0x50>
 8011758:	ebba 0b04 	subs.w	fp, sl, r4
 801175c:	d00b      	beq.n	8011776 <_svfiprintf_r+0x7a>
 801175e:	465b      	mov	r3, fp
 8011760:	4622      	mov	r2, r4
 8011762:	4629      	mov	r1, r5
 8011764:	4638      	mov	r0, r7
 8011766:	f7ff ff6d 	bl	8011644 <__ssputs_r>
 801176a:	3001      	adds	r0, #1
 801176c:	f000 80aa 	beq.w	80118c4 <_svfiprintf_r+0x1c8>
 8011770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011772:	445a      	add	r2, fp
 8011774:	9209      	str	r2, [sp, #36]	; 0x24
 8011776:	f89a 3000 	ldrb.w	r3, [sl]
 801177a:	2b00      	cmp	r3, #0
 801177c:	f000 80a2 	beq.w	80118c4 <_svfiprintf_r+0x1c8>
 8011780:	2300      	movs	r3, #0
 8011782:	f04f 32ff 	mov.w	r2, #4294967295
 8011786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801178a:	f10a 0a01 	add.w	sl, sl, #1
 801178e:	9304      	str	r3, [sp, #16]
 8011790:	9307      	str	r3, [sp, #28]
 8011792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011796:	931a      	str	r3, [sp, #104]	; 0x68
 8011798:	4654      	mov	r4, sl
 801179a:	2205      	movs	r2, #5
 801179c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117a0:	4851      	ldr	r0, [pc, #324]	; (80118e8 <_svfiprintf_r+0x1ec>)
 80117a2:	f000 fa41 	bl	8011c28 <memchr>
 80117a6:	9a04      	ldr	r2, [sp, #16]
 80117a8:	b9d8      	cbnz	r0, 80117e2 <_svfiprintf_r+0xe6>
 80117aa:	06d0      	lsls	r0, r2, #27
 80117ac:	bf44      	itt	mi
 80117ae:	2320      	movmi	r3, #32
 80117b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117b4:	0711      	lsls	r1, r2, #28
 80117b6:	bf44      	itt	mi
 80117b8:	232b      	movmi	r3, #43	; 0x2b
 80117ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117be:	f89a 3000 	ldrb.w	r3, [sl]
 80117c2:	2b2a      	cmp	r3, #42	; 0x2a
 80117c4:	d015      	beq.n	80117f2 <_svfiprintf_r+0xf6>
 80117c6:	4654      	mov	r4, sl
 80117c8:	2000      	movs	r0, #0
 80117ca:	f04f 0c0a 	mov.w	ip, #10
 80117ce:	9a07      	ldr	r2, [sp, #28]
 80117d0:	4621      	mov	r1, r4
 80117d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117d6:	3b30      	subs	r3, #48	; 0x30
 80117d8:	2b09      	cmp	r3, #9
 80117da:	d94e      	bls.n	801187a <_svfiprintf_r+0x17e>
 80117dc:	b1b0      	cbz	r0, 801180c <_svfiprintf_r+0x110>
 80117de:	9207      	str	r2, [sp, #28]
 80117e0:	e014      	b.n	801180c <_svfiprintf_r+0x110>
 80117e2:	eba0 0308 	sub.w	r3, r0, r8
 80117e6:	fa09 f303 	lsl.w	r3, r9, r3
 80117ea:	4313      	orrs	r3, r2
 80117ec:	46a2      	mov	sl, r4
 80117ee:	9304      	str	r3, [sp, #16]
 80117f0:	e7d2      	b.n	8011798 <_svfiprintf_r+0x9c>
 80117f2:	9b03      	ldr	r3, [sp, #12]
 80117f4:	1d19      	adds	r1, r3, #4
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	9103      	str	r1, [sp, #12]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	bfbb      	ittet	lt
 80117fe:	425b      	neglt	r3, r3
 8011800:	f042 0202 	orrlt.w	r2, r2, #2
 8011804:	9307      	strge	r3, [sp, #28]
 8011806:	9307      	strlt	r3, [sp, #28]
 8011808:	bfb8      	it	lt
 801180a:	9204      	strlt	r2, [sp, #16]
 801180c:	7823      	ldrb	r3, [r4, #0]
 801180e:	2b2e      	cmp	r3, #46	; 0x2e
 8011810:	d10c      	bne.n	801182c <_svfiprintf_r+0x130>
 8011812:	7863      	ldrb	r3, [r4, #1]
 8011814:	2b2a      	cmp	r3, #42	; 0x2a
 8011816:	d135      	bne.n	8011884 <_svfiprintf_r+0x188>
 8011818:	9b03      	ldr	r3, [sp, #12]
 801181a:	3402      	adds	r4, #2
 801181c:	1d1a      	adds	r2, r3, #4
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	9203      	str	r2, [sp, #12]
 8011822:	2b00      	cmp	r3, #0
 8011824:	bfb8      	it	lt
 8011826:	f04f 33ff 	movlt.w	r3, #4294967295
 801182a:	9305      	str	r3, [sp, #20]
 801182c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80118ec <_svfiprintf_r+0x1f0>
 8011830:	2203      	movs	r2, #3
 8011832:	4650      	mov	r0, sl
 8011834:	7821      	ldrb	r1, [r4, #0]
 8011836:	f000 f9f7 	bl	8011c28 <memchr>
 801183a:	b140      	cbz	r0, 801184e <_svfiprintf_r+0x152>
 801183c:	2340      	movs	r3, #64	; 0x40
 801183e:	eba0 000a 	sub.w	r0, r0, sl
 8011842:	fa03 f000 	lsl.w	r0, r3, r0
 8011846:	9b04      	ldr	r3, [sp, #16]
 8011848:	3401      	adds	r4, #1
 801184a:	4303      	orrs	r3, r0
 801184c:	9304      	str	r3, [sp, #16]
 801184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011852:	2206      	movs	r2, #6
 8011854:	4826      	ldr	r0, [pc, #152]	; (80118f0 <_svfiprintf_r+0x1f4>)
 8011856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801185a:	f000 f9e5 	bl	8011c28 <memchr>
 801185e:	2800      	cmp	r0, #0
 8011860:	d038      	beq.n	80118d4 <_svfiprintf_r+0x1d8>
 8011862:	4b24      	ldr	r3, [pc, #144]	; (80118f4 <_svfiprintf_r+0x1f8>)
 8011864:	bb1b      	cbnz	r3, 80118ae <_svfiprintf_r+0x1b2>
 8011866:	9b03      	ldr	r3, [sp, #12]
 8011868:	3307      	adds	r3, #7
 801186a:	f023 0307 	bic.w	r3, r3, #7
 801186e:	3308      	adds	r3, #8
 8011870:	9303      	str	r3, [sp, #12]
 8011872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011874:	4433      	add	r3, r6
 8011876:	9309      	str	r3, [sp, #36]	; 0x24
 8011878:	e767      	b.n	801174a <_svfiprintf_r+0x4e>
 801187a:	460c      	mov	r4, r1
 801187c:	2001      	movs	r0, #1
 801187e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011882:	e7a5      	b.n	80117d0 <_svfiprintf_r+0xd4>
 8011884:	2300      	movs	r3, #0
 8011886:	f04f 0c0a 	mov.w	ip, #10
 801188a:	4619      	mov	r1, r3
 801188c:	3401      	adds	r4, #1
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	4620      	mov	r0, r4
 8011892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011896:	3a30      	subs	r2, #48	; 0x30
 8011898:	2a09      	cmp	r2, #9
 801189a:	d903      	bls.n	80118a4 <_svfiprintf_r+0x1a8>
 801189c:	2b00      	cmp	r3, #0
 801189e:	d0c5      	beq.n	801182c <_svfiprintf_r+0x130>
 80118a0:	9105      	str	r1, [sp, #20]
 80118a2:	e7c3      	b.n	801182c <_svfiprintf_r+0x130>
 80118a4:	4604      	mov	r4, r0
 80118a6:	2301      	movs	r3, #1
 80118a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80118ac:	e7f0      	b.n	8011890 <_svfiprintf_r+0x194>
 80118ae:	ab03      	add	r3, sp, #12
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	462a      	mov	r2, r5
 80118b4:	4638      	mov	r0, r7
 80118b6:	4b10      	ldr	r3, [pc, #64]	; (80118f8 <_svfiprintf_r+0x1fc>)
 80118b8:	a904      	add	r1, sp, #16
 80118ba:	f3af 8000 	nop.w
 80118be:	1c42      	adds	r2, r0, #1
 80118c0:	4606      	mov	r6, r0
 80118c2:	d1d6      	bne.n	8011872 <_svfiprintf_r+0x176>
 80118c4:	89ab      	ldrh	r3, [r5, #12]
 80118c6:	065b      	lsls	r3, r3, #25
 80118c8:	f53f af2c 	bmi.w	8011724 <_svfiprintf_r+0x28>
 80118cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118ce:	b01d      	add	sp, #116	; 0x74
 80118d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d4:	ab03      	add	r3, sp, #12
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	462a      	mov	r2, r5
 80118da:	4638      	mov	r0, r7
 80118dc:	4b06      	ldr	r3, [pc, #24]	; (80118f8 <_svfiprintf_r+0x1fc>)
 80118de:	a904      	add	r1, sp, #16
 80118e0:	f000 f87c 	bl	80119dc <_printf_i>
 80118e4:	e7eb      	b.n	80118be <_svfiprintf_r+0x1c2>
 80118e6:	bf00      	nop
 80118e8:	0801225d 	.word	0x0801225d
 80118ec:	08012263 	.word	0x08012263
 80118f0:	08012267 	.word	0x08012267
 80118f4:	00000000 	.word	0x00000000
 80118f8:	08011645 	.word	0x08011645

080118fc <_printf_common>:
 80118fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011900:	4616      	mov	r6, r2
 8011902:	4699      	mov	r9, r3
 8011904:	688a      	ldr	r2, [r1, #8]
 8011906:	690b      	ldr	r3, [r1, #16]
 8011908:	4607      	mov	r7, r0
 801190a:	4293      	cmp	r3, r2
 801190c:	bfb8      	it	lt
 801190e:	4613      	movlt	r3, r2
 8011910:	6033      	str	r3, [r6, #0]
 8011912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011916:	460c      	mov	r4, r1
 8011918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801191c:	b10a      	cbz	r2, 8011922 <_printf_common+0x26>
 801191e:	3301      	adds	r3, #1
 8011920:	6033      	str	r3, [r6, #0]
 8011922:	6823      	ldr	r3, [r4, #0]
 8011924:	0699      	lsls	r1, r3, #26
 8011926:	bf42      	ittt	mi
 8011928:	6833      	ldrmi	r3, [r6, #0]
 801192a:	3302      	addmi	r3, #2
 801192c:	6033      	strmi	r3, [r6, #0]
 801192e:	6825      	ldr	r5, [r4, #0]
 8011930:	f015 0506 	ands.w	r5, r5, #6
 8011934:	d106      	bne.n	8011944 <_printf_common+0x48>
 8011936:	f104 0a19 	add.w	sl, r4, #25
 801193a:	68e3      	ldr	r3, [r4, #12]
 801193c:	6832      	ldr	r2, [r6, #0]
 801193e:	1a9b      	subs	r3, r3, r2
 8011940:	42ab      	cmp	r3, r5
 8011942:	dc28      	bgt.n	8011996 <_printf_common+0x9a>
 8011944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011948:	1e13      	subs	r3, r2, #0
 801194a:	6822      	ldr	r2, [r4, #0]
 801194c:	bf18      	it	ne
 801194e:	2301      	movne	r3, #1
 8011950:	0692      	lsls	r2, r2, #26
 8011952:	d42d      	bmi.n	80119b0 <_printf_common+0xb4>
 8011954:	4649      	mov	r1, r9
 8011956:	4638      	mov	r0, r7
 8011958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801195c:	47c0      	blx	r8
 801195e:	3001      	adds	r0, #1
 8011960:	d020      	beq.n	80119a4 <_printf_common+0xa8>
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	68e5      	ldr	r5, [r4, #12]
 8011966:	f003 0306 	and.w	r3, r3, #6
 801196a:	2b04      	cmp	r3, #4
 801196c:	bf18      	it	ne
 801196e:	2500      	movne	r5, #0
 8011970:	6832      	ldr	r2, [r6, #0]
 8011972:	f04f 0600 	mov.w	r6, #0
 8011976:	68a3      	ldr	r3, [r4, #8]
 8011978:	bf08      	it	eq
 801197a:	1aad      	subeq	r5, r5, r2
 801197c:	6922      	ldr	r2, [r4, #16]
 801197e:	bf08      	it	eq
 8011980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011984:	4293      	cmp	r3, r2
 8011986:	bfc4      	itt	gt
 8011988:	1a9b      	subgt	r3, r3, r2
 801198a:	18ed      	addgt	r5, r5, r3
 801198c:	341a      	adds	r4, #26
 801198e:	42b5      	cmp	r5, r6
 8011990:	d11a      	bne.n	80119c8 <_printf_common+0xcc>
 8011992:	2000      	movs	r0, #0
 8011994:	e008      	b.n	80119a8 <_printf_common+0xac>
 8011996:	2301      	movs	r3, #1
 8011998:	4652      	mov	r2, sl
 801199a:	4649      	mov	r1, r9
 801199c:	4638      	mov	r0, r7
 801199e:	47c0      	blx	r8
 80119a0:	3001      	adds	r0, #1
 80119a2:	d103      	bne.n	80119ac <_printf_common+0xb0>
 80119a4:	f04f 30ff 	mov.w	r0, #4294967295
 80119a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ac:	3501      	adds	r5, #1
 80119ae:	e7c4      	b.n	801193a <_printf_common+0x3e>
 80119b0:	2030      	movs	r0, #48	; 0x30
 80119b2:	18e1      	adds	r1, r4, r3
 80119b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80119b8:	1c5a      	adds	r2, r3, #1
 80119ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80119be:	4422      	add	r2, r4
 80119c0:	3302      	adds	r3, #2
 80119c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80119c6:	e7c5      	b.n	8011954 <_printf_common+0x58>
 80119c8:	2301      	movs	r3, #1
 80119ca:	4622      	mov	r2, r4
 80119cc:	4649      	mov	r1, r9
 80119ce:	4638      	mov	r0, r7
 80119d0:	47c0      	blx	r8
 80119d2:	3001      	adds	r0, #1
 80119d4:	d0e6      	beq.n	80119a4 <_printf_common+0xa8>
 80119d6:	3601      	adds	r6, #1
 80119d8:	e7d9      	b.n	801198e <_printf_common+0x92>
	...

080119dc <_printf_i>:
 80119dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119e0:	7e0f      	ldrb	r7, [r1, #24]
 80119e2:	4691      	mov	r9, r2
 80119e4:	2f78      	cmp	r7, #120	; 0x78
 80119e6:	4680      	mov	r8, r0
 80119e8:	460c      	mov	r4, r1
 80119ea:	469a      	mov	sl, r3
 80119ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80119ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80119f2:	d807      	bhi.n	8011a04 <_printf_i+0x28>
 80119f4:	2f62      	cmp	r7, #98	; 0x62
 80119f6:	d80a      	bhi.n	8011a0e <_printf_i+0x32>
 80119f8:	2f00      	cmp	r7, #0
 80119fa:	f000 80d9 	beq.w	8011bb0 <_printf_i+0x1d4>
 80119fe:	2f58      	cmp	r7, #88	; 0x58
 8011a00:	f000 80a4 	beq.w	8011b4c <_printf_i+0x170>
 8011a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011a0c:	e03a      	b.n	8011a84 <_printf_i+0xa8>
 8011a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011a12:	2b15      	cmp	r3, #21
 8011a14:	d8f6      	bhi.n	8011a04 <_printf_i+0x28>
 8011a16:	a101      	add	r1, pc, #4	; (adr r1, 8011a1c <_printf_i+0x40>)
 8011a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a1c:	08011a75 	.word	0x08011a75
 8011a20:	08011a89 	.word	0x08011a89
 8011a24:	08011a05 	.word	0x08011a05
 8011a28:	08011a05 	.word	0x08011a05
 8011a2c:	08011a05 	.word	0x08011a05
 8011a30:	08011a05 	.word	0x08011a05
 8011a34:	08011a89 	.word	0x08011a89
 8011a38:	08011a05 	.word	0x08011a05
 8011a3c:	08011a05 	.word	0x08011a05
 8011a40:	08011a05 	.word	0x08011a05
 8011a44:	08011a05 	.word	0x08011a05
 8011a48:	08011b97 	.word	0x08011b97
 8011a4c:	08011ab9 	.word	0x08011ab9
 8011a50:	08011b79 	.word	0x08011b79
 8011a54:	08011a05 	.word	0x08011a05
 8011a58:	08011a05 	.word	0x08011a05
 8011a5c:	08011bb9 	.word	0x08011bb9
 8011a60:	08011a05 	.word	0x08011a05
 8011a64:	08011ab9 	.word	0x08011ab9
 8011a68:	08011a05 	.word	0x08011a05
 8011a6c:	08011a05 	.word	0x08011a05
 8011a70:	08011b81 	.word	0x08011b81
 8011a74:	682b      	ldr	r3, [r5, #0]
 8011a76:	1d1a      	adds	r2, r3, #4
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	602a      	str	r2, [r5, #0]
 8011a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a84:	2301      	movs	r3, #1
 8011a86:	e0a4      	b.n	8011bd2 <_printf_i+0x1f6>
 8011a88:	6820      	ldr	r0, [r4, #0]
 8011a8a:	6829      	ldr	r1, [r5, #0]
 8011a8c:	0606      	lsls	r6, r0, #24
 8011a8e:	f101 0304 	add.w	r3, r1, #4
 8011a92:	d50a      	bpl.n	8011aaa <_printf_i+0xce>
 8011a94:	680e      	ldr	r6, [r1, #0]
 8011a96:	602b      	str	r3, [r5, #0]
 8011a98:	2e00      	cmp	r6, #0
 8011a9a:	da03      	bge.n	8011aa4 <_printf_i+0xc8>
 8011a9c:	232d      	movs	r3, #45	; 0x2d
 8011a9e:	4276      	negs	r6, r6
 8011aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aa4:	230a      	movs	r3, #10
 8011aa6:	485e      	ldr	r0, [pc, #376]	; (8011c20 <_printf_i+0x244>)
 8011aa8:	e019      	b.n	8011ade <_printf_i+0x102>
 8011aaa:	680e      	ldr	r6, [r1, #0]
 8011aac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ab0:	602b      	str	r3, [r5, #0]
 8011ab2:	bf18      	it	ne
 8011ab4:	b236      	sxthne	r6, r6
 8011ab6:	e7ef      	b.n	8011a98 <_printf_i+0xbc>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	6820      	ldr	r0, [r4, #0]
 8011abc:	1d19      	adds	r1, r3, #4
 8011abe:	6029      	str	r1, [r5, #0]
 8011ac0:	0601      	lsls	r1, r0, #24
 8011ac2:	d501      	bpl.n	8011ac8 <_printf_i+0xec>
 8011ac4:	681e      	ldr	r6, [r3, #0]
 8011ac6:	e002      	b.n	8011ace <_printf_i+0xf2>
 8011ac8:	0646      	lsls	r6, r0, #25
 8011aca:	d5fb      	bpl.n	8011ac4 <_printf_i+0xe8>
 8011acc:	881e      	ldrh	r6, [r3, #0]
 8011ace:	2f6f      	cmp	r7, #111	; 0x6f
 8011ad0:	bf0c      	ite	eq
 8011ad2:	2308      	moveq	r3, #8
 8011ad4:	230a      	movne	r3, #10
 8011ad6:	4852      	ldr	r0, [pc, #328]	; (8011c20 <_printf_i+0x244>)
 8011ad8:	2100      	movs	r1, #0
 8011ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ade:	6865      	ldr	r5, [r4, #4]
 8011ae0:	2d00      	cmp	r5, #0
 8011ae2:	bfa8      	it	ge
 8011ae4:	6821      	ldrge	r1, [r4, #0]
 8011ae6:	60a5      	str	r5, [r4, #8]
 8011ae8:	bfa4      	itt	ge
 8011aea:	f021 0104 	bicge.w	r1, r1, #4
 8011aee:	6021      	strge	r1, [r4, #0]
 8011af0:	b90e      	cbnz	r6, 8011af6 <_printf_i+0x11a>
 8011af2:	2d00      	cmp	r5, #0
 8011af4:	d04d      	beq.n	8011b92 <_printf_i+0x1b6>
 8011af6:	4615      	mov	r5, r2
 8011af8:	fbb6 f1f3 	udiv	r1, r6, r3
 8011afc:	fb03 6711 	mls	r7, r3, r1, r6
 8011b00:	5dc7      	ldrb	r7, [r0, r7]
 8011b02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011b06:	4637      	mov	r7, r6
 8011b08:	42bb      	cmp	r3, r7
 8011b0a:	460e      	mov	r6, r1
 8011b0c:	d9f4      	bls.n	8011af8 <_printf_i+0x11c>
 8011b0e:	2b08      	cmp	r3, #8
 8011b10:	d10b      	bne.n	8011b2a <_printf_i+0x14e>
 8011b12:	6823      	ldr	r3, [r4, #0]
 8011b14:	07de      	lsls	r6, r3, #31
 8011b16:	d508      	bpl.n	8011b2a <_printf_i+0x14e>
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	6861      	ldr	r1, [r4, #4]
 8011b1c:	4299      	cmp	r1, r3
 8011b1e:	bfde      	ittt	le
 8011b20:	2330      	movle	r3, #48	; 0x30
 8011b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011b2a:	1b52      	subs	r2, r2, r5
 8011b2c:	6122      	str	r2, [r4, #16]
 8011b2e:	464b      	mov	r3, r9
 8011b30:	4621      	mov	r1, r4
 8011b32:	4640      	mov	r0, r8
 8011b34:	f8cd a000 	str.w	sl, [sp]
 8011b38:	aa03      	add	r2, sp, #12
 8011b3a:	f7ff fedf 	bl	80118fc <_printf_common>
 8011b3e:	3001      	adds	r0, #1
 8011b40:	d14c      	bne.n	8011bdc <_printf_i+0x200>
 8011b42:	f04f 30ff 	mov.w	r0, #4294967295
 8011b46:	b004      	add	sp, #16
 8011b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b4c:	4834      	ldr	r0, [pc, #208]	; (8011c20 <_printf_i+0x244>)
 8011b4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011b52:	6829      	ldr	r1, [r5, #0]
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8011b5a:	6029      	str	r1, [r5, #0]
 8011b5c:	061d      	lsls	r5, r3, #24
 8011b5e:	d514      	bpl.n	8011b8a <_printf_i+0x1ae>
 8011b60:	07df      	lsls	r7, r3, #31
 8011b62:	bf44      	itt	mi
 8011b64:	f043 0320 	orrmi.w	r3, r3, #32
 8011b68:	6023      	strmi	r3, [r4, #0]
 8011b6a:	b91e      	cbnz	r6, 8011b74 <_printf_i+0x198>
 8011b6c:	6823      	ldr	r3, [r4, #0]
 8011b6e:	f023 0320 	bic.w	r3, r3, #32
 8011b72:	6023      	str	r3, [r4, #0]
 8011b74:	2310      	movs	r3, #16
 8011b76:	e7af      	b.n	8011ad8 <_printf_i+0xfc>
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	f043 0320 	orr.w	r3, r3, #32
 8011b7e:	6023      	str	r3, [r4, #0]
 8011b80:	2378      	movs	r3, #120	; 0x78
 8011b82:	4828      	ldr	r0, [pc, #160]	; (8011c24 <_printf_i+0x248>)
 8011b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b88:	e7e3      	b.n	8011b52 <_printf_i+0x176>
 8011b8a:	0659      	lsls	r1, r3, #25
 8011b8c:	bf48      	it	mi
 8011b8e:	b2b6      	uxthmi	r6, r6
 8011b90:	e7e6      	b.n	8011b60 <_printf_i+0x184>
 8011b92:	4615      	mov	r5, r2
 8011b94:	e7bb      	b.n	8011b0e <_printf_i+0x132>
 8011b96:	682b      	ldr	r3, [r5, #0]
 8011b98:	6826      	ldr	r6, [r4, #0]
 8011b9a:	1d18      	adds	r0, r3, #4
 8011b9c:	6961      	ldr	r1, [r4, #20]
 8011b9e:	6028      	str	r0, [r5, #0]
 8011ba0:	0635      	lsls	r5, r6, #24
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	d501      	bpl.n	8011baa <_printf_i+0x1ce>
 8011ba6:	6019      	str	r1, [r3, #0]
 8011ba8:	e002      	b.n	8011bb0 <_printf_i+0x1d4>
 8011baa:	0670      	lsls	r0, r6, #25
 8011bac:	d5fb      	bpl.n	8011ba6 <_printf_i+0x1ca>
 8011bae:	8019      	strh	r1, [r3, #0]
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	4615      	mov	r5, r2
 8011bb4:	6123      	str	r3, [r4, #16]
 8011bb6:	e7ba      	b.n	8011b2e <_printf_i+0x152>
 8011bb8:	682b      	ldr	r3, [r5, #0]
 8011bba:	2100      	movs	r1, #0
 8011bbc:	1d1a      	adds	r2, r3, #4
 8011bbe:	602a      	str	r2, [r5, #0]
 8011bc0:	681d      	ldr	r5, [r3, #0]
 8011bc2:	6862      	ldr	r2, [r4, #4]
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f000 f82f 	bl	8011c28 <memchr>
 8011bca:	b108      	cbz	r0, 8011bd0 <_printf_i+0x1f4>
 8011bcc:	1b40      	subs	r0, r0, r5
 8011bce:	6060      	str	r0, [r4, #4]
 8011bd0:	6863      	ldr	r3, [r4, #4]
 8011bd2:	6123      	str	r3, [r4, #16]
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bda:	e7a8      	b.n	8011b2e <_printf_i+0x152>
 8011bdc:	462a      	mov	r2, r5
 8011bde:	4649      	mov	r1, r9
 8011be0:	4640      	mov	r0, r8
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	47d0      	blx	sl
 8011be6:	3001      	adds	r0, #1
 8011be8:	d0ab      	beq.n	8011b42 <_printf_i+0x166>
 8011bea:	6823      	ldr	r3, [r4, #0]
 8011bec:	079b      	lsls	r3, r3, #30
 8011bee:	d413      	bmi.n	8011c18 <_printf_i+0x23c>
 8011bf0:	68e0      	ldr	r0, [r4, #12]
 8011bf2:	9b03      	ldr	r3, [sp, #12]
 8011bf4:	4298      	cmp	r0, r3
 8011bf6:	bfb8      	it	lt
 8011bf8:	4618      	movlt	r0, r3
 8011bfa:	e7a4      	b.n	8011b46 <_printf_i+0x16a>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	4632      	mov	r2, r6
 8011c00:	4649      	mov	r1, r9
 8011c02:	4640      	mov	r0, r8
 8011c04:	47d0      	blx	sl
 8011c06:	3001      	adds	r0, #1
 8011c08:	d09b      	beq.n	8011b42 <_printf_i+0x166>
 8011c0a:	3501      	adds	r5, #1
 8011c0c:	68e3      	ldr	r3, [r4, #12]
 8011c0e:	9903      	ldr	r1, [sp, #12]
 8011c10:	1a5b      	subs	r3, r3, r1
 8011c12:	42ab      	cmp	r3, r5
 8011c14:	dcf2      	bgt.n	8011bfc <_printf_i+0x220>
 8011c16:	e7eb      	b.n	8011bf0 <_printf_i+0x214>
 8011c18:	2500      	movs	r5, #0
 8011c1a:	f104 0619 	add.w	r6, r4, #25
 8011c1e:	e7f5      	b.n	8011c0c <_printf_i+0x230>
 8011c20:	0801226e 	.word	0x0801226e
 8011c24:	0801227f 	.word	0x0801227f

08011c28 <memchr>:
 8011c28:	4603      	mov	r3, r0
 8011c2a:	b510      	push	{r4, lr}
 8011c2c:	b2c9      	uxtb	r1, r1
 8011c2e:	4402      	add	r2, r0
 8011c30:	4293      	cmp	r3, r2
 8011c32:	4618      	mov	r0, r3
 8011c34:	d101      	bne.n	8011c3a <memchr+0x12>
 8011c36:	2000      	movs	r0, #0
 8011c38:	e003      	b.n	8011c42 <memchr+0x1a>
 8011c3a:	7804      	ldrb	r4, [r0, #0]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	428c      	cmp	r4, r1
 8011c40:	d1f6      	bne.n	8011c30 <memchr+0x8>
 8011c42:	bd10      	pop	{r4, pc}

08011c44 <memmove>:
 8011c44:	4288      	cmp	r0, r1
 8011c46:	b510      	push	{r4, lr}
 8011c48:	eb01 0402 	add.w	r4, r1, r2
 8011c4c:	d902      	bls.n	8011c54 <memmove+0x10>
 8011c4e:	4284      	cmp	r4, r0
 8011c50:	4623      	mov	r3, r4
 8011c52:	d807      	bhi.n	8011c64 <memmove+0x20>
 8011c54:	1e43      	subs	r3, r0, #1
 8011c56:	42a1      	cmp	r1, r4
 8011c58:	d008      	beq.n	8011c6c <memmove+0x28>
 8011c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c62:	e7f8      	b.n	8011c56 <memmove+0x12>
 8011c64:	4601      	mov	r1, r0
 8011c66:	4402      	add	r2, r0
 8011c68:	428a      	cmp	r2, r1
 8011c6a:	d100      	bne.n	8011c6e <memmove+0x2a>
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c76:	e7f7      	b.n	8011c68 <memmove+0x24>

08011c78 <_free_r>:
 8011c78:	b538      	push	{r3, r4, r5, lr}
 8011c7a:	4605      	mov	r5, r0
 8011c7c:	2900      	cmp	r1, #0
 8011c7e:	d040      	beq.n	8011d02 <_free_r+0x8a>
 8011c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c84:	1f0c      	subs	r4, r1, #4
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	bfb8      	it	lt
 8011c8a:	18e4      	addlt	r4, r4, r3
 8011c8c:	f000 f910 	bl	8011eb0 <__malloc_lock>
 8011c90:	4a1c      	ldr	r2, [pc, #112]	; (8011d04 <_free_r+0x8c>)
 8011c92:	6813      	ldr	r3, [r2, #0]
 8011c94:	b933      	cbnz	r3, 8011ca4 <_free_r+0x2c>
 8011c96:	6063      	str	r3, [r4, #4]
 8011c98:	6014      	str	r4, [r2, #0]
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ca0:	f000 b90c 	b.w	8011ebc <__malloc_unlock>
 8011ca4:	42a3      	cmp	r3, r4
 8011ca6:	d908      	bls.n	8011cba <_free_r+0x42>
 8011ca8:	6820      	ldr	r0, [r4, #0]
 8011caa:	1821      	adds	r1, r4, r0
 8011cac:	428b      	cmp	r3, r1
 8011cae:	bf01      	itttt	eq
 8011cb0:	6819      	ldreq	r1, [r3, #0]
 8011cb2:	685b      	ldreq	r3, [r3, #4]
 8011cb4:	1809      	addeq	r1, r1, r0
 8011cb6:	6021      	streq	r1, [r4, #0]
 8011cb8:	e7ed      	b.n	8011c96 <_free_r+0x1e>
 8011cba:	461a      	mov	r2, r3
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	b10b      	cbz	r3, 8011cc4 <_free_r+0x4c>
 8011cc0:	42a3      	cmp	r3, r4
 8011cc2:	d9fa      	bls.n	8011cba <_free_r+0x42>
 8011cc4:	6811      	ldr	r1, [r2, #0]
 8011cc6:	1850      	adds	r0, r2, r1
 8011cc8:	42a0      	cmp	r0, r4
 8011cca:	d10b      	bne.n	8011ce4 <_free_r+0x6c>
 8011ccc:	6820      	ldr	r0, [r4, #0]
 8011cce:	4401      	add	r1, r0
 8011cd0:	1850      	adds	r0, r2, r1
 8011cd2:	4283      	cmp	r3, r0
 8011cd4:	6011      	str	r1, [r2, #0]
 8011cd6:	d1e0      	bne.n	8011c9a <_free_r+0x22>
 8011cd8:	6818      	ldr	r0, [r3, #0]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	4401      	add	r1, r0
 8011cde:	6011      	str	r1, [r2, #0]
 8011ce0:	6053      	str	r3, [r2, #4]
 8011ce2:	e7da      	b.n	8011c9a <_free_r+0x22>
 8011ce4:	d902      	bls.n	8011cec <_free_r+0x74>
 8011ce6:	230c      	movs	r3, #12
 8011ce8:	602b      	str	r3, [r5, #0]
 8011cea:	e7d6      	b.n	8011c9a <_free_r+0x22>
 8011cec:	6820      	ldr	r0, [r4, #0]
 8011cee:	1821      	adds	r1, r4, r0
 8011cf0:	428b      	cmp	r3, r1
 8011cf2:	bf01      	itttt	eq
 8011cf4:	6819      	ldreq	r1, [r3, #0]
 8011cf6:	685b      	ldreq	r3, [r3, #4]
 8011cf8:	1809      	addeq	r1, r1, r0
 8011cfa:	6021      	streq	r1, [r4, #0]
 8011cfc:	6063      	str	r3, [r4, #4]
 8011cfe:	6054      	str	r4, [r2, #4]
 8011d00:	e7cb      	b.n	8011c9a <_free_r+0x22>
 8011d02:	bd38      	pop	{r3, r4, r5, pc}
 8011d04:	20000560 	.word	0x20000560

08011d08 <sbrk_aligned>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	4e0e      	ldr	r6, [pc, #56]	; (8011d44 <sbrk_aligned+0x3c>)
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	6831      	ldr	r1, [r6, #0]
 8011d10:	4605      	mov	r5, r0
 8011d12:	b911      	cbnz	r1, 8011d1a <sbrk_aligned+0x12>
 8011d14:	f000 f8bc 	bl	8011e90 <_sbrk_r>
 8011d18:	6030      	str	r0, [r6, #0]
 8011d1a:	4621      	mov	r1, r4
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f000 f8b7 	bl	8011e90 <_sbrk_r>
 8011d22:	1c43      	adds	r3, r0, #1
 8011d24:	d00a      	beq.n	8011d3c <sbrk_aligned+0x34>
 8011d26:	1cc4      	adds	r4, r0, #3
 8011d28:	f024 0403 	bic.w	r4, r4, #3
 8011d2c:	42a0      	cmp	r0, r4
 8011d2e:	d007      	beq.n	8011d40 <sbrk_aligned+0x38>
 8011d30:	1a21      	subs	r1, r4, r0
 8011d32:	4628      	mov	r0, r5
 8011d34:	f000 f8ac 	bl	8011e90 <_sbrk_r>
 8011d38:	3001      	adds	r0, #1
 8011d3a:	d101      	bne.n	8011d40 <sbrk_aligned+0x38>
 8011d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8011d40:	4620      	mov	r0, r4
 8011d42:	bd70      	pop	{r4, r5, r6, pc}
 8011d44:	20000564 	.word	0x20000564

08011d48 <_malloc_r>:
 8011d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4c:	1ccd      	adds	r5, r1, #3
 8011d4e:	f025 0503 	bic.w	r5, r5, #3
 8011d52:	3508      	adds	r5, #8
 8011d54:	2d0c      	cmp	r5, #12
 8011d56:	bf38      	it	cc
 8011d58:	250c      	movcc	r5, #12
 8011d5a:	2d00      	cmp	r5, #0
 8011d5c:	4607      	mov	r7, r0
 8011d5e:	db01      	blt.n	8011d64 <_malloc_r+0x1c>
 8011d60:	42a9      	cmp	r1, r5
 8011d62:	d905      	bls.n	8011d70 <_malloc_r+0x28>
 8011d64:	230c      	movs	r3, #12
 8011d66:	2600      	movs	r6, #0
 8011d68:	603b      	str	r3, [r7, #0]
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d70:	4e2e      	ldr	r6, [pc, #184]	; (8011e2c <_malloc_r+0xe4>)
 8011d72:	f000 f89d 	bl	8011eb0 <__malloc_lock>
 8011d76:	6833      	ldr	r3, [r6, #0]
 8011d78:	461c      	mov	r4, r3
 8011d7a:	bb34      	cbnz	r4, 8011dca <_malloc_r+0x82>
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	4638      	mov	r0, r7
 8011d80:	f7ff ffc2 	bl	8011d08 <sbrk_aligned>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	4604      	mov	r4, r0
 8011d88:	d14d      	bne.n	8011e26 <_malloc_r+0xde>
 8011d8a:	6834      	ldr	r4, [r6, #0]
 8011d8c:	4626      	mov	r6, r4
 8011d8e:	2e00      	cmp	r6, #0
 8011d90:	d140      	bne.n	8011e14 <_malloc_r+0xcc>
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	4631      	mov	r1, r6
 8011d96:	4638      	mov	r0, r7
 8011d98:	eb04 0803 	add.w	r8, r4, r3
 8011d9c:	f000 f878 	bl	8011e90 <_sbrk_r>
 8011da0:	4580      	cmp	r8, r0
 8011da2:	d13a      	bne.n	8011e1a <_malloc_r+0xd2>
 8011da4:	6821      	ldr	r1, [r4, #0]
 8011da6:	3503      	adds	r5, #3
 8011da8:	1a6d      	subs	r5, r5, r1
 8011daa:	f025 0503 	bic.w	r5, r5, #3
 8011dae:	3508      	adds	r5, #8
 8011db0:	2d0c      	cmp	r5, #12
 8011db2:	bf38      	it	cc
 8011db4:	250c      	movcc	r5, #12
 8011db6:	4638      	mov	r0, r7
 8011db8:	4629      	mov	r1, r5
 8011dba:	f7ff ffa5 	bl	8011d08 <sbrk_aligned>
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	d02b      	beq.n	8011e1a <_malloc_r+0xd2>
 8011dc2:	6823      	ldr	r3, [r4, #0]
 8011dc4:	442b      	add	r3, r5
 8011dc6:	6023      	str	r3, [r4, #0]
 8011dc8:	e00e      	b.n	8011de8 <_malloc_r+0xa0>
 8011dca:	6822      	ldr	r2, [r4, #0]
 8011dcc:	1b52      	subs	r2, r2, r5
 8011dce:	d41e      	bmi.n	8011e0e <_malloc_r+0xc6>
 8011dd0:	2a0b      	cmp	r2, #11
 8011dd2:	d916      	bls.n	8011e02 <_malloc_r+0xba>
 8011dd4:	1961      	adds	r1, r4, r5
 8011dd6:	42a3      	cmp	r3, r4
 8011dd8:	6025      	str	r5, [r4, #0]
 8011dda:	bf18      	it	ne
 8011ddc:	6059      	strne	r1, [r3, #4]
 8011dde:	6863      	ldr	r3, [r4, #4]
 8011de0:	bf08      	it	eq
 8011de2:	6031      	streq	r1, [r6, #0]
 8011de4:	5162      	str	r2, [r4, r5]
 8011de6:	604b      	str	r3, [r1, #4]
 8011de8:	4638      	mov	r0, r7
 8011dea:	f104 060b 	add.w	r6, r4, #11
 8011dee:	f000 f865 	bl	8011ebc <__malloc_unlock>
 8011df2:	f026 0607 	bic.w	r6, r6, #7
 8011df6:	1d23      	adds	r3, r4, #4
 8011df8:	1af2      	subs	r2, r6, r3
 8011dfa:	d0b6      	beq.n	8011d6a <_malloc_r+0x22>
 8011dfc:	1b9b      	subs	r3, r3, r6
 8011dfe:	50a3      	str	r3, [r4, r2]
 8011e00:	e7b3      	b.n	8011d6a <_malloc_r+0x22>
 8011e02:	6862      	ldr	r2, [r4, #4]
 8011e04:	42a3      	cmp	r3, r4
 8011e06:	bf0c      	ite	eq
 8011e08:	6032      	streq	r2, [r6, #0]
 8011e0a:	605a      	strne	r2, [r3, #4]
 8011e0c:	e7ec      	b.n	8011de8 <_malloc_r+0xa0>
 8011e0e:	4623      	mov	r3, r4
 8011e10:	6864      	ldr	r4, [r4, #4]
 8011e12:	e7b2      	b.n	8011d7a <_malloc_r+0x32>
 8011e14:	4634      	mov	r4, r6
 8011e16:	6876      	ldr	r6, [r6, #4]
 8011e18:	e7b9      	b.n	8011d8e <_malloc_r+0x46>
 8011e1a:	230c      	movs	r3, #12
 8011e1c:	4638      	mov	r0, r7
 8011e1e:	603b      	str	r3, [r7, #0]
 8011e20:	f000 f84c 	bl	8011ebc <__malloc_unlock>
 8011e24:	e7a1      	b.n	8011d6a <_malloc_r+0x22>
 8011e26:	6025      	str	r5, [r4, #0]
 8011e28:	e7de      	b.n	8011de8 <_malloc_r+0xa0>
 8011e2a:	bf00      	nop
 8011e2c:	20000560 	.word	0x20000560

08011e30 <_realloc_r>:
 8011e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e34:	4680      	mov	r8, r0
 8011e36:	4614      	mov	r4, r2
 8011e38:	460e      	mov	r6, r1
 8011e3a:	b921      	cbnz	r1, 8011e46 <_realloc_r+0x16>
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e42:	f7ff bf81 	b.w	8011d48 <_malloc_r>
 8011e46:	b92a      	cbnz	r2, 8011e54 <_realloc_r+0x24>
 8011e48:	f7ff ff16 	bl	8011c78 <_free_r>
 8011e4c:	4625      	mov	r5, r4
 8011e4e:	4628      	mov	r0, r5
 8011e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e54:	f000 f838 	bl	8011ec8 <_malloc_usable_size_r>
 8011e58:	4284      	cmp	r4, r0
 8011e5a:	4607      	mov	r7, r0
 8011e5c:	d802      	bhi.n	8011e64 <_realloc_r+0x34>
 8011e5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e62:	d812      	bhi.n	8011e8a <_realloc_r+0x5a>
 8011e64:	4621      	mov	r1, r4
 8011e66:	4640      	mov	r0, r8
 8011e68:	f7ff ff6e 	bl	8011d48 <_malloc_r>
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	d0ed      	beq.n	8011e4e <_realloc_r+0x1e>
 8011e72:	42bc      	cmp	r4, r7
 8011e74:	4622      	mov	r2, r4
 8011e76:	4631      	mov	r1, r6
 8011e78:	bf28      	it	cs
 8011e7a:	463a      	movcs	r2, r7
 8011e7c:	f7ff fb12 	bl	80114a4 <memcpy>
 8011e80:	4631      	mov	r1, r6
 8011e82:	4640      	mov	r0, r8
 8011e84:	f7ff fef8 	bl	8011c78 <_free_r>
 8011e88:	e7e1      	b.n	8011e4e <_realloc_r+0x1e>
 8011e8a:	4635      	mov	r5, r6
 8011e8c:	e7df      	b.n	8011e4e <_realloc_r+0x1e>
	...

08011e90 <_sbrk_r>:
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	2300      	movs	r3, #0
 8011e94:	4d05      	ldr	r5, [pc, #20]	; (8011eac <_sbrk_r+0x1c>)
 8011e96:	4604      	mov	r4, r0
 8011e98:	4608      	mov	r0, r1
 8011e9a:	602b      	str	r3, [r5, #0]
 8011e9c:	f7fc fd54 	bl	800e948 <_sbrk>
 8011ea0:	1c43      	adds	r3, r0, #1
 8011ea2:	d102      	bne.n	8011eaa <_sbrk_r+0x1a>
 8011ea4:	682b      	ldr	r3, [r5, #0]
 8011ea6:	b103      	cbz	r3, 8011eaa <_sbrk_r+0x1a>
 8011ea8:	6023      	str	r3, [r4, #0]
 8011eaa:	bd38      	pop	{r3, r4, r5, pc}
 8011eac:	20000568 	.word	0x20000568

08011eb0 <__malloc_lock>:
 8011eb0:	4801      	ldr	r0, [pc, #4]	; (8011eb8 <__malloc_lock+0x8>)
 8011eb2:	f000 b811 	b.w	8011ed8 <__retarget_lock_acquire_recursive>
 8011eb6:	bf00      	nop
 8011eb8:	2000056c 	.word	0x2000056c

08011ebc <__malloc_unlock>:
 8011ebc:	4801      	ldr	r0, [pc, #4]	; (8011ec4 <__malloc_unlock+0x8>)
 8011ebe:	f000 b80c 	b.w	8011eda <__retarget_lock_release_recursive>
 8011ec2:	bf00      	nop
 8011ec4:	2000056c 	.word	0x2000056c

08011ec8 <_malloc_usable_size_r>:
 8011ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ecc:	1f18      	subs	r0, r3, #4
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	bfbc      	itt	lt
 8011ed2:	580b      	ldrlt	r3, [r1, r0]
 8011ed4:	18c0      	addlt	r0, r0, r3
 8011ed6:	4770      	bx	lr

08011ed8 <__retarget_lock_acquire_recursive>:
 8011ed8:	4770      	bx	lr

08011eda <__retarget_lock_release_recursive>:
 8011eda:	4770      	bx	lr

08011edc <_init>:
 8011edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ede:	bf00      	nop
 8011ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ee2:	bc08      	pop	{r3}
 8011ee4:	469e      	mov	lr, r3
 8011ee6:	4770      	bx	lr

08011ee8 <_fini>:
 8011ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eea:	bf00      	nop
 8011eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eee:	bc08      	pop	{r3}
 8011ef0:	469e      	mov	lr, r3
 8011ef2:	4770      	bx	lr
