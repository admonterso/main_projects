
FLASH_PROGRAMMING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005394  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059cc  080059cc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d4  080059d4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080059dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000088  08005a60  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08005a60  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0fe  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  0002e1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000315c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184bf  00000000  00000000  00032208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102b3  00000000  00000000  0004a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086780  00000000  00000000  0005a97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e10fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a28  00000000  00000000  000e114c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800548c 	.word	0x0800548c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800548c 	.word	0x0800548c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <Flash_Write_Data>:
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();

	   return 0;
}
uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords) {
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	4613      	mov	r3, r2
 8000474:	80fb      	strh	r3, [r7, #6]
    //static FLASH_EraseInitTypeDef EraseInitStruct;
    //uint32_t PAGEError;
    int sofar = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]

    /* Unlock the Flash to enable the flash control register access */
    HAL_FLASH_Unlock();
 800047a:	f001 fef5 	bl	8002268 <HAL_FLASH_Unlock>
//        /* Error occurred while page erase. */
//        return HAL_FLASH_GetError();
//    }

    /* Program the user Flash area word by word */
    while (sofar < numberofwords) {
 800047e:	e01b      	b.n	80004b8 <Flash_Write_Data+0x50>
        //uint32_t reversedData = convertBigEndianToLittleEndian(Data[sofar]); // Reverse the byte order

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK) {
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	4413      	add	r3, r2
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2200      	movs	r2, #0
 800048c:	461c      	mov	r4, r3
 800048e:	4615      	mov	r5, r2
 8000490:	4622      	mov	r2, r4
 8000492:	462b      	mov	r3, r5
 8000494:	68f9      	ldr	r1, [r7, #12]
 8000496:	2002      	movs	r0, #2
 8000498:	f001 fe76 	bl	8002188 <HAL_FLASH_Program>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d106      	bne.n	80004b0 <Flash_Write_Data+0x48>
            StartPageAddress += 4;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3304      	adds	r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
            sofar++;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	3301      	adds	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	e003      	b.n	80004b8 <Flash_Write_Data+0x50>
        } else {
            /* Error occurred while writing data in Flash memory */
            return HAL_FLASH_GetError();
 80004b0:	f001 ff10 	bl	80022d4 <HAL_FLASH_GetError>
 80004b4:	4603      	mov	r3, r0
 80004b6:	e006      	b.n	80004c6 <Flash_Write_Data+0x5e>
    while (sofar < numberofwords) {
 80004b8:	88fb      	ldrh	r3, [r7, #6]
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dbdf      	blt.n	8000480 <Flash_Write_Data+0x18>
        }
    }

    /* Lock the Flash to disable the flash control register access */
    HAL_FLASH_Lock();
 80004c0:	f001 fef8 	bl	80022b4 <HAL_FLASH_Lock>

    return 0;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bdb0      	pop	{r4, r5, r7, pc}

080004ce <eraseFlashRange>:

void eraseFlashRange(uint32_t startAddress, uint32_t endAddress) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b08a      	sub	sp, #40	; 0x28
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]

    // Unlock the flash memory
    HAL_FLASH_Unlock();
 80004dc:	f001 fec4 	bl	8002268 <HAL_FLASH_Unlock>

    // Get the page of the start address
    uint32_t startPage = (startAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80004e6:	0a9b      	lsrs	r3, r3, #10
 80004e8:	623b      	str	r3, [r7, #32]
    uint32_t endPage = (endAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80004f0:	0a9b      	lsrs	r3, r3, #10
 80004f2:	61fb      	str	r3, [r7, #28]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
    //eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;

    for (uint32_t page = startPage; page <= endPage; ++page) {
 80004f8:	6a3b      	ldr	r3, [r7, #32]
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
 80004fc:	e011      	b.n	8000522 <eraseFlashRange+0x54>
        eraseInitStruct.PageAddress = FLASH_BASE + (page * FLASH_PAGE_SIZE);
 80004fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000500:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000504:	029b      	lsls	r3, r3, #10
 8000506:	617b      	str	r3, [r7, #20]
        eraseInitStruct.NbPages = 1;
 8000508:	2301      	movs	r3, #1
 800050a:	61bb      	str	r3, [r7, #24]

        HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 800050c:	f107 0208 	add.w	r2, r7, #8
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	4611      	mov	r1, r2
 8000516:	4618      	mov	r0, r3
 8000518:	f001 ff98 	bl	800244c <HAL_FLASHEx_Erase>
    for (uint32_t page = startPage; page <= endPage; ++page) {
 800051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051e:	3301      	adds	r3, #1
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
 8000522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	429a      	cmp	r2, r3
 8000528:	d9e9      	bls.n	80004fe <eraseFlashRange+0x30>
    }

    // Lock the flash memory
    HAL_FLASH_Lock();
 800052a:	f001 fec3 	bl	80022b4 <HAL_FLASH_Lock>
}
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	; 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <printItvirteba>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void printItvirteba(uint8_t row, uint8_t column){
 8000538:	b580      	push	{r7, lr}
 800053a:	b092      	sub	sp, #72	; 0x48
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
	uint8_t IGEO[8] = { I_GEO_MACRO };
 8000548:	4a68      	ldr	r2, [pc, #416]	; (80006ec <printItvirteba+0x1b4>)
 800054a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800054e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000552:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t TGEO[8] = { T_GEO_MACRO };
 8000556:	4a66      	ldr	r2, [pc, #408]	; (80006f0 <printItvirteba+0x1b8>)
 8000558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800055c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000560:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t VGEO[8] = { V_GEO_MACRO };
 8000564:	4a63      	ldr	r2, [pc, #396]	; (80006f4 <printItvirteba+0x1bc>)
 8000566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RGEO[8] = { R_GEO_MACRO };
 8000572:	4a61      	ldr	r2, [pc, #388]	; (80006f8 <printItvirteba+0x1c0>)
 8000574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tGEO[8] = { t_GEO_MACRO };
 8000580:	4a5e      	ldr	r2, [pc, #376]	; (80006fc <printItvirteba+0x1c4>)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t EGEO[8] = { E_GEO_MACRO };
 800058e:	4a5c      	ldr	r2, [pc, #368]	; (8000700 <printItvirteba+0x1c8>)
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000598:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t BGEO[8] = { B_GEO_MACRO };
 800059c:	4a59      	ldr	r2, [pc, #356]	; (8000704 <printItvirteba+0x1cc>)
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t AGEO[8] = { A_GEO_MACRO };
 80005aa:	4a57      	ldr	r2, [pc, #348]	; (8000708 <printItvirteba+0x1d0>)
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b4:	e883 0003 	stmia.w	r3, {r0, r1}

	HD44780_Clear();
 80005b8:	f000 f9ec 	bl	8000994 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, IGEO); // i
 80005bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005c0:	4619      	mov	r1, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 fa44 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f9f6 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fa64 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, TGEO); //t
 80005da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005de:	4619      	mov	r1, r3
 80005e0:	2002      	movs	r0, #2
 80005e2:	f000 fa35 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f9e5 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 fa53 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, VGEO);//v
 80005fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000600:	4619      	mov	r1, r3
 8000602:	2003      	movs	r0, #3
 8000604:	f000 fa24 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	3302      	adds	r3, #2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	79fa      	ldrb	r2, [r7, #7]
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f9d4 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 fa42 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	3303      	adds	r3, #3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	79fa      	ldrb	r2, [r7, #7]
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f9c9 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1); // i
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fa37 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, RGEO); //r
 8000634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000638:	4619      	mov	r1, r3
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fa08 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	3304      	adds	r3, #4
 8000644:	b2db      	uxtb	r3, r3
 8000646:	79fa      	ldrb	r2, [r7, #7]
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f9b8 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 8000650:	2005      	movs	r0, #5
 8000652:	f000 fa26 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGEO); // t
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4619      	mov	r1, r3
 800065c:	2006      	movs	r0, #6
 800065e:	f000 f9f7 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	3305      	adds	r3, #5
 8000666:	b2db      	uxtb	r3, r3
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f9a7 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 8000672:	2006      	movs	r0, #6
 8000674:	f000 fa15 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, EGEO); //e
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	4619      	mov	r1, r3
 800067e:	2007      	movs	r0, #7
 8000680:	f000 f9e6 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	3306      	adds	r3, #6
 8000688:	b2db      	uxtb	r3, r3
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f996 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 8000694:	2007      	movs	r0, #7
 8000696:	f000 fa04 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(8, BGEO); //b
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	2008      	movs	r0, #8
 80006a2:	f000 f9d5 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	3307      	adds	r3, #7
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f985 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(8);
 80006b6:	2008      	movs	r0, #8
 80006b8:	f000 f9f3 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, AGEO); //a
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	2004      	movs	r0, #4
 80006c4:	f000 f9c4 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+8, row);
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	3308      	adds	r3, #8
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f974 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 80006d8:	2004      	movs	r0, #4
 80006da:	f000 f9e2 	bl	8000aa2 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <printItvirteba+0x1d4>)
 80006e0:	f000 f9ec 	bl	8000abc <HD44780_PrintStr>
}
 80006e4:	bf00      	nop
 80006e6:	3748      	adds	r7, #72	; 0x48
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	080054a8 	.word	0x080054a8
 80006f0:	080054b0 	.word	0x080054b0
 80006f4:	080054b8 	.word	0x080054b8
 80006f8:	080054c0 	.word	0x080054c0
 80006fc:	080054c8 	.word	0x080054c8
 8000700:	080054d0 	.word	0x080054d0
 8000704:	080054d8 	.word	0x080054d8
 8000708:	080054e0 	.word	0x080054e0
 800070c:	080054a4 	.word	0x080054a4

08000710 <printAxldeba>:
	HD44780_SetCursor(column+6, row);
	HD44780_PrintSpecialChar(7);

	HD44780_PrintStr(": ");
}
void printAxldeba(uint8_t row, uint8_t column){
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
	uint8_t aGeo[8] = { A_GEO_MACRO };
 8000720:	4a53      	ldr	r2, [pc, #332]	; (8000870 <printAxldeba+0x160>)
 8000722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t xGeo[8] = { X_GEO_MACRO };
 800072e:	4a51      	ldr	r2, [pc, #324]	; (8000874 <printAxldeba+0x164>)
 8000730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000738:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t lGeo[8] = { L_GEO_MACRO };
 800073c:	4a4e      	ldr	r2, [pc, #312]	; (8000878 <printAxldeba+0x168>)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000746:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dGeo[8] = { D_GEO_MACRO };
 800074a:	4a4c      	ldr	r2, [pc, #304]	; (800087c <printAxldeba+0x16c>)
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000754:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t eGeo[8] = { E_GEO_MACRO };
 8000758:	4a49      	ldr	r2, [pc, #292]	; (8000880 <printAxldeba+0x170>)
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000762:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bGeo[8] = { B_GEO_MACRO };
 8000766:	4a47      	ldr	r2, [pc, #284]	; (8000884 <printAxldeba+0x174>)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000770:	e883 0003 	stmia.w	r3, {r0, r1}


	HD44780_Clear();
 8000774:	f000 f90e 	bl	8000994 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, aGeo);
 8000778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077c:	4619      	mov	r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	f000 f966 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f918 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 f986 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, xGeo);
 8000796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079a:	4619      	mov	r1, r3
 800079c:	2002      	movs	r0, #2
 800079e:	f000 f957 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f907 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 f975 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4619      	mov	r1, r3
 80007be:	2003      	movs	r0, #3
 80007c0:	f000 f946 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	3302      	adds	r3, #2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f8f6 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f964 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, dGeo);
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	4619      	mov	r1, r3
 80007e0:	2004      	movs	r0, #4
 80007e2:	f000 f935 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	3303      	adds	r3, #3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f8e5 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 80007f6:	2004      	movs	r0, #4
 80007f8:	f000 f953 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, eGeo);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	2005      	movs	r0, #5
 8000804:	f000 f924 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	3304      	adds	r3, #4
 800080c:	b2db      	uxtb	r3, r3
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f8d4 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 8000818:	2005      	movs	r0, #5
 800081a:	f000 f942 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, bGeo);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	2006      	movs	r0, #6
 8000826:	f000 f913 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	3305      	adds	r3, #5
 800082e:	b2db      	uxtb	r3, r3
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f8c3 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800083a:	2006      	movs	r0, #6
 800083c:	f000 f931 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, aGeo);
 8000840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000844:	4619      	mov	r1, r3
 8000846:	2007      	movs	r0, #7
 8000848:	f000 f902 	bl	8000a50 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	3306      	adds	r3, #6
 8000850:	b2db      	uxtb	r3, r3
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f8b2 	bl	80009c0 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800085c:	2007      	movs	r0, #7
 800085e:	f000 f920 	bl	8000aa2 <HD44780_PrintSpecialChar>

	HD44780_PrintStr("!");
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <printAxldeba+0x178>)
 8000864:	f000 f92a 	bl	8000abc <HD44780_PrintStr>
}
 8000868:	bf00      	nop
 800086a:	3738      	adds	r7, #56	; 0x38
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	080054e0 	.word	0x080054e0
 8000874:	0800550c 	.word	0x0800550c
 8000878:	08005514 	.word	0x08005514
 800087c:	080054fc 	.word	0x080054fc
 8000880:	080054d0 	.word	0x080054d0
 8000884:	080054d8 	.word	0x080054d8
 8000888:	080054a4 	.word	0x080054a4

0800088c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000896:	4a38      	ldr	r2, [pc, #224]	; (8000978 <HD44780_Init+0xec>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <HD44780_Init+0xf0>)
 800089e:	2208      	movs	r2, #8
 80008a0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80008a2:	4b37      	ldr	r3, [pc, #220]	; (8000980 <HD44780_Init+0xf4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HD44780_Init+0xec>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d907      	bls.n	80008c0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80008b0:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HD44780_Init+0xf4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <HD44780_Init+0xf4>)
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e006      	b.n	80008ce <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <HD44780_Init+0xf4>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HD44780_Init+0xf4>)
 80008cc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80008ce:	f000 f993 	bl	8000bf8 <DelayInit>
  HAL_Delay(50);
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f001 fa5a 	bl	8001d8c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <HD44780_Init+0xf0>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f951 	bl	8000b84 <ExpanderWrite>
  HAL_Delay(1000);
 80008e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e6:	f001 fa51 	bl	8001d8c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80008ea:	2030      	movs	r0, #48	; 0x30
 80008ec:	f000 f938 	bl	8000b60 <Write4Bits>
  DelayUS(4500);
 80008f0:	f241 1094 	movw	r0, #4500	; 0x1194
 80008f4:	f000 f9a8 	bl	8000c48 <DelayUS>

  Write4Bits(0x03 << 4);
 80008f8:	2030      	movs	r0, #48	; 0x30
 80008fa:	f000 f931 	bl	8000b60 <Write4Bits>
  DelayUS(4500);
 80008fe:	f241 1094 	movw	r0, #4500	; 0x1194
 8000902:	f000 f9a1 	bl	8000c48 <DelayUS>

  Write4Bits(0x03 << 4);
 8000906:	2030      	movs	r0, #48	; 0x30
 8000908:	f000 f92a 	bl	8000b60 <Write4Bits>
  DelayUS(4500);
 800090c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000910:	f000 f99a 	bl	8000c48 <DelayUS>

  Write4Bits(0x02 << 4);
 8000914:	2020      	movs	r0, #32
 8000916:	f000 f923 	bl	8000b60 <Write4Bits>
  DelayUS(100);
 800091a:	2064      	movs	r0, #100	; 0x64
 800091c:	f000 f994 	bl	8000c48 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HD44780_Init+0xf4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f8db 	bl	8000ae6 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HD44780_Init+0xf8>)
 8000932:	2204      	movs	r2, #4
 8000934:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000936:	f000 f875 	bl	8000a24 <HD44780_Display>
  HD44780_Clear();
 800093a:	f000 f82b 	bl	8000994 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HD44780_Init+0xfc>)
 8000940:	2202      	movs	r2, #2
 8000942:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HD44780_Init+0xfc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f8c9 	bl	8000ae6 <SendCommand>
  DelayUS(4500);
 8000954:	f241 1094 	movw	r0, #4500	; 0x1194
 8000958:	f000 f976 	bl	8000c48 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800095c:	490b      	ldr	r1, [pc, #44]	; (800098c <HD44780_Init+0x100>)
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f876 	bl	8000a50 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000964:	490a      	ldr	r1, [pc, #40]	; (8000990 <HD44780_Init+0x104>)
 8000966:	2001      	movs	r0, #1
 8000968:	f000 f872 	bl	8000a50 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800096c:	f000 f81d 	bl	80009aa <HD44780_Home>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000a7 	.word	0x200000a7
 800097c:	200000a8 	.word	0x200000a8
 8000980:	200000a4 	.word	0x200000a4
 8000984:	200000a5 	.word	0x200000a5
 8000988:	200000a6 	.word	0x200000a6
 800098c:	20000000 	.word	0x20000000
 8000990:	20000008 	.word	0x20000008

08000994 <HD44780_Clear>:

void HD44780_Clear()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000998:	2001      	movs	r0, #1
 800099a:	f000 f8a4 	bl	8000ae6 <SendCommand>
  DelayUS(2000);
 800099e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a2:	f000 f951 	bl	8000c48 <DelayUS>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HD44780_Home>:

void HD44780_Home()
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f000 f899 	bl	8000ae6 <SendCommand>
  DelayUS(2000);
 80009b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b8:	f000 f946 	bl	8000c48 <DelayUS>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HD44780_SetCursor+0x5c>)
 80009d2:	f107 0408 	add.w	r4, r7, #8
 80009d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HD44780_SetCursor+0x60>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d303      	bcc.n	80009ee <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HD44780_SetCursor+0x60>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	3318      	adds	r3, #24
 80009f4:	443b      	add	r3, r7
 80009f6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4413      	add	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f86a 	bl	8000ae6 <SendCommand>
}
 8000a12:	bf00      	nop
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	0800554c 	.word	0x0800554c
 8000a20:	200000a7 	.word	0x200000a7

08000a24 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HD44780_Display+0x28>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HD44780_Display+0x28>)
 8000a34:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HD44780_Display+0x28>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f850 	bl	8000ae6 <SendCommand>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000a5 	.word	0x200000a5

08000a50 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f837 	bl	8000ae6 <SendCommand>
  for (int i=0; i<8; i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e009      	b.n	8000a92 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f83b 	bl	8000b02 <SendChar>
  for (int i=0; i<8; i++)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	ddf2      	ble.n	8000a7e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f827 	bl	8000b02 <SendChar>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000ac4:	e006      	b.n	8000ad4 <HD44780_PrintStr+0x18>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f817 	bl	8000b02 <SendChar>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f4      	bne.n	8000ac6 <HD44780_PrintStr+0xa>
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f812 	bl	8000b1e <Send>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f804 	bl	8000b1e <Send>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	460a      	mov	r2, r1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f023 030f 	bic.w	r3, r3, #15
 8000b34:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f80b 	bl	8000b60 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000b4a:	7bba      	ldrb	r2, [r7, #14]
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f804 	bl	8000b60 <Write4Bits>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f809 	bl	8000b84 <ExpanderWrite>
  PulseEnable(value);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f821 	bl	8000bbc <PulseEnable>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <ExpanderWrite+0x30>)
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000b9a:	f107 020f 	add.w	r2, r7, #15
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	214e      	movs	r1, #78	; 0x4e
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <ExpanderWrite+0x34>)
 8000ba8:	f001 fff0 	bl	8002b8c <HAL_I2C_Master_Transmit>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	200000ac 	.word	0x200000ac

08000bbc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffd8 	bl	8000b84 <ExpanderWrite>
  DelayUS(20);
 8000bd4:	2014      	movs	r0, #20
 8000bd6:	f000 f837 	bl	8000c48 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f023 0304 	bic.w	r3, r3, #4
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffce 	bl	8000b84 <ExpanderWrite>
  DelayUS(20);
 8000be8:	2014      	movs	r0, #20
 8000bea:	f000 f82d 	bl	8000c48 <DelayUS>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <DelayInit>:

static void DelayInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <DelayInit+0x48>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <DelayInit+0x48>)
 8000c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c06:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <DelayInit+0x48>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <DelayInit+0x48>)
 8000c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c12:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <DelayInit+0x4c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <DelayInit+0x4c>)
 8000c1a:	f023 0301 	bic.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <DelayInit+0x4c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <DelayInit+0x4c>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <DelayInit+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000c32:	bf00      	nop
  __ASM volatile ("NOP");
 8000c34:	bf00      	nop
  __ASM volatile ("NOP");
 8000c36:	bf00      	nop
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	e000edf0 	.word	0xe000edf0
 8000c44:	e0001000 	.word	0xe0001000

08000c48 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <DelayUS+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <DelayUS+0x44>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	0c9a      	lsrs	r2, r3, #18
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <DelayUS+0x48>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <DelayUS+0x48>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f6      	bhi.n	8000c6a <DelayUS+0x22>
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000014 	.word	0x20000014
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	e0001000 	.word	0xe0001000

08000c94 <HAL_UART_RxCpltCallback>:
uint8_t updateChars[8]; // update char store
uint8_t MQTT_CHECK_DATA[180];
uint8_t MQTT_GOT_DATA[100];
uint8_t c; // this stores the input chars from uart to find start and the end of input data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	if(flag == 0){
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d110      	bne.n	8000cc6 <HAL_UART_RxCpltCallback+0x32>
		if(c != '<'){
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_UART_RxCpltCallback+0x40>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b3c      	cmp	r3, #60	; 0x3c
 8000caa:	d005      	beq.n	8000cb8 <HAL_UART_RxCpltCallback+0x24>
			HAL_UART_Receive_IT(&huart1, &c, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <HAL_UART_RxCpltCallback+0x40>)
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cb2:	f003 f907 	bl	8003ec4 <HAL_UART_Receive_IT>
			flag = 1;
		}

	}

}
 8000cb6:	e006      	b.n	8000cc6 <HAL_UART_RxCpltCallback+0x32>
		else if(c == '<'){
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x40>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b3c      	cmp	r3, #60	; 0x3c
 8000cbe:	d102      	bne.n	8000cc6 <HAL_UART_RxCpltCallback+0x32>
			flag = 1;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000148 	.word	0x20000148
 8000cd4:	20000630 	.word	0x20000630
 8000cd8:	20000100 	.word	0x20000100

08000cdc <convertStringToHex>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t convertStringToHex(uint8_t* str) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    uint32_t hexValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]

    // Iterate over each character in the string
    while (i < 8) {
 8000cec:	e049      	b.n	8000d82 <convertStringToHex+0xa6>
        hexValue <<= 4;  // Shift left by 4 bits
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]

        // Convert character to hexadecimal digit
        if (str[i] >= '0' && str[i] <= '9') {
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b2f      	cmp	r3, #47	; 0x2f
 8000cfe:	d90f      	bls.n	8000d20 <convertStringToHex+0x44>
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b39      	cmp	r3, #57	; 0x39
 8000d0a:	d809      	bhi.n	8000d20 <convertStringToHex+0x44>
            hexValue |= (str[i] - '0');
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3b30      	subs	r3, #48	; 0x30
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e02d      	b.n	8000d7c <convertStringToHex+0xa0>
        } else if (str[i] >= 'A' && str[i] <= 'F') {
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b40      	cmp	r3, #64	; 0x40
 8000d2a:	d90f      	bls.n	8000d4c <convertStringToHex+0x70>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b46      	cmp	r3, #70	; 0x46
 8000d36:	d809      	bhi.n	8000d4c <convertStringToHex+0x70>
            hexValue |= (str[i] - 'A' + 10);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b37      	subs	r3, #55	; 0x37
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e017      	b.n	8000d7c <convertStringToHex+0xa0>
        } else if (str[i] >= 'a' && str[i] <= 'f') {
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b60      	cmp	r3, #96	; 0x60
 8000d56:	d90f      	bls.n	8000d78 <convertStringToHex+0x9c>
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b66      	cmp	r3, #102	; 0x66
 8000d62:	d809      	bhi.n	8000d78 <convertStringToHex+0x9c>
            hexValue |= (str[i] - 'a' + 10);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3b57      	subs	r3, #87	; 0x57
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e001      	b.n	8000d7c <convertStringToHex+0xa0>
        } else {
            // Invalid character, handle error
            //printf("Invalid character: %c\n", str[i]);
            return 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e006      	b.n	8000d8a <convertStringToHex+0xae>
        }

        i++;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
    while (i < 8) {
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	ddb2      	ble.n	8000cee <convertStringToHex+0x12>
    }

    return hexValue;
 8000d88:	68fb      	ldr	r3, [r7, #12]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <convertNumberToCharArray>:

char* convertNumberToCharArray(uint64_t number) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	e9c7 0100 	strd	r0, r1, [r7]
    // Count the number of digits in the number
    uint64_t temp = number;
 8000d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000da2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int numDigits = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
    while (temp /= 10) {
 8000daa:	e002      	b.n	8000db2 <convertNumberToCharArray+0x1e>
        numDigits++;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
    while (temp /= 10) {
 8000db2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000db6:	f04f 020a 	mov.w	r2, #10
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	f7ff f9cf 	bl	8000160 <__aeabi_uldivmod>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	d1ec      	bne.n	8000dac <convertNumberToCharArray+0x18>
    }

    // Allocate memory for the character array (+1 for null-terminator)
    char* buffer = (char*)malloc((numDigits + 1) * sizeof(char));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fe48 	bl	8004a6c <malloc>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60fb      	str	r3, [r7, #12]
    if (buffer == NULL) {
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <convertNumberToCharArray+0x56>
        // Error in memory allocation
        return NULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e02b      	b.n	8000e42 <convertNumberToCharArray+0xae>
    }

    // Convert each digit to its corresponding character representation
    int i = numDigits - 1;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
    while (number != 0) {
 8000df0:	e01d      	b.n	8000e2e <convertNumberToCharArray+0x9a>
        buffer[i--] = '0' + (number % 10);
 8000df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000df6:	f04f 020a 	mov.w	r2, #10
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	f7ff f9af 	bl	8000160 <__aeabi_uldivmod>
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1e59      	subs	r1, r3, #1
 8000e08:	6139      	str	r1, [r7, #16]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	440b      	add	r3, r1
 8000e10:	3230      	adds	r2, #48	; 0x30
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	701a      	strb	r2, [r3, #0]
        number /= 10;
 8000e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e1a:	f04f 020a 	mov.w	r2, #10
 8000e1e:	f04f 0300 	mov.w	r3, #0
 8000e22:	f7ff f99d 	bl	8000160 <__aeabi_uldivmod>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	e9c7 2300 	strd	r2, r3, [r7]
    while (number != 0) {
 8000e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	d1dd      	bne.n	8000df2 <convertNumberToCharArray+0x5e>
    }

    buffer[numDigits] = '\0'; // Null-terminate the character array
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]

    return buffer;
 8000e40:	68fb      	ldr	r3, [r7, #12]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <fleshArray>:
    }

    return hexValue;
}

void fleshArray(uint8_t* array) { // takes 960 bytes of data and fleshes it at start address which is defined at start
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
        int count = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t data[8];
        uint32_t hexVal;
        uint32_t hexVals[4];

        int size = strlen((char*)array);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff f979 	bl	8000150 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(data, array, 8);
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	6810      	ldr	r0, [r2, #0]
 8000e6a:	6851      	ldr	r1, [r2, #4]
 8000e6c:	c303      	stmia	r3!, {r0, r1}
        hexVal = convertStringToHex(data);
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff32 	bl	8000cdc <convertStringToHex>
 8000e78:	6238      	str	r0, [r7, #32]
        hexVals[count] = hexVal;
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	3330      	adds	r3, #48	; 0x30
 8000e80:	443b      	add	r3, r7
 8000e82:	6a3a      	ldr	r2, [r7, #32]
 8000e84:	f843 2c28 	str.w	r2, [r3, #-40]
        count++;
 8000e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int i = 0; i < size; i++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e92:	e033      	b.n	8000efc <fleshArray+0xb0>

        if((i+1) % 8 == 0){
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	3301      	adds	r3, #1
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d12a      	bne.n	8000ef6 <fleshArray+0xaa>

            memcpy(data, array + (i+1), 8);
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	441a      	add	r2, r3
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	6810      	ldr	r0, [r2, #0]
 8000eae:	6851      	ldr	r1, [r2, #4]
 8000eb0:	c303      	stmia	r3!, {r0, r1}
            hexVal = convertStringToHex(data);
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff10 	bl	8000cdc <convertStringToHex>
 8000ebc:	6238      	str	r0, [r7, #32]
            hexVals[count] = hexVal;
 8000ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	3330      	adds	r3, #48	; 0x30
 8000ec4:	443b      	add	r3, r7
 8000ec6:	6a3a      	ldr	r2, [r7, #32]
 8000ec8:	f843 2c28 	str.w	r2, [r3, #-40]

            count++;
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ece:	3301      	adds	r3, #1
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(count >= 4){
 8000ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	dd0e      	ble.n	8000ef6 <fleshArray+0xaa>
                //for(int i = 0; i<4; i++) printf("%08X ", hexVals[i]);
            	Flash_Write_Data(Adress,hexVals, 4);
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <fleshArray+0xc4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f107 0108 	add.w	r1, r7, #8
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fac0 	bl	8000468 <Flash_Write_Data>

            	Adress+=16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <fleshArray+0xc4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3310      	adds	r3, #16
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <fleshArray+0xc4>)
 8000ef0:	6013      	str	r3, [r2, #0]
                count = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < size; i++) {
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	3301      	adds	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbc7      	blt.n	8000e94 <fleshArray+0x48>
//
        }

    }

}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3730      	adds	r7, #48	; 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000010 	.word	0x20000010

08000f14 <jumpToAddress>:



void jumpToAddress(uint32_t ADDRESSTOGO){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	  uint32_t addresstojump;

	  addresstojump = *((volatile uint32_t*)(ADDRESSTOGO + 4));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	617b      	str	r3, [r7, #20]
	  HAL_DeInit();
 8000f24:	f000 fec8 	bl	8001cb8 <HAL_DeInit>
	  HAL_RCC_DeInit();
 8000f28:	f002 f988 	bl	800323c <HAL_RCC_DeInit>
	  void (*GoToApp)(void);
	  GoToApp = (void (*) (void))addresstojump;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
	  __disable_irq();
	  __set_MSP(*((volatile uint32_t*)ADDRESSTOGO));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f383 8808 	msr	MSP, r3
}
 8000f40:	bf00      	nop
	  GoToApp();
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4798      	blx	r3
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <led>:

void led(uint8_t n) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e014      	b.n	8000f8a <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <led+0x4c>)
 8000f68:	f001 fcb3 	bl	80028d2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f000 ff0d 	bl	8001d8c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <led+0x4c>)
 8000f7a:	f001 fcaa 	bl	80028d2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000f7e:	2064      	movs	r0, #100	; 0x64
 8000f80:	f000 ff04 	bl	8001d8c <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3e6      	bcc.n	8000f60 <led+0x10>
	}
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <quectelInit>:

void quectelInit(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	  memset(data, 0, sizeof(data));
 8000fa4:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4827      	ldr	r0, [pc, #156]	; (8001048 <quectelInit+0xa8>)
 8000fac:	f003 fd66 	bl	8004a7c <memset>

	 checkQueqtelWithNoEcho(data);
 8000fb0:	4825      	ldr	r0, [pc, #148]	; (8001048 <quectelInit+0xa8>)
 8000fb2:	f000 fb71 	bl	8001698 <checkQueqtelWithNoEcho>
	  HD44780_PrintStr("#");
 8000fb6:	4825      	ldr	r0, [pc, #148]	; (800104c <quectelInit+0xac>)
 8000fb8:	f7ff fd80 	bl	8000abc <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000fbc:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <quectelInit+0xa8>)
 8000fc4:	f003 fd5a 	bl	8004a7c <memset>

	 ckeckQuectelSignalWithNoEcho(data);
 8000fc8:	481f      	ldr	r0, [pc, #124]	; (8001048 <quectelInit+0xa8>)
 8000fca:	f000 fba7 	bl	800171c <ckeckQuectelSignalWithNoEcho>
	  HD44780_PrintStr("#");
 8000fce:	481f      	ldr	r0, [pc, #124]	; (800104c <quectelInit+0xac>)
 8000fd0:	f7ff fd74 	bl	8000abc <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000fd4:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <quectelInit+0xa8>)
 8000fdc:	f003 fd4e 	bl	8004a7c <memset>

	 MQTTRecMod(data);
 8000fe0:	4819      	ldr	r0, [pc, #100]	; (8001048 <quectelInit+0xa8>)
 8000fe2:	f000 fbdb 	bl	800179c <MQTTRecMod>
	  HD44780_PrintStr("#");
 8000fe6:	4819      	ldr	r0, [pc, #100]	; (800104c <quectelInit+0xac>)
 8000fe8:	f7ff fd68 	bl	8000abc <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000fec:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <quectelInit+0xa8>)
 8000ff4:	f003 fd42 	bl	8004a7c <memset>

	 MQTTOpenPort(data);
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <quectelInit+0xa8>)
 8000ffa:	f000 fc1b 	bl	8001834 <MQTTOpenPort>
	  HD44780_PrintStr("##");
 8000ffe:	4814      	ldr	r0, [pc, #80]	; (8001050 <quectelInit+0xb0>)
 8001000:	f7ff fd5c 	bl	8000abc <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8001004:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001008:	2100      	movs	r1, #0
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <quectelInit+0xa8>)
 800100c:	f003 fd36 	bl	8004a7c <memset>

	 MQTTConnect(data);
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <quectelInit+0xa8>)
 8001012:	f000 fc5b 	bl	80018cc <MQTTConnect>
	  HD44780_PrintStr("##");
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <quectelInit+0xb0>)
 8001018:	f7ff fd50 	bl	8000abc <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 800101c:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001020:	2100      	movs	r1, #0
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <quectelInit+0xa8>)
 8001024:	f003 fd2a 	bl	8004a7c <memset>

	 MQTTSubToTopic(data);
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <quectelInit+0xa8>)
 800102a:	f000 fc9b 	bl	8001964 <MQTTSubToTopic>

	  //memset(buffer, 0, sizeof(buffer));

	  //MQTTPubToTopic(buffer, MQTT_EXMP_DATA);
	  memset(data, 0, sizeof(data));
 800102e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001032:	2100      	movs	r1, #0
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <quectelInit+0xa8>)
 8001036:	f003 fd21 	bl	8004a7c <memset>

      HAL_Delay(500);
 800103a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103e:	f000 fea5 	bl	8001d8c <HAL_Delay>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000014c 	.word	0x2000014c
 800104c:	0800558c 	.word	0x0800558c
 8001050:	08005590 	.word	0x08005590

08001054 <flashCurTerminal>:


uint64_t * flashCurTerminal(uint64_t DATA, uint32_t ADRESS){
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]


	uint64_t FData = DATA;
 8001060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001064:	e9c7 2306 	strd	r2, r3, [r7, #24]

	eraseFlashRange(ADRESS, ADRESS + 1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3301      	adds	r3, #1
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fa2d 	bl	80004ce <eraseFlashRange>

	HAL_FLASH_Unlock();
 8001074:	f001 f8f8 	bl	8002268 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,ADRESS, FData);
 8001078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	2003      	movs	r0, #3
 8001080:	f001 f882 	bl	8002188 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8001084:	f001 f916 	bl	80022b4 <HAL_FLASH_Lock>

	uint64_t * RDAddr = (uint64_t *)  ADRESS;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	617b      	str	r3, [r7, #20]
	return RDAddr;
 800108c:	697b      	ldr	r3, [r7, #20]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800109e:	b672      	cpsid	i
}
 80010a0:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x8000000;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <main+0x48>)
 80010a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80010aa:	b662      	cpsie	i
}
 80010ac:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fded 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */
 // uint32_t *ptr = data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f9a9 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 fa45 	bl	8001544 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ba:	f000 fa19 	bl	80014f0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010be:	f000 f9e9 	bl	8001494 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 80010c2:	2002      	movs	r0, #2
 80010c4:	f7ff fbe2 	bl	800088c <HD44780_Init>
  printItvirteba(0, 3);
 80010c8:	2103      	movs	r1, #3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fa34 	bl	8000538 <printItvirteba>
//
//  HAL_FLASH_Lock();
//
//  uint64_t terminal =  *(__IO uint64_t *)currentTerminalADRR;

  HD44780_SetCursor(0, 1);
 80010d0:	2101      	movs	r1, #1
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fc74 	bl	80009c0 <HD44780_SetCursor>
  for(int i = 0;i<2; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	e007      	b.n	80010ee <main+0x56>
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00
	  quectelInit();
 80010e4:	f7ff ff5c 	bl	8000fa0 <quectelInit>
  for(int i = 0;i<2; i++){
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	3301      	adds	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	ddf7      	ble.n	80010e4 <main+0x4c>
  }

  uint32_t * versionPTR = (uint32_t *)  versionAdress;
 80010f4:	4bae      	ldr	r3, [pc, #696]	; (80013b0 <main+0x318>)
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t version = *versionPTR; // for version check
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]

  uint64_t terminalID = *flashCurTerminal(currentTerminal, currentTerminalADRR);
 80010fe:	4aad      	ldr	r2, [pc, #692]	; (80013b4 <main+0x31c>)
 8001100:	a1a9      	add	r1, pc, #676	; (adr r1, 80013a8 <main+0x310>)
 8001102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001106:	f7ff ffa5 	bl	8001054 <flashCurTerminal>
 800110a:	4603      	mov	r3, r0
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if(version == 0xFFFFFFFF || version == 0){
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111a:	d002      	beq.n	8001122 <main+0x8a>
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <main+0xaa>
	  	eraseFlashRange(versionAdress, versionAdress + 4);
 8001122:	49a5      	ldr	r1, [pc, #660]	; (80013b8 <main+0x320>)
 8001124:	48a2      	ldr	r0, [pc, #648]	; (80013b0 <main+0x318>)
 8001126:	f7ff f9d2 	bl	80004ce <eraseFlashRange>
		HAL_FLASH_Unlock();
 800112a:	f001 f89d 	bl	8002268 <HAL_FLASH_Unlock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,versionAdress, 1);
 800112e:	f04f 0201 	mov.w	r2, #1
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	499e      	ldr	r1, [pc, #632]	; (80013b0 <main+0x318>)
 8001138:	2002      	movs	r0, #2
 800113a:	f001 f825 	bl	8002188 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 800113e:	f001 f8b9 	bl	80022b4 <HAL_FLASH_Lock>
  }

  version = *versionPTR;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	61bb      	str	r3, [r7, #24]



  char * terminalStr = convertNumberToCharArray(terminalID);
 8001148:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114c:	f7ff fe22 	bl	8000d94 <convertNumberToCharArray>
 8001150:	60f8      	str	r0, [r7, #12]

  //sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"164522982240839\",\"firmwareVersion\":1}}");
  sprintf((char*)MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"%s\",\"firmwareVersion\":%ld}}", terminalStr, version);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4999      	ldr	r1, [pc, #612]	; (80013bc <main+0x324>)
 8001158:	4899      	ldr	r0, [pc, #612]	; (80013c0 <main+0x328>)
 800115a:	f003 fd83 	bl	8004c64 <siprintf>

  sprintf((char*)MQTT_GOT_DATA, "{\"operationType\":\"acknowledge\",\"content\":{\"status\":\"success\",\"terminalID\":\"%s\"}}", terminalStr);
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4998      	ldr	r1, [pc, #608]	; (80013c4 <main+0x32c>)
 8001162:	4899      	ldr	r0, [pc, #612]	; (80013c8 <main+0x330>)
 8001164:	f003 fd7e 	bl	8004c64 <siprintf>
  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 8001168:	4895      	ldr	r0, [pc, #596]	; (80013c0 <main+0x328>)
 800116a:	f7fe fff1 	bl	8000150 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fc13 	bl	800199c <MQTTPubToTopic>

  uint8_t checkCon = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t printDownCount = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t printDownCountAcum = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 8001188:	488d      	ldr	r0, [pc, #564]	; (80013c0 <main+0x328>)
 800118a:	f7fe ffe1 	bl	8000150 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	2332      	movs	r3, #50	; 0x32
 8001194:	498a      	ldr	r1, [pc, #552]	; (80013c0 <main+0x328>)
 8001196:	488d      	ldr	r0, [pc, #564]	; (80013cc <main+0x334>)
 8001198:	f002 fd4a 	bl	8003c30 <HAL_UART_Transmit>
  HD44780_PrintStr("#");
 800119c:	488c      	ldr	r0, [pc, #560]	; (80013d0 <main+0x338>)
 800119e:	f7ff fc8d 	bl	8000abc <HD44780_PrintStr>



  HAL_UART_Receive_IT(&huart1, &c, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	498b      	ldr	r1, [pc, #556]	; (80013d4 <main+0x33c>)
 80011a6:	4889      	ldr	r0, [pc, #548]	; (80013cc <main+0x334>)
 80011a8:	f002 fe8c 	bl	8003ec4 <HAL_UART_Receive_IT>
  int T = HAL_GetTick();
 80011ac:	f000 fde4 	bl	8001d78 <HAL_GetTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <main+0x340>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 80b7 	bne.w	800132c <main+0x294>
		  uint8_t flesh = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3020 	strb.w	r3, [r7, #32]
		  checkCon = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  HAL_UART_Receive(&huart1, data, bytesToRead, 200);
 80011ca:	23c8      	movs	r3, #200	; 0xc8
 80011cc:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80011d0:	4982      	ldr	r1, [pc, #520]	; (80013dc <main+0x344>)
 80011d2:	487e      	ldr	r0, [pc, #504]	; (80013cc <main+0x334>)
 80011d4:	f002 fdaf 	bl	8003d36 <HAL_UART_Receive>
		  if(data[0] == 'E' && data[1] == 'N' && data[2] == 'D'){ // if the data == END
 80011d8:	4b80      	ldr	r3, [pc, #512]	; (80013dc <main+0x344>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b45      	cmp	r3, #69	; 0x45
 80011de:	d128      	bne.n	8001232 <main+0x19a>
 80011e0:	4b7e      	ldr	r3, [pc, #504]	; (80013dc <main+0x344>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	2b4e      	cmp	r3, #78	; 0x4e
 80011e6:	d124      	bne.n	8001232 <main+0x19a>
 80011e8:	4b7c      	ldr	r3, [pc, #496]	; (80013dc <main+0x344>)
 80011ea:	789b      	ldrb	r3, [r3, #2]
 80011ec:	2b44      	cmp	r3, #68	; 0x44
 80011ee:	d120      	bne.n	8001232 <main+0x19a>
			  memcpy(updateChars, data + 4, 8);
 80011f0:	4a7b      	ldr	r2, [pc, #492]	; (80013e0 <main+0x348>)
 80011f2:	4b7c      	ldr	r3, [pc, #496]	; (80013e4 <main+0x34c>)
 80011f4:	6810      	ldr	r0, [r2, #0]
 80011f6:	6851      	ldr	r1, [r2, #4]
 80011f8:	c303      	stmia	r3!, {r0, r1}
			  int x = atoi((char*)updateChars);
 80011fa:	487a      	ldr	r0, [pc, #488]	; (80013e4 <main+0x34c>)
 80011fc:	f003 fc08 	bl	8004a10 <atoi>
 8001200:	6078      	str	r0, [r7, #4]
			  eraseFlashRange(versionAdress, versionAdress + 4);
 8001202:	496d      	ldr	r1, [pc, #436]	; (80013b8 <main+0x320>)
 8001204:	486a      	ldr	r0, [pc, #424]	; (80013b0 <main+0x318>)
 8001206:	f7ff f962 	bl	80004ce <eraseFlashRange>
			  HAL_FLASH_Unlock();
 800120a:	f001 f82d 	bl	8002268 <HAL_FLASH_Unlock>
			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,versionAdress, x);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	17da      	asrs	r2, r3, #31
 8001212:	461c      	mov	r4, r3
 8001214:	4615      	mov	r5, r2
 8001216:	4622      	mov	r2, r4
 8001218:	462b      	mov	r3, r5
 800121a:	4965      	ldr	r1, [pc, #404]	; (80013b0 <main+0x318>)
 800121c:	2002      	movs	r0, #2
 800121e:	f000 ffb3 	bl	8002188 <HAL_FLASH_Program>
			  HAL_FLASH_Lock();
 8001222:	f001 f847 	bl	80022b4 <HAL_FLASH_Lock>
			  flesh = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 3020 	strb.w	r3, [r7, #32]
			  jumpToAddress(address);
 800122c:	486e      	ldr	r0, [pc, #440]	; (80013e8 <main+0x350>)
 800122e:	f7ff fe71 	bl	8000f14 <jumpToAddress>
		  }
		  if(data[0] == '2' && data[1] == '0' && data[2] == '0' && data[3] == 'R'){ // if the data == END
 8001232:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <main+0x344>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b32      	cmp	r3, #50	; 0x32
 8001238:	d10e      	bne.n	8001258 <main+0x1c0>
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <main+0x344>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	2b30      	cmp	r3, #48	; 0x30
 8001240:	d10a      	bne.n	8001258 <main+0x1c0>
 8001242:	4b66      	ldr	r3, [pc, #408]	; (80013dc <main+0x344>)
 8001244:	789b      	ldrb	r3, [r3, #2]
 8001246:	2b30      	cmp	r3, #48	; 0x30
 8001248:	d106      	bne.n	8001258 <main+0x1c0>
 800124a:	4b64      	ldr	r3, [pc, #400]	; (80013dc <main+0x344>)
 800124c:	78db      	ldrb	r3, [r3, #3]
 800124e:	2b52      	cmp	r3, #82	; 0x52
 8001250:	d102      	bne.n	8001258 <main+0x1c0>
		  			  jumpToAddress(address);
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <main+0x350>)
 8001254:	f7ff fe5e 	bl	8000f14 <jumpToAddress>
		  }

		  if(data[0] == 'E' && data[1] == 'R' && data[2] == 'A' && data[3] == 'S' && data[4] == 'E'){ // if the data == END
 8001258:	4b60      	ldr	r3, [pc, #384]	; (80013dc <main+0x344>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b45      	cmp	r3, #69	; 0x45
 800125e:	d127      	bne.n	80012b0 <main+0x218>
 8001260:	4b5e      	ldr	r3, [pc, #376]	; (80013dc <main+0x344>)
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	2b52      	cmp	r3, #82	; 0x52
 8001266:	d123      	bne.n	80012b0 <main+0x218>
 8001268:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <main+0x344>)
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	2b41      	cmp	r3, #65	; 0x41
 800126e:	d11f      	bne.n	80012b0 <main+0x218>
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <main+0x344>)
 8001272:	78db      	ldrb	r3, [r3, #3]
 8001274:	2b53      	cmp	r3, #83	; 0x53
 8001276:	d11b      	bne.n	80012b0 <main+0x218>
 8001278:	4b58      	ldr	r3, [pc, #352]	; (80013dc <main+0x344>)
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	2b45      	cmp	r3, #69	; 0x45
 800127e:	d117      	bne.n	80012b0 <main+0x218>
			  printAxldeba(0, 4);
 8001280:	2104      	movs	r1, #4
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fa44 	bl	8000710 <printAxldeba>
			  HD44780_SetCursor(0, 1);
 8001288:	2101      	movs	r1, #1
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fb98 	bl	80009c0 <HD44780_SetCursor>
			  memcpy(updateChars, data + 6, 8);
 8001290:	4a56      	ldr	r2, [pc, #344]	; (80013ec <main+0x354>)
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <main+0x34c>)
 8001294:	6810      	ldr	r0, [r2, #0]
 8001296:	6851      	ldr	r1, [r2, #4]
 8001298:	c303      	stmia	r3!, {r0, r1}
			  uint32_t endNewProg = convertStringToHex(updateChars);
 800129a:	4852      	ldr	r0, [pc, #328]	; (80013e4 <main+0x34c>)
 800129c:	f7ff fd1e 	bl	8000cdc <convertStringToHex>
 80012a0:	6038      	str	r0, [r7, #0]
			  eraseFlashRange(address, endNewProg);
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	4850      	ldr	r0, [pc, #320]	; (80013e8 <main+0x350>)
 80012a6:	f7ff f912 	bl	80004ce <eraseFlashRange>
			  flesh = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f887 3020 	strb.w	r3, [r7, #32]
		  }
		  if(flesh == 0){
 80012b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d115      	bne.n	80012e4 <main+0x24c>
			  fleshArray(data);
 80012b8:	4848      	ldr	r0, [pc, #288]	; (80013dc <main+0x344>)
 80012ba:	f7ff fdc7 	bl	8000e4c <fleshArray>
			  printDownCount++;
 80012be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012c2:	3301      	adds	r3, #1
 80012c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			  if(printDownCount > printDownCountAcum + 3){
 80012c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80012cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012d0:	3303      	adds	r3, #3
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dd06      	ble.n	80012e4 <main+0x24c>
				   HD44780_PrintStr("#");
 80012d6:	483e      	ldr	r0, [pc, #248]	; (80013d0 <main+0x338>)
 80012d8:	f7ff fbf0 	bl	8000abc <HD44780_PrintStr>
				   printDownCountAcum = printDownCount;
 80012dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			  }

		  }

		  MQTTPubToTopic(strlen((char*)MQTT_GOT_DATA));
 80012e4:	4838      	ldr	r0, [pc, #224]	; (80013c8 <main+0x330>)
 80012e6:	f7fe ff33 	bl	8000150 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fb55 	bl	800199c <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_GOT_DATA, strlen((char*)MQTT_GOT_DATA), 100);
 80012f2:	4835      	ldr	r0, [pc, #212]	; (80013c8 <main+0x330>)
 80012f4:	f7fe ff2c 	bl	8000150 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	4932      	ldr	r1, [pc, #200]	; (80013c8 <main+0x330>)
 8001300:	4832      	ldr	r0, [pc, #200]	; (80013cc <main+0x334>)
 8001302:	f002 fc95 	bl	8003c30 <HAL_UART_Transmit>
		  //if(flesh == 1)HAL_NVIC_SystemReset();
		  memset(data, 0, sizeof(data));
 8001306:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800130a:	2100      	movs	r1, #0
 800130c:	4833      	ldr	r0, [pc, #204]	; (80013dc <main+0x344>)
 800130e:	f003 fbb5 	bl	8004a7c <memset>
		  HAL_UART_Receive_IT(&huart1, &c, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	492f      	ldr	r1, [pc, #188]	; (80013d4 <main+0x33c>)
 8001316:	482d      	ldr	r0, [pc, #180]	; (80013cc <main+0x334>)
 8001318:	f002 fdd4 	bl	8003ec4 <HAL_UART_Receive_IT>
		  HAL_UART_Receive_IT(&huart1, &c, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	492d      	ldr	r1, [pc, #180]	; (80013d4 <main+0x33c>)
 8001320:	482a      	ldr	r0, [pc, #168]	; (80013cc <main+0x334>)
 8001322:	f002 fdcf 	bl	8003ec4 <HAL_UART_Receive_IT>


		  //HAL_UART_Transmit(&huart1, data, bytesToRead + 1, 1000);
		  flag = 0;
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <main+0x340>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]

	  }
	  state = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4);
 800132c:	2110      	movs	r1, #16
 800132e:	4830      	ldr	r0, [pc, #192]	; (80013f0 <main+0x358>)
 8001330:	f001 fab8 	bl	80028a4 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <main+0x35c>)
 800133a:	601a      	str	r2, [r3, #0]
	  if(state == 0){
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <main+0x35c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d106      	bne.n	8001352 <main+0x2ba>
		  eraseFlashRange(0x0800C000, 0x0800D2D0);
 8001344:	492c      	ldr	r1, [pc, #176]	; (80013f8 <main+0x360>)
 8001346:	4828      	ldr	r0, [pc, #160]	; (80013e8 <main+0x350>)
 8001348:	f7ff f8c1 	bl	80004ce <eraseFlashRange>
		  led(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f7ff fdff 	bl	8000f50 <led>
	  }
	  state = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5);
 8001352:	2120      	movs	r1, #32
 8001354:	4826      	ldr	r0, [pc, #152]	; (80013f0 <main+0x358>)
 8001356:	f001 faa5 	bl	80028a4 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <main+0x35c>)
 8001360:	601a      	str	r2, [r3, #0]
	  if(state == 0){
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <main+0x35c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d105      	bne.n	8001376 <main+0x2de>
		  jumpToAddress(address);
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <main+0x350>)
 800136c:	f7ff fdd2 	bl	8000f14 <jumpToAddress>
		  led(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f7ff fded 	bl	8000f50 <led>
	  }

	  if(checkCon == 0 && HAL_GetTick() - T >= 10000)HAL_NVIC_SystemReset();
 8001376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10a      	bne.n	8001394 <main+0x2fc>
 800137e:	f000 fcfb 	bl	8001d78 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f242 720f 	movw	r2, #9999	; 0x270f
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <main+0x2fc>
 8001390:	f000 fe37 	bl	8002002 <HAL_NVIC_SystemReset>
	  if(HAL_GetTick() - T >= 2*(60000))HAL_NVIC_SystemReset();
 8001394:	f000 fcf0 	bl	8001d78 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <main+0x364>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	f67f af07 	bls.w	80011b4 <main+0x11c>
 80013a6:	e02b      	b.n	8001400 <main+0x368>
 80013a8:	fd87804a 	.word	0xfd87804a
 80013ac:	000095a1 	.word	0x000095a1
 80013b0:	0800bff0 	.word	0x0800bff0
 80013b4:	0800b000 	.word	0x0800b000
 80013b8:	0800bff4 	.word	0x0800bff4
 80013bc:	08005594 	.word	0x08005594
 80013c0:	20000518 	.word	0x20000518
 80013c4:	080055e4 	.word	0x080055e4
 80013c8:	200005cc 	.word	0x200005cc
 80013cc:	20000100 	.word	0x20000100
 80013d0:	0800558c 	.word	0x0800558c
 80013d4:	20000630 	.word	0x20000630
 80013d8:	20000148 	.word	0x20000148
 80013dc:	2000014c 	.word	0x2000014c
 80013e0:	20000150 	.word	0x20000150
 80013e4:	20000510 	.word	0x20000510
 80013e8:	0800c000 	.word	0x0800c000
 80013ec:	20000152 	.word	0x20000152
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	2000050c 	.word	0x2000050c
 80013f8:	0800d2d0 	.word	0x0800d2d0
 80013fc:	0001d4bf 	.word	0x0001d4bf
 8001400:	f000 fdff 	bl	8002002 <HAL_NVIC_SystemReset>
	  if(flag == 1){
 8001404:	e6d6      	b.n	80011b4 <main+0x11c>
 8001406:	bf00      	nop

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b090      	sub	sp, #64	; 0x40
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	2228      	movs	r2, #40	; 0x28
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f003 fb30 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001446:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4618      	mov	r0, r3
 8001452:	f001 ff8d 	bl	8003370 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800145c:	f000 f8d8 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f002 f9fa 	bl	8003874 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001486:	f000 f8c3 	bl	8001610 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3740      	adds	r7, #64	; 0x40
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f001 fa17 	bl	8002904 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 f898 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000ac 	.word	0x200000ac
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART1_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART1_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART1_UART_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001528:	f002 fb32 	bl	8003b90 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f86d 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000100 	.word	0x20000100
 8001540:	40013800 	.word	0x40013800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <MX_GPIO_Init+0xc0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <MX_GPIO_Init+0xc0>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a23      	ldr	r2, [pc, #140]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001576:	f043 0320 	orr.w	r3, r3, #32
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_GPIO_Init+0xc0>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_GPIO_Init+0xc0>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <MX_GPIO_Init+0xc0>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_GPIO_Init+0xc0>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <MX_GPIO_Init+0xc0>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_GPIO_Init+0xc0>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_GPIO_Init+0xc4>)
 80015c0:	f001 f987 	bl	80028d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4619      	mov	r1, r3
 80015dc:	480a      	ldr	r0, [pc, #40]	; (8001608 <MX_GPIO_Init+0xc4>)
 80015de:	f000 ffdd 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015e2:	2330      	movs	r3, #48	; 0x30
 80015e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_GPIO_Init+0xc8>)
 80015f6:	f000 ffd1 	bl	800259c <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40011000 	.word	0x40011000
 800160c:	40010c00 	.word	0x40010c00

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>

0800161a <checkCommand>:
	return Error;
}



uint8_t checkCommand(uint8_t* text, uint8_t* word) {
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	uint8_t textLen = strlen((char*)text);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7fe fd93 	bl	8000150 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	737b      	strb	r3, [r7, #13]
	uint8_t wordLen = strlen((char*)word);
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7fe fd8e 	bl	8000150 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	733b      	strb	r3, [r7, #12]
	uint8_t i, j;

    for (i = 0; i <= textLen - wordLen; i++) {
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e021      	b.n	8001682 <checkCommand+0x68>
        for (j = 0; j < wordLen; j++) {
 800163e:	2300      	movs	r3, #0
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	e00f      	b.n	8001664 <checkCommand+0x4a>
            if (text[i+j] != word[j]) {
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	4413      	add	r3, r2
 800164a:	461a      	mov	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	440b      	add	r3, r1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d107      	bne.n	800166e <checkCommand+0x54>
        for (j = 0; j < wordLen; j++) {
 800165e:	7bbb      	ldrb	r3, [r7, #14]
 8001660:	3301      	adds	r3, #1
 8001662:	73bb      	strb	r3, [r7, #14]
 8001664:	7bba      	ldrb	r2, [r7, #14]
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3eb      	bcc.n	8001644 <checkCommand+0x2a>
 800166c:	e000      	b.n	8001670 <checkCommand+0x56>
                break;
 800166e:	bf00      	nop
            }
        }
        if (j == wordLen) {
 8001670:	7bba      	ldrb	r2, [r7, #14]
 8001672:	7b3b      	ldrb	r3, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d101      	bne.n	800167c <checkCommand+0x62>
            return 1;  // word found
 8001678:	2301      	movs	r3, #1
 800167a:	e009      	b.n	8001690 <checkCommand+0x76>
    for (i = 0; i <= textLen - wordLen; i++) {
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	3301      	adds	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	7b79      	ldrb	r1, [r7, #13]
 8001686:	7b3b      	ldrb	r3, [r7, #12]
 8001688:	1acb      	subs	r3, r1, r3
 800168a:	429a      	cmp	r2, r3
 800168c:	ddd7      	ble.n	800163e <checkCommand+0x24>
        }
    }

    return 0;  // word not found
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <checkQueqtelWithNoEcho>:

void checkQueqtelWithNoEcho (uint8_t *RXBuffer){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 80016a4:	f000 fb68 	bl	8001d78 <HAL_GetTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60bb      	str	r3, [r7, #8]
    sprintf((char*)mainBuffer, AT);
 80016ac:	4917      	ldr	r1, [pc, #92]	; (800170c <checkQueqtelWithNoEcho+0x74>)
 80016ae:	4818      	ldr	r0, [pc, #96]	; (8001710 <checkQueqtelWithNoEcho+0x78>)
 80016b0:	f003 fad8 	bl	8004c64 <siprintf>

	while (status == 0) {
 80016b4:	e020      	b.n	80016f8 <checkQueqtelWithNoEcho+0x60>
			HAL_UART_Transmit(&huart1, mainBuffer, 4, 200);
 80016b6:	23c8      	movs	r3, #200	; 0xc8
 80016b8:	2204      	movs	r2, #4
 80016ba:	4915      	ldr	r1, [pc, #84]	; (8001710 <checkQueqtelWithNoEcho+0x78>)
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <checkQueqtelWithNoEcho+0x7c>)
 80016be:	f002 fab7 	bl	8003c30 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, RXBuffer, 6, 500);
 80016c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c6:	2206      	movs	r2, #6
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4812      	ldr	r0, [pc, #72]	; (8001714 <checkQueqtelWithNoEcho+0x7c>)
 80016cc:	f002 fb33 	bl	8003d36 <HAL_UART_Receive>
			status = checkCommand(RXBuffer, (uint8_t*)"OK");
 80016d0:	4911      	ldr	r1, [pc, #68]	; (8001718 <checkQueqtelWithNoEcho+0x80>)
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa1 	bl	800161a <checkCommand>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]

			if(status){
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <checkQueqtelWithNoEcho+0x68>
				break;
			}
			if(HAL_GetTick() - timeOut >= 10000){
 80016e2:	f000 fb49 	bl	8001d78 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <checkQueqtelWithNoEcho+0x60>
				HAL_NVIC_SystemReset();
 80016f4:	f000 fc85 	bl	8002002 <HAL_NVIC_SystemReset>
	while (status == 0) {
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0db      	beq.n	80016b6 <checkQueqtelWithNoEcho+0x1e>
			}
		}
}
 80016fe:	e000      	b.n	8001702 <checkQueqtelWithNoEcho+0x6a>
				break;
 8001700:	bf00      	nop
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	0800572c 	.word	0x0800572c
 8001710:	20000634 	.word	0x20000634
 8001714:	20000100 	.word	0x20000100
 8001718:	08005734 	.word	0x08005734

0800171c <ckeckQuectelSignalWithNoEcho>:

void ckeckQuectelSignalWithNoEcho(uint8_t *RXBuffer){
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 8001728:	f000 fb26 	bl	8001d78 <HAL_GetTick>
 800172c:	4603      	mov	r3, r0
 800172e:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATCOPS);
 8001730:	4916      	ldr	r1, [pc, #88]	; (800178c <ckeckQuectelSignalWithNoEcho+0x70>)
 8001732:	4817      	ldr	r0, [pc, #92]	; (8001790 <ckeckQuectelSignalWithNoEcho+0x74>)
 8001734:	f003 fa96 	bl	8004c64 <siprintf>
	while (status == 0) {
 8001738:	e01f      	b.n	800177a <ckeckQuectelSignalWithNoEcho+0x5e>
		HAL_UART_Transmit(&huart1, mainBuffer, 10, 200);
 800173a:	23c8      	movs	r3, #200	; 0xc8
 800173c:	220a      	movs	r2, #10
 800173e:	4914      	ldr	r1, [pc, #80]	; (8001790 <ckeckQuectelSignalWithNoEcho+0x74>)
 8001740:	4814      	ldr	r0, [pc, #80]	; (8001794 <ckeckQuectelSignalWithNoEcho+0x78>)
 8001742:	f002 fa75 	bl	8003c30 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 45, 100);
 8001746:	2364      	movs	r3, #100	; 0x64
 8001748:	222d      	movs	r2, #45	; 0x2d
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <ckeckQuectelSignalWithNoEcho+0x78>)
 800174e:	f002 faf2 	bl	8003d36 <HAL_UART_Receive>
		status = checkCommand(RXBuffer, (uint8_t*)"MAGT");
 8001752:	4911      	ldr	r1, [pc, #68]	; (8001798 <ckeckQuectelSignalWithNoEcho+0x7c>)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff60 	bl	800161a <checkCommand>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]

		if(status){
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10e      	bne.n	8001782 <ckeckQuectelSignalWithNoEcho+0x66>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 8001764:	f000 fb08 	bl	8001d78 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <ckeckQuectelSignalWithNoEcho+0x5e>
			HAL_NVIC_SystemReset();
 8001776:	f000 fc44 	bl	8002002 <HAL_NVIC_SystemReset>
	while (status == 0) {
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0dc      	beq.n	800173a <ckeckQuectelSignalWithNoEcho+0x1e>
		}
	}
}
 8001780:	e000      	b.n	8001784 <ckeckQuectelSignalWithNoEcho+0x68>
			break;
 8001782:	bf00      	nop
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	08005738 	.word	0x08005738
 8001790:	20000634 	.word	0x20000634
 8001794:	20000100 	.word	0x20000100
 8001798:	08005744 	.word	0x08005744

0800179c <MQTTRecMod>:
void MQTTRecMod(uint8_t *RXBuffer){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 80017a8:	f000 fae6 	bl	8001d78 <HAL_GetTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATQMTCFG);
 80017b0:	491b      	ldr	r1, [pc, #108]	; (8001820 <MQTTRecMod+0x84>)
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <MQTTRecMod+0x88>)
 80017b4:	f003 fa56 	bl	8004c64 <siprintf>
	while(status == 0){
 80017b8:	e028      	b.n	800180c <MQTTRecMod+0x70>
		HAL_UART_Transmit(&huart1, mainBuffer, 29, 100);
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	221d      	movs	r2, #29
 80017be:	4919      	ldr	r1, [pc, #100]	; (8001824 <MQTTRecMod+0x88>)
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <MQTTRecMod+0x8c>)
 80017c2:	f002 fa35 	bl	8003c30 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 10, 100);
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	220a      	movs	r2, #10
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4816      	ldr	r0, [pc, #88]	; (8001828 <MQTTRecMod+0x8c>)
 80017ce:	f002 fab2 	bl	8003d36 <HAL_UART_Receive>
		status = checkCommand(RXBuffer, (uint8_t*)"OK");
 80017d2:	4916      	ldr	r1, [pc, #88]	; (800182c <MQTTRecMod+0x90>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff20 	bl	800161a <checkCommand>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
		if(status == 0){
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <MQTTRecMod+0x54>
			status = checkCommand(RXBuffer, (uint8_t*)"ERROR");
 80017e4:	4912      	ldr	r1, [pc, #72]	; (8001830 <MQTTRecMod+0x94>)
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff17 	bl	800161a <checkCommand>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
		}
		if(status){
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10e      	bne.n	8001814 <MQTTRecMod+0x78>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 80017f6:	f000 fabf 	bl	8001d78 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f242 720f 	movw	r2, #9999	; 0x270f
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <MQTTRecMod+0x70>
			HAL_NVIC_SystemReset();
 8001808:	f000 fbfb 	bl	8002002 <HAL_NVIC_SystemReset>
	while(status == 0){
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0d3      	beq.n	80017ba <MQTTRecMod+0x1e>
		}
	}
}
 8001812:	e000      	b.n	8001816 <MQTTRecMod+0x7a>
			break;
 8001814:	bf00      	nop
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	0800574c 	.word	0x0800574c
 8001824:	20000634 	.word	0x20000634
 8001828:	20000100 	.word	0x20000100
 800182c:	08005734 	.word	0x08005734
 8001830:	0800576c 	.word	0x0800576c

08001834 <MQTTOpenPort>:

void MQTTOpenPort(uint8_t *RXBuffer){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 8001840:	f000 fa9a 	bl	8001d78 <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATQMTOPEN);
 8001848:	491b      	ldr	r1, [pc, #108]	; (80018b8 <MQTTOpenPort+0x84>)
 800184a:	481c      	ldr	r0, [pc, #112]	; (80018bc <MQTTOpenPort+0x88>)
 800184c:	f003 fa0a 	bl	8004c64 <siprintf>
	while(status == 0){
 8001850:	e029      	b.n	80018a6 <MQTTOpenPort+0x72>

		HAL_UART_Transmit(&huart1, mainBuffer, 34, 100);
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2222      	movs	r2, #34	; 0x22
 8001856:	4919      	ldr	r1, [pc, #100]	; (80018bc <MQTTOpenPort+0x88>)
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <MQTTOpenPort+0x8c>)
 800185a:	f002 f9e9 	bl	8003c30 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 21, 4000);
 800185e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001862:	2215      	movs	r2, #21
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MQTTOpenPort+0x8c>)
 8001868:	f002 fa65 	bl	8003d36 <HAL_UART_Receive>

		status = checkCommand(RXBuffer, (uint8_t*)"+QMTOPEN: 0,0");
 800186c:	4915      	ldr	r1, [pc, #84]	; (80018c4 <MQTTOpenPort+0x90>)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fed3 	bl	800161a <checkCommand>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]
		if(status == 0){
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <MQTTOpenPort+0x56>
			status = checkCommand(RXBuffer, (uint8_t*)"+QMTOPEN: 0,2");
 800187e:	4912      	ldr	r1, [pc, #72]	; (80018c8 <MQTTOpenPort+0x94>)
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff feca 	bl	800161a <checkCommand>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
		}


		if(status){
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10e      	bne.n	80018ae <MQTTOpenPort+0x7a>
			break;
		}

		if(HAL_GetTick() - timeOut >= 10000){
 8001890:	f000 fa72 	bl	8001d78 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f242 720f 	movw	r2, #9999	; 0x270f
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <MQTTOpenPort+0x72>
			HAL_NVIC_SystemReset();
 80018a2:	f000 fbae 	bl	8002002 <HAL_NVIC_SystemReset>
	while(status == 0){
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0d2      	beq.n	8001852 <MQTTOpenPort+0x1e>
		}

	}
}
 80018ac:	e000      	b.n	80018b0 <MQTTOpenPort+0x7c>
			break;
 80018ae:	bf00      	nop
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	08005774 	.word	0x08005774
 80018bc:	20000634 	.word	0x20000634
 80018c0:	20000100 	.word	0x20000100
 80018c4:	08005798 	.word	0x08005798
 80018c8:	080057a8 	.word	0x080057a8

080018cc <MQTTConnect>:

void MQTTConnect(uint8_t *RXBuffer){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 80018d8:	f000 fa4e 	bl	8001d78 <HAL_GetTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATQMTCONN);
 80018e0:	491b      	ldr	r1, [pc, #108]	; (8001950 <MQTTConnect+0x84>)
 80018e2:	481c      	ldr	r0, [pc, #112]	; (8001954 <MQTTConnect+0x88>)
 80018e4:	f003 f9be 	bl	8004c64 <siprintf>
	while(status == 0){
 80018e8:	e029      	b.n	800193e <MQTTConnect+0x72>

		HAL_UART_Transmit(&huart1, mainBuffer, 49, 100);
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2231      	movs	r2, #49	; 0x31
 80018ee:	4919      	ldr	r1, [pc, #100]	; (8001954 <MQTTConnect+0x88>)
 80018f0:	4819      	ldr	r0, [pc, #100]	; (8001958 <MQTTConnect+0x8c>)
 80018f2:	f002 f99d 	bl	8003c30 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 9, 4000);
 80018f6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80018fa:	2209      	movs	r2, #9
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4816      	ldr	r0, [pc, #88]	; (8001958 <MQTTConnect+0x8c>)
 8001900:	f002 fa19 	bl	8003d36 <HAL_UART_Receive>

		status = checkCommand(RXBuffer, (uint8_t*)"+QMT");
 8001904:	4915      	ldr	r1, [pc, #84]	; (800195c <MQTTConnect+0x90>)
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fe87 	bl	800161a <checkCommand>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]

		if(status == 0){
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <MQTTConnect+0x56>
			status = checkCommand(RXBuffer, (uint8_t*)"ERROR");
 8001916:	4912      	ldr	r1, [pc, #72]	; (8001960 <MQTTConnect+0x94>)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fe7e 	bl	800161a <checkCommand>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]

		}

		if(status){
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10e      	bne.n	8001946 <MQTTConnect+0x7a>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 8001928:	f000 fa26 	bl	8001d78 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f242 720f 	movw	r2, #9999	; 0x270f
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <MQTTConnect+0x72>
			HAL_NVIC_SystemReset();
 800193a:	f000 fb62 	bl	8002002 <HAL_NVIC_SystemReset>
	while(status == 0){
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0d2      	beq.n	80018ea <MQTTConnect+0x1e>
		}
	}
}
 8001944:	e000      	b.n	8001948 <MQTTConnect+0x7c>
			break;
 8001946:	bf00      	nop
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	080057b8 	.word	0x080057b8
 8001954:	20000634 	.word	0x20000634
 8001958:	20000100 	.word	0x20000100
 800195c:	080057ec 	.word	0x080057ec
 8001960:	0800576c 	.word	0x0800576c

08001964 <MQTTSubToTopic>:

void MQTTSubToTopic(uint8_t *RXBuffer){
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
//	uint8_t status = 0;
//	while(status == 0){
	sprintf((char*)mainBuffer, ATQMTSUB);
 800196c:	4908      	ldr	r1, [pc, #32]	; (8001990 <MQTTSubToTopic+0x2c>)
 800196e:	4809      	ldr	r0, [pc, #36]	; (8001994 <MQTTSubToTopic+0x30>)
 8001970:	f003 f978 	bl	8004c64 <siprintf>
		HAL_UART_Transmit(&huart1, mainBuffer, 35, 100);
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	2223      	movs	r2, #35	; 0x23
 8001978:	4906      	ldr	r1, [pc, #24]	; (8001994 <MQTTSubToTopic+0x30>)
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MQTTSubToTopic+0x34>)
 800197c:	f002 f958 	bl	8003c30 <HAL_UART_Transmit>
//		HAL_UART_Receive(&huart1, RXBuffer, 25, 2000);
		HAL_Delay(500);
 8001980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001984:	f000 fa02 	bl	8001d8c <HAL_Delay>
//		}
//		if(status){
//			break;
//		}
//	}
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	080057f4 	.word	0x080057f4
 8001994:	20000634 	.word	0x20000634
 8001998:	20000100 	.word	0x20000100

0800199c <MQTTPubToTopic>:

void MQTTPubToTopic(int length){
 800199c:	b580      	push	{r7, lr}
 800199e:	b092      	sub	sp, #72	; 0x48
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	uint8_t MQTT_PUB[60];
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\"liftos08765546789\",%d\r\n", (length));
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4909      	ldr	r1, [pc, #36]	; (80019d0 <MQTTPubToTopic+0x34>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 f959 	bl	8004c64 <siprintf>


		HAL_UART_Transmit_IT(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0]);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	223c      	movs	r2, #60	; 0x3c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MQTTPubToTopic+0x38>)
 80019bc:	f002 fa4d 	bl	8003e5a <HAL_UART_Transmit_IT>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 80019c0:	201e      	movs	r0, #30
 80019c2:	f000 f9e3 	bl	8001d8c <HAL_Delay>

}
 80019c6:	bf00      	nop
 80019c8:	3748      	adds	r7, #72	; 0x48
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	0800581c 	.word	0x0800581c
 80019d4:	20000100 	.word	0x20000100

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_MspInit+0x5c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <HAL_MspInit+0x5c>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_MspInit+0x5c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x5c>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x5c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x5c>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_MspInit+0x60>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_MspInit+0x60>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_I2C_MspInit+0x70>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d123      	bne.n	8001aa4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a74:	23c0      	movs	r3, #192	; 0xc0
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <HAL_I2C_MspInit+0x78>)
 8001a88:	f000 fd88 	bl	800259c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a96:	61d3      	str	r3, [r2, #28]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_UART_MspInit+0x9c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d139      	bne.n	8001b4c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_UART_MspInit+0xa0>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_UART_MspInit+0xa0>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_UART_MspInit+0xa0>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_UART_MspInit+0xa0>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <HAL_UART_MspInit+0xa0>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_UART_MspInit+0xa0>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480f      	ldr	r0, [pc, #60]	; (8001b5c <HAL_UART_MspInit+0xa4>)
 8001b1e:	f000 fd3d 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4809      	ldr	r0, [pc, #36]	; (8001b5c <HAL_UART_MspInit+0xa4>)
 8001b38:	f000 fd30 	bl	800259c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2025      	movs	r0, #37	; 0x25
 8001b42:	f000 fa34 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b46:	2025      	movs	r0, #37	; 0x25
 8001b48:	f000 fa4d 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40013800 	.word	0x40013800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010800 	.word	0x40010800

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8001b6a:	f000 fa4a 	bl	8002002 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x8>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001baa:	f000 f8d3 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <USART1_IRQHandler+0x10>)
 8001bba:	f002 f9a9 	bl	8003f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000100 	.word	0x20000100

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f002 ff0e 	bl	8004a18 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20005000 	.word	0x20005000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200006b4 	.word	0x200006b4
 8001c30:	200006f0 	.word	0x200006f0

08001c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
  }
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 8001c40:	f7ff fff8 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c5c:	4c09      	ldr	r4, [pc, #36]	; (8001c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f002 fedb 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7ff fa13 	bl	8001098 <main>
  bx lr
 8001c72:	4770      	bx	lr
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001c7c:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 8001c80:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001c84:	200006f0 	.word	0x200006f0

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x28>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x28>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f97b 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f000 f826 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fe96 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_DeInit+0x2c>)
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_DeInit+0x2c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_DeInit+0x2c>)
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_DeInit+0x2c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001cd8:	f000 f806 	bl	8001ce8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f979 	bl	800200a <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f93d 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000014 	.word	0x20000014
 8001d4c:	2000001c 	.word	0x2000001c
 8001d50:	20000018 	.word	0x20000018

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	2000001c 	.word	0x2000001c
 8001d74:	200006b8 	.word	0x200006b8

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	200006b8 	.word	0x200006b8

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000001c 	.word	0x2000001c

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4906      	ldr	r1, [pc, #24]	; (8001e6c <__NVIC_EnableIRQ+0x34>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2c:	f3bf 8f4f 	dsb	sy
}
 8001f30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <__NVIC_SystemReset+0x24>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f3a:	4904      	ldr	r1, [pc, #16]	; (8001f4c <__NVIC_SystemReset+0x24>)
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <__NVIC_SystemReset+0x28>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f42:	f3bf 8f4f 	dsb	sy
}
 8001f46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <__NVIC_SystemReset+0x20>
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	05fa0004 	.word	0x05fa0004

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff7a 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff17 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff2c 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff7a 	bl	8001ec4 <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff49 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff1f 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002006:	f7ff ff8f 	bl	8001f28 <__NVIC_SystemReset>

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff9e 	bl	8001f54 <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d008      	beq.n	800204c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2204      	movs	r2, #4
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e020      	b.n	800208e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 020e 	bic.w	r2, r2, #14
 800205a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d005      	beq.n	80020bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e051      	b.n	8002160 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_DMA_Abort_IT+0xd4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d029      	beq.n	800213a <HAL_DMA_Abort_IT+0xa2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <HAL_DMA_Abort_IT+0xd8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <HAL_DMA_Abort_IT+0x9e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_DMA_Abort_IT+0xdc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01a      	beq.n	8002130 <HAL_DMA_Abort_IT+0x98>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_DMA_Abort_IT+0xe0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d012      	beq.n	800212a <HAL_DMA_Abort_IT+0x92>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_DMA_Abort_IT+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00a      	beq.n	8002124 <HAL_DMA_Abort_IT+0x8c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_DMA_Abort_IT+0xe8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d102      	bne.n	800211e <HAL_DMA_Abort_IT+0x86>
 8002118:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800211c:	e00e      	b.n	800213c <HAL_DMA_Abort_IT+0xa4>
 800211e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002122:	e00b      	b.n	800213c <HAL_DMA_Abort_IT+0xa4>
 8002124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002128:	e008      	b.n	800213c <HAL_DMA_Abort_IT+0xa4>
 800212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212e:	e005      	b.n	800213c <HAL_DMA_Abort_IT+0xa4>
 8002130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002134:	e002      	b.n	800213c <HAL_DMA_Abort_IT+0xa4>
 8002136:	2310      	movs	r3, #16
 8002138:	e000      	b.n	800213c <HAL_DMA_Abort_IT+0xa4>
 800213a:	2301      	movs	r3, #1
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_DMA_Abort_IT+0xec>)
 800213e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
    } 
  }
  return status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40020008 	.word	0x40020008
 8002170:	4002001c 	.word	0x4002001c
 8002174:	40020030 	.word	0x40020030
 8002178:	40020044 	.word	0x40020044
 800217c:	40020058 	.word	0x40020058
 8002180:	4002006c 	.word	0x4002006c
 8002184:	40020000 	.word	0x40020000

08002188 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_FLASH_Program+0xd8>)
 80021a4:	7e1b      	ldrb	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_FLASH_Program+0x26>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e054      	b.n	8002258 <HAL_FLASH_Program+0xd0>
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_FLASH_Program+0xd8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80021b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b8:	f000 f8b2 	bl	8002320 <FLASH_WaitForLastOperation>
 80021bc:	4603      	mov	r3, r0
 80021be:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d144      	bne.n	8002250 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80021cc:	2301      	movs	r3, #1
 80021ce:	757b      	strb	r3, [r7, #21]
 80021d0:	e007      	b.n	80021e2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d102      	bne.n	80021de <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80021d8:	2302      	movs	r3, #2
 80021da:	757b      	strb	r3, [r7, #21]
 80021dc:	e001      	b.n	80021e2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80021de:	2304      	movs	r3, #4
 80021e0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	75bb      	strb	r3, [r7, #22]
 80021e6:	e02d      	b.n	8002244 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80021e8:	7dbb      	ldrb	r3, [r7, #22]
 80021ea:	005a      	lsls	r2, r3, #1
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	eb02 0c03 	add.w	ip, r2, r3
 80021f2:	7dbb      	ldrb	r3, [r7, #22]
 80021f4:	0119      	lsls	r1, r3, #4
 80021f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fa:	f1c1 0620 	rsb	r6, r1, #32
 80021fe:	f1a1 0020 	sub.w	r0, r1, #32
 8002202:	fa22 f401 	lsr.w	r4, r2, r1
 8002206:	fa03 f606 	lsl.w	r6, r3, r6
 800220a:	4334      	orrs	r4, r6
 800220c:	fa23 f000 	lsr.w	r0, r3, r0
 8002210:	4304      	orrs	r4, r0
 8002212:	fa23 f501 	lsr.w	r5, r3, r1
 8002216:	b2a3      	uxth	r3, r4
 8002218:	4619      	mov	r1, r3
 800221a:	4660      	mov	r0, ip
 800221c:	f000 f864 	bl	80022e8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002220:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002224:	f000 f87c 	bl	8002320 <FLASH_WaitForLastOperation>
 8002228:	4603      	mov	r3, r0
 800222a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_FLASH_Program+0xdc>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_FLASH_Program+0xdc>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800223e:	7dbb      	ldrb	r3, [r7, #22]
 8002240:	3301      	adds	r3, #1
 8002242:	75bb      	strb	r3, [r7, #22]
 8002244:	7dba      	ldrb	r2, [r7, #22]
 8002246:	7d7b      	ldrb	r3, [r7, #21]
 8002248:	429a      	cmp	r2, r3
 800224a:	d3cd      	bcc.n	80021e8 <HAL_FLASH_Program+0x60>
 800224c:	e000      	b.n	8002250 <HAL_FLASH_Program+0xc8>
      {
        break;
 800224e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_FLASH_Program+0xd8>)
 8002252:	2200      	movs	r2, #0
 8002254:	761a      	strb	r2, [r3, #24]

  return status;
 8002256:	7dfb      	ldrb	r3, [r7, #23]
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002260:	200006c0 	.word	0x200006c0
 8002264:	40022000 	.word	0x40022000

08002268 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_FLASH_Unlock+0x40>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_FLASH_Unlock+0x40>)
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_FLASH_Unlock+0x44>)
 8002282:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_FLASH_Unlock+0x40>)
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_FLASH_Unlock+0x48>)
 8002288:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_FLASH_Unlock+0x40>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800229a:	79fb      	ldrb	r3, [r7, #7]
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	45670123 	.word	0x45670123
 80022b0:	cdef89ab 	.word	0xcdef89ab

080022b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_FLASH_Lock+0x1c>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_FLASH_Lock+0x1c>)
 80022be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_FLASH_GetError+0x10>)
 80022da:	69db      	ldr	r3, [r3, #28]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	200006c0 	.word	0x200006c0

080022e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <FLASH_Program_HalfWord+0x30>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <FLASH_Program_HalfWord+0x34>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <FLASH_Program_HalfWord+0x34>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	887a      	ldrh	r2, [r7, #2]
 800230a:	801a      	strh	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200006c0 	.word	0x200006c0
 800231c:	40022000 	.word	0x40022000

08002320 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff fd26 	bl	8001d78 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800232e:	e010      	b.n	8002352 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d00c      	beq.n	8002352 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <FLASH_WaitForLastOperation+0x2e>
 800233e:	f7ff fd1b 	bl	8001d78 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d201      	bcs.n	8002352 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e025      	b.n	800239e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <FLASH_WaitForLastOperation+0x88>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e8      	bne.n	8002330 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <FLASH_WaitForLastOperation+0x88>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <FLASH_WaitForLastOperation+0x88>)
 800236c:	2220      	movs	r2, #32
 800236e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <FLASH_WaitForLastOperation+0x88>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <FLASH_WaitForLastOperation+0x88>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <FLASH_WaitForLastOperation+0x88>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002394:	f000 f80a 	bl	80023ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40022000 	.word	0x40022000

080023ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <FLASH_SetErrorCode+0x98>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <FLASH_SetErrorCode+0x9c>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <FLASH_SetErrorCode+0x9c>)
 80023cc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <FLASH_SetErrorCode+0x98>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <FLASH_SetErrorCode+0x9c>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <FLASH_SetErrorCode+0x9c>)
 80023ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <FLASH_SetErrorCode+0x98>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <FLASH_SetErrorCode+0x9c>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <FLASH_SetErrorCode+0x9c>)
 800240c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <FLASH_SetErrorCode+0x98>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <FLASH_SetErrorCode+0x98>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f240 1201 	movw	r2, #257	; 0x101
 8002420:	4293      	cmp	r3, r2
 8002422:	d106      	bne.n	8002432 <FLASH_SetErrorCode+0x86>
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <FLASH_SetErrorCode+0x98>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <FLASH_SetErrorCode+0x98>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	61d3      	str	r3, [r2, #28]
}  
 8002430:	e002      	b.n	8002438 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <FLASH_SetErrorCode+0x98>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	60d3      	str	r3, [r2, #12]
}  
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40022000 	.word	0x40022000
 8002448:	200006c0 	.word	0x200006c0

0800244c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800245e:	4b2f      	ldr	r3, [pc, #188]	; (800251c <HAL_FLASHEx_Erase+0xd0>)
 8002460:	7e1b      	ldrb	r3, [r3, #24]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_FLASHEx_Erase+0x1e>
 8002466:	2302      	movs	r3, #2
 8002468:	e053      	b.n	8002512 <HAL_FLASHEx_Erase+0xc6>
 800246a:	4b2c      	ldr	r3, [pc, #176]	; (800251c <HAL_FLASHEx_Erase+0xd0>)
 800246c:	2201      	movs	r2, #1
 800246e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d116      	bne.n	80024a6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800247c:	f7ff ff50 	bl	8002320 <FLASH_WaitForLastOperation>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d141      	bne.n	800250a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002486:	2001      	movs	r0, #1
 8002488:	f000 f84c 	bl	8002524 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800248c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002490:	f7ff ff46 	bl	8002320 <FLASH_WaitForLastOperation>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_FLASHEx_Erase+0xd4>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_FLASHEx_Erase+0xd4>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	6113      	str	r3, [r2, #16]
 80024a4:	e031      	b.n	800250a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024aa:	f7ff ff39 	bl	8002320 <FLASH_WaitForLastOperation>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d12a      	bne.n	800250a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ba:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	e019      	b.n	80024f8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80024c4:	68b8      	ldr	r0, [r7, #8]
 80024c6:	f000 f849 	bl	800255c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024ce:	f7ff ff27 	bl	8002320 <FLASH_WaitForLastOperation>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_FLASHEx_Erase+0xd4>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_FLASHEx_Erase+0xd4>)
 80024dc:	f023 0302 	bic.w	r3, r3, #2
 80024e0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	601a      	str	r2, [r3, #0]
            break;
 80024ee:	e00c      	b.n	800250a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	029a      	lsls	r2, r3, #10
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	d3dc      	bcc.n	80024c4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_FLASHEx_Erase+0xd0>)
 800250c:	2200      	movs	r2, #0
 800250e:	761a      	strb	r2, [r3, #24]

  return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200006c0 	.word	0x200006c0
 8002520:	40022000 	.word	0x40022000

08002524 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <FLASH_MassErase+0x30>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <FLASH_MassErase+0x34>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <FLASH_MassErase+0x34>)
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <FLASH_MassErase+0x34>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <FLASH_MassErase+0x34>)
 8002544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002548:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	200006c0 	.word	0x200006c0
 8002558:	40022000 	.word	0x40022000

0800255c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <FLASH_PageErase+0x38>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <FLASH_PageErase+0x3c>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <FLASH_PageErase+0x3c>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <FLASH_PageErase+0x3c>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <FLASH_PageErase+0x3c>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a05      	ldr	r2, [pc, #20]	; (8002598 <FLASH_PageErase+0x3c>)
 8002582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002586:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200006c0 	.word	0x200006c0
 8002598:	40022000 	.word	0x40022000

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b08b      	sub	sp, #44	; 0x2c
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ae:	e169      	b.n	8002884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b0:	2201      	movs	r2, #1
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 8158 	bne.w	800287e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a9a      	ldr	r2, [pc, #616]	; (800283c <HAL_GPIO_Init+0x2a0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d05e      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025d8:	4a98      	ldr	r2, [pc, #608]	; (800283c <HAL_GPIO_Init+0x2a0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d875      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 80025de:	4a98      	ldr	r2, [pc, #608]	; (8002840 <HAL_GPIO_Init+0x2a4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d058      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025e4:	4a96      	ldr	r2, [pc, #600]	; (8002840 <HAL_GPIO_Init+0x2a4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d86f      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 80025ea:	4a96      	ldr	r2, [pc, #600]	; (8002844 <HAL_GPIO_Init+0x2a8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d052      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025f0:	4a94      	ldr	r2, [pc, #592]	; (8002844 <HAL_GPIO_Init+0x2a8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d869      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 80025f6:	4a94      	ldr	r2, [pc, #592]	; (8002848 <HAL_GPIO_Init+0x2ac>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04c      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025fc:	4a92      	ldr	r2, [pc, #584]	; (8002848 <HAL_GPIO_Init+0x2ac>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d863      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 8002602:	4a92      	ldr	r2, [pc, #584]	; (800284c <HAL_GPIO_Init+0x2b0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d046      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 8002608:	4a90      	ldr	r2, [pc, #576]	; (800284c <HAL_GPIO_Init+0x2b0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d85d      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d82a      	bhi.n	8002668 <HAL_GPIO_Init+0xcc>
 8002612:	2b12      	cmp	r3, #18
 8002614:	d859      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_GPIO_Init+0x80>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	08002697 	.word	0x08002697
 8002620:	08002671 	.word	0x08002671
 8002624:	08002683 	.word	0x08002683
 8002628:	080026c5 	.word	0x080026c5
 800262c:	080026cb 	.word	0x080026cb
 8002630:	080026cb 	.word	0x080026cb
 8002634:	080026cb 	.word	0x080026cb
 8002638:	080026cb 	.word	0x080026cb
 800263c:	080026cb 	.word	0x080026cb
 8002640:	080026cb 	.word	0x080026cb
 8002644:	080026cb 	.word	0x080026cb
 8002648:	080026cb 	.word	0x080026cb
 800264c:	080026cb 	.word	0x080026cb
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080026cb 	.word	0x080026cb
 8002658:	080026cb 	.word	0x080026cb
 800265c:	080026cb 	.word	0x080026cb
 8002660:	08002679 	.word	0x08002679
 8002664:	0800268d 	.word	0x0800268d
 8002668:	4a79      	ldr	r2, [pc, #484]	; (8002850 <HAL_GPIO_Init+0x2b4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266e:	e02c      	b.n	80026ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	623b      	str	r3, [r7, #32]
          break;
 8002676:	e029      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	3304      	adds	r3, #4
 800267e:	623b      	str	r3, [r7, #32]
          break;
 8002680:	e024      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	3308      	adds	r3, #8
 8002688:	623b      	str	r3, [r7, #32]
          break;
 800268a:	e01f      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	330c      	adds	r3, #12
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e01a      	b.n	80026cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269e:	2304      	movs	r3, #4
 80026a0:	623b      	str	r3, [r7, #32]
          break;
 80026a2:	e013      	b.n	80026cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ac:	2308      	movs	r3, #8
 80026ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	611a      	str	r2, [r3, #16]
          break;
 80026b6:	e009      	b.n	80026cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b8:	2308      	movs	r3, #8
 80026ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	615a      	str	r2, [r3, #20]
          break;
 80026c2:	e003      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x130>
          break;
 80026ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2bff      	cmp	r3, #255	; 0xff
 80026d0:	d801      	bhi.n	80026d6 <HAL_GPIO_Init+0x13a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	e001      	b.n	80026da <HAL_GPIO_Init+0x13e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2bff      	cmp	r3, #255	; 0xff
 80026e0:	d802      	bhi.n	80026e8 <HAL_GPIO_Init+0x14c>
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	e002      	b.n	80026ee <HAL_GPIO_Init+0x152>
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	3b08      	subs	r3, #8
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	210f      	movs	r1, #15
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	6a39      	ldr	r1, [r7, #32]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	431a      	orrs	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80b1 	beq.w	800287e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_GPIO_Init+0x2b8>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <HAL_GPIO_Init+0x2b8>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x2b8>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <HAL_GPIO_Init+0x2bc>)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a40      	ldr	r2, [pc, #256]	; (800285c <HAL_GPIO_Init+0x2c0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d013      	beq.n	8002788 <HAL_GPIO_Init+0x1ec>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3f      	ldr	r2, [pc, #252]	; (8002860 <HAL_GPIO_Init+0x2c4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00d      	beq.n	8002784 <HAL_GPIO_Init+0x1e8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3e      	ldr	r2, [pc, #248]	; (8002864 <HAL_GPIO_Init+0x2c8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <HAL_GPIO_Init+0x1e4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3d      	ldr	r2, [pc, #244]	; (8002868 <HAL_GPIO_Init+0x2cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_GPIO_Init+0x1e0>
 8002778:	2303      	movs	r3, #3
 800277a:	e006      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 800277c:	2304      	movs	r3, #4
 800277e:	e004      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 8002780:	2302      	movs	r3, #2
 8002782:	e002      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 8002788:	2300      	movs	r3, #0
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	f002 0203 	and.w	r2, r2, #3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4093      	lsls	r3, r2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800279a:	492f      	ldr	r1, [pc, #188]	; (8002858 <HAL_GPIO_Init+0x2bc>)
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	492c      	ldr	r1, [pc, #176]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	4928      	ldr	r1, [pc, #160]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4922      	ldr	r1, [pc, #136]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	491e      	ldr	r1, [pc, #120]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_GPIO_Init+0x2d0>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4918      	ldr	r1, [pc, #96]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_GPIO_Init+0x2d0>)
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	43db      	mvns	r3, r3
 800281a:	4914      	ldr	r1, [pc, #80]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800281c:	4013      	ands	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d021      	beq.n	8002870 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e021      	b.n	800287e <HAL_GPIO_Init+0x2e2>
 800283a:	bf00      	nop
 800283c:	10320000 	.word	0x10320000
 8002840:	10310000 	.word	0x10310000
 8002844:	10220000 	.word	0x10220000
 8002848:	10210000 	.word	0x10210000
 800284c:	10120000 	.word	0x10120000
 8002850:	10110000 	.word	0x10110000
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	40010800 	.word	0x40010800
 8002860:	40010c00 	.word	0x40010c00
 8002864:	40011000 	.word	0x40011000
 8002868:	40011400 	.word	0x40011400
 800286c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	43db      	mvns	r3, r3
 8002878:	4909      	ldr	r1, [pc, #36]	; (80028a0 <HAL_GPIO_Init+0x304>)
 800287a:	4013      	ands	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	f47f ae8e 	bne.w	80025b0 <HAL_GPIO_Init+0x14>
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	372c      	adds	r7, #44	; 0x2c
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]
 80028de:	4613      	mov	r3, r2
 80028e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e2:	787b      	ldrb	r3, [r7, #1]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e8:	887a      	ldrh	r2, [r7, #2]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ee:	e003      	b.n	80028f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	041a      	lsls	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	611a      	str	r2, [r3, #16]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
	...

08002904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e12b      	b.n	8002b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff f886 	bl	8001a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002968:	f001 f8cc 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 800296c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a81      	ldr	r2, [pc, #516]	; (8002b78 <HAL_I2C_Init+0x274>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d807      	bhi.n	8002988 <HAL_I2C_Init+0x84>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a80      	ldr	r2, [pc, #512]	; (8002b7c <HAL_I2C_Init+0x278>)
 800297c:	4293      	cmp	r3, r2
 800297e:	bf94      	ite	ls
 8002980:	2301      	movls	r3, #1
 8002982:	2300      	movhi	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e006      	b.n	8002996 <HAL_I2C_Init+0x92>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a7d      	ldr	r2, [pc, #500]	; (8002b80 <HAL_I2C_Init+0x27c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0e7      	b.n	8002b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a78      	ldr	r2, [pc, #480]	; (8002b84 <HAL_I2C_Init+0x280>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0c9b      	lsrs	r3, r3, #18
 80029a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_I2C_Init+0x274>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d802      	bhi.n	80029d8 <HAL_I2C_Init+0xd4>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3301      	adds	r3, #1
 80029d6:	e009      	b.n	80029ec <HAL_I2C_Init+0xe8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	4a69      	ldr	r2, [pc, #420]	; (8002b88 <HAL_I2C_Init+0x284>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	3301      	adds	r3, #1
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	495c      	ldr	r1, [pc, #368]	; (8002b78 <HAL_I2C_Init+0x274>)
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	d819      	bhi.n	8002a40 <HAL_I2C_Init+0x13c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e59      	subs	r1, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a20:	400b      	ands	r3, r1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_I2C_Init+0x138>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e59      	subs	r1, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3a:	e051      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e04f      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <HAL_I2C_Init+0x168>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e012      	b.n	8002a92 <HAL_I2C_Init+0x18e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Init+0x196>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_I2C_Init+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e58      	subs	r0, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	440b      	add	r3, r1
 8002ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abe:	e00f      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6809      	ldr	r1, [r1, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6911      	ldr	r1, [r2, #16]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68d2      	ldr	r2, [r2, #12]
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	000186a0 	.word	0x000186a0
 8002b7c:	001e847f 	.word	0x001e847f
 8002b80:	003d08ff 	.word	0x003d08ff
 8002b84:	431bde83 	.word	0x431bde83
 8002b88:	10624dd3 	.word	0x10624dd3

08002b8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	817b      	strh	r3, [r7, #10]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff f8ea 	bl	8001d78 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	f040 80e0 	bne.w	8002d74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2319      	movs	r3, #25
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4970      	ldr	r1, [pc, #448]	; (8002d80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f964 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0d3      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2C_Master_Transmit+0x50>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d007      	beq.n	8002c02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2221      	movs	r2, #33	; 0x21
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a50      	ldr	r2, [pc, #320]	; (8002d84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f89c 	bl	8002d88 <I2C_MasterRequestWrite>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e08d      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c70:	e066      	b.n	8002d40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fa22 	bl	80030c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x188>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fa19 	bl	8003150 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d107      	bne.n	8002d3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01a      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d194      	bne.n	8002c72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d006      	beq.n	8002db2 <I2C_MasterRequestWrite+0x2a>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d003      	beq.n	8002db2 <I2C_MasterRequestWrite+0x2a>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002db0:	d108      	bne.n	8002dc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e00b      	b.n	8002ddc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	2b12      	cmp	r3, #18
 8002dca:	d107      	bne.n	8002ddc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f84f 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d103      	bne.n	8002e0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e035      	b.n	8002e7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e18:	d108      	bne.n	8002e2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	e01b      	b.n	8002e64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e2c:	897b      	ldrh	r3, [r7, #10]
 8002e2e:	11db      	asrs	r3, r3, #7
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0306 	and.w	r3, r3, #6
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f063 030f 	orn	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <I2C_MasterRequestWrite+0xfc>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f898 	bl	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e010      	b.n	8002e7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4907      	ldr	r1, [pc, #28]	; (8002e88 <I2C_MasterRequestWrite+0x100>)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f888 	bl	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	00010008 	.word	0x00010008
 8002e88:	00010002 	.word	0x00010002

08002e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9c:	e048      	b.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d044      	beq.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fe ff67 	bl	8001d78 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d139      	bne.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10d      	bne.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	e00c      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d116      	bne.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e023      	b.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d10d      	bne.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	e00c      	b.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d093      	beq.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f8e:	e071      	b.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d123      	bne.n	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0204 	orr.w	r2, r3, #4
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e067      	b.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d041      	beq.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fe fec2 	bl	8001d78 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d136      	bne.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10c      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e00b      	b.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	43da      	mvns	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e021      	b.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10c      	bne.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	43da      	mvns	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e00b      	b.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f af6d 	bne.w	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030cc:	e034      	b.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f886 	bl	80031e0 <I2C_IsAcknowledgeFailed>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e034      	b.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d028      	beq.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fe47 	bl	8001d78 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11d      	bne.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d016      	beq.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e007      	b.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d1c3      	bne.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315c:	e034      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f83e 	bl	80031e0 <I2C_IsAcknowledgeFailed>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e034      	b.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d028      	beq.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fe fdff 	bl	8001d78 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11d      	bne.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d016      	beq.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d1c3      	bne.n	800315e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f6:	d11b      	bne.n	8003230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003242:	f7fe fd99 	bl	8001d78 <HAL_GetTick>
 8003246:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003248:	4b45      	ldr	r3, [pc, #276]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a44      	ldr	r2, [pc, #272]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7fe fd8f 	bl	8001d78 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e077      	b.n	8003358 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <HAL_RCC_DeInit+0x124>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003284:	f7fe fd78 	bl	8001d78 <HAL_GetTick>
 8003288:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800328a:	4b35      	ldr	r3, [pc, #212]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7fe fd71 	bl	8001d78 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e057      	b.n	8003358 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_RCC_DeInit+0x124>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_DeInit+0x128>)
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <HAL_RCC_DeInit+0x12c>)
 80032b8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <HAL_RCC_DeInit+0x130>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd18 	bl	8001cf4 <HAL_InitTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e044      	b.n	8003358 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80032ce:	f7fe fd53 	bl	8001d78 <HAL_GetTick>
 80032d2:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_RCC_DeInit+0x124>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_RCC_DeInit+0x124>)
 80032da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032de:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe fd49 	bl	8001d78 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e031      	b.n	8003358 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_RCC_DeInit+0x124>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_RCC_DeInit+0x124>)
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003306:	f7fe fd37 	bl	8001d78 <HAL_GetTick>
 800330a:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_RCC_DeInit+0x124>)
 8003312:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003316:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331a:	f7fe fd2d 	bl	8001d78 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e015      	b.n	8003358 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a08      	ldr	r2, [pc, #32]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_DeInit+0x124>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	4a05      	ldr	r2, [pc, #20]	; (8003360 <HAL_RCC_DeInit+0x124>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_RCC_DeInit+0x124>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	20000014 	.word	0x20000014
 8003368:	007a1200 	.word	0x007a1200
 800336c:	20000018 	.word	0x20000018

08003370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e272      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8087 	beq.w	800349e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003390:	4b92      	ldr	r3, [pc, #584]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b04      	cmp	r3, #4
 800339a:	d00c      	beq.n	80033b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800339c:	4b8f      	ldr	r3, [pc, #572]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d112      	bne.n	80033ce <HAL_RCC_OscConfig+0x5e>
 80033a8:	4b8c      	ldr	r3, [pc, #560]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d10b      	bne.n	80033ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b6:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06c      	beq.n	800349c <HAL_RCC_OscConfig+0x12c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d168      	bne.n	800349c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e24c      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x76>
 80033d8:	4b80      	ldr	r3, [pc, #512]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a7f      	ldr	r2, [pc, #508]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e02e      	b.n	8003444 <HAL_RCC_OscConfig+0xd4>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b7b      	ldr	r3, [pc, #492]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7a      	ldr	r2, [pc, #488]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b78      	ldr	r3, [pc, #480]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a77      	ldr	r2, [pc, #476]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xd4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0xbc>
 8003412:	4b72      	ldr	r3, [pc, #456]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6e      	ldr	r2, [pc, #440]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xd4>
 800342c:	4b6b      	ldr	r3, [pc, #428]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6a      	ldr	r2, [pc, #424]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b68      	ldr	r3, [pc, #416]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a67      	ldr	r2, [pc, #412]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fc94 	bl	8001d78 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe fc90 	bl	8001d78 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e200      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xe4>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fc80 	bl	8001d78 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe fc7c 	bl	8001d78 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1ec      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	4b53      	ldr	r3, [pc, #332]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x10c>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d063      	beq.n	8003572 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034aa:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034b6:	4b49      	ldr	r3, [pc, #292]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x18c>
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x176>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1c0      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4939      	ldr	r1, [pc, #228]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	e03a      	b.n	8003572 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe fc35 	bl	8001d78 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fc31 	bl	8001d78 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1a1      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4927      	ldr	r1, [pc, #156]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fe fc14 	bl	8001d78 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fc10 	bl	8001d78 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e180      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03a      	beq.n	80035f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d019      	beq.n	80035ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_RCC_OscConfig+0x274>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe fbf4 	bl	8001d78 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe fbf0 	bl	8001d78 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e160      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f000 face 	bl	8003b54 <RCC_Delay>
 80035b8:	e01c      	b.n	80035f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_RCC_OscConfig+0x274>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fe fbda 	bl	8001d78 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c6:	e00f      	b.n	80035e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c8:	f7fe fbd6 	bl	8001d78 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d908      	bls.n	80035e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e146      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	42420000 	.word	0x42420000
 80035e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	4b92      	ldr	r3, [pc, #584]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e9      	bne.n	80035c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a6 	beq.w	800374e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003606:	4b8b      	ldr	r3, [pc, #556]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10d      	bne.n	800362e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b88      	ldr	r3, [pc, #544]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4a87      	ldr	r2, [pc, #540]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	61d3      	str	r3, [r2, #28]
 800361e:	4b85      	ldr	r3, [pc, #532]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_OscConfig+0x4c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCC_OscConfig+0x4c8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7e      	ldr	r2, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x4c8>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fe fb97 	bl	8001d78 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fe fb93 	bl	8001d78 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e103      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	4b75      	ldr	r3, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x4c8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x312>
 8003674:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6213      	str	r3, [r2, #32]
 8003680:	e02d      	b.n	80036de <HAL_RCC_OscConfig+0x36e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x334>
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a69      	ldr	r2, [pc, #420]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	e01c      	b.n	80036de <HAL_RCC_OscConfig+0x36e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x356>
 80036ac:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a60      	ldr	r2, [pc, #384]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a5d      	ldr	r2, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	e00b      	b.n	80036de <HAL_RCC_OscConfig+0x36e>
 80036c6:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a5a      	ldr	r2, [pc, #360]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d015      	beq.n	8003712 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fb47 	bl	8001d78 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe fb43 	bl	8001d78 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0b1      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ee      	beq.n	80036ee <HAL_RCC_OscConfig+0x37e>
 8003710:	e014      	b.n	800373c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe fb31 	bl	8001d78 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fb2d 	bl	8001d78 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e09b      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ee      	bne.n	800371a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8087 	beq.w	8003866 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d061      	beq.n	8003828 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d146      	bne.n	80037fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x4cc>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fb01 	bl	8001d78 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe fafd 	bl	8001d78 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e06d      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d108      	bne.n	80037b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4921      	ldr	r1, [pc, #132]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a19      	ldr	r1, [r3, #32]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	430b      	orrs	r3, r1
 80037c6:	491b      	ldr	r1, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe fad1 	bl	8001d78 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe facd 	bl	8001d78 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e03d      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x46a>
 80037f8:	e035      	b.n	8003866 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x4cc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe faba 	bl	8001d78 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe fab6 	bl	8001d78 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e026      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x498>
 8003826:	e01e      	b.n	8003866 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e019      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
 8003834:	40021000 	.word	0x40021000
 8003838:	40007000 	.word	0x40007000
 800383c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_OscConfig+0x500>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	429a      	cmp	r2, r3
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000

08003874 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0d0      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d910      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	4965      	ldr	r1, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d040      	beq.n	8003994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d115      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e073      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06b      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4936      	ldr	r1, [pc, #216]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fe fa08 	bl	8001d78 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fe fa04 	bl	8001d78 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e053      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d210      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 0207 	bic.w	r2, r3, #7
 80039aa:	4922      	ldr	r1, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1cc>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f966 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	0800586c 	.word	0x0800586c
 8003a40:	20000014 	.word	0x20000014
 8003a44:	20000018 	.word	0x20000018

08003a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x30>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x36>
 8003a76:	e027      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a7a:	613b      	str	r3, [r7, #16]
      break;
 8003a7c:	e027      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	0c9b      	lsrs	r3, r3, #18
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d010      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0c5b      	lsrs	r3, r3, #17
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aa2:	5cd3      	ldrb	r3, [r2, r3]
 8003aa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aaa:	fb03 f202 	mul.w	r2, r3, r2
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <HAL_RCC_GetSysClockFreq+0xa4>)
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	613b      	str	r3, [r7, #16]
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aca:	613b      	str	r3, [r7, #16]
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	693b      	ldr	r3, [r7, #16]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	08005884 	.word	0x08005884
 8003ae8:	08005894 	.word	0x08005894
 8003aec:	003d0900 	.word	0x003d0900

08003af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	20000014 	.word	0x20000014

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff2 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	0800587c 	.word	0x0800587c

08003b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b30:	f7ff ffde 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0adb      	lsrs	r3, r3, #11
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	0800587c 	.word	0x0800587c

08003b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <RCC_Delay+0x34>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <RCC_Delay+0x38>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	0a5b      	lsrs	r3, r3, #9
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b70:	bf00      	nop
  }
  while (Delay --);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1e5a      	subs	r2, r3, #1
 8003b76:	60fa      	str	r2, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f9      	bne.n	8003b70 <RCC_Delay+0x1c>
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	20000014 	.word	0x20000014
 8003b8c:	10624dd3 	.word	0x10624dd3

08003b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e042      	b.n	8003c28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd ff7e 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fe8d 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d16d      	bne.n	8003d2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_UART_Transmit+0x2c>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e066      	b.n	8003d2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2221      	movs	r2, #33	; 0x21
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c6e:	f7fe f883 	bl	8001d78 <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	d108      	bne.n	8003c9c <HAL_UART_Transmit+0x6c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e003      	b.n	8003ca4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ca4:	e02a      	b.n	8003cfc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fbdc 	bl	800446e <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e036      	b.n	8003d2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1cf      	bne.n	8003ca6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fbac 	bl	800446e <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e006      	b.n	8003d2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b08a      	sub	sp, #40	; 0x28
 8003d3a:	af02      	add	r7, sp, #8
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d17c      	bne.n	8003e50 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_UART_Receive+0x2c>
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e075      	b.n	8003e52 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2222      	movs	r2, #34	; 0x22
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fffd 	bl	8001d78 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d108      	bne.n	8003da8 <HAL_UART_Receive+0x72>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e003      	b.n	8003db0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003db0:	e043      	b.n	8003e3a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2200      	movs	r2, #0
 8003dba:	2120      	movs	r1, #32
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fb56 	bl	800446e <UART_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e042      	b.n	8003e52 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10c      	bne.n	8003dec <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	3302      	adds	r3, #2
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	e01f      	b.n	8003e2c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d007      	beq.n	8003e06 <HAL_UART_Receive+0xd0>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_UART_Receive+0xde>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e008      	b.n	8003e26 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1b6      	bne.n	8003db2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d121      	bne.n	8003eb8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Transmit_IT+0x26>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e01a      	b.n	8003eba <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eb2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d112      	bne.n	8003f04 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_UART_Receive_IT+0x26>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00b      	b.n	8003f06 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fb25 	bl	800454a <UART_Start_Receive_IT>
 8003f00:	4603      	mov	r3, r0
 8003f02:	e000      	b.n	8003f06 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0ba      	sub	sp, #232	; 0xe8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_UART_IRQHandler+0x66>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fc01 	bl	8004776 <UART_Receive_IT>
      return;
 8003f74:	e25b      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80de 	beq.w	800413c <HAL_UART_IRQHandler+0x22c>
 8003f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80d1 	beq.w	800413c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0xae>
 8003fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xd2>
 8003fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xf6>
 8003fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_UART_IRQHandler+0x126>
 8004012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800401e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f043 0208 	orr.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 81f2 	beq.w	8004424 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_UART_IRQHandler+0x14e>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fb8c 	bl	8004776 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_UART_IRQHandler+0x17a>
 8004082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04f      	beq.n	800412a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa96 	bl	80045bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d041      	beq.n	8004122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1d9      	bne.n	800409e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	4a7e      	ldr	r2, [pc, #504]	; (80042f0 <HAL_UART_IRQHandler+0x3e0>)
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd ffca 	bl	8002098 <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00e      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f993 	bl	8004446 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e00a      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f98f 	bl	8004446 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	e006      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f98b 	bl	8004446 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004136:	e175      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	bf00      	nop
    return;
 800413a:	e173      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 814f 	bne.w	80043e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8148 	beq.w	80043e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8141 	beq.w	80043e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80b6 	beq.w	80042f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8145 	beq.w	8004428 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041a6:	429a      	cmp	r2, r3
 80041a8:	f080 813e 	bcs.w	8004428 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f000 8088 	beq.w	80042d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1d9      	bne.n	80041c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800421c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004230:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004234:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004238:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e1      	bne.n	800420c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800426c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800426e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004272:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800427a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e3      	bne.n	8004248 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80042b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fea9 	bl	8002022 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8b6 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ec:	e09c      	b.n	8004428 <HAL_UART_IRQHandler+0x518>
 80042ee:	bf00      	nop
 80042f0:	08004681 	.word	0x08004681
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 808e 	beq.w	800442c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8089 	beq.w	800442c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800433e:	647a      	str	r2, [r7, #68]	; 0x44
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	623b      	str	r3, [r7, #32]
   return(result);
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004376:	633a      	str	r2, [r7, #48]	; 0x30
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043bc:	61fa      	str	r2, [r7, #28]
 80043be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e3      	bne.n	8004398 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f83b 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043e2:	e023      	b.n	800442c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_UART_IRQHandler+0x4f4>
 80043f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f953 	bl	80046a8 <UART_Transmit_IT>
    return;
 8004402:	e014      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00e      	beq.n	800442e <HAL_UART_IRQHandler+0x51e>
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f992 	bl	8004746 <UART_EndTransmit_IT>
    return;
 8004422:	e004      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
    return;
 8004424:	bf00      	nop
 8004426:	e002      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
      return;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
      return;
 800442c:	bf00      	nop
  }
}
 800442e:	37e8      	adds	r7, #232	; 0xe8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b090      	sub	sp, #64	; 0x40
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447e:	e050      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d04c      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x30>
 800448e:	f7fd fc73 	bl	8001d78 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449a:	429a      	cmp	r2, r3
 800449c:	d241      	bcs.n	8004522 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044be:	637a      	str	r2, [r7, #52]	; 0x34
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	613b      	str	r3, [r7, #16]
   return(result);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f2:	623a      	str	r2, [r7, #32]
 80044f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e5      	bne.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00f      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	429a      	cmp	r2, r3
 800453e:	d09f      	beq.n	8004480 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3740      	adds	r7, #64	; 0x40
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	4613      	mov	r3, r2
 8004556:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2222      	movs	r2, #34	; 0x22
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0220 	orr.w	r2, r2, #32
 80045ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b095      	sub	sp, #84	; 0x54
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e4:	643a      	str	r2, [r7, #64]	; 0x40
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	61fb      	str	r3, [r7, #28]
   return(result);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3314      	adds	r3, #20
 8004616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e5      	bne.n	80045f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	2b01      	cmp	r3, #1
 8004632:	d119      	bne.n	8004668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	60bb      	str	r3, [r7, #8]
   return(result);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	647b      	str	r3, [r7, #68]	; 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004654:	61ba      	str	r2, [r7, #24]
 8004656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6979      	ldr	r1, [r7, #20]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	613b      	str	r3, [r7, #16]
   return(result);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004676:	bf00      	nop
 8004678:	3754      	adds	r7, #84	; 0x54
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fed3 	bl	8004446 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b21      	cmp	r3, #33	; 0x21
 80046ba:	d13e      	bne.n	800473a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d114      	bne.n	80046f0 <UART_Transmit_IT+0x48>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d110      	bne.n	80046f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]
 80046ee:	e008      	b.n	8004702 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	1c59      	adds	r1, r3, #1
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6211      	str	r1, [r2, #32]
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4619      	mov	r1, r3
 8004710:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004724:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e000      	b.n	800473c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800473a:	2302      	movs	r3, #2
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fe64 	bl	8004434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08c      	sub	sp, #48	; 0x30
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b22      	cmp	r3, #34	; 0x22
 8004788:	f040 80ae 	bne.w	80048e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d117      	bne.n	80047c6 <UART_Receive_IT+0x50>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d113      	bne.n	80047c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
 80047c4:	e026      	b.n	8004814 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d8:	d007      	beq.n	80047ea <UART_Receive_IT+0x74>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <UART_Receive_IT+0x82>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	e008      	b.n	800480a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4619      	mov	r1, r3
 8004822:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004824:	2b00      	cmp	r3, #0
 8004826:	d15d      	bne.n	80048e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0220 	bic.w	r2, r2, #32
 8004836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	2b01      	cmp	r3, #1
 800486c:	d135      	bne.n	80048da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	613b      	str	r3, [r7, #16]
   return(result);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 0310 	bic.w	r3, r3, #16
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	623a      	str	r2, [r7, #32]
 8004896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	69f9      	ldr	r1, [r7, #28]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e5      	bne.n	8004874 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d10a      	bne.n	80048cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fdc0 	bl	8004458 <HAL_UARTEx_RxEventCallback>
 80048d8:	e002      	b.n	80048e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fc f9da 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e002      	b.n	80048ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3730      	adds	r7, #48	; 0x30
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800492e:	f023 030c 	bic.w	r3, r3, #12
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	430b      	orrs	r3, r1
 800493a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2c      	ldr	r2, [pc, #176]	; (8004a08 <UART_SetConfig+0x114>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d103      	bne.n	8004964 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7ff f8e6 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	e002      	b.n	800496a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7ff f8ce 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004968:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <UART_SetConfig+0x118>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	0119      	lsls	r1, r3, #4
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009a      	lsls	r2, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <UART_SetConfig+0x118>)
 80049a2:	fba3 0302 	umull	r0, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2064      	movs	r0, #100	; 0x64
 80049aa:	fb00 f303 	mul.w	r3, r0, r3
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	3332      	adds	r3, #50	; 0x32
 80049b4:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <UART_SetConfig+0x118>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c0:	4419      	add	r1, r3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009a      	lsls	r2, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <UART_SetConfig+0x118>)
 80049da:	fba3 0302 	umull	r0, r3, r3, r2
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2064      	movs	r0, #100	; 0x64
 80049e2:	fb00 f303 	mul.w	r3, r0, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	3332      	adds	r3, #50	; 0x32
 80049ec:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <UART_SetConfig+0x118>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	440a      	add	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	51eb851f 	.word	0x51eb851f

08004a10 <atoi>:
 8004a10:	220a      	movs	r2, #10
 8004a12:	2100      	movs	r1, #0
 8004a14:	f000 b9c2 	b.w	8004d9c <strtol>

08004a18 <__errno>:
 8004a18:	4b01      	ldr	r3, [pc, #4]	; (8004a20 <__errno+0x8>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000020 	.word	0x20000020

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	2600      	movs	r6, #0
 8004a28:	4d0c      	ldr	r5, [pc, #48]	; (8004a5c <__libc_init_array+0x38>)
 8004a2a:	4c0d      	ldr	r4, [pc, #52]	; (8004a60 <__libc_init_array+0x3c>)
 8004a2c:	1b64      	subs	r4, r4, r5
 8004a2e:	10a4      	asrs	r4, r4, #2
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	f000 fd2a 	bl	800548c <_init>
 8004a38:	2600      	movs	r6, #0
 8004a3a:	4d0a      	ldr	r5, [pc, #40]	; (8004a64 <__libc_init_array+0x40>)
 8004a3c:	4c0a      	ldr	r4, [pc, #40]	; (8004a68 <__libc_init_array+0x44>)
 8004a3e:	1b64      	subs	r4, r4, r5
 8004a40:	10a4      	asrs	r4, r4, #2
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	080059d4 	.word	0x080059d4
 8004a60:	080059d4 	.word	0x080059d4
 8004a64:	080059d4 	.word	0x080059d4
 8004a68:	080059d8 	.word	0x080059d8

08004a6c <malloc>:
 8004a6c:	4b02      	ldr	r3, [pc, #8]	; (8004a78 <malloc+0xc>)
 8004a6e:	4601      	mov	r1, r0
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	f000 b873 	b.w	8004b5c <_malloc_r>
 8004a76:	bf00      	nop
 8004a78:	20000020 	.word	0x20000020

08004a7c <memset>:
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4402      	add	r2, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <_free_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4605      	mov	r5, r0
 8004a90:	2900      	cmp	r1, #0
 8004a92:	d040      	beq.n	8004b16 <_free_r+0x8a>
 8004a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a98:	1f0c      	subs	r4, r1, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	18e4      	addlt	r4, r4, r3
 8004aa0:	f000 f986 	bl	8004db0 <__malloc_lock>
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <_free_r+0x8c>)
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	b933      	cbnz	r3, 8004ab8 <_free_r+0x2c>
 8004aaa:	6063      	str	r3, [r4, #4]
 8004aac:	6014      	str	r4, [r2, #0]
 8004aae:	4628      	mov	r0, r5
 8004ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab4:	f000 b982 	b.w	8004dbc <__malloc_unlock>
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	d908      	bls.n	8004ace <_free_r+0x42>
 8004abc:	6820      	ldr	r0, [r4, #0]
 8004abe:	1821      	adds	r1, r4, r0
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	bf01      	itttt	eq
 8004ac4:	6819      	ldreq	r1, [r3, #0]
 8004ac6:	685b      	ldreq	r3, [r3, #4]
 8004ac8:	1809      	addeq	r1, r1, r0
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	e7ed      	b.n	8004aaa <_free_r+0x1e>
 8004ace:	461a      	mov	r2, r3
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b10b      	cbz	r3, 8004ad8 <_free_r+0x4c>
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d9fa      	bls.n	8004ace <_free_r+0x42>
 8004ad8:	6811      	ldr	r1, [r2, #0]
 8004ada:	1850      	adds	r0, r2, r1
 8004adc:	42a0      	cmp	r0, r4
 8004ade:	d10b      	bne.n	8004af8 <_free_r+0x6c>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	4401      	add	r1, r0
 8004ae4:	1850      	adds	r0, r2, r1
 8004ae6:	4283      	cmp	r3, r0
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	d1e0      	bne.n	8004aae <_free_r+0x22>
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4401      	add	r1, r0
 8004af2:	6011      	str	r1, [r2, #0]
 8004af4:	6053      	str	r3, [r2, #4]
 8004af6:	e7da      	b.n	8004aae <_free_r+0x22>
 8004af8:	d902      	bls.n	8004b00 <_free_r+0x74>
 8004afa:	230c      	movs	r3, #12
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	e7d6      	b.n	8004aae <_free_r+0x22>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	1821      	adds	r1, r4, r0
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf01      	itttt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	1809      	addeq	r1, r1, r0
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6054      	str	r4, [r2, #4]
 8004b14:	e7cb      	b.n	8004aae <_free_r+0x22>
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	200006e0 	.word	0x200006e0

08004b1c <sbrk_aligned>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4e0e      	ldr	r6, [pc, #56]	; (8004b58 <sbrk_aligned+0x3c>)
 8004b20:	460c      	mov	r4, r1
 8004b22:	6831      	ldr	r1, [r6, #0]
 8004b24:	4605      	mov	r5, r0
 8004b26:	b911      	cbnz	r1, 8004b2e <sbrk_aligned+0x12>
 8004b28:	f000 f88c 	bl	8004c44 <_sbrk_r>
 8004b2c:	6030      	str	r0, [r6, #0]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	f000 f887 	bl	8004c44 <_sbrk_r>
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d00a      	beq.n	8004b50 <sbrk_aligned+0x34>
 8004b3a:	1cc4      	adds	r4, r0, #3
 8004b3c:	f024 0403 	bic.w	r4, r4, #3
 8004b40:	42a0      	cmp	r0, r4
 8004b42:	d007      	beq.n	8004b54 <sbrk_aligned+0x38>
 8004b44:	1a21      	subs	r1, r4, r0
 8004b46:	4628      	mov	r0, r5
 8004b48:	f000 f87c 	bl	8004c44 <_sbrk_r>
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d101      	bne.n	8004b54 <sbrk_aligned+0x38>
 8004b50:	f04f 34ff 	mov.w	r4, #4294967295
 8004b54:	4620      	mov	r0, r4
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	200006e4 	.word	0x200006e4

08004b5c <_malloc_r>:
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	1ccd      	adds	r5, r1, #3
 8004b62:	f025 0503 	bic.w	r5, r5, #3
 8004b66:	3508      	adds	r5, #8
 8004b68:	2d0c      	cmp	r5, #12
 8004b6a:	bf38      	it	cc
 8004b6c:	250c      	movcc	r5, #12
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	4607      	mov	r7, r0
 8004b72:	db01      	blt.n	8004b78 <_malloc_r+0x1c>
 8004b74:	42a9      	cmp	r1, r5
 8004b76:	d905      	bls.n	8004b84 <_malloc_r+0x28>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	4e2e      	ldr	r6, [pc, #184]	; (8004c40 <_malloc_r+0xe4>)
 8004b86:	f000 f913 	bl	8004db0 <__malloc_lock>
 8004b8a:	6833      	ldr	r3, [r6, #0]
 8004b8c:	461c      	mov	r4, r3
 8004b8e:	bb34      	cbnz	r4, 8004bde <_malloc_r+0x82>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4638      	mov	r0, r7
 8004b94:	f7ff ffc2 	bl	8004b1c <sbrk_aligned>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	d14d      	bne.n	8004c3a <_malloc_r+0xde>
 8004b9e:	6834      	ldr	r4, [r6, #0]
 8004ba0:	4626      	mov	r6, r4
 8004ba2:	2e00      	cmp	r6, #0
 8004ba4:	d140      	bne.n	8004c28 <_malloc_r+0xcc>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4638      	mov	r0, r7
 8004bac:	eb04 0803 	add.w	r8, r4, r3
 8004bb0:	f000 f848 	bl	8004c44 <_sbrk_r>
 8004bb4:	4580      	cmp	r8, r0
 8004bb6:	d13a      	bne.n	8004c2e <_malloc_r+0xd2>
 8004bb8:	6821      	ldr	r1, [r4, #0]
 8004bba:	3503      	adds	r5, #3
 8004bbc:	1a6d      	subs	r5, r5, r1
 8004bbe:	f025 0503 	bic.w	r5, r5, #3
 8004bc2:	3508      	adds	r5, #8
 8004bc4:	2d0c      	cmp	r5, #12
 8004bc6:	bf38      	it	cc
 8004bc8:	250c      	movcc	r5, #12
 8004bca:	4638      	mov	r0, r7
 8004bcc:	4629      	mov	r1, r5
 8004bce:	f7ff ffa5 	bl	8004b1c <sbrk_aligned>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d02b      	beq.n	8004c2e <_malloc_r+0xd2>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	442b      	add	r3, r5
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	e00e      	b.n	8004bfc <_malloc_r+0xa0>
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	1b52      	subs	r2, r2, r5
 8004be2:	d41e      	bmi.n	8004c22 <_malloc_r+0xc6>
 8004be4:	2a0b      	cmp	r2, #11
 8004be6:	d916      	bls.n	8004c16 <_malloc_r+0xba>
 8004be8:	1961      	adds	r1, r4, r5
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6025      	str	r5, [r4, #0]
 8004bee:	bf18      	it	ne
 8004bf0:	6059      	strne	r1, [r3, #4]
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	bf08      	it	eq
 8004bf6:	6031      	streq	r1, [r6, #0]
 8004bf8:	5162      	str	r2, [r4, r5]
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	f104 060b 	add.w	r6, r4, #11
 8004c02:	f000 f8db 	bl	8004dbc <__malloc_unlock>
 8004c06:	f026 0607 	bic.w	r6, r6, #7
 8004c0a:	1d23      	adds	r3, r4, #4
 8004c0c:	1af2      	subs	r2, r6, r3
 8004c0e:	d0b6      	beq.n	8004b7e <_malloc_r+0x22>
 8004c10:	1b9b      	subs	r3, r3, r6
 8004c12:	50a3      	str	r3, [r4, r2]
 8004c14:	e7b3      	b.n	8004b7e <_malloc_r+0x22>
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	bf0c      	ite	eq
 8004c1c:	6032      	streq	r2, [r6, #0]
 8004c1e:	605a      	strne	r2, [r3, #4]
 8004c20:	e7ec      	b.n	8004bfc <_malloc_r+0xa0>
 8004c22:	4623      	mov	r3, r4
 8004c24:	6864      	ldr	r4, [r4, #4]
 8004c26:	e7b2      	b.n	8004b8e <_malloc_r+0x32>
 8004c28:	4634      	mov	r4, r6
 8004c2a:	6876      	ldr	r6, [r6, #4]
 8004c2c:	e7b9      	b.n	8004ba2 <_malloc_r+0x46>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	4638      	mov	r0, r7
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	f000 f8c2 	bl	8004dbc <__malloc_unlock>
 8004c38:	e7a1      	b.n	8004b7e <_malloc_r+0x22>
 8004c3a:	6025      	str	r5, [r4, #0]
 8004c3c:	e7de      	b.n	8004bfc <_malloc_r+0xa0>
 8004c3e:	bf00      	nop
 8004c40:	200006e0 	.word	0x200006e0

08004c44 <_sbrk_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	2300      	movs	r3, #0
 8004c48:	4d05      	ldr	r5, [pc, #20]	; (8004c60 <_sbrk_r+0x1c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fc ffba 	bl	8001bc8 <_sbrk>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_sbrk_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_sbrk_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	200006e8 	.word	0x200006e8

08004c64 <siprintf>:
 8004c64:	b40e      	push	{r1, r2, r3}
 8004c66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c6a:	b500      	push	{lr}
 8004c6c:	b09c      	sub	sp, #112	; 0x70
 8004c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c70:	9002      	str	r0, [sp, #8]
 8004c72:	9006      	str	r0, [sp, #24]
 8004c74:	9107      	str	r1, [sp, #28]
 8004c76:	9104      	str	r1, [sp, #16]
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <siprintf+0x38>)
 8004c7a:	4909      	ldr	r1, [pc, #36]	; (8004ca0 <siprintf+0x3c>)
 8004c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c80:	9105      	str	r1, [sp, #20]
 8004c82:	6800      	ldr	r0, [r0, #0]
 8004c84:	a902      	add	r1, sp, #8
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	f000 f8fa 	bl	8004e80 <_svfiprintf_r>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	9b02      	ldr	r3, [sp, #8]
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	b01c      	add	sp, #112	; 0x70
 8004c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c98:	b003      	add	sp, #12
 8004c9a:	4770      	bx	lr
 8004c9c:	20000020 	.word	0x20000020
 8004ca0:	ffff0208 	.word	0xffff0208

08004ca4 <_strtol_l.constprop.0>:
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004caa:	4680      	mov	r8, r0
 8004cac:	d001      	beq.n	8004cb2 <_strtol_l.constprop.0+0xe>
 8004cae:	2b24      	cmp	r3, #36	; 0x24
 8004cb0:	d906      	bls.n	8004cc0 <_strtol_l.constprop.0+0x1c>
 8004cb2:	f7ff feb1 	bl	8004a18 <__errno>
 8004cb6:	2316      	movs	r3, #22
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	4f35      	ldr	r7, [pc, #212]	; (8004d98 <_strtol_l.constprop.0+0xf4>)
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cca:	5de6      	ldrb	r6, [r4, r7]
 8004ccc:	f016 0608 	ands.w	r6, r6, #8
 8004cd0:	d1f8      	bne.n	8004cc4 <_strtol_l.constprop.0+0x20>
 8004cd2:	2c2d      	cmp	r4, #45	; 0x2d
 8004cd4:	d12f      	bne.n	8004d36 <_strtol_l.constprop.0+0x92>
 8004cd6:	2601      	movs	r6, #1
 8004cd8:	782c      	ldrb	r4, [r5, #0]
 8004cda:	1c85      	adds	r5, r0, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d057      	beq.n	8004d90 <_strtol_l.constprop.0+0xec>
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d109      	bne.n	8004cf8 <_strtol_l.constprop.0+0x54>
 8004ce4:	2c30      	cmp	r4, #48	; 0x30
 8004ce6:	d107      	bne.n	8004cf8 <_strtol_l.constprop.0+0x54>
 8004ce8:	7828      	ldrb	r0, [r5, #0]
 8004cea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004cee:	2858      	cmp	r0, #88	; 0x58
 8004cf0:	d149      	bne.n	8004d86 <_strtol_l.constprop.0+0xe2>
 8004cf2:	2310      	movs	r3, #16
 8004cf4:	786c      	ldrb	r4, [r5, #1]
 8004cf6:	3502      	adds	r5, #2
 8004cf8:	2700      	movs	r7, #0
 8004cfa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004cfe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004d02:	fbbe f9f3 	udiv	r9, lr, r3
 8004d06:	4638      	mov	r0, r7
 8004d08:	fb03 ea19 	mls	sl, r3, r9, lr
 8004d0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004d10:	f1bc 0f09 	cmp.w	ip, #9
 8004d14:	d814      	bhi.n	8004d40 <_strtol_l.constprop.0+0x9c>
 8004d16:	4664      	mov	r4, ip
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	dd22      	ble.n	8004d62 <_strtol_l.constprop.0+0xbe>
 8004d1c:	2f00      	cmp	r7, #0
 8004d1e:	db1d      	blt.n	8004d5c <_strtol_l.constprop.0+0xb8>
 8004d20:	4581      	cmp	r9, r0
 8004d22:	d31b      	bcc.n	8004d5c <_strtol_l.constprop.0+0xb8>
 8004d24:	d101      	bne.n	8004d2a <_strtol_l.constprop.0+0x86>
 8004d26:	45a2      	cmp	sl, r4
 8004d28:	db18      	blt.n	8004d5c <_strtol_l.constprop.0+0xb8>
 8004d2a:	2701      	movs	r7, #1
 8004d2c:	fb00 4003 	mla	r0, r0, r3, r4
 8004d30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d34:	e7ea      	b.n	8004d0c <_strtol_l.constprop.0+0x68>
 8004d36:	2c2b      	cmp	r4, #43	; 0x2b
 8004d38:	bf04      	itt	eq
 8004d3a:	782c      	ldrbeq	r4, [r5, #0]
 8004d3c:	1c85      	addeq	r5, r0, #2
 8004d3e:	e7cd      	b.n	8004cdc <_strtol_l.constprop.0+0x38>
 8004d40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004d44:	f1bc 0f19 	cmp.w	ip, #25
 8004d48:	d801      	bhi.n	8004d4e <_strtol_l.constprop.0+0xaa>
 8004d4a:	3c37      	subs	r4, #55	; 0x37
 8004d4c:	e7e4      	b.n	8004d18 <_strtol_l.constprop.0+0x74>
 8004d4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004d52:	f1bc 0f19 	cmp.w	ip, #25
 8004d56:	d804      	bhi.n	8004d62 <_strtol_l.constprop.0+0xbe>
 8004d58:	3c57      	subs	r4, #87	; 0x57
 8004d5a:	e7dd      	b.n	8004d18 <_strtol_l.constprop.0+0x74>
 8004d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d60:	e7e6      	b.n	8004d30 <_strtol_l.constprop.0+0x8c>
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	da07      	bge.n	8004d76 <_strtol_l.constprop.0+0xd2>
 8004d66:	2322      	movs	r3, #34	; 0x22
 8004d68:	4670      	mov	r0, lr
 8004d6a:	f8c8 3000 	str.w	r3, [r8]
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d0a4      	beq.n	8004cbc <_strtol_l.constprop.0+0x18>
 8004d72:	1e69      	subs	r1, r5, #1
 8004d74:	e005      	b.n	8004d82 <_strtol_l.constprop.0+0xde>
 8004d76:	b106      	cbz	r6, 8004d7a <_strtol_l.constprop.0+0xd6>
 8004d78:	4240      	negs	r0, r0
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	d09e      	beq.n	8004cbc <_strtol_l.constprop.0+0x18>
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d1f7      	bne.n	8004d72 <_strtol_l.constprop.0+0xce>
 8004d82:	6011      	str	r1, [r2, #0]
 8004d84:	e79a      	b.n	8004cbc <_strtol_l.constprop.0+0x18>
 8004d86:	2430      	movs	r4, #48	; 0x30
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1b5      	bne.n	8004cf8 <_strtol_l.constprop.0+0x54>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	e7b3      	b.n	8004cf8 <_strtol_l.constprop.0+0x54>
 8004d90:	2c30      	cmp	r4, #48	; 0x30
 8004d92:	d0a9      	beq.n	8004ce8 <_strtol_l.constprop.0+0x44>
 8004d94:	230a      	movs	r3, #10
 8004d96:	e7af      	b.n	8004cf8 <_strtol_l.constprop.0+0x54>
 8004d98:	08005897 	.word	0x08005897

08004d9c <strtol>:
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	460a      	mov	r2, r1
 8004da0:	4601      	mov	r1, r0
 8004da2:	4802      	ldr	r0, [pc, #8]	; (8004dac <strtol+0x10>)
 8004da4:	6800      	ldr	r0, [r0, #0]
 8004da6:	f7ff bf7d 	b.w	8004ca4 <_strtol_l.constprop.0>
 8004daa:	bf00      	nop
 8004dac:	20000020 	.word	0x20000020

08004db0 <__malloc_lock>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__malloc_lock+0x8>)
 8004db2:	f000 bafb 	b.w	80053ac <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	200006ec 	.word	0x200006ec

08004dbc <__malloc_unlock>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__malloc_unlock+0x8>)
 8004dbe:	f000 baf6 	b.w	80053ae <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	200006ec 	.word	0x200006ec

08004dc8 <__ssputs_r>:
 8004dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	688e      	ldr	r6, [r1, #8]
 8004dce:	4682      	mov	sl, r0
 8004dd0:	429e      	cmp	r6, r3
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	4690      	mov	r8, r2
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	d838      	bhi.n	8004e4c <__ssputs_r+0x84>
 8004dda:	898a      	ldrh	r2, [r1, #12]
 8004ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004de0:	d032      	beq.n	8004e48 <__ssputs_r+0x80>
 8004de2:	6825      	ldr	r5, [r4, #0]
 8004de4:	6909      	ldr	r1, [r1, #16]
 8004de6:	3301      	adds	r3, #1
 8004de8:	eba5 0901 	sub.w	r9, r5, r1
 8004dec:	6965      	ldr	r5, [r4, #20]
 8004dee:	444b      	add	r3, r9
 8004df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004df8:	106d      	asrs	r5, r5, #1
 8004dfa:	429d      	cmp	r5, r3
 8004dfc:	bf38      	it	cc
 8004dfe:	461d      	movcc	r5, r3
 8004e00:	0553      	lsls	r3, r2, #21
 8004e02:	d531      	bpl.n	8004e68 <__ssputs_r+0xa0>
 8004e04:	4629      	mov	r1, r5
 8004e06:	f7ff fea9 	bl	8004b5c <_malloc_r>
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	b950      	cbnz	r0, 8004e24 <__ssputs_r+0x5c>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	f8ca 3000 	str.w	r3, [sl]
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1e:	81a3      	strh	r3, [r4, #12]
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	464a      	mov	r2, r9
 8004e26:	6921      	ldr	r1, [r4, #16]
 8004e28:	f000 fad0 	bl	80053cc <memcpy>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	6126      	str	r6, [r4, #16]
 8004e3a:	444e      	add	r6, r9
 8004e3c:	6026      	str	r6, [r4, #0]
 8004e3e:	463e      	mov	r6, r7
 8004e40:	6165      	str	r5, [r4, #20]
 8004e42:	eba5 0509 	sub.w	r5, r5, r9
 8004e46:	60a5      	str	r5, [r4, #8]
 8004e48:	42be      	cmp	r6, r7
 8004e4a:	d900      	bls.n	8004e4e <__ssputs_r+0x86>
 8004e4c:	463e      	mov	r6, r7
 8004e4e:	4632      	mov	r2, r6
 8004e50:	4641      	mov	r1, r8
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	f000 fac8 	bl	80053e8 <memmove>
 8004e58:	68a3      	ldr	r3, [r4, #8]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	1b9b      	subs	r3, r3, r6
 8004e5e:	60a3      	str	r3, [r4, #8]
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	4433      	add	r3, r6
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	e7db      	b.n	8004e20 <__ssputs_r+0x58>
 8004e68:	462a      	mov	r2, r5
 8004e6a:	f000 fad7 	bl	800541c <_realloc_r>
 8004e6e:	4606      	mov	r6, r0
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d1e1      	bne.n	8004e38 <__ssputs_r+0x70>
 8004e74:	4650      	mov	r0, sl
 8004e76:	6921      	ldr	r1, [r4, #16]
 8004e78:	f7ff fe08 	bl	8004a8c <_free_r>
 8004e7c:	e7c7      	b.n	8004e0e <__ssputs_r+0x46>
	...

08004e80 <_svfiprintf_r>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	4698      	mov	r8, r3
 8004e86:	898b      	ldrh	r3, [r1, #12]
 8004e88:	4607      	mov	r7, r0
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	460d      	mov	r5, r1
 8004e8e:	4614      	mov	r4, r2
 8004e90:	b09d      	sub	sp, #116	; 0x74
 8004e92:	d50e      	bpl.n	8004eb2 <_svfiprintf_r+0x32>
 8004e94:	690b      	ldr	r3, [r1, #16]
 8004e96:	b963      	cbnz	r3, 8004eb2 <_svfiprintf_r+0x32>
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	f7ff fe5f 	bl	8004b5c <_malloc_r>
 8004e9e:	6028      	str	r0, [r5, #0]
 8004ea0:	6128      	str	r0, [r5, #16]
 8004ea2:	b920      	cbnz	r0, 8004eae <_svfiprintf_r+0x2e>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	e0d1      	b.n	8005052 <_svfiprintf_r+0x1d2>
 8004eae:	2340      	movs	r3, #64	; 0x40
 8004eb0:	616b      	str	r3, [r5, #20]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb6:	2320      	movs	r3, #32
 8004eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ebc:	2330      	movs	r3, #48	; 0x30
 8004ebe:	f04f 0901 	mov.w	r9, #1
 8004ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ec6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800506c <_svfiprintf_r+0x1ec>
 8004eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ece:	4623      	mov	r3, r4
 8004ed0:	469a      	mov	sl, r3
 8004ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed6:	b10a      	cbz	r2, 8004edc <_svfiprintf_r+0x5c>
 8004ed8:	2a25      	cmp	r2, #37	; 0x25
 8004eda:	d1f9      	bne.n	8004ed0 <_svfiprintf_r+0x50>
 8004edc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ee0:	d00b      	beq.n	8004efa <_svfiprintf_r+0x7a>
 8004ee2:	465b      	mov	r3, fp
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f7ff ff6d 	bl	8004dc8 <__ssputs_r>
 8004eee:	3001      	adds	r0, #1
 8004ef0:	f000 80aa 	beq.w	8005048 <_svfiprintf_r+0x1c8>
 8004ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef6:	445a      	add	r2, fp
 8004ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8004efa:	f89a 3000 	ldrb.w	r3, [sl]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80a2 	beq.w	8005048 <_svfiprintf_r+0x1c8>
 8004f04:	2300      	movs	r3, #0
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f0e:	f10a 0a01 	add.w	sl, sl, #1
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f1c:	4654      	mov	r4, sl
 8004f1e:	2205      	movs	r2, #5
 8004f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f24:	4851      	ldr	r0, [pc, #324]	; (800506c <_svfiprintf_r+0x1ec>)
 8004f26:	f000 fa43 	bl	80053b0 <memchr>
 8004f2a:	9a04      	ldr	r2, [sp, #16]
 8004f2c:	b9d8      	cbnz	r0, 8004f66 <_svfiprintf_r+0xe6>
 8004f2e:	06d0      	lsls	r0, r2, #27
 8004f30:	bf44      	itt	mi
 8004f32:	2320      	movmi	r3, #32
 8004f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f38:	0711      	lsls	r1, r2, #28
 8004f3a:	bf44      	itt	mi
 8004f3c:	232b      	movmi	r3, #43	; 0x2b
 8004f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f42:	f89a 3000 	ldrb.w	r3, [sl]
 8004f46:	2b2a      	cmp	r3, #42	; 0x2a
 8004f48:	d015      	beq.n	8004f76 <_svfiprintf_r+0xf6>
 8004f4a:	4654      	mov	r4, sl
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f04f 0c0a 	mov.w	ip, #10
 8004f52:	9a07      	ldr	r2, [sp, #28]
 8004f54:	4621      	mov	r1, r4
 8004f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f5a:	3b30      	subs	r3, #48	; 0x30
 8004f5c:	2b09      	cmp	r3, #9
 8004f5e:	d94e      	bls.n	8004ffe <_svfiprintf_r+0x17e>
 8004f60:	b1b0      	cbz	r0, 8004f90 <_svfiprintf_r+0x110>
 8004f62:	9207      	str	r2, [sp, #28]
 8004f64:	e014      	b.n	8004f90 <_svfiprintf_r+0x110>
 8004f66:	eba0 0308 	sub.w	r3, r0, r8
 8004f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	46a2      	mov	sl, r4
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	e7d2      	b.n	8004f1c <_svfiprintf_r+0x9c>
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	1d19      	adds	r1, r3, #4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	9103      	str	r1, [sp, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbb      	ittet	lt
 8004f82:	425b      	neglt	r3, r3
 8004f84:	f042 0202 	orrlt.w	r2, r2, #2
 8004f88:	9307      	strge	r3, [sp, #28]
 8004f8a:	9307      	strlt	r3, [sp, #28]
 8004f8c:	bfb8      	it	lt
 8004f8e:	9204      	strlt	r2, [sp, #16]
 8004f90:	7823      	ldrb	r3, [r4, #0]
 8004f92:	2b2e      	cmp	r3, #46	; 0x2e
 8004f94:	d10c      	bne.n	8004fb0 <_svfiprintf_r+0x130>
 8004f96:	7863      	ldrb	r3, [r4, #1]
 8004f98:	2b2a      	cmp	r3, #42	; 0x2a
 8004f9a:	d135      	bne.n	8005008 <_svfiprintf_r+0x188>
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	3402      	adds	r4, #2
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	9203      	str	r2, [sp, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bfb8      	it	lt
 8004faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fae:	9305      	str	r3, [sp, #20]
 8004fb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005070 <_svfiprintf_r+0x1f0>
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	7821      	ldrb	r1, [r4, #0]
 8004fba:	f000 f9f9 	bl	80053b0 <memchr>
 8004fbe:	b140      	cbz	r0, 8004fd2 <_svfiprintf_r+0x152>
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	eba0 000a 	sub.w	r0, r0, sl
 8004fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004fca:	9b04      	ldr	r3, [sp, #16]
 8004fcc:	3401      	adds	r4, #1
 8004fce:	4303      	orrs	r3, r0
 8004fd0:	9304      	str	r3, [sp, #16]
 8004fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd6:	2206      	movs	r2, #6
 8004fd8:	4826      	ldr	r0, [pc, #152]	; (8005074 <_svfiprintf_r+0x1f4>)
 8004fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fde:	f000 f9e7 	bl	80053b0 <memchr>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d038      	beq.n	8005058 <_svfiprintf_r+0x1d8>
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <_svfiprintf_r+0x1f8>)
 8004fe8:	bb1b      	cbnz	r3, 8005032 <_svfiprintf_r+0x1b2>
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	3307      	adds	r3, #7
 8004fee:	f023 0307 	bic.w	r3, r3, #7
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	9303      	str	r3, [sp, #12]
 8004ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff8:	4433      	add	r3, r6
 8004ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffc:	e767      	b.n	8004ece <_svfiprintf_r+0x4e>
 8004ffe:	460c      	mov	r4, r1
 8005000:	2001      	movs	r0, #1
 8005002:	fb0c 3202 	mla	r2, ip, r2, r3
 8005006:	e7a5      	b.n	8004f54 <_svfiprintf_r+0xd4>
 8005008:	2300      	movs	r3, #0
 800500a:	f04f 0c0a 	mov.w	ip, #10
 800500e:	4619      	mov	r1, r3
 8005010:	3401      	adds	r4, #1
 8005012:	9305      	str	r3, [sp, #20]
 8005014:	4620      	mov	r0, r4
 8005016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800501a:	3a30      	subs	r2, #48	; 0x30
 800501c:	2a09      	cmp	r2, #9
 800501e:	d903      	bls.n	8005028 <_svfiprintf_r+0x1a8>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0c5      	beq.n	8004fb0 <_svfiprintf_r+0x130>
 8005024:	9105      	str	r1, [sp, #20]
 8005026:	e7c3      	b.n	8004fb0 <_svfiprintf_r+0x130>
 8005028:	4604      	mov	r4, r0
 800502a:	2301      	movs	r3, #1
 800502c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005030:	e7f0      	b.n	8005014 <_svfiprintf_r+0x194>
 8005032:	ab03      	add	r3, sp, #12
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	462a      	mov	r2, r5
 8005038:	4638      	mov	r0, r7
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <_svfiprintf_r+0x1fc>)
 800503c:	a904      	add	r1, sp, #16
 800503e:	f3af 8000 	nop.w
 8005042:	1c42      	adds	r2, r0, #1
 8005044:	4606      	mov	r6, r0
 8005046:	d1d6      	bne.n	8004ff6 <_svfiprintf_r+0x176>
 8005048:	89ab      	ldrh	r3, [r5, #12]
 800504a:	065b      	lsls	r3, r3, #25
 800504c:	f53f af2c 	bmi.w	8004ea8 <_svfiprintf_r+0x28>
 8005050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005052:	b01d      	add	sp, #116	; 0x74
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005058:	ab03      	add	r3, sp, #12
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	462a      	mov	r2, r5
 800505e:	4638      	mov	r0, r7
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <_svfiprintf_r+0x1fc>)
 8005062:	a904      	add	r1, sp, #16
 8005064:	f000 f87c 	bl	8005160 <_printf_i>
 8005068:	e7eb      	b.n	8005042 <_svfiprintf_r+0x1c2>
 800506a:	bf00      	nop
 800506c:	08005997 	.word	0x08005997
 8005070:	0800599d 	.word	0x0800599d
 8005074:	080059a1 	.word	0x080059a1
 8005078:	00000000 	.word	0x00000000
 800507c:	08004dc9 	.word	0x08004dc9

08005080 <_printf_common>:
 8005080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005084:	4616      	mov	r6, r2
 8005086:	4699      	mov	r9, r3
 8005088:	688a      	ldr	r2, [r1, #8]
 800508a:	690b      	ldr	r3, [r1, #16]
 800508c:	4607      	mov	r7, r0
 800508e:	4293      	cmp	r3, r2
 8005090:	bfb8      	it	lt
 8005092:	4613      	movlt	r3, r2
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800509a:	460c      	mov	r4, r1
 800509c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a0:	b10a      	cbz	r2, 80050a6 <_printf_common+0x26>
 80050a2:	3301      	adds	r3, #1
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	0699      	lsls	r1, r3, #26
 80050aa:	bf42      	ittt	mi
 80050ac:	6833      	ldrmi	r3, [r6, #0]
 80050ae:	3302      	addmi	r3, #2
 80050b0:	6033      	strmi	r3, [r6, #0]
 80050b2:	6825      	ldr	r5, [r4, #0]
 80050b4:	f015 0506 	ands.w	r5, r5, #6
 80050b8:	d106      	bne.n	80050c8 <_printf_common+0x48>
 80050ba:	f104 0a19 	add.w	sl, r4, #25
 80050be:	68e3      	ldr	r3, [r4, #12]
 80050c0:	6832      	ldr	r2, [r6, #0]
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	42ab      	cmp	r3, r5
 80050c6:	dc28      	bgt.n	800511a <_printf_common+0x9a>
 80050c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050cc:	1e13      	subs	r3, r2, #0
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	bf18      	it	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	0692      	lsls	r2, r2, #26
 80050d6:	d42d      	bmi.n	8005134 <_printf_common+0xb4>
 80050d8:	4649      	mov	r1, r9
 80050da:	4638      	mov	r0, r7
 80050dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050e0:	47c0      	blx	r8
 80050e2:	3001      	adds	r0, #1
 80050e4:	d020      	beq.n	8005128 <_printf_common+0xa8>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	68e5      	ldr	r5, [r4, #12]
 80050ea:	f003 0306 	and.w	r3, r3, #6
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	bf18      	it	ne
 80050f2:	2500      	movne	r5, #0
 80050f4:	6832      	ldr	r2, [r6, #0]
 80050f6:	f04f 0600 	mov.w	r6, #0
 80050fa:	68a3      	ldr	r3, [r4, #8]
 80050fc:	bf08      	it	eq
 80050fe:	1aad      	subeq	r5, r5, r2
 8005100:	6922      	ldr	r2, [r4, #16]
 8005102:	bf08      	it	eq
 8005104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005108:	4293      	cmp	r3, r2
 800510a:	bfc4      	itt	gt
 800510c:	1a9b      	subgt	r3, r3, r2
 800510e:	18ed      	addgt	r5, r5, r3
 8005110:	341a      	adds	r4, #26
 8005112:	42b5      	cmp	r5, r6
 8005114:	d11a      	bne.n	800514c <_printf_common+0xcc>
 8005116:	2000      	movs	r0, #0
 8005118:	e008      	b.n	800512c <_printf_common+0xac>
 800511a:	2301      	movs	r3, #1
 800511c:	4652      	mov	r2, sl
 800511e:	4649      	mov	r1, r9
 8005120:	4638      	mov	r0, r7
 8005122:	47c0      	blx	r8
 8005124:	3001      	adds	r0, #1
 8005126:	d103      	bne.n	8005130 <_printf_common+0xb0>
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	3501      	adds	r5, #1
 8005132:	e7c4      	b.n	80050be <_printf_common+0x3e>
 8005134:	2030      	movs	r0, #48	; 0x30
 8005136:	18e1      	adds	r1, r4, r3
 8005138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005142:	4422      	add	r2, r4
 8005144:	3302      	adds	r3, #2
 8005146:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800514a:	e7c5      	b.n	80050d8 <_printf_common+0x58>
 800514c:	2301      	movs	r3, #1
 800514e:	4622      	mov	r2, r4
 8005150:	4649      	mov	r1, r9
 8005152:	4638      	mov	r0, r7
 8005154:	47c0      	blx	r8
 8005156:	3001      	adds	r0, #1
 8005158:	d0e6      	beq.n	8005128 <_printf_common+0xa8>
 800515a:	3601      	adds	r6, #1
 800515c:	e7d9      	b.n	8005112 <_printf_common+0x92>
	...

08005160 <_printf_i>:
 8005160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	7e0f      	ldrb	r7, [r1, #24]
 8005166:	4691      	mov	r9, r2
 8005168:	2f78      	cmp	r7, #120	; 0x78
 800516a:	4680      	mov	r8, r0
 800516c:	460c      	mov	r4, r1
 800516e:	469a      	mov	sl, r3
 8005170:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005172:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005176:	d807      	bhi.n	8005188 <_printf_i+0x28>
 8005178:	2f62      	cmp	r7, #98	; 0x62
 800517a:	d80a      	bhi.n	8005192 <_printf_i+0x32>
 800517c:	2f00      	cmp	r7, #0
 800517e:	f000 80d9 	beq.w	8005334 <_printf_i+0x1d4>
 8005182:	2f58      	cmp	r7, #88	; 0x58
 8005184:	f000 80a4 	beq.w	80052d0 <_printf_i+0x170>
 8005188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800518c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005190:	e03a      	b.n	8005208 <_printf_i+0xa8>
 8005192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005196:	2b15      	cmp	r3, #21
 8005198:	d8f6      	bhi.n	8005188 <_printf_i+0x28>
 800519a:	a101      	add	r1, pc, #4	; (adr r1, 80051a0 <_printf_i+0x40>)
 800519c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	0800520d 	.word	0x0800520d
 80051a8:	08005189 	.word	0x08005189
 80051ac:	08005189 	.word	0x08005189
 80051b0:	08005189 	.word	0x08005189
 80051b4:	08005189 	.word	0x08005189
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005189 	.word	0x08005189
 80051c0:	08005189 	.word	0x08005189
 80051c4:	08005189 	.word	0x08005189
 80051c8:	08005189 	.word	0x08005189
 80051cc:	0800531b 	.word	0x0800531b
 80051d0:	0800523d 	.word	0x0800523d
 80051d4:	080052fd 	.word	0x080052fd
 80051d8:	08005189 	.word	0x08005189
 80051dc:	08005189 	.word	0x08005189
 80051e0:	0800533d 	.word	0x0800533d
 80051e4:	08005189 	.word	0x08005189
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	08005189 	.word	0x08005189
 80051f0:	08005189 	.word	0x08005189
 80051f4:	08005305 	.word	0x08005305
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005208:	2301      	movs	r3, #1
 800520a:	e0a4      	b.n	8005356 <_printf_i+0x1f6>
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	6829      	ldr	r1, [r5, #0]
 8005210:	0606      	lsls	r6, r0, #24
 8005212:	f101 0304 	add.w	r3, r1, #4
 8005216:	d50a      	bpl.n	800522e <_printf_i+0xce>
 8005218:	680e      	ldr	r6, [r1, #0]
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	2e00      	cmp	r6, #0
 800521e:	da03      	bge.n	8005228 <_printf_i+0xc8>
 8005220:	232d      	movs	r3, #45	; 0x2d
 8005222:	4276      	negs	r6, r6
 8005224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005228:	230a      	movs	r3, #10
 800522a:	485e      	ldr	r0, [pc, #376]	; (80053a4 <_printf_i+0x244>)
 800522c:	e019      	b.n	8005262 <_printf_i+0x102>
 800522e:	680e      	ldr	r6, [r1, #0]
 8005230:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	bf18      	it	ne
 8005238:	b236      	sxthne	r6, r6
 800523a:	e7ef      	b.n	800521c <_printf_i+0xbc>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	1d19      	adds	r1, r3, #4
 8005242:	6029      	str	r1, [r5, #0]
 8005244:	0601      	lsls	r1, r0, #24
 8005246:	d501      	bpl.n	800524c <_printf_i+0xec>
 8005248:	681e      	ldr	r6, [r3, #0]
 800524a:	e002      	b.n	8005252 <_printf_i+0xf2>
 800524c:	0646      	lsls	r6, r0, #25
 800524e:	d5fb      	bpl.n	8005248 <_printf_i+0xe8>
 8005250:	881e      	ldrh	r6, [r3, #0]
 8005252:	2f6f      	cmp	r7, #111	; 0x6f
 8005254:	bf0c      	ite	eq
 8005256:	2308      	moveq	r3, #8
 8005258:	230a      	movne	r3, #10
 800525a:	4852      	ldr	r0, [pc, #328]	; (80053a4 <_printf_i+0x244>)
 800525c:	2100      	movs	r1, #0
 800525e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005262:	6865      	ldr	r5, [r4, #4]
 8005264:	2d00      	cmp	r5, #0
 8005266:	bfa8      	it	ge
 8005268:	6821      	ldrge	r1, [r4, #0]
 800526a:	60a5      	str	r5, [r4, #8]
 800526c:	bfa4      	itt	ge
 800526e:	f021 0104 	bicge.w	r1, r1, #4
 8005272:	6021      	strge	r1, [r4, #0]
 8005274:	b90e      	cbnz	r6, 800527a <_printf_i+0x11a>
 8005276:	2d00      	cmp	r5, #0
 8005278:	d04d      	beq.n	8005316 <_printf_i+0x1b6>
 800527a:	4615      	mov	r5, r2
 800527c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005280:	fb03 6711 	mls	r7, r3, r1, r6
 8005284:	5dc7      	ldrb	r7, [r0, r7]
 8005286:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800528a:	4637      	mov	r7, r6
 800528c:	42bb      	cmp	r3, r7
 800528e:	460e      	mov	r6, r1
 8005290:	d9f4      	bls.n	800527c <_printf_i+0x11c>
 8005292:	2b08      	cmp	r3, #8
 8005294:	d10b      	bne.n	80052ae <_printf_i+0x14e>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	07de      	lsls	r6, r3, #31
 800529a:	d508      	bpl.n	80052ae <_printf_i+0x14e>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	6861      	ldr	r1, [r4, #4]
 80052a0:	4299      	cmp	r1, r3
 80052a2:	bfde      	ittt	le
 80052a4:	2330      	movle	r3, #48	; 0x30
 80052a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ae:	1b52      	subs	r2, r2, r5
 80052b0:	6122      	str	r2, [r4, #16]
 80052b2:	464b      	mov	r3, r9
 80052b4:	4621      	mov	r1, r4
 80052b6:	4640      	mov	r0, r8
 80052b8:	f8cd a000 	str.w	sl, [sp]
 80052bc:	aa03      	add	r2, sp, #12
 80052be:	f7ff fedf 	bl	8005080 <_printf_common>
 80052c2:	3001      	adds	r0, #1
 80052c4:	d14c      	bne.n	8005360 <_printf_i+0x200>
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	b004      	add	sp, #16
 80052cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d0:	4834      	ldr	r0, [pc, #208]	; (80053a4 <_printf_i+0x244>)
 80052d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052d6:	6829      	ldr	r1, [r5, #0]
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	f851 6b04 	ldr.w	r6, [r1], #4
 80052de:	6029      	str	r1, [r5, #0]
 80052e0:	061d      	lsls	r5, r3, #24
 80052e2:	d514      	bpl.n	800530e <_printf_i+0x1ae>
 80052e4:	07df      	lsls	r7, r3, #31
 80052e6:	bf44      	itt	mi
 80052e8:	f043 0320 	orrmi.w	r3, r3, #32
 80052ec:	6023      	strmi	r3, [r4, #0]
 80052ee:	b91e      	cbnz	r6, 80052f8 <_printf_i+0x198>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	f023 0320 	bic.w	r3, r3, #32
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	2310      	movs	r3, #16
 80052fa:	e7af      	b.n	800525c <_printf_i+0xfc>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	f043 0320 	orr.w	r3, r3, #32
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	2378      	movs	r3, #120	; 0x78
 8005306:	4828      	ldr	r0, [pc, #160]	; (80053a8 <_printf_i+0x248>)
 8005308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800530c:	e7e3      	b.n	80052d6 <_printf_i+0x176>
 800530e:	0659      	lsls	r1, r3, #25
 8005310:	bf48      	it	mi
 8005312:	b2b6      	uxthmi	r6, r6
 8005314:	e7e6      	b.n	80052e4 <_printf_i+0x184>
 8005316:	4615      	mov	r5, r2
 8005318:	e7bb      	b.n	8005292 <_printf_i+0x132>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	6826      	ldr	r6, [r4, #0]
 800531e:	1d18      	adds	r0, r3, #4
 8005320:	6961      	ldr	r1, [r4, #20]
 8005322:	6028      	str	r0, [r5, #0]
 8005324:	0635      	lsls	r5, r6, #24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	d501      	bpl.n	800532e <_printf_i+0x1ce>
 800532a:	6019      	str	r1, [r3, #0]
 800532c:	e002      	b.n	8005334 <_printf_i+0x1d4>
 800532e:	0670      	lsls	r0, r6, #25
 8005330:	d5fb      	bpl.n	800532a <_printf_i+0x1ca>
 8005332:	8019      	strh	r1, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	4615      	mov	r5, r2
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	e7ba      	b.n	80052b2 <_printf_i+0x152>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	2100      	movs	r1, #0
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	602a      	str	r2, [r5, #0]
 8005344:	681d      	ldr	r5, [r3, #0]
 8005346:	6862      	ldr	r2, [r4, #4]
 8005348:	4628      	mov	r0, r5
 800534a:	f000 f831 	bl	80053b0 <memchr>
 800534e:	b108      	cbz	r0, 8005354 <_printf_i+0x1f4>
 8005350:	1b40      	subs	r0, r0, r5
 8005352:	6060      	str	r0, [r4, #4]
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2300      	movs	r3, #0
 800535a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800535e:	e7a8      	b.n	80052b2 <_printf_i+0x152>
 8005360:	462a      	mov	r2, r5
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	47d0      	blx	sl
 800536a:	3001      	adds	r0, #1
 800536c:	d0ab      	beq.n	80052c6 <_printf_i+0x166>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	079b      	lsls	r3, r3, #30
 8005372:	d413      	bmi.n	800539c <_printf_i+0x23c>
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	9b03      	ldr	r3, [sp, #12]
 8005378:	4298      	cmp	r0, r3
 800537a:	bfb8      	it	lt
 800537c:	4618      	movlt	r0, r3
 800537e:	e7a4      	b.n	80052ca <_printf_i+0x16a>
 8005380:	2301      	movs	r3, #1
 8005382:	4632      	mov	r2, r6
 8005384:	4649      	mov	r1, r9
 8005386:	4640      	mov	r0, r8
 8005388:	47d0      	blx	sl
 800538a:	3001      	adds	r0, #1
 800538c:	d09b      	beq.n	80052c6 <_printf_i+0x166>
 800538e:	3501      	adds	r5, #1
 8005390:	68e3      	ldr	r3, [r4, #12]
 8005392:	9903      	ldr	r1, [sp, #12]
 8005394:	1a5b      	subs	r3, r3, r1
 8005396:	42ab      	cmp	r3, r5
 8005398:	dcf2      	bgt.n	8005380 <_printf_i+0x220>
 800539a:	e7eb      	b.n	8005374 <_printf_i+0x214>
 800539c:	2500      	movs	r5, #0
 800539e:	f104 0619 	add.w	r6, r4, #25
 80053a2:	e7f5      	b.n	8005390 <_printf_i+0x230>
 80053a4:	080059a8 	.word	0x080059a8
 80053a8:	080059b9 	.word	0x080059b9

080053ac <__retarget_lock_acquire_recursive>:
 80053ac:	4770      	bx	lr

080053ae <__retarget_lock_release_recursive>:
 80053ae:	4770      	bx	lr

080053b0 <memchr>:
 80053b0:	4603      	mov	r3, r0
 80053b2:	b510      	push	{r4, lr}
 80053b4:	b2c9      	uxtb	r1, r1
 80053b6:	4402      	add	r2, r0
 80053b8:	4293      	cmp	r3, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	d101      	bne.n	80053c2 <memchr+0x12>
 80053be:	2000      	movs	r0, #0
 80053c0:	e003      	b.n	80053ca <memchr+0x1a>
 80053c2:	7804      	ldrb	r4, [r0, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	428c      	cmp	r4, r1
 80053c8:	d1f6      	bne.n	80053b8 <memchr+0x8>
 80053ca:	bd10      	pop	{r4, pc}

080053cc <memcpy>:
 80053cc:	440a      	add	r2, r1
 80053ce:	4291      	cmp	r1, r2
 80053d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d4:	d100      	bne.n	80053d8 <memcpy+0xc>
 80053d6:	4770      	bx	lr
 80053d8:	b510      	push	{r4, lr}
 80053da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053de:	4291      	cmp	r1, r2
 80053e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e4:	d1f9      	bne.n	80053da <memcpy+0xe>
 80053e6:	bd10      	pop	{r4, pc}

080053e8 <memmove>:
 80053e8:	4288      	cmp	r0, r1
 80053ea:	b510      	push	{r4, lr}
 80053ec:	eb01 0402 	add.w	r4, r1, r2
 80053f0:	d902      	bls.n	80053f8 <memmove+0x10>
 80053f2:	4284      	cmp	r4, r0
 80053f4:	4623      	mov	r3, r4
 80053f6:	d807      	bhi.n	8005408 <memmove+0x20>
 80053f8:	1e43      	subs	r3, r0, #1
 80053fa:	42a1      	cmp	r1, r4
 80053fc:	d008      	beq.n	8005410 <memmove+0x28>
 80053fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005406:	e7f8      	b.n	80053fa <memmove+0x12>
 8005408:	4601      	mov	r1, r0
 800540a:	4402      	add	r2, r0
 800540c:	428a      	cmp	r2, r1
 800540e:	d100      	bne.n	8005412 <memmove+0x2a>
 8005410:	bd10      	pop	{r4, pc}
 8005412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800541a:	e7f7      	b.n	800540c <memmove+0x24>

0800541c <_realloc_r>:
 800541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	4680      	mov	r8, r0
 8005422:	4614      	mov	r4, r2
 8005424:	460e      	mov	r6, r1
 8005426:	b921      	cbnz	r1, 8005432 <_realloc_r+0x16>
 8005428:	4611      	mov	r1, r2
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f7ff bb95 	b.w	8004b5c <_malloc_r>
 8005432:	b92a      	cbnz	r2, 8005440 <_realloc_r+0x24>
 8005434:	f7ff fb2a 	bl	8004a8c <_free_r>
 8005438:	4625      	mov	r5, r4
 800543a:	4628      	mov	r0, r5
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	f000 f81b 	bl	800547a <_malloc_usable_size_r>
 8005444:	4284      	cmp	r4, r0
 8005446:	4607      	mov	r7, r0
 8005448:	d802      	bhi.n	8005450 <_realloc_r+0x34>
 800544a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800544e:	d812      	bhi.n	8005476 <_realloc_r+0x5a>
 8005450:	4621      	mov	r1, r4
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff fb82 	bl	8004b5c <_malloc_r>
 8005458:	4605      	mov	r5, r0
 800545a:	2800      	cmp	r0, #0
 800545c:	d0ed      	beq.n	800543a <_realloc_r+0x1e>
 800545e:	42bc      	cmp	r4, r7
 8005460:	4622      	mov	r2, r4
 8005462:	4631      	mov	r1, r6
 8005464:	bf28      	it	cs
 8005466:	463a      	movcs	r2, r7
 8005468:	f7ff ffb0 	bl	80053cc <memcpy>
 800546c:	4631      	mov	r1, r6
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff fb0c 	bl	8004a8c <_free_r>
 8005474:	e7e1      	b.n	800543a <_realloc_r+0x1e>
 8005476:	4635      	mov	r5, r6
 8005478:	e7df      	b.n	800543a <_realloc_r+0x1e>

0800547a <_malloc_usable_size_r>:
 800547a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547e:	1f18      	subs	r0, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	bfbc      	itt	lt
 8005484:	580b      	ldrlt	r3, [r1, r0]
 8005486:	18c0      	addlt	r0, r0, r3
 8005488:	4770      	bx	lr
	...

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
