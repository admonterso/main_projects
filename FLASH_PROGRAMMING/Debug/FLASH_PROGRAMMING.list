
FLASH_PROGRAMMING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08005508  08005508  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005508  08005508  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08005510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200000e8  080055f4  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  080055f4  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfed  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268b  00000000  00000000  0002e0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00030788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018491  00000000  00000000  000320d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010204  00000000  00000000  0004a569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086692  00000000  00000000  0005a76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  000e0e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005010 	.word	0x08005010

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08005010 	.word	0x08005010

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Flash_Write_Data>:
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();

	   return 0;
}
uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords) {
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	4613      	mov	r3, r2
 8000168:	80fb      	strh	r3, [r7, #6]
    //static FLASH_EraseInitTypeDef EraseInitStruct;
    //uint32_t PAGEError;
    int sofar = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	617b      	str	r3, [r7, #20]

    /* Unlock the Flash to enable the flash control register access */
    HAL_FLASH_Unlock();
 800016e:	f001 fe45 	bl	8001dfc <HAL_FLASH_Unlock>
//        /* Error occurred while page erase. */
//        return HAL_FLASH_GetError();
//    }

    /* Program the user Flash area word by word */
    while (sofar < numberofwords) {
 8000172:	e01b      	b.n	80001ac <Flash_Write_Data+0x50>
        //uint32_t reversedData = convertBigEndianToLittleEndian(Data[sofar]); // Reverse the byte order

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK) {
 8000174:	697b      	ldr	r3, [r7, #20]
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	4413      	add	r3, r2
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2200      	movs	r2, #0
 8000180:	461c      	mov	r4, r3
 8000182:	4615      	mov	r5, r2
 8000184:	4622      	mov	r2, r4
 8000186:	462b      	mov	r3, r5
 8000188:	68f9      	ldr	r1, [r7, #12]
 800018a:	2002      	movs	r0, #2
 800018c:	f001 fdc6 	bl	8001d1c <HAL_FLASH_Program>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d106      	bne.n	80001a4 <Flash_Write_Data+0x48>
            StartPageAddress += 4;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	3304      	adds	r3, #4
 800019a:	60fb      	str	r3, [r7, #12]
            sofar++;
 800019c:	697b      	ldr	r3, [r7, #20]
 800019e:	3301      	adds	r3, #1
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	e003      	b.n	80001ac <Flash_Write_Data+0x50>
        } else {
            /* Error occurred while writing data in Flash memory */
            return HAL_FLASH_GetError();
 80001a4:	f001 fe60 	bl	8001e68 <HAL_FLASH_GetError>
 80001a8:	4603      	mov	r3, r0
 80001aa:	e006      	b.n	80001ba <Flash_Write_Data+0x5e>
    while (sofar < numberofwords) {
 80001ac:	88fb      	ldrh	r3, [r7, #6]
 80001ae:	697a      	ldr	r2, [r7, #20]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	dbdf      	blt.n	8000174 <Flash_Write_Data+0x18>
        }
    }

    /* Lock the Flash to disable the flash control register access */
    HAL_FLASH_Lock();
 80001b4:	f001 fe48 	bl	8001e48 <HAL_FLASH_Lock>

    return 0;
 80001b8:	2300      	movs	r3, #0
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3718      	adds	r7, #24
 80001be:	46bd      	mov	sp, r7
 80001c0:	bdb0      	pop	{r4, r5, r7, pc}

080001c2 <eraseFlashRange>:

void eraseFlashRange(uint32_t startAddress, uint32_t endAddress) {
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b08a      	sub	sp, #40	; 0x28
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	6078      	str	r0, [r7, #4]
 80001ca:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60bb      	str	r3, [r7, #8]

    // Unlock the flash memory
    HAL_FLASH_Unlock();
 80001d0:	f001 fe14 	bl	8001dfc <HAL_FLASH_Unlock>

    // Get the page of the start address
    uint32_t startPage = (startAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80001da:	0a9b      	lsrs	r3, r3, #10
 80001dc:	623b      	str	r3, [r7, #32]
    uint32_t endPage = (endAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80001e4:	0a9b      	lsrs	r3, r3, #10
 80001e6:	61fb      	str	r3, [r7, #28]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
    //eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;

    for (uint32_t page = startPage; page <= endPage; ++page) {
 80001ec:	6a3b      	ldr	r3, [r7, #32]
 80001ee:	627b      	str	r3, [r7, #36]	; 0x24
 80001f0:	e011      	b.n	8000216 <eraseFlashRange+0x54>
        eraseInitStruct.PageAddress = FLASH_BASE + (page * FLASH_PAGE_SIZE);
 80001f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80001f8:	029b      	lsls	r3, r3, #10
 80001fa:	617b      	str	r3, [r7, #20]
        eraseInitStruct.NbPages = 1;
 80001fc:	2301      	movs	r3, #1
 80001fe:	61bb      	str	r3, [r7, #24]

        HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	4611      	mov	r1, r2
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fee8 	bl	8001fe0 <HAL_FLASHEx_Erase>
    for (uint32_t page = startPage; page <= endPage; ++page) {
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	3301      	adds	r3, #1
 8000214:	627b      	str	r3, [r7, #36]	; 0x24
 8000216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	429a      	cmp	r2, r3
 800021c:	d9e9      	bls.n	80001f2 <eraseFlashRange+0x30>
    }

    // Lock the flash memory
    HAL_FLASH_Lock();
 800021e:	f001 fe13 	bl	8001e48 <HAL_FLASH_Lock>
}
 8000222:	bf00      	nop
 8000224:	3728      	adds	r7, #40	; 0x28
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <printItvirteba>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void printItvirteba(uint8_t row, uint8_t column){
 800022c:	b580      	push	{r7, lr}
 800022e:	b092      	sub	sp, #72	; 0x48
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t IGEO[8] = { I_GEO_MACRO };
 800023c:	4a68      	ldr	r2, [pc, #416]	; (80003e0 <printItvirteba+0x1b4>)
 800023e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000246:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t TGEO[8] = { T_GEO_MACRO };
 800024a:	4a66      	ldr	r2, [pc, #408]	; (80003e4 <printItvirteba+0x1b8>)
 800024c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000254:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t VGEO[8] = { V_GEO_MACRO };
 8000258:	4a63      	ldr	r2, [pc, #396]	; (80003e8 <printItvirteba+0x1bc>)
 800025a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800025e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000262:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RGEO[8] = { R_GEO_MACRO };
 8000266:	4a61      	ldr	r2, [pc, #388]	; (80003ec <printItvirteba+0x1c0>)
 8000268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000270:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tGEO[8] = { t_GEO_MACRO };
 8000274:	4a5e      	ldr	r2, [pc, #376]	; (80003f0 <printItvirteba+0x1c4>)
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800027e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t EGEO[8] = { E_GEO_MACRO };
 8000282:	4a5c      	ldr	r2, [pc, #368]	; (80003f4 <printItvirteba+0x1c8>)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t BGEO[8] = { B_GEO_MACRO };
 8000290:	4a59      	ldr	r2, [pc, #356]	; (80003f8 <printItvirteba+0x1cc>)
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	e892 0003 	ldmia.w	r2, {r0, r1}
 800029a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t AGEO[8] = { A_GEO_MACRO };
 800029e:	4a57      	ldr	r2, [pc, #348]	; (80003fc <printItvirteba+0x1d0>)
 80002a0:	f107 0308 	add.w	r3, r7, #8
 80002a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a8:	e883 0003 	stmia.w	r3, {r0, r1}

	HD44780_Clear();
 80002ac:	f000 f9ec 	bl	8000688 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, IGEO); // i
 80002b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002b4:	4619      	mov	r1, r3
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fa44 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 80002bc:	79fa      	ldrb	r2, [r7, #7]
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	4611      	mov	r1, r2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f9f6 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 fa64 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, TGEO); //t
 80002ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002d2:	4619      	mov	r1, r3
 80002d4:	2002      	movs	r0, #2
 80002d6:	f000 fa35 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	3301      	adds	r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	79fa      	ldrb	r2, [r7, #7]
 80002e2:	4611      	mov	r1, r2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9e5 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 fa53 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, VGEO);//v
 80002f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002f4:	4619      	mov	r1, r3
 80002f6:	2003      	movs	r0, #3
 80002f8:	f000 fa24 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	3302      	adds	r3, #2
 8000300:	b2db      	uxtb	r3, r3
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f9d4 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800030c:	2003      	movs	r0, #3
 800030e:	f000 fa42 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	3303      	adds	r3, #3
 8000316:	b2db      	uxtb	r3, r3
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f9c9 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1); // i
 8000322:	2001      	movs	r0, #1
 8000324:	f000 fa37 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, RGEO); //r
 8000328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032c:	4619      	mov	r1, r3
 800032e:	2005      	movs	r0, #5
 8000330:	f000 fa08 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	3304      	adds	r3, #4
 8000338:	b2db      	uxtb	r3, r3
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	4611      	mov	r1, r2
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f9b8 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 8000344:	2005      	movs	r0, #5
 8000346:	f000 fa26 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGEO); // t
 800034a:	f107 0320 	add.w	r3, r7, #32
 800034e:	4619      	mov	r1, r3
 8000350:	2006      	movs	r0, #6
 8000352:	f000 f9f7 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	3305      	adds	r3, #5
 800035a:	b2db      	uxtb	r3, r3
 800035c:	79fa      	ldrb	r2, [r7, #7]
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9a7 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 8000366:	2006      	movs	r0, #6
 8000368:	f000 fa15 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, EGEO); //e
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4619      	mov	r1, r3
 8000372:	2007      	movs	r0, #7
 8000374:	f000 f9e6 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	3306      	adds	r3, #6
 800037c:	b2db      	uxtb	r3, r3
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	4611      	mov	r1, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f996 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 8000388:	2007      	movs	r0, #7
 800038a:	f000 fa04 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(8, BGEO); //b
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	2008      	movs	r0, #8
 8000396:	f000 f9d5 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	3307      	adds	r3, #7
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	79fa      	ldrb	r2, [r7, #7]
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f985 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(8);
 80003aa:	2008      	movs	r0, #8
 80003ac:	f000 f9f3 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, AGEO); //a
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	4619      	mov	r1, r3
 80003b6:	2004      	movs	r0, #4
 80003b8:	f000 f9c4 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+8, row);
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	3308      	adds	r3, #8
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	4611      	mov	r1, r2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f974 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 80003cc:	2004      	movs	r0, #4
 80003ce:	f000 f9e2 	bl	8000796 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <printItvirteba+0x1d4>)
 80003d4:	f000 f9ec 	bl	80007b0 <HD44780_PrintStr>
}
 80003d8:	bf00      	nop
 80003da:	3748      	adds	r7, #72	; 0x48
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	0800502c 	.word	0x0800502c
 80003e4:	08005034 	.word	0x08005034
 80003e8:	0800503c 	.word	0x0800503c
 80003ec:	08005044 	.word	0x08005044
 80003f0:	0800504c 	.word	0x0800504c
 80003f4:	08005054 	.word	0x08005054
 80003f8:	0800505c 	.word	0x0800505c
 80003fc:	08005064 	.word	0x08005064
 8000400:	08005028 	.word	0x08005028

08000404 <printAxldeba>:
	HD44780_SetCursor(column+6, row);
	HD44780_PrintSpecialChar(7);

	HD44780_PrintStr(": ");
}
void printAxldeba(uint8_t row, uint8_t column){
 8000404:	b580      	push	{r7, lr}
 8000406:	b08e      	sub	sp, #56	; 0x38
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	4613      	mov	r3, r2
 8000412:	71bb      	strb	r3, [r7, #6]
	uint8_t aGeo[8] = { A_GEO_MACRO };
 8000414:	4a53      	ldr	r2, [pc, #332]	; (8000564 <printAxldeba+0x160>)
 8000416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800041a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800041e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t xGeo[8] = { X_GEO_MACRO };
 8000422:	4a51      	ldr	r2, [pc, #324]	; (8000568 <printAxldeba+0x164>)
 8000424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800042c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t lGeo[8] = { L_GEO_MACRO };
 8000430:	4a4e      	ldr	r2, [pc, #312]	; (800056c <printAxldeba+0x168>)
 8000432:	f107 0320 	add.w	r3, r7, #32
 8000436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800043a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dGeo[8] = { D_GEO_MACRO };
 800043e:	4a4c      	ldr	r2, [pc, #304]	; (8000570 <printAxldeba+0x16c>)
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000448:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t eGeo[8] = { E_GEO_MACRO };
 800044c:	4a49      	ldr	r2, [pc, #292]	; (8000574 <printAxldeba+0x170>)
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000456:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bGeo[8] = { B_GEO_MACRO };
 800045a:	4a47      	ldr	r2, [pc, #284]	; (8000578 <printAxldeba+0x174>)
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000464:	e883 0003 	stmia.w	r3, {r0, r1}


	HD44780_Clear();
 8000468:	f000 f90e 	bl	8000688 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, aGeo);
 800046c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000470:	4619      	mov	r1, r3
 8000472:	2001      	movs	r0, #1
 8000474:	f000 f966 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 8000478:	79fa      	ldrb	r2, [r7, #7]
 800047a:	79bb      	ldrb	r3, [r7, #6]
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f918 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 8000484:	2001      	movs	r0, #1
 8000486:	f000 f986 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, xGeo);
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	4619      	mov	r1, r3
 8000490:	2002      	movs	r0, #2
 8000492:	f000 f957 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	3301      	adds	r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	79fa      	ldrb	r2, [r7, #7]
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f907 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 f975 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 80004ac:	f107 0320 	add.w	r3, r7, #32
 80004b0:	4619      	mov	r1, r3
 80004b2:	2003      	movs	r0, #3
 80004b4:	f000 f946 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	3302      	adds	r3, #2
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	79fa      	ldrb	r2, [r7, #7]
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f8f6 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 80004c8:	2003      	movs	r0, #3
 80004ca:	f000 f964 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, dGeo);
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4619      	mov	r1, r3
 80004d4:	2004      	movs	r0, #4
 80004d6:	f000 f935 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	3303      	adds	r3, #3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	79fa      	ldrb	r2, [r7, #7]
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f8e5 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 80004ea:	2004      	movs	r0, #4
 80004ec:	f000 f953 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, eGeo);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	2005      	movs	r0, #5
 80004f8:	f000 f924 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	3304      	adds	r3, #4
 8000500:	b2db      	uxtb	r3, r3
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f8d4 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800050c:	2005      	movs	r0, #5
 800050e:	f000 f942 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, bGeo);
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	4619      	mov	r1, r3
 8000518:	2006      	movs	r0, #6
 800051a:	f000 f913 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	3305      	adds	r3, #5
 8000522:	b2db      	uxtb	r3, r3
 8000524:	79fa      	ldrb	r2, [r7, #7]
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f8c3 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800052e:	2006      	movs	r0, #6
 8000530:	f000 f931 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, aGeo);
 8000534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000538:	4619      	mov	r1, r3
 800053a:	2007      	movs	r0, #7
 800053c:	f000 f902 	bl	8000744 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	3306      	adds	r3, #6
 8000544:	b2db      	uxtb	r3, r3
 8000546:	79fa      	ldrb	r2, [r7, #7]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f8b2 	bl	80006b4 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 8000550:	2007      	movs	r0, #7
 8000552:	f000 f920 	bl	8000796 <HD44780_PrintSpecialChar>

	HD44780_PrintStr("!");
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <printAxldeba+0x178>)
 8000558:	f000 f92a 	bl	80007b0 <HD44780_PrintStr>
}
 800055c:	bf00      	nop
 800055e:	3738      	adds	r7, #56	; 0x38
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	08005064 	.word	0x08005064
 8000568:	08005090 	.word	0x08005090
 800056c:	08005098 	.word	0x08005098
 8000570:	08005080 	.word	0x08005080
 8000574:	08005054 	.word	0x08005054
 8000578:	0800505c 	.word	0x0800505c
 800057c:	08005028 	.word	0x08005028

08000580 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800058a:	4a38      	ldr	r2, [pc, #224]	; (800066c <HD44780_Init+0xec>)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <HD44780_Init+0xf0>)
 8000592:	2208      	movs	r2, #8
 8000594:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <HD44780_Init+0xf4>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <HD44780_Init+0xec>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d907      	bls.n	80005b4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005a4:	4b33      	ldr	r3, [pc, #204]	; (8000674 <HD44780_Init+0xf4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <HD44780_Init+0xf4>)
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e006      	b.n	80005c2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <HD44780_Init+0xf4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <HD44780_Init+0xf4>)
 80005c0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005c2:	f000 f993 	bl	80008ec <DelayInit>
  HAL_Delay(50);
 80005c6:	2032      	movs	r0, #50	; 0x32
 80005c8:	f001 f9aa 	bl	8001920 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <HD44780_Init+0xf0>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f951 	bl	8000878 <ExpanderWrite>
  HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005da:	f001 f9a1 	bl	8001920 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005de:	2030      	movs	r0, #48	; 0x30
 80005e0:	f000 f938 	bl	8000854 <Write4Bits>
  DelayUS(4500);
 80005e4:	f241 1094 	movw	r0, #4500	; 0x1194
 80005e8:	f000 f9a8 	bl	800093c <DelayUS>

  Write4Bits(0x03 << 4);
 80005ec:	2030      	movs	r0, #48	; 0x30
 80005ee:	f000 f931 	bl	8000854 <Write4Bits>
  DelayUS(4500);
 80005f2:	f241 1094 	movw	r0, #4500	; 0x1194
 80005f6:	f000 f9a1 	bl	800093c <DelayUS>

  Write4Bits(0x03 << 4);
 80005fa:	2030      	movs	r0, #48	; 0x30
 80005fc:	f000 f92a 	bl	8000854 <Write4Bits>
  DelayUS(4500);
 8000600:	f241 1094 	movw	r0, #4500	; 0x1194
 8000604:	f000 f99a 	bl	800093c <DelayUS>

  Write4Bits(0x02 << 4);
 8000608:	2020      	movs	r0, #32
 800060a:	f000 f923 	bl	8000854 <Write4Bits>
  DelayUS(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f000 f994 	bl	800093c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HD44780_Init+0xf4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f8db 	bl	80007da <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HD44780_Init+0xf8>)
 8000626:	2204      	movs	r2, #4
 8000628:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800062a:	f000 f875 	bl	8000718 <HD44780_Display>
  HD44780_Clear();
 800062e:	f000 f82b 	bl	8000688 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HD44780_Init+0xfc>)
 8000634:	2202      	movs	r2, #2
 8000636:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <HD44780_Init+0xfc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8c9 	bl	80007da <SendCommand>
  DelayUS(4500);
 8000648:	f241 1094 	movw	r0, #4500	; 0x1194
 800064c:	f000 f976 	bl	800093c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000650:	490b      	ldr	r1, [pc, #44]	; (8000680 <HD44780_Init+0x100>)
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f876 	bl	8000744 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000658:	490a      	ldr	r1, [pc, #40]	; (8000684 <HD44780_Init+0x104>)
 800065a:	2001      	movs	r0, #1
 800065c:	f000 f872 	bl	8000744 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000660:	f000 f81d 	bl	800069e <HD44780_Home>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000107 	.word	0x20000107
 8000670:	20000108 	.word	0x20000108
 8000674:	20000104 	.word	0x20000104
 8000678:	20000105 	.word	0x20000105
 800067c:	20000106 	.word	0x20000106
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008

08000688 <HD44780_Clear>:

void HD44780_Clear()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f8a4 	bl	80007da <SendCommand>
  DelayUS(2000);
 8000692:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000696:	f000 f951 	bl	800093c <DelayUS>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <HD44780_Home>:

void HD44780_Home()
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 f899 	bl	80007da <SendCommand>
  DelayUS(2000);
 80006a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ac:	f000 f946 	bl	800093c <DelayUS>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HD44780_SetCursor+0x5c>)
 80006c6:	f107 0408 	add.w	r4, r7, #8
 80006ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HD44780_SetCursor+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	79ba      	ldrb	r2, [r7, #6]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d303      	bcc.n	80006e2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HD44780_SetCursor+0x60>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	3318      	adds	r3, #24
 80006e8:	443b      	add	r3, r7
 80006ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4413      	add	r3, r2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f86a 	bl	80007da <SendCommand>
}
 8000706:	bf00      	nop
 8000708:	371c      	adds	r7, #28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	bf00      	nop
 8000710:	080050d0 	.word	0x080050d0
 8000714:	20000107 	.word	0x20000107

08000718 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HD44780_Display+0x28>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HD44780_Display+0x28>)
 8000728:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HD44780_Display+0x28>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f850 	bl	80007da <SendCommand>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000105 	.word	0x20000105

08000744 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	b25b      	sxtb	r3, r3
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	b25b      	sxtb	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f837 	bl	80007da <SendCommand>
  for (int i=0; i<8; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	e009      	b.n	8000786 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f83b 	bl	80007f6 <SendChar>
  for (int i=0; i<8; i++)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b07      	cmp	r3, #7
 800078a:	ddf2      	ble.n	8000772 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f827 	bl	80007f6 <SendChar>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007b8:	e006      	b.n	80007c8 <HD44780_PrintStr+0x18>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f817 	bl	80007f6 <SendChar>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f4      	bne.n	80007ba <HD44780_PrintStr+0xa>
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f812 	bl	8000812 <Send>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f804 	bl	8000812 <Send>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	460a      	mov	r2, r1
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	4613      	mov	r3, r2
 8000820:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f023 030f 	bic.w	r3, r3, #15
 8000828:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	4313      	orrs	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f80b 	bl	8000854 <Write4Bits>
  Write4Bits((lownib)|mode);
 800083e:	7bba      	ldrb	r2, [r7, #14]
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	4313      	orrs	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f804 	bl	8000854 <Write4Bits>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f809 	bl	8000878 <ExpanderWrite>
  PulseEnable(value);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f821 	bl	80008b0 <PulseEnable>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <ExpanderWrite+0x30>)
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4313      	orrs	r3, r2
 800088a:	b2db      	uxtb	r3, r3
 800088c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800088e:	f107 020f 	add.w	r2, r7, #15
 8000892:	230a      	movs	r3, #10
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	214e      	movs	r1, #78	; 0x4e
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <ExpanderWrite+0x34>)
 800089c:	f001 ff40 	bl	8002720 <HAL_I2C_Master_Transmit>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000108 	.word	0x20000108
 80008ac:	2000010c 	.word	0x2000010c

080008b0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffd8 	bl	8000878 <ExpanderWrite>
  DelayUS(20);
 80008c8:	2014      	movs	r0, #20
 80008ca:	f000 f837 	bl	800093c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f023 0304 	bic.w	r3, r3, #4
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffce 	bl	8000878 <ExpanderWrite>
  DelayUS(20);
 80008dc:	2014      	movs	r0, #20
 80008de:	f000 f82d 	bl	800093c <DelayUS>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <DelayInit>:

static void DelayInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <DelayInit+0x48>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <DelayInit+0x48>)
 80008f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008fa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <DelayInit+0x48>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <DelayInit+0x48>)
 8000902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000906:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <DelayInit+0x4c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <DelayInit+0x4c>)
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <DelayInit+0x4c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <DelayInit+0x4c>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <DelayInit+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000926:	bf00      	nop
  __ASM volatile ("NOP");
 8000928:	bf00      	nop
  __ASM volatile ("NOP");
 800092a:	bf00      	nop
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000edf0 	.word	0xe000edf0
 8000938:	e0001000 	.word	0xe0001000

0800093c <DelayUS>:

static void DelayUS(uint32_t us) {
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <DelayUS+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <DelayUS+0x44>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0c9a      	lsrs	r2, r3, #18
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <DelayUS+0x48>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <DelayUS+0x48>)
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f6      	bhi.n	800095e <DelayUS+0x22>
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	371c      	adds	r7, #28
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000074 	.word	0x20000074
 8000980:	431bde83 	.word	0x431bde83
 8000984:	e0001000 	.word	0xe0001000

08000988 <HAL_UART_RxCpltCallback>:
uint8_t updateChars[8]; // update char store
uint8_t MQTT_CHECK_DATA[100];
uint8_t MQTT_GOT_DATA[] = "{\"operationType\":\"acknowledge\",\"content\":{\"status\":\"success\",\"terminalID\":\""STR(currentTerminal)"\"}}";
uint8_t c; // this stores the input chars from uart to find start and the end of input data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	if(flag == 0){
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_UART_RxCpltCallback+0x3c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d110      	bne.n	80009ba <HAL_UART_RxCpltCallback+0x32>
		if(c != '<'){
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_UART_RxCpltCallback+0x40>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b3c      	cmp	r3, #60	; 0x3c
 800099e:	d005      	beq.n	80009ac <HAL_UART_RxCpltCallback+0x24>
			HAL_UART_Receive_IT(&huart1, &c, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	4909      	ldr	r1, [pc, #36]	; (80009c8 <HAL_UART_RxCpltCallback+0x40>)
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_UART_RxCpltCallback+0x44>)
 80009a6:	f003 f857 	bl	8003a58 <HAL_UART_Receive_IT>
			flag = 1;
		}

	}

}
 80009aa:	e006      	b.n	80009ba <HAL_UART_RxCpltCallback+0x32>
		else if(c == '<'){
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_UART_RxCpltCallback+0x40>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b3c      	cmp	r3, #60	; 0x3c
 80009b2:	d102      	bne.n	80009ba <HAL_UART_RxCpltCallback+0x32>
			flag = 1;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_UART_RxCpltCallback+0x3c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001a8 	.word	0x200001a8
 80009c8:	200005dc 	.word	0x200005dc
 80009cc:	20000160 	.word	0x20000160

080009d0 <convertStringToHex>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t convertStringToHex(uint8_t* str) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    uint32_t hexValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
    int i = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]

    // Iterate over each character in the string
    while (i < 8) {
 80009e0:	e049      	b.n	8000a76 <convertStringToHex+0xa6>
        hexValue <<= 4;  // Shift left by 4 bits
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	60fb      	str	r3, [r7, #12]

        // Convert character to hexadecimal digit
        if (str[i] >= '0' && str[i] <= '9') {
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b2f      	cmp	r3, #47	; 0x2f
 80009f2:	d90f      	bls.n	8000a14 <convertStringToHex+0x44>
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b39      	cmp	r3, #57	; 0x39
 80009fe:	d809      	bhi.n	8000a14 <convertStringToHex+0x44>
            hexValue |= (str[i] - '0');
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3b30      	subs	r3, #48	; 0x30
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e02d      	b.n	8000a70 <convertStringToHex+0xa0>
        } else if (str[i] >= 'A' && str[i] <= 'F') {
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b40      	cmp	r3, #64	; 0x40
 8000a1e:	d90f      	bls.n	8000a40 <convertStringToHex+0x70>
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b46      	cmp	r3, #70	; 0x46
 8000a2a:	d809      	bhi.n	8000a40 <convertStringToHex+0x70>
            hexValue |= (str[i] - 'A' + 10);
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3b37      	subs	r3, #55	; 0x37
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e017      	b.n	8000a70 <convertStringToHex+0xa0>
        } else if (str[i] >= 'a' && str[i] <= 'f') {
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b60      	cmp	r3, #96	; 0x60
 8000a4a:	d90f      	bls.n	8000a6c <convertStringToHex+0x9c>
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b66      	cmp	r3, #102	; 0x66
 8000a56:	d809      	bhi.n	8000a6c <convertStringToHex+0x9c>
            hexValue |= (str[i] - 'a' + 10);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3b57      	subs	r3, #87	; 0x57
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e001      	b.n	8000a70 <convertStringToHex+0xa0>
        } else {
            // Invalid character, handle error
            //printf("Invalid character: %c\n", str[i]);
            return 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e006      	b.n	8000a7e <convertStringToHex+0xae>
        }

        i++;
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
    while (i < 8) {
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	ddb2      	ble.n	80009e2 <convertStringToHex+0x12>
    }

    return hexValue;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <fleshArray>:
    }

    return hexValue;
}

void fleshArray(uint8_t* array) { // takes 960 bytes of data and fleshes it at start address which is defined at start
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
        int count = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t data[8];
        uint32_t hexVal;
        uint32_t hexVals[4];

        int size = strlen((char*)array);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fb59 	bl	800014c <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(data, array, 8);
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	6810      	ldr	r0, [r2, #0]
 8000aa6:	6851      	ldr	r1, [r2, #4]
 8000aa8:	c303      	stmia	r3!, {r0, r1}
        hexVal = convertStringToHex(data);
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff8e 	bl	80009d0 <convertStringToHex>
 8000ab4:	6238      	str	r0, [r7, #32]
        hexVals[count] = hexVal;
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3330      	adds	r3, #48	; 0x30
 8000abc:	443b      	add	r3, r7
 8000abe:	6a3a      	ldr	r2, [r7, #32]
 8000ac0:	f843 2c28 	str.w	r2, [r3, #-40]
        count++;
 8000ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int i = 0; i < size; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ace:	e033      	b.n	8000b38 <fleshArray+0xb0>

        if((i+1) % 8 == 0){
 8000ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d12a      	bne.n	8000b32 <fleshArray+0xaa>

            memcpy(data, array + (i+1), 8);
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	3301      	adds	r3, #1
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	441a      	add	r2, r3
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6851      	ldr	r1, [r2, #4]
 8000aec:	c303      	stmia	r3!, {r0, r1}
            hexVal = convertStringToHex(data);
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff6c 	bl	80009d0 <convertStringToHex>
 8000af8:	6238      	str	r0, [r7, #32]
            hexVals[count] = hexVal;
 8000afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	3330      	adds	r3, #48	; 0x30
 8000b00:	443b      	add	r3, r7
 8000b02:	6a3a      	ldr	r2, [r7, #32]
 8000b04:	f843 2c28 	str.w	r2, [r3, #-40]

            count++;
 8000b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(count >= 4){
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	dd0e      	ble.n	8000b32 <fleshArray+0xaa>
                //for(int i = 0; i<4; i++) printf("%08X ", hexVals[i]);
            	Flash_Write_Data(Adress,hexVals, 4);
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <fleshArray+0xc4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f107 0108 	add.w	r1, r7, #8
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb1c 	bl	800015c <Flash_Write_Data>

            	Adress+=16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <fleshArray+0xc4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3310      	adds	r3, #16
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <fleshArray+0xc4>)
 8000b2c:	6013      	str	r3, [r2, #0]
                count = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < size; i++) {
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	3301      	adds	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbc7      	blt.n	8000ad0 <fleshArray+0x48>
//
        }

    }

}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	; 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000010 	.word	0x20000010

08000b50 <jumpToAddress>:



void jumpToAddress(uint32_t ADDRESSTOGO){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	  uint32_t addresstojump;

	  addresstojump = *((volatile uint32_t*)(ADDRESSTOGO + 4));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	617b      	str	r3, [r7, #20]
	  HAL_DeInit();
 8000b60:	f000 fe74 	bl	800184c <HAL_DeInit>
	  HAL_RCC_DeInit();
 8000b64:	f002 f934 	bl	8002dd0 <HAL_RCC_DeInit>
	  void (*GoToApp)(void);
	  GoToApp = (void (*) (void))addresstojump;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
	  __disable_irq();
	  __set_MSP(*((volatile uint32_t*)ADDRESSTOGO));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f383 8808 	msr	MSP, r3
}
 8000b7c:	bf00      	nop
	  GoToApp();
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4798      	blx	r3
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <led>:

void led(uint8_t n) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e014      	b.n	8000bc6 <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <led+0x4c>)
 8000ba4:	f001 fc5f 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f000 feb9 	bl	8001920 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <led+0x4c>)
 8000bb6:	f001 fc56 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 feb0 	bl	8001920 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3e6      	bcc.n	8000b9c <led+0x10>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40011000 	.word	0x40011000

08000bdc <quectelInit>:

void quectelInit(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	  memset(data, 0, sizeof(data));
 8000be0:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000be4:	2100      	movs	r1, #0
 8000be6:	4828      	ldr	r0, [pc, #160]	; (8000c88 <quectelInit+0xac>)
 8000be8:	f003 fd0a 	bl	8004600 <memset>

	 checkQueqtelWithNoEcho(data);
 8000bec:	4826      	ldr	r0, [pc, #152]	; (8000c88 <quectelInit+0xac>)
 8000bee:	f000 fb1d 	bl	800122c <checkQueqtelWithNoEcho>
	  HD44780_PrintStr("#");
 8000bf2:	4826      	ldr	r0, [pc, #152]	; (8000c8c <quectelInit+0xb0>)
 8000bf4:	f7ff fddc 	bl	80007b0 <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000bf8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4822      	ldr	r0, [pc, #136]	; (8000c88 <quectelInit+0xac>)
 8000c00:	f003 fcfe 	bl	8004600 <memset>

	 ckeckQuectelSignalWithNoEcho(data);
 8000c04:	4820      	ldr	r0, [pc, #128]	; (8000c88 <quectelInit+0xac>)
 8000c06:	f000 fb53 	bl	80012b0 <ckeckQuectelSignalWithNoEcho>
	  HD44780_PrintStr("#");
 8000c0a:	4820      	ldr	r0, [pc, #128]	; (8000c8c <quectelInit+0xb0>)
 8000c0c:	f7ff fdd0 	bl	80007b0 <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000c10:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000c14:	2100      	movs	r1, #0
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <quectelInit+0xac>)
 8000c18:	f003 fcf2 	bl	8004600 <memset>

	 MQTTRecMod(data);
 8000c1c:	481a      	ldr	r0, [pc, #104]	; (8000c88 <quectelInit+0xac>)
 8000c1e:	f000 fb87 	bl	8001330 <MQTTRecMod>
	  HD44780_PrintStr("#");
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <quectelInit+0xb0>)
 8000c24:	f7ff fdc4 	bl	80007b0 <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000c28:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4816      	ldr	r0, [pc, #88]	; (8000c88 <quectelInit+0xac>)
 8000c30:	f003 fce6 	bl	8004600 <memset>

	 MQTTOpenPort(data);
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <quectelInit+0xac>)
 8000c36:	f000 fbc7 	bl	80013c8 <MQTTOpenPort>
	  HD44780_PrintStr("##");
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <quectelInit+0xb4>)
 8000c3c:	f7ff fdb8 	bl	80007b0 <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000c40:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000c44:	2100      	movs	r1, #0
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <quectelInit+0xac>)
 8000c48:	f003 fcda 	bl	8004600 <memset>

	 MQTTConnect(data);
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <quectelInit+0xac>)
 8000c4e:	f000 fc07 	bl	8001460 <MQTTConnect>
	  HD44780_PrintStr("##");
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <quectelInit+0xb4>)
 8000c54:	f7ff fdac 	bl	80007b0 <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000c58:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <quectelInit+0xac>)
 8000c60:	f003 fcce 	bl	8004600 <memset>

	 MQTTSubToTopic(data);
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <quectelInit+0xac>)
 8000c66:	f000 fc47 	bl	80014f8 <MQTTSubToTopic>

	  //memset(buffer, 0, sizeof(buffer));

	  //MQTTPubToTopic(buffer, MQTT_EXMP_DATA);
	  HD44780_PrintStr("#");
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <quectelInit+0xb0>)
 8000c6c:	f7ff fda0 	bl	80007b0 <HD44780_PrintStr>
	  memset(data, 0, sizeof(data));
 8000c70:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000c74:	2100      	movs	r1, #0
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <quectelInit+0xac>)
 8000c78:	f003 fcc2 	bl	8004600 <memset>

      HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c80:	f000 fe4e 	bl	8001920 <HAL_Delay>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200001ac 	.word	0x200001ac
 8000c8c:	08005110 	.word	0x08005110
 8000c90:	08005114 	.word	0x08005114

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9a:	b672      	cpsid	i
}
 8000c9c:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x8000000;
 8000c9e:	4bac      	ldr	r3, [pc, #688]	; (8000f50 <main+0x2bc>)
 8000ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ca6:	b662      	cpsie	i
}
 8000ca8:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f000 fdb9 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */
 // uint32_t *ptr = data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 f975 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb2:	f000 fa11 	bl	80010d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cb6:	f000 f9e5 	bl	8001084 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000cba:	f000 f9b5 	bl	8001028 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f7ff fc5e 	bl	8000580 <HD44780_Init>
  printItvirteba(0, 3);
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fab0 	bl	800022c <printItvirteba>
  HD44780_SetCursor(0, 1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fcf0 	bl	80006b4 <HD44780_SetCursor>
  for(int i = 0;i<2; i++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e004      	b.n	8000ce4 <main+0x50>
	  quectelInit();
 8000cda:	f7ff ff7f 	bl	8000bdc <quectelInit>
  for(int i = 0;i<2; i++){
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	ddf7      	ble.n	8000cda <main+0x46>
  }

  uint32_t version = *(__IO uint32_t *)versionAdress; // for version check
 8000cea:	4b9a      	ldr	r3, [pc, #616]	; (8000f54 <main+0x2c0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]
//  HAL_FLASH_Unlock();
//  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,0x0800BFF0, 1);
//  HAL_FLASH_Lock();


  if(version == 0xFFFFFFFF || version == 0){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf6:	d002      	beq.n	8000cfe <main+0x6a>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10f      	bne.n	8000d1e <main+0x8a>
	  	eraseFlashRange(versionAdress, versionAdress + 4);
 8000cfe:	4996      	ldr	r1, [pc, #600]	; (8000f58 <main+0x2c4>)
 8000d00:	4894      	ldr	r0, [pc, #592]	; (8000f54 <main+0x2c0>)
 8000d02:	f7ff fa5e 	bl	80001c2 <eraseFlashRange>
		HAL_FLASH_Unlock();
 8000d06:	f001 f879 	bl	8001dfc <HAL_FLASH_Unlock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,versionAdress, 1);
 8000d0a:	f04f 0201 	mov.w	r2, #1
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	4990      	ldr	r1, [pc, #576]	; (8000f54 <main+0x2c0>)
 8000d14:	2002      	movs	r0, #2
 8000d16:	f001 f801 	bl	8001d1c <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000d1a:	f001 f895 	bl	8001e48 <HAL_FLASH_Lock>
  }
  version = *(__IO uint32_t *)versionAdress;
 8000d1e:	4b8d      	ldr	r3, [pc, #564]	; (8000f54 <main+0x2c0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	60fb      	str	r3, [r7, #12]
  //sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"164522982240839\",\"firmwareVersion\":1}}");
  sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\""STR(currentTerminal)"\",\"firmwareVersion\":%ld}}", version);
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	498d      	ldr	r1, [pc, #564]	; (8000f5c <main+0x2c8>)
 8000d28:	488d      	ldr	r0, [pc, #564]	; (8000f60 <main+0x2cc>)
 8000d2a:	f003 fc71 	bl	8004610 <siprintf>

  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 8000d2e:	488c      	ldr	r0, [pc, #560]	; (8000f60 <main+0x2cc>)
 8000d30:	f7ff fa0c 	bl	800014c <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fbfa 	bl	8001530 <MQTTPubToTopic>

  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 8000d3c:	4888      	ldr	r0, [pc, #544]	; (8000f60 <main+0x2cc>)
 8000d3e:	f7ff fa05 	bl	800014c <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	2332      	movs	r3, #50	; 0x32
 8000d48:	4985      	ldr	r1, [pc, #532]	; (8000f60 <main+0x2cc>)
 8000d4a:	4886      	ldr	r0, [pc, #536]	; (8000f64 <main+0x2d0>)
 8000d4c:	f002 fd3a 	bl	80037c4 <HAL_UART_Transmit>

  uint8_t checkCon = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	74fb      	strb	r3, [r7, #19]
  uint8_t printDownCount = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	74bb      	strb	r3, [r7, #18]
  uint8_t printDownCountAcum = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	747b      	strb	r3, [r7, #17]

  HAL_UART_Receive_IT(&huart1, &c, 1);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4982      	ldr	r1, [pc, #520]	; (8000f68 <main+0x2d4>)
 8000d60:	4880      	ldr	r0, [pc, #512]	; (8000f64 <main+0x2d0>)
 8000d62:	f002 fe79 	bl	8003a58 <HAL_UART_Receive_IT>
  int T = HAL_GetTick();
 8000d66:	f000 fdd1 	bl	800190c <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 8000d6e:	4b7f      	ldr	r3, [pc, #508]	; (8000f6c <main+0x2d8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	f040 80ac 	bne.w	8000ed0 <main+0x23c>
		  uint8_t flesh = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	743b      	strb	r3, [r7, #16]
		  checkCon = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	74fb      	strb	r3, [r7, #19]
		  HAL_UART_Receive(&huart1, data, bytesToRead, 200);
 8000d80:	23c8      	movs	r3, #200	; 0xc8
 8000d82:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000d86:	497a      	ldr	r1, [pc, #488]	; (8000f70 <main+0x2dc>)
 8000d88:	4876      	ldr	r0, [pc, #472]	; (8000f64 <main+0x2d0>)
 8000d8a:	f002 fd9e 	bl	80038ca <HAL_UART_Receive>
		  if(data[0] == 'E' && data[1] == 'N' && data[2] == 'D'){ // if the data == END
 8000d8e:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <main+0x2dc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b45      	cmp	r3, #69	; 0x45
 8000d94:	d127      	bne.n	8000de6 <main+0x152>
 8000d96:	4b76      	ldr	r3, [pc, #472]	; (8000f70 <main+0x2dc>)
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	2b4e      	cmp	r3, #78	; 0x4e
 8000d9c:	d123      	bne.n	8000de6 <main+0x152>
 8000d9e:	4b74      	ldr	r3, [pc, #464]	; (8000f70 <main+0x2dc>)
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	2b44      	cmp	r3, #68	; 0x44
 8000da4:	d11f      	bne.n	8000de6 <main+0x152>
			  memcpy(updateChars, data + 4, 8);
 8000da6:	4a73      	ldr	r2, [pc, #460]	; (8000f74 <main+0x2e0>)
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <main+0x2e4>)
 8000daa:	6810      	ldr	r0, [r2, #0]
 8000dac:	6851      	ldr	r1, [r2, #4]
 8000dae:	c303      	stmia	r3!, {r0, r1}
			  int x = atoi((char*)updateChars);
 8000db0:	4871      	ldr	r0, [pc, #452]	; (8000f78 <main+0x2e4>)
 8000db2:	f003 fbf7 	bl	80045a4 <atoi>
 8000db6:	6078      	str	r0, [r7, #4]
			  eraseFlashRange(versionAdress, versionAdress + 4);
 8000db8:	4967      	ldr	r1, [pc, #412]	; (8000f58 <main+0x2c4>)
 8000dba:	4866      	ldr	r0, [pc, #408]	; (8000f54 <main+0x2c0>)
 8000dbc:	f7ff fa01 	bl	80001c2 <eraseFlashRange>
			  HAL_FLASH_Unlock();
 8000dc0:	f001 f81c 	bl	8001dfc <HAL_FLASH_Unlock>
			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,versionAdress, x);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	17da      	asrs	r2, r3, #31
 8000dc8:	461c      	mov	r4, r3
 8000dca:	4615      	mov	r5, r2
 8000dcc:	4622      	mov	r2, r4
 8000dce:	462b      	mov	r3, r5
 8000dd0:	4960      	ldr	r1, [pc, #384]	; (8000f54 <main+0x2c0>)
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 ffa2 	bl	8001d1c <HAL_FLASH_Program>
			  HAL_FLASH_Lock();
 8000dd8:	f001 f836 	bl	8001e48 <HAL_FLASH_Lock>
			  flesh = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	743b      	strb	r3, [r7, #16]
			  jumpToAddress(address);
 8000de0:	4866      	ldr	r0, [pc, #408]	; (8000f7c <main+0x2e8>)
 8000de2:	f7ff feb5 	bl	8000b50 <jumpToAddress>
		  }
		  if(data[0] == '2' && data[1] == '0' && data[2] == '0' && data[3] == 'R'){ // if the data == END
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <main+0x2dc>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b32      	cmp	r3, #50	; 0x32
 8000dec:	d10e      	bne.n	8000e0c <main+0x178>
 8000dee:	4b60      	ldr	r3, [pc, #384]	; (8000f70 <main+0x2dc>)
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	2b30      	cmp	r3, #48	; 0x30
 8000df4:	d10a      	bne.n	8000e0c <main+0x178>
 8000df6:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <main+0x2dc>)
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	2b30      	cmp	r3, #48	; 0x30
 8000dfc:	d106      	bne.n	8000e0c <main+0x178>
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	; (8000f70 <main+0x2dc>)
 8000e00:	78db      	ldrb	r3, [r3, #3]
 8000e02:	2b52      	cmp	r3, #82	; 0x52
 8000e04:	d102      	bne.n	8000e0c <main+0x178>
		  			  jumpToAddress(address);
 8000e06:	485d      	ldr	r0, [pc, #372]	; (8000f7c <main+0x2e8>)
 8000e08:	f7ff fea2 	bl	8000b50 <jumpToAddress>
		  }

		  if(data[0] == 'E' && data[1] == 'R' && data[2] == 'A' && data[3] == 'S' && data[4] == 'E'){ // if the data == END
 8000e0c:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <main+0x2dc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b45      	cmp	r3, #69	; 0x45
 8000e12:	d126      	bne.n	8000e62 <main+0x1ce>
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <main+0x2dc>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	2b52      	cmp	r3, #82	; 0x52
 8000e1a:	d122      	bne.n	8000e62 <main+0x1ce>
 8000e1c:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <main+0x2dc>)
 8000e1e:	789b      	ldrb	r3, [r3, #2]
 8000e20:	2b41      	cmp	r3, #65	; 0x41
 8000e22:	d11e      	bne.n	8000e62 <main+0x1ce>
 8000e24:	4b52      	ldr	r3, [pc, #328]	; (8000f70 <main+0x2dc>)
 8000e26:	78db      	ldrb	r3, [r3, #3]
 8000e28:	2b53      	cmp	r3, #83	; 0x53
 8000e2a:	d11a      	bne.n	8000e62 <main+0x1ce>
 8000e2c:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <main+0x2dc>)
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	2b45      	cmp	r3, #69	; 0x45
 8000e32:	d116      	bne.n	8000e62 <main+0x1ce>
			  printAxldeba(0, 4);
 8000e34:	2104      	movs	r1, #4
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fae4 	bl	8000404 <printAxldeba>
			  HD44780_SetCursor(0, 1);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fc38 	bl	80006b4 <HD44780_SetCursor>
			  memcpy(updateChars, data + 6, 8);
 8000e44:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <main+0x2ec>)
 8000e46:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <main+0x2e4>)
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	6851      	ldr	r1, [r2, #4]
 8000e4c:	c303      	stmia	r3!, {r0, r1}
			  uint32_t endNewProg = convertStringToHex(updateChars);
 8000e4e:	484a      	ldr	r0, [pc, #296]	; (8000f78 <main+0x2e4>)
 8000e50:	f7ff fdbe 	bl	80009d0 <convertStringToHex>
 8000e54:	6038      	str	r0, [r7, #0]
			  eraseFlashRange(address, endNewProg);
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4848      	ldr	r0, [pc, #288]	; (8000f7c <main+0x2e8>)
 8000e5a:	f7ff f9b2 	bl	80001c2 <eraseFlashRange>
			  flesh = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	743b      	strb	r3, [r7, #16]
		  }
		  if(flesh == 0){
 8000e62:	7c3b      	ldrb	r3, [r7, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10f      	bne.n	8000e88 <main+0x1f4>
			  fleshArray(data);
 8000e68:	4841      	ldr	r0, [pc, #260]	; (8000f70 <main+0x2dc>)
 8000e6a:	f7ff fe0d 	bl	8000a88 <fleshArray>
			  printDownCount++;
 8000e6e:	7cbb      	ldrb	r3, [r7, #18]
 8000e70:	3301      	adds	r3, #1
 8000e72:	74bb      	strb	r3, [r7, #18]

			  if(printDownCount > printDownCountAcum + 3){
 8000e74:	7cba      	ldrb	r2, [r7, #18]
 8000e76:	7c7b      	ldrb	r3, [r7, #17]
 8000e78:	3303      	adds	r3, #3
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dd04      	ble.n	8000e88 <main+0x1f4>
				   HD44780_PrintStr("#");
 8000e7e:	4841      	ldr	r0, [pc, #260]	; (8000f84 <main+0x2f0>)
 8000e80:	f7ff fc96 	bl	80007b0 <HD44780_PrintStr>
				   printDownCountAcum = printDownCount;
 8000e84:	7cbb      	ldrb	r3, [r7, #18]
 8000e86:	747b      	strb	r3, [r7, #17]
			  }

		  }

		  MQTTPubToTopic(strlen((char*)MQTT_GOT_DATA));
 8000e88:	483f      	ldr	r0, [pc, #252]	; (8000f88 <main+0x2f4>)
 8000e8a:	f7ff f95f 	bl	800014c <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fb4d 	bl	8001530 <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_GOT_DATA, strlen((char*)MQTT_GOT_DATA), 100);
 8000e96:	483c      	ldr	r0, [pc, #240]	; (8000f88 <main+0x2f4>)
 8000e98:	f7ff f958 	bl	800014c <strlen>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	4939      	ldr	r1, [pc, #228]	; (8000f88 <main+0x2f4>)
 8000ea4:	482f      	ldr	r0, [pc, #188]	; (8000f64 <main+0x2d0>)
 8000ea6:	f002 fc8d 	bl	80037c4 <HAL_UART_Transmit>
		  //if(flesh == 1)HAL_NVIC_SystemReset();
		  memset(data, 0, sizeof(data));
 8000eaa:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	482f      	ldr	r0, [pc, #188]	; (8000f70 <main+0x2dc>)
 8000eb2:	f003 fba5 	bl	8004600 <memset>
		  HAL_UART_Receive_IT(&huart1, &c, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	492b      	ldr	r1, [pc, #172]	; (8000f68 <main+0x2d4>)
 8000eba:	482a      	ldr	r0, [pc, #168]	; (8000f64 <main+0x2d0>)
 8000ebc:	f002 fdcc 	bl	8003a58 <HAL_UART_Receive_IT>
		  HAL_UART_Receive_IT(&huart1, &c, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4929      	ldr	r1, [pc, #164]	; (8000f68 <main+0x2d4>)
 8000ec4:	4827      	ldr	r0, [pc, #156]	; (8000f64 <main+0x2d0>)
 8000ec6:	f002 fdc7 	bl	8003a58 <HAL_UART_Receive_IT>


		  //HAL_UART_Transmit(&huart1, data, bytesToRead + 1, 1000);
		  flag = 0;
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <main+0x2d8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]

	  }
	  state = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4);
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	482e      	ldr	r0, [pc, #184]	; (8000f8c <main+0x2f8>)
 8000ed4:	f001 fab0 	bl	8002438 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <main+0x2fc>)
 8000ede:	601a      	str	r2, [r3, #0]
	  if(state == 0){
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <main+0x2fc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d106      	bne.n	8000ef6 <main+0x262>
		  eraseFlashRange(0x0800C000, 0x0800D2D0);
 8000ee8:	492a      	ldr	r1, [pc, #168]	; (8000f94 <main+0x300>)
 8000eea:	4824      	ldr	r0, [pc, #144]	; (8000f7c <main+0x2e8>)
 8000eec:	f7ff f969 	bl	80001c2 <eraseFlashRange>
		  led(10);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f7ff fe4b 	bl	8000b8c <led>
	  }
	  state = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5);
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	4824      	ldr	r0, [pc, #144]	; (8000f8c <main+0x2f8>)
 8000efa:	f001 fa9d 	bl	8002438 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <main+0x2fc>)
 8000f04:	601a      	str	r2, [r3, #0]
	  if(state == 0){
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <main+0x2fc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d105      	bne.n	8000f1a <main+0x286>
		  jumpToAddress(address);
 8000f0e:	481b      	ldr	r0, [pc, #108]	; (8000f7c <main+0x2e8>)
 8000f10:	f7ff fe1e 	bl	8000b50 <jumpToAddress>
		  led(10);
 8000f14:	200a      	movs	r0, #10
 8000f16:	f7ff fe39 	bl	8000b8c <led>
	  }

	  if(checkCon == 0 && HAL_GetTick() - T >= 10000)HAL_NVIC_SystemReset();
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10a      	bne.n	8000f36 <main+0x2a2>
 8000f20:	f000 fcf4 	bl	800190c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d901      	bls.n	8000f36 <main+0x2a2>
 8000f32:	f000 fe30 	bl	8001b96 <HAL_NVIC_SystemReset>
	  if(HAL_GetTick() - T >= 2*(60000))HAL_NVIC_SystemReset();
 8000f36:	f000 fce9 	bl	800190c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <main+0x304>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f67f af13 	bls.w	8000d6e <main+0xda>
 8000f48:	f000 fe25 	bl	8001b96 <HAL_NVIC_SystemReset>
	  if(flag == 1){
 8000f4c:	e70f      	b.n	8000d6e <main+0xda>
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	0800bff0 	.word	0x0800bff0
 8000f58:	0800bff4 	.word	0x0800bff4
 8000f5c:	08005118 	.word	0x08005118
 8000f60:	20000578 	.word	0x20000578
 8000f64:	20000160 	.word	0x20000160
 8000f68:	200005dc 	.word	0x200005dc
 8000f6c:	200001a8 	.word	0x200001a8
 8000f70:	200001ac 	.word	0x200001ac
 8000f74:	200001b0 	.word	0x200001b0
 8000f78:	20000570 	.word	0x20000570
 8000f7c:	0800c000 	.word	0x0800c000
 8000f80:	200001b2 	.word	0x200001b2
 8000f84:	08005110 	.word	0x08005110
 8000f88:	20000014 	.word	0x20000014
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	2000056c 	.word	0x2000056c
 8000f94:	0800d2d0 	.word	0x0800d2d0
 8000f98:	0001d4bf 	.word	0x0001d4bf

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	2228      	movs	r2, #40	; 0x28
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fb28 	bl	8004600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 ff8d 	bl	8002f04 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ff0:	f000 f8d8 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f9fa 	bl	8003408 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800101a:	f000 f8c3 	bl	80011a4 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3740      	adds	r7, #64	; 0x40
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_I2C1_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <MX_I2C1_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_I2C1_Init+0x50>)
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_I2C1_Init+0x58>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_I2C1_Init+0x50>)
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_I2C1_Init+0x50>)
 8001066:	f001 fa17 	bl	8002498 <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 f898 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000010c 	.word	0x2000010c
 800107c:	40005400 	.word	0x40005400
 8001080:	000186a0 	.word	0x000186a0

08001084 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_USART1_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010bc:	f002 fb32 	bl	8003724 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 f86d 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000160 	.word	0x20000160
 80010d4:	40013800 	.word	0x40013800

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_GPIO_Init+0xc0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <MX_GPIO_Init+0xc0>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_GPIO_Init+0xc0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xc0>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a23      	ldr	r2, [pc, #140]	; (8001198 <MX_GPIO_Init+0xc0>)
 800110a:	f043 0320 	orr.w	r3, r3, #32
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_GPIO_Init+0xc0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_GPIO_Init+0xc0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <MX_GPIO_Init+0xc0>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_GPIO_Init+0xc0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_GPIO_Init+0xc0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_GPIO_Init+0xc0>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_GPIO_Init+0xc0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	4812      	ldr	r0, [pc, #72]	; (800119c <MX_GPIO_Init+0xc4>)
 8001154:	f001 f987 	bl	8002466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <MX_GPIO_Init+0xc4>)
 8001172:	f000 ffdd 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001176:	2330      	movs	r3, #48	; 0x30
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_GPIO_Init+0xc8>)
 800118a:	f000 ffd1 	bl	8002130 <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40011000 	.word	0x40011000
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>

080011ae <checkCommand>:
	return Error;
}



uint8_t checkCommand(uint8_t* text, uint8_t* word) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
	uint8_t textLen = strlen((char*)text);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7fe ffc7 	bl	800014c <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	737b      	strb	r3, [r7, #13]
	uint8_t wordLen = strlen((char*)word);
 80011c2:	6838      	ldr	r0, [r7, #0]
 80011c4:	f7fe ffc2 	bl	800014c <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	733b      	strb	r3, [r7, #12]
	uint8_t i, j;

    for (i = 0; i <= textLen - wordLen; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e021      	b.n	8001216 <checkCommand+0x68>
        for (j = 0; j < wordLen; j++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	73bb      	strb	r3, [r7, #14]
 80011d6:	e00f      	b.n	80011f8 <checkCommand+0x4a>
            if (text[i+j] != word[j]) {
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	4413      	add	r3, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	440b      	add	r3, r1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d107      	bne.n	8001202 <checkCommand+0x54>
        for (j = 0; j < wordLen; j++) {
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	3301      	adds	r3, #1
 80011f6:	73bb      	strb	r3, [r7, #14]
 80011f8:	7bba      	ldrb	r2, [r7, #14]
 80011fa:	7b3b      	ldrb	r3, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3eb      	bcc.n	80011d8 <checkCommand+0x2a>
 8001200:	e000      	b.n	8001204 <checkCommand+0x56>
                break;
 8001202:	bf00      	nop
            }
        }
        if (j == wordLen) {
 8001204:	7bba      	ldrb	r2, [r7, #14]
 8001206:	7b3b      	ldrb	r3, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d101      	bne.n	8001210 <checkCommand+0x62>
            return 1;  // word found
 800120c:	2301      	movs	r3, #1
 800120e:	e009      	b.n	8001224 <checkCommand+0x76>
    for (i = 0; i <= textLen - wordLen; i++) {
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	7b79      	ldrb	r1, [r7, #13]
 800121a:	7b3b      	ldrb	r3, [r7, #12]
 800121c:	1acb      	subs	r3, r1, r3
 800121e:	429a      	cmp	r2, r3
 8001220:	ddd7      	ble.n	80011d2 <checkCommand+0x24>
        }
    }

    return 0;  // word not found
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <checkQueqtelWithNoEcho>:

void checkQueqtelWithNoEcho (uint8_t *RXBuffer){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 8001238:	f000 fb68 	bl	800190c <HAL_GetTick>
 800123c:	4603      	mov	r3, r0
 800123e:	60bb      	str	r3, [r7, #8]
    sprintf((char*)mainBuffer, AT);
 8001240:	4917      	ldr	r1, [pc, #92]	; (80012a0 <checkQueqtelWithNoEcho+0x74>)
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <checkQueqtelWithNoEcho+0x78>)
 8001244:	f003 f9e4 	bl	8004610 <siprintf>

	while (status == 0) {
 8001248:	e020      	b.n	800128c <checkQueqtelWithNoEcho+0x60>
			HAL_UART_Transmit(&huart1, mainBuffer, 4, 200);
 800124a:	23c8      	movs	r3, #200	; 0xc8
 800124c:	2204      	movs	r2, #4
 800124e:	4915      	ldr	r1, [pc, #84]	; (80012a4 <checkQueqtelWithNoEcho+0x78>)
 8001250:	4815      	ldr	r0, [pc, #84]	; (80012a8 <checkQueqtelWithNoEcho+0x7c>)
 8001252:	f002 fab7 	bl	80037c4 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, RXBuffer, 6, 500);
 8001256:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800125a:	2206      	movs	r2, #6
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4812      	ldr	r0, [pc, #72]	; (80012a8 <checkQueqtelWithNoEcho+0x7c>)
 8001260:	f002 fb33 	bl	80038ca <HAL_UART_Receive>
			status = checkCommand(RXBuffer, (uint8_t*)"OK");
 8001264:	4911      	ldr	r1, [pc, #68]	; (80012ac <checkQueqtelWithNoEcho+0x80>)
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa1 	bl	80011ae <checkCommand>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]
			if(status){
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10e      	bne.n	8001294 <checkQueqtelWithNoEcho+0x68>
				break;
			}
			if(HAL_GetTick() - timeOut >= 10000){
 8001276:	f000 fb49 	bl	800190c <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f242 720f 	movw	r2, #9999	; 0x270f
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <checkQueqtelWithNoEcho+0x60>
				HAL_NVIC_SystemReset();
 8001288:	f000 fc85 	bl	8001b96 <HAL_NVIC_SystemReset>
	while (status == 0) {
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0db      	beq.n	800124a <checkQueqtelWithNoEcho+0x1e>
			}
		}
}
 8001292:	e000      	b.n	8001296 <checkQueqtelWithNoEcho+0x6a>
				break;
 8001294:	bf00      	nop
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08005268 	.word	0x08005268
 80012a4:	200005e0 	.word	0x200005e0
 80012a8:	20000160 	.word	0x20000160
 80012ac:	08005270 	.word	0x08005270

080012b0 <ckeckQuectelSignalWithNoEcho>:

void ckeckQuectelSignalWithNoEcho(uint8_t *RXBuffer){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 80012bc:	f000 fb26 	bl	800190c <HAL_GetTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATCOPS);
 80012c4:	4916      	ldr	r1, [pc, #88]	; (8001320 <ckeckQuectelSignalWithNoEcho+0x70>)
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <ckeckQuectelSignalWithNoEcho+0x74>)
 80012c8:	f003 f9a2 	bl	8004610 <siprintf>
	while (status == 0) {
 80012cc:	e01f      	b.n	800130e <ckeckQuectelSignalWithNoEcho+0x5e>
		HAL_UART_Transmit(&huart1, mainBuffer, 10, 200);
 80012ce:	23c8      	movs	r3, #200	; 0xc8
 80012d0:	220a      	movs	r2, #10
 80012d2:	4914      	ldr	r1, [pc, #80]	; (8001324 <ckeckQuectelSignalWithNoEcho+0x74>)
 80012d4:	4814      	ldr	r0, [pc, #80]	; (8001328 <ckeckQuectelSignalWithNoEcho+0x78>)
 80012d6:	f002 fa75 	bl	80037c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 45, 100);
 80012da:	2364      	movs	r3, #100	; 0x64
 80012dc:	222d      	movs	r2, #45	; 0x2d
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <ckeckQuectelSignalWithNoEcho+0x78>)
 80012e2:	f002 faf2 	bl	80038ca <HAL_UART_Receive>
		status = checkCommand(RXBuffer, (uint8_t*)"MAGT");
 80012e6:	4911      	ldr	r1, [pc, #68]	; (800132c <ckeckQuectelSignalWithNoEcho+0x7c>)
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff60 	bl	80011ae <checkCommand>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]

		if(status){
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10e      	bne.n	8001316 <ckeckQuectelSignalWithNoEcho+0x66>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 80012f8:	f000 fb08 	bl	800190c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f242 720f 	movw	r2, #9999	; 0x270f
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <ckeckQuectelSignalWithNoEcho+0x5e>
			HAL_NVIC_SystemReset();
 800130a:	f000 fc44 	bl	8001b96 <HAL_NVIC_SystemReset>
	while (status == 0) {
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0dc      	beq.n	80012ce <ckeckQuectelSignalWithNoEcho+0x1e>
		}
	}
}
 8001314:	e000      	b.n	8001318 <ckeckQuectelSignalWithNoEcho+0x68>
			break;
 8001316:	bf00      	nop
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08005274 	.word	0x08005274
 8001324:	200005e0 	.word	0x200005e0
 8001328:	20000160 	.word	0x20000160
 800132c:	08005280 	.word	0x08005280

08001330 <MQTTRecMod>:
void MQTTRecMod(uint8_t *RXBuffer){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800133c:	f000 fae6 	bl	800190c <HAL_GetTick>
 8001340:	4603      	mov	r3, r0
 8001342:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATQMTCFG);
 8001344:	491b      	ldr	r1, [pc, #108]	; (80013b4 <MQTTRecMod+0x84>)
 8001346:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MQTTRecMod+0x88>)
 8001348:	f003 f962 	bl	8004610 <siprintf>
	while(status == 0){
 800134c:	e028      	b.n	80013a0 <MQTTRecMod+0x70>
		HAL_UART_Transmit(&huart1, mainBuffer, 29, 100);
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	221d      	movs	r2, #29
 8001352:	4919      	ldr	r1, [pc, #100]	; (80013b8 <MQTTRecMod+0x88>)
 8001354:	4819      	ldr	r0, [pc, #100]	; (80013bc <MQTTRecMod+0x8c>)
 8001356:	f002 fa35 	bl	80037c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 10, 100);
 800135a:	2364      	movs	r3, #100	; 0x64
 800135c:	220a      	movs	r2, #10
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <MQTTRecMod+0x8c>)
 8001362:	f002 fab2 	bl	80038ca <HAL_UART_Receive>
		status = checkCommand(RXBuffer, (uint8_t*)"OK");
 8001366:	4916      	ldr	r1, [pc, #88]	; (80013c0 <MQTTRecMod+0x90>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff20 	bl	80011ae <checkCommand>
 800136e:	4603      	mov	r3, r0
 8001370:	73fb      	strb	r3, [r7, #15]
		if(status == 0){
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <MQTTRecMod+0x54>
			status = checkCommand(RXBuffer, (uint8_t*)"ERROR");
 8001378:	4912      	ldr	r1, [pc, #72]	; (80013c4 <MQTTRecMod+0x94>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff17 	bl	80011ae <checkCommand>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
		}
		if(status){
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10e      	bne.n	80013a8 <MQTTRecMod+0x78>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 800138a:	f000 fabf 	bl	800190c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f242 720f 	movw	r2, #9999	; 0x270f
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <MQTTRecMod+0x70>
			HAL_NVIC_SystemReset();
 800139c:	f000 fbfb 	bl	8001b96 <HAL_NVIC_SystemReset>
	while(status == 0){
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0d3      	beq.n	800134e <MQTTRecMod+0x1e>
		}
	}
}
 80013a6:	e000      	b.n	80013aa <MQTTRecMod+0x7a>
			break;
 80013a8:	bf00      	nop
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	08005288 	.word	0x08005288
 80013b8:	200005e0 	.word	0x200005e0
 80013bc:	20000160 	.word	0x20000160
 80013c0:	08005270 	.word	0x08005270
 80013c4:	080052a8 	.word	0x080052a8

080013c8 <MQTTOpenPort>:

void MQTTOpenPort(uint8_t *RXBuffer){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 80013d4:	f000 fa9a 	bl	800190c <HAL_GetTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATQMTOPEN);
 80013dc:	491b      	ldr	r1, [pc, #108]	; (800144c <MQTTOpenPort+0x84>)
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <MQTTOpenPort+0x88>)
 80013e0:	f003 f916 	bl	8004610 <siprintf>
	while(status == 0){
 80013e4:	e029      	b.n	800143a <MQTTOpenPort+0x72>

		HAL_UART_Transmit(&huart1, mainBuffer, 34, 100);
 80013e6:	2364      	movs	r3, #100	; 0x64
 80013e8:	2222      	movs	r2, #34	; 0x22
 80013ea:	4919      	ldr	r1, [pc, #100]	; (8001450 <MQTTOpenPort+0x88>)
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <MQTTOpenPort+0x8c>)
 80013ee:	f002 f9e9 	bl	80037c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 21, 4000);
 80013f2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80013f6:	2215      	movs	r2, #21
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4816      	ldr	r0, [pc, #88]	; (8001454 <MQTTOpenPort+0x8c>)
 80013fc:	f002 fa65 	bl	80038ca <HAL_UART_Receive>

		status = checkCommand(RXBuffer, (uint8_t*)"+QMTOPEN: 0,0");
 8001400:	4915      	ldr	r1, [pc, #84]	; (8001458 <MQTTOpenPort+0x90>)
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fed3 	bl	80011ae <checkCommand>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
		if(status == 0){
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <MQTTOpenPort+0x56>
			status = checkCommand(RXBuffer, (uint8_t*)"+QMTOPEN: 0,2");
 8001412:	4912      	ldr	r1, [pc, #72]	; (800145c <MQTTOpenPort+0x94>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff feca 	bl	80011ae <checkCommand>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
		}


		if(status){
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10e      	bne.n	8001442 <MQTTOpenPort+0x7a>
			break;
		}

		if(HAL_GetTick() - timeOut >= 10000){
 8001424:	f000 fa72 	bl	800190c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <MQTTOpenPort+0x72>
			HAL_NVIC_SystemReset();
 8001436:	f000 fbae 	bl	8001b96 <HAL_NVIC_SystemReset>
	while(status == 0){
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0d2      	beq.n	80013e6 <MQTTOpenPort+0x1e>
		}

	}
}
 8001440:	e000      	b.n	8001444 <MQTTOpenPort+0x7c>
			break;
 8001442:	bf00      	nop
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	080052b0 	.word	0x080052b0
 8001450:	200005e0 	.word	0x200005e0
 8001454:	20000160 	.word	0x20000160
 8001458:	080052d4 	.word	0x080052d4
 800145c:	080052e4 	.word	0x080052e4

08001460 <MQTTConnect>:

void MQTTConnect(uint8_t *RXBuffer){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
	int timeOut = HAL_GetTick();
 800146c:	f000 fa4e 	bl	800190c <HAL_GetTick>
 8001470:	4603      	mov	r3, r0
 8001472:	60bb      	str	r3, [r7, #8]
	sprintf((char*)mainBuffer, ATQMTCONN);
 8001474:	491b      	ldr	r1, [pc, #108]	; (80014e4 <MQTTConnect+0x84>)
 8001476:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MQTTConnect+0x88>)
 8001478:	f003 f8ca 	bl	8004610 <siprintf>
	while(status == 0){
 800147c:	e029      	b.n	80014d2 <MQTTConnect+0x72>

		HAL_UART_Transmit(&huart1, mainBuffer, 49, 100);
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	2231      	movs	r2, #49	; 0x31
 8001482:	4919      	ldr	r1, [pc, #100]	; (80014e8 <MQTTConnect+0x88>)
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <MQTTConnect+0x8c>)
 8001486:	f002 f99d 	bl	80037c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, RXBuffer, 9, 4000);
 800148a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800148e:	2209      	movs	r2, #9
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <MQTTConnect+0x8c>)
 8001494:	f002 fa19 	bl	80038ca <HAL_UART_Receive>

		status = checkCommand(RXBuffer, (uint8_t*)"+QMT");
 8001498:	4915      	ldr	r1, [pc, #84]	; (80014f0 <MQTTConnect+0x90>)
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe87 	bl	80011ae <checkCommand>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]

		if(status == 0){
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <MQTTConnect+0x56>
			status = checkCommand(RXBuffer, (uint8_t*)"ERROR");
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <MQTTConnect+0x94>)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe7e 	bl	80011ae <checkCommand>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]

		}

		if(status){
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10e      	bne.n	80014da <MQTTConnect+0x7a>
			break;
		}
		if(HAL_GetTick() - timeOut >= 10000){
 80014bc:	f000 fa26 	bl	800190c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <MQTTConnect+0x72>
			HAL_NVIC_SystemReset();
 80014ce:	f000 fb62 	bl	8001b96 <HAL_NVIC_SystemReset>
	while(status == 0){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0d2      	beq.n	800147e <MQTTConnect+0x1e>
		}
	}
}
 80014d8:	e000      	b.n	80014dc <MQTTConnect+0x7c>
			break;
 80014da:	bf00      	nop
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	080052f4 	.word	0x080052f4
 80014e8:	200005e0 	.word	0x200005e0
 80014ec:	20000160 	.word	0x20000160
 80014f0:	08005328 	.word	0x08005328
 80014f4:	080052a8 	.word	0x080052a8

080014f8 <MQTTSubToTopic>:

void MQTTSubToTopic(uint8_t *RXBuffer){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
//	uint8_t status = 0;
//	while(status == 0){
	sprintf((char*)mainBuffer, ATQMTSUB);
 8001500:	4908      	ldr	r1, [pc, #32]	; (8001524 <MQTTSubToTopic+0x2c>)
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <MQTTSubToTopic+0x30>)
 8001504:	f003 f884 	bl	8004610 <siprintf>
		HAL_UART_Transmit(&huart1, mainBuffer, 35, 100);
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2223      	movs	r2, #35	; 0x23
 800150c:	4906      	ldr	r1, [pc, #24]	; (8001528 <MQTTSubToTopic+0x30>)
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MQTTSubToTopic+0x34>)
 8001510:	f002 f958 	bl	80037c4 <HAL_UART_Transmit>
//		HAL_UART_Receive(&huart1, RXBuffer, 25, 2000);
		HAL_Delay(500);
 8001514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001518:	f000 fa02 	bl	8001920 <HAL_Delay>
//		}
//		if(status){
//			break;
//		}
//	}
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	08005330 	.word	0x08005330
 8001528:	200005e0 	.word	0x200005e0
 800152c:	20000160 	.word	0x20000160

08001530 <MQTTPubToTopic>:

void MQTTPubToTopic(int length){
 8001530:	b580      	push	{r7, lr}
 8001532:	b092      	sub	sp, #72	; 0x48
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	uint8_t MQTT_PUB[60];
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\"liftos08765546789\",%d\r\n", (length));
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4909      	ldr	r1, [pc, #36]	; (8001564 <MQTTPubToTopic+0x34>)
 8001540:	4618      	mov	r0, r3
 8001542:	f003 f865 	bl	8004610 <siprintf>


		HAL_UART_Transmit_IT(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0]);
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	223c      	movs	r2, #60	; 0x3c
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MQTTPubToTopic+0x38>)
 8001550:	f002 fa4d 	bl	80039ee <HAL_UART_Transmit_IT>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 8001554:	201e      	movs	r0, #30
 8001556:	f000 f9e3 	bl	8001920 <HAL_Delay>

}
 800155a:	bf00      	nop
 800155c:	3748      	adds	r7, #72	; 0x48
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08005358 	.word	0x08005358
 8001568:	20000160 	.word	0x20000160

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_MspInit+0x5c>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_MspInit+0x5c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_MspInit+0x5c>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_MspInit+0x5c>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_MspInit+0x5c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_MspInit+0x5c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_MspInit+0x60>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_MspInit+0x60>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0x70>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d123      	bne.n	8001638 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_I2C_MspInit+0x74>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a13      	ldr	r2, [pc, #76]	; (8001644 <HAL_I2C_MspInit+0x74>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_I2C_MspInit+0x74>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <HAL_I2C_MspInit+0x78>)
 800161c:	f000 fd88 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_I2C_MspInit+0x74>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_I2C_MspInit+0x74>)
 8001626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162a:	61d3      	str	r3, [r2, #28]
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_I2C_MspInit+0x74>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40005400 	.word	0x40005400
 8001644:	40021000 	.word	0x40021000
 8001648:	40010c00 	.word	0x40010c00

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_UART_MspInit+0x9c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d139      	bne.n	80016e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <HAL_UART_MspInit+0xa0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <HAL_UART_MspInit+0xa0>)
 8001672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_UART_MspInit+0xa0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_UART_MspInit+0xa0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_UART_MspInit+0xa0>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_UART_MspInit+0xa0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <HAL_UART_MspInit+0xa4>)
 80016b2:	f000 fd3d 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <HAL_UART_MspInit+0xa4>)
 80016cc:	f000 fd30 	bl	8002130 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2025      	movs	r0, #37	; 0x25
 80016d6:	f000 fa34 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016da:	2025      	movs	r0, #37	; 0x25
 80016dc:	f000 fa4d 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010800 	.word	0x40010800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80016fe:	f000 fa4a 	bl	8001b96 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x8>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173e:	f000 f8d3 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <USART1_IRQHandler+0x10>)
 800174e:	f002 f9a9 	bl	8003aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000160 	.word	0x20000160

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f002 ff0e 	bl	80045ac <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20005000 	.word	0x20005000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20000660 	.word	0x20000660
 80017c4:	20000698 	.word	0x20000698

080017c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
  }
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 80017d4:	f7ff fff8 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f0:	4c09      	ldr	r4, [pc, #36]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f002 fedb 	bl	80045b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f7ff fa47 	bl	8000c94 <main>
  bx lr
 8001806:	4770      	bx	lr
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001810:	08005510 	.word	0x08005510
  ldr r2, =_sbss
 8001814:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001818:	20000698 	.word	0x20000698

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x28>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x28>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f97b 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f826 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fe96 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_DeInit+0x2c>)
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_DeInit+0x2c>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_DeInit+0x2c>)
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_DeInit+0x2c>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800186c:	f000 f806 	bl	800187c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f979 	bl	8001b9e <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f93d 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000074 	.word	0x20000074
 80018e0:	2000007c 	.word	0x2000007c
 80018e4:	20000078 	.word	0x20000078

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	2000007c 	.word	0x2000007c
 8001908:	20000664 	.word	0x20000664

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000664 	.word	0x20000664

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fff0 	bl	800190c <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffe0 	bl	800190c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000007c 	.word	0x2000007c

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <__NVIC_EnableIRQ+0x34>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac0:	f3bf 8f4f 	dsb	sy
}
 8001ac4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <__NVIC_SystemReset+0x24>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ace:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <__NVIC_SystemReset+0x24>)
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_SystemReset+0x28>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad6:	f3bf 8f4f 	dsb	sy
}
 8001ada:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <__NVIC_SystemReset+0x20>
 8001ae0:	e000ed00 	.word	0xe000ed00
 8001ae4:	05fa0004 	.word	0x05fa0004

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff7a 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff17 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff2c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff7a 	bl	8001a58 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff49 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff1f 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001b9a:	f7ff ff8f 	bl	8001abc <__NVIC_SystemReset>

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff9e 	bl	8001ae8 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d008      	beq.n	8001be0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e020      	b.n	8001c22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d005      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e051      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 020e 	bic.w	r2, r2, #14
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_DMA_Abort_IT+0xd4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d029      	beq.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <HAL_DMA_Abort_IT+0xd8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_Abort_IT+0x9e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_DMA_Abort_IT+0xdc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x98>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_DMA_Abort_IT+0xe0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d012      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x92>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_DMA_Abort_IT+0xe4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x8c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_DMA_Abort_IT+0xe8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d102      	bne.n	8001cb2 <HAL_DMA_Abort_IT+0x86>
 8001cac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cb0:	e00e      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb6:	e00b      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbc:	e008      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	e005      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc8:	e002      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cca:	2310      	movs	r3, #16
 8001ccc:	e000      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_DMA_Abort_IT+0xec>)
 8001cd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
    } 
  }
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40020008 	.word	0x40020008
 8001d04:	4002001c 	.word	0x4002001c
 8001d08:	40020030 	.word	0x40020030
 8001d0c:	40020044 	.word	0x40020044
 8001d10:	40020058 	.word	0x40020058
 8001d14:	4002006c 	.word	0x4002006c
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_FLASH_Program+0xd8>)
 8001d38:	7e1b      	ldrb	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_FLASH_Program+0x26>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e054      	b.n	8001dec <HAL_FLASH_Program+0xd0>
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_FLASH_Program+0xd8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d4c:	f000 f8b2 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8001d50:	4603      	mov	r3, r0
 8001d52:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d144      	bne.n	8001de4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001d60:	2301      	movs	r3, #1
 8001d62:	757b      	strb	r3, [r7, #21]
 8001d64:	e007      	b.n	8001d76 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d102      	bne.n	8001d72 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	757b      	strb	r3, [r7, #21]
 8001d70:	e001      	b.n	8001d76 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001d72:	2304      	movs	r3, #4
 8001d74:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	75bb      	strb	r3, [r7, #22]
 8001d7a:	e02d      	b.n	8001dd8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001d7c:	7dbb      	ldrb	r3, [r7, #22]
 8001d7e:	005a      	lsls	r2, r3, #1
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	eb02 0c03 	add.w	ip, r2, r3
 8001d86:	7dbb      	ldrb	r3, [r7, #22]
 8001d88:	0119      	lsls	r1, r3, #4
 8001d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d8e:	f1c1 0620 	rsb	r6, r1, #32
 8001d92:	f1a1 0020 	sub.w	r0, r1, #32
 8001d96:	fa22 f401 	lsr.w	r4, r2, r1
 8001d9a:	fa03 f606 	lsl.w	r6, r3, r6
 8001d9e:	4334      	orrs	r4, r6
 8001da0:	fa23 f000 	lsr.w	r0, r3, r0
 8001da4:	4304      	orrs	r4, r0
 8001da6:	fa23 f501 	lsr.w	r5, r3, r1
 8001daa:	b2a3      	uxth	r3, r4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4660      	mov	r0, ip
 8001db0:	f000 f864 	bl	8001e7c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f000 f87c 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_FLASH_Program+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_FLASH_Program+0xdc>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001dd2:	7dbb      	ldrb	r3, [r7, #22]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	75bb      	strb	r3, [r7, #22]
 8001dd8:	7dba      	ldrb	r2, [r7, #22]
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d3cd      	bcc.n	8001d7c <HAL_FLASH_Program+0x60>
 8001de0:	e000      	b.n	8001de4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001de2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_FLASH_Program+0xd8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	761a      	strb	r2, [r3, #24]

  return status;
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df4:	20000668 	.word	0x20000668
 8001df8:	40022000 	.word	0x40022000

08001dfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_FLASH_Unlock+0x40>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_FLASH_Unlock+0x40>)
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_FLASH_Unlock+0x44>)
 8001e16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_FLASH_Unlock+0x40>)
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_FLASH_Unlock+0x48>)
 8001e1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_FLASH_Unlock+0x40>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	45670123 	.word	0x45670123
 8001e44:	cdef89ab 	.word	0xcdef89ab

08001e48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_FLASH_Lock+0x1c>)
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_FLASH_Lock+0x1c>)
 8001e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e56:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_FLASH_GetError+0x10>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000668 	.word	0x20000668

08001e7c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <FLASH_Program_HalfWord+0x30>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <FLASH_Program_HalfWord+0x34>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <FLASH_Program_HalfWord+0x34>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	887a      	ldrh	r2, [r7, #2]
 8001e9e:	801a      	strh	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000668 	.word	0x20000668
 8001eb0:	40022000 	.word	0x40022000

08001eb4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff fd26 	bl	800190c <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ec2:	e010      	b.n	8001ee6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d00c      	beq.n	8001ee6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <FLASH_WaitForLastOperation+0x2e>
 8001ed2:	f7ff fd1b 	bl	800190c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d201      	bcs.n	8001ee6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e025      	b.n	8001f32 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <FLASH_WaitForLastOperation+0x88>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1e8      	bne.n	8001ec4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <FLASH_WaitForLastOperation+0x88>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <FLASH_WaitForLastOperation+0x88>)
 8001f00:	2220      	movs	r2, #32
 8001f02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <FLASH_WaitForLastOperation+0x88>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <FLASH_WaitForLastOperation+0x88>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <FLASH_WaitForLastOperation+0x88>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f28:	f000 f80a 	bl	8001f40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000

08001f40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <FLASH_SetErrorCode+0x9c>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <FLASH_SetErrorCode+0x9c>)
 8001f60:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f043 0310 	orr.w	r3, r3, #16
 8001f68:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <FLASH_SetErrorCode+0x9c>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <FLASH_SetErrorCode+0x9c>)
 8001f80:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <FLASH_SetErrorCode+0x9c>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <FLASH_SetErrorCode+0x9c>)
 8001fa0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f240 1201 	movw	r2, #257	; 0x101
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d106      	bne.n	8001fc6 <FLASH_SetErrorCode+0x86>
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	61d3      	str	r3, [r2, #28]
}  
 8001fc4:	e002      	b.n	8001fcc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <FLASH_SetErrorCode+0x98>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60d3      	str	r3, [r2, #12]
}  
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	20000668 	.word	0x20000668

08001fe0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_FLASHEx_Erase+0xd0>)
 8001ff4:	7e1b      	ldrb	r3, [r3, #24]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_FLASHEx_Erase+0x1e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e053      	b.n	80020a6 <HAL_FLASHEx_Erase+0xc6>
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <HAL_FLASHEx_Erase+0xd0>)
 8002000:	2201      	movs	r2, #1
 8002002:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d116      	bne.n	800203a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800200c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002010:	f7ff ff50 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d141      	bne.n	800209e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800201a:	2001      	movs	r0, #1
 800201c:	f000 f84c 	bl	80020b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002024:	f7ff ff46 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_FLASHEx_Erase+0xd4>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <HAL_FLASHEx_Erase+0xd4>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6113      	str	r3, [r2, #16]
 8002038:	e031      	b.n	800209e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800203a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800203e:	f7ff ff39 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d12a      	bne.n	800209e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	e019      	b.n	800208c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002058:	68b8      	ldr	r0, [r7, #8]
 800205a:	f000 f849 	bl	80020f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800205e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002062:	f7ff ff27 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_FLASHEx_Erase+0xd4>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_FLASHEx_Erase+0xd4>)
 8002070:	f023 0302 	bic.w	r3, r3, #2
 8002074:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	601a      	str	r2, [r3, #0]
            break;
 8002082:	e00c      	b.n	800209e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	029a      	lsls	r2, r3, #10
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	429a      	cmp	r2, r3
 800209c:	d3dc      	bcc.n	8002058 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_FLASHEx_Erase+0xd0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	761a      	strb	r2, [r3, #24]

  return status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000668 	.word	0x20000668
 80020b4:	40022000 	.word	0x40022000

080020b8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <FLASH_MassErase+0x30>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <FLASH_MassErase+0x34>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <FLASH_MassErase+0x34>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <FLASH_MassErase+0x34>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <FLASH_MassErase+0x34>)
 80020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020dc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000668 	.word	0x20000668
 80020ec:	40022000 	.word	0x40022000

080020f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <FLASH_PageErase+0x38>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <FLASH_PageErase+0x3c>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <FLASH_PageErase+0x3c>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <FLASH_PageErase+0x3c>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <FLASH_PageErase+0x3c>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a05      	ldr	r2, [pc, #20]	; (800212c <FLASH_PageErase+0x3c>)
 8002116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000668 	.word	0x20000668
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e169      	b.n	8002418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002144:	2201      	movs	r2, #1
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	429a      	cmp	r2, r3
 800215e:	f040 8158 	bne.w	8002412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a9a      	ldr	r2, [pc, #616]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d05e      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 800216c:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d875      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 8002172:	4a98      	ldr	r2, [pc, #608]	; (80023d4 <HAL_GPIO_Init+0x2a4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d058      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002178:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_GPIO_Init+0x2a4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d86f      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 800217e:	4a96      	ldr	r2, [pc, #600]	; (80023d8 <HAL_GPIO_Init+0x2a8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d052      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002184:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_GPIO_Init+0x2a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d869      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 800218a:	4a94      	ldr	r2, [pc, #592]	; (80023dc <HAL_GPIO_Init+0x2ac>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d04c      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002190:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_GPIO_Init+0x2ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d863      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 8002196:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d046      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 800219c:	4a90      	ldr	r2, [pc, #576]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d85d      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d82a      	bhi.n	80021fc <HAL_GPIO_Init+0xcc>
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d859      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <HAL_GPIO_Init+0x80>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	0800222b 	.word	0x0800222b
 80021b4:	08002205 	.word	0x08002205
 80021b8:	08002217 	.word	0x08002217
 80021bc:	08002259 	.word	0x08002259
 80021c0:	0800225f 	.word	0x0800225f
 80021c4:	0800225f 	.word	0x0800225f
 80021c8:	0800225f 	.word	0x0800225f
 80021cc:	0800225f 	.word	0x0800225f
 80021d0:	0800225f 	.word	0x0800225f
 80021d4:	0800225f 	.word	0x0800225f
 80021d8:	0800225f 	.word	0x0800225f
 80021dc:	0800225f 	.word	0x0800225f
 80021e0:	0800225f 	.word	0x0800225f
 80021e4:	0800225f 	.word	0x0800225f
 80021e8:	0800225f 	.word	0x0800225f
 80021ec:	0800225f 	.word	0x0800225f
 80021f0:	0800225f 	.word	0x0800225f
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	08002221 	.word	0x08002221
 80021fc:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <HAL_GPIO_Init+0x2b4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002202:	e02c      	b.n	800225e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	623b      	str	r3, [r7, #32]
          break;
 800220a:	e029      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	3304      	adds	r3, #4
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e024      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	3308      	adds	r3, #8
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e01f      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	330c      	adds	r3, #12
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e01a      	b.n	8002260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002232:	2304      	movs	r3, #4
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e013      	b.n	8002260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002240:	2308      	movs	r3, #8
 8002242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	611a      	str	r2, [r3, #16]
          break;
 800224a:	e009      	b.n	8002260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800224c:	2308      	movs	r3, #8
 800224e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	615a      	str	r2, [r3, #20]
          break;
 8002256:	e003      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
          break;
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x130>
          break;
 800225e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	d801      	bhi.n	800226a <HAL_GPIO_Init+0x13a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e001      	b.n	800226e <HAL_GPIO_Init+0x13e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d802      	bhi.n	800227c <HAL_GPIO_Init+0x14c>
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	e002      	b.n	8002282 <HAL_GPIO_Init+0x152>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	3b08      	subs	r3, #8
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	210f      	movs	r1, #15
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80b1 	beq.w	8002412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c8:	4a48      	ldr	r2, [pc, #288]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_GPIO_Init+0x1ec>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_GPIO_Init+0x2c4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1e8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3e      	ldr	r2, [pc, #248]	; (80023f8 <HAL_GPIO_Init+0x2c8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1e4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1e0>
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002310:	2304      	movs	r3, #4
 8002312:	e004      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002314:	2302      	movs	r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 800231c:	2300      	movs	r3, #0
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	f002 0203 	and.w	r2, r2, #3
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	4093      	lsls	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232e:	492f      	ldr	r1, [pc, #188]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	492c      	ldr	r1, [pc, #176]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	4928      	ldr	r1, [pc, #160]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	491e      	ldr	r1, [pc, #120]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4918      	ldr	r1, [pc, #96]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4914      	ldr	r1, [pc, #80]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d021      	beq.n	8002404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e021      	b.n	8002412 <HAL_GPIO_Init+0x2e2>
 80023ce:	bf00      	nop
 80023d0:	10320000 	.word	0x10320000
 80023d4:	10310000 	.word	0x10310000
 80023d8:	10220000 	.word	0x10220000
 80023dc:	10210000 	.word	0x10210000
 80023e0:	10120000 	.word	0x10120000
 80023e4:	10110000 	.word	0x10110000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40010800 	.word	0x40010800
 80023f4:	40010c00 	.word	0x40010c00
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40011400 	.word	0x40011400
 8002400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_GPIO_Init+0x304>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	43db      	mvns	r3, r3
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <HAL_GPIO_Init+0x304>)
 800240e:	4013      	ands	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	3301      	adds	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	f47f ae8e 	bne.w	8002144 <HAL_GPIO_Init+0x14>
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	372c      	adds	r7, #44	; 0x2c
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002476:	787b      	ldrb	r3, [r7, #1]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002482:	e003      	b.n	800248c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	041a      	lsls	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
	...

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e12b      	b.n	8002702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff f886 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f001 f8cc 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a81      	ldr	r2, [pc, #516]	; (800270c <HAL_I2C_Init+0x274>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x84>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a80      	ldr	r2, [pc, #512]	; (8002710 <HAL_I2C_Init+0x278>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x92>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <HAL_I2C_Init+0x27c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e7      	b.n	8002702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a78      	ldr	r2, [pc, #480]	; (8002718 <HAL_I2C_Init+0x280>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a6a      	ldr	r2, [pc, #424]	; (800270c <HAL_I2C_Init+0x274>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xd4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xe8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a69      	ldr	r2, [pc, #420]	; (800271c <HAL_I2C_Init+0x284>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	495c      	ldr	r1, [pc, #368]	; (800270c <HAL_I2C_Init+0x274>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d819      	bhi.n	80025d4 <HAL_I2C_Init+0x13c>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025b4:	400b      	ands	r3, r1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_I2C_Init+0x138>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e59      	subs	r1, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	e051      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e04f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_I2C_Init+0x168>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e012      	b.n	8002626 <HAL_I2C_Init+0x18e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Init+0x196>
 800262a:	2301      	movs	r3, #1
 800262c:	e022      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <HAL_I2C_Init+0x1bc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e58      	subs	r0, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	440b      	add	r3, r1
 8002644:	fbb0 f3f3 	udiv	r3, r0, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	0099      	lsls	r1, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6809      	ldr	r1, [r1, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6911      	ldr	r1, [r2, #16]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	000186a0 	.word	0x000186a0
 8002710:	001e847f 	.word	0x001e847f
 8002714:	003d08ff 	.word	0x003d08ff
 8002718:	431bde83 	.word	0x431bde83
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff f8ea 	bl	800190c <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 80e0 	bne.w	8002908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2319      	movs	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	4970      	ldr	r1, [pc, #448]	; (8002914 <HAL_I2C_Master_Transmit+0x1f4>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f964 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	e0d3      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x50>
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2210      	movs	r2, #16
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	893a      	ldrh	r2, [r7, #8]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a50      	ldr	r2, [pc, #320]	; (8002918 <HAL_I2C_Master_Transmit+0x1f8>)
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f89c 	bl	800291c <I2C_MasterRequestWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08d      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002804:	e066      	b.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa22 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fa19 	bl	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d107      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d194      	bne.n	8002806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d006      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d003      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002944:	d108      	bne.n	8002958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	2b12      	cmp	r3, #18
 800295e:	d107      	bne.n	8002970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f84f 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e035      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ac:	d108      	bne.n	80029c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	e01b      	b.n	80029f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	11db      	asrs	r3, r3, #7
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0306 	and.w	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f063 030f 	orn	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <I2C_MasterRequestWrite+0xfc>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f898 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e010      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <I2C_MasterRequestWrite+0x100>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f888 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010008 	.word	0x00010008
 8002a1c:	00010002 	.word	0x00010002

08002a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a30:	e048      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d044      	beq.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe ff67 	bl	800190c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d139      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e023      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	e00c      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d093      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	e071      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d123      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e067      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d041      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7fe fec2 	bl	800190c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d136      	bne.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e021      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e00b      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af6d 	bne.w	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f886 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d028      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe fe47 	bl	800190c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d016      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d1c3      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f83e 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d028      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fdff 	bl	800190c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11d      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1c3      	bne.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d11b      	bne.n	8002dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002dd6:	f7fe fd99 	bl	800190c <HAL_GetTick>
 8002dda:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe fd8f 	bl	800190c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e077      	b.n	8002eec <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002dfc:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e10:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e18:	f7fe fd78 	bl	800190c <HAL_GetTick>
 8002e1c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f7fe fd71 	bl	800190c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e057      	b.n	8002eec <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_DeInit+0x128>)
 8002e4a:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <HAL_RCC_DeInit+0x12c>)
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCC_DeInit+0x130>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fd18 	bl	8001888 <HAL_InitTick>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e044      	b.n	8002eec <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e62:	f7fe fd53 	bl	800190c <HAL_GetTick>
 8002e66:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fd49 	bl	800190c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e031      	b.n	8002eec <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e9a:	f7fe fd37 	bl	800190c <HAL_GetTick>
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ea6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002eaa:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eae:	f7fe fd2d 	bl	800190c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e015      	b.n	8002eec <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_DeInit+0x124>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	20000074 	.word	0x20000074
 8002efc:	007a1200 	.word	0x007a1200
 8002f00:	20000078 	.word	0x20000078

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e272      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f30:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06c      	beq.n	8003030 <HAL_RCC_OscConfig+0x12c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d168      	bne.n	8003030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e24c      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x76>
 8002f6c:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7f      	ldr	r2, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e02e      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7a      	ldr	r2, [pc, #488]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b78      	ldr	r3, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xbc>
 8002fa6:	4b72      	ldr	r3, [pc, #456]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a71      	ldr	r2, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002fc0:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a67      	ldr	r2, [pc, #412]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fc94 	bl	800190c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fc90 	bl	800190c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e200      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe4>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fc80 	bl	800190c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fc7c 	bl	800190c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1ec      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x10c>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c0      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe fc35 	bl	800190c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fc31 	bl	800190c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a1      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4927      	ldr	r1, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fc14 	bl	800190c <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fc10 	bl	800190c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e180      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03a      	beq.n	8003188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe fbf4 	bl	800190c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7fe fbf0 	bl	800190c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e160      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003146:	2001      	movs	r0, #1
 8003148:	f000 face 	bl	80036e8 <RCC_Delay>
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7fe fbda 	bl	800190c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315a:	e00f      	b.n	800317c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7fe fbd6 	bl	800190c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d908      	bls.n	800317c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e146      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	42420000 	.word	0x42420000
 8003178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e9      	bne.n	800315c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a6 	beq.w	80032e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b7f      	ldr	r3, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7e      	ldr	r2, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe fb97 	bl	800190c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fb93 	bl	800190c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e103      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b75      	ldr	r3, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x312>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e02d      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x334>
 800321e:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a66      	ldr	r2, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	e01c      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x356>
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a60      	ldr	r2, [pc, #384]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a5d      	ldr	r2, [pc, #372]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 800325a:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a5a      	ldr	r2, [pc, #360]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6213      	str	r3, [r2, #32]
 8003266:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe fb47 	bl	800190c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe fb43 	bl	800190c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0b1      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCC_OscConfig+0x37e>
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fb31 	bl	800190c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fb2d 	bl	800190c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e09b      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8087 	beq.w	80033fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d061      	beq.n	80033bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d146      	bne.n	800338e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe fb01 	bl	800190c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe fafd 	bl	800190c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e06d      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d108      	bne.n	8003348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4921      	ldr	r1, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a19      	ldr	r1, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	430b      	orrs	r3, r1
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fad1 	bl	800190c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe facd 	bl	800190c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e03d      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
 800338c:	e035      	b.n	80033fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe faba 	bl	800190c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fab6 	bl	800190c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e026      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x498>
 80033ba:	e01e      	b.n	80033fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e019      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x500>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d0      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4965      	ldr	r1, [pc, #404]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d040      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e073      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4936      	ldr	r1, [pc, #216]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe fa08 	bl	800190c <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe fa04 	bl	800190c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e053      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1cc>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1d0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe f966 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40021000 	.word	0x40021000
 80035d0:	080053a8 	.word	0x080053a8
 80035d4:	20000074 	.word	0x20000074
 80035d8:	20000078 	.word	0x20000078

080035dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCC_GetSysClockFreq+0x94>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b04      	cmp	r3, #4
 8003604:	d002      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x30>
 8003606:	2b08      	cmp	r3, #8
 8003608:	d003      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0x36>
 800360a:	e027      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_GetSysClockFreq+0x98>)
 800360e:	613b      	str	r3, [r7, #16]
      break;
 8003610:	e027      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	0c9b      	lsrs	r3, r3, #18
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_RCC_GetSysClockFreq+0x9c>)
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_GetSysClockFreq+0x94>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0c5b      	lsrs	r3, r3, #17
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	4a11      	ldr	r2, [pc, #68]	; (800367c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <HAL_RCC_GetSysClockFreq+0x98>)
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e004      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	613b      	str	r3, [r7, #16]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetSysClockFreq+0x98>)
 800365e:	613b      	str	r3, [r7, #16]
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	693b      	ldr	r3, [r7, #16]
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	007a1200 	.word	0x007a1200
 8003678:	080053c0 	.word	0x080053c0
 800367c:	080053d0 	.word	0x080053d0
 8003680:	003d0900 	.word	0x003d0900

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <HAL_RCC_GetHCLKFreq+0x10>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000074 	.word	0x20000074

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff2 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	080053b8 	.word	0x080053b8

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffde 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	0adb      	lsrs	r3, r3, #11
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	080053b8 	.word	0x080053b8

080036e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <RCC_Delay+0x34>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <RCC_Delay+0x38>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0a5b      	lsrs	r3, r3, #9
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003704:	bf00      	nop
  }
  while (Delay --);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	60fa      	str	r2, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f9      	bne.n	8003704 <RCC_Delay+0x1c>
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000074 	.word	0x20000074
 8003720:	10624dd3 	.word	0x10624dd3

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e042      	b.n	80037bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd ff7e 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fe8d 	bl	8004488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d16d      	bne.n	80038c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_UART_Transmit+0x2c>
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e066      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003802:	f7fe f883 	bl	800190c <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d108      	bne.n	8003830 <HAL_UART_Transmit+0x6c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e003      	b.n	8003838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003838:	e02a      	b.n	8003890 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fbdc 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e036      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	3302      	adds	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	e007      	b.n	8003882 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1cf      	bne.n	800383a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2140      	movs	r1, #64	; 0x40
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fbac 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e006      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08a      	sub	sp, #40	; 0x28
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d17c      	bne.n	80039e4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Receive+0x2c>
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e075      	b.n	80039e6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2222      	movs	r2, #34	; 0x22
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390e:	f7fd fffd 	bl	800190c <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d108      	bne.n	800393c <HAL_UART_Receive+0x72>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	e003      	b.n	8003944 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003944:	e043      	b.n	80039ce <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2200      	movs	r2, #0
 800394e:	2120      	movs	r1, #32
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fb56 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e042      	b.n	80039e6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	b29a      	uxth	r2, r3
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3302      	adds	r3, #2
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e01f      	b.n	80039c0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d007      	beq.n	800399a <HAL_UART_Receive+0xd0>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_UART_Receive+0xde>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e008      	b.n	80039ba <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1b6      	bne.n	8003946 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d121      	bne.n	8003a4c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Transmit_IT+0x26>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01a      	b.n	8003a4e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2221      	movs	r2, #33	; 0x21
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a46:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d112      	bne.n	8003a98 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_Receive_IT+0x26>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00b      	b.n	8003a9a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb25 	bl	80040de <UART_Start_Receive_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b0ba      	sub	sp, #232	; 0xe8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fc01 	bl	800430a <UART_Receive_IT>
      return;
 8003b08:	e25b      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80de 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
 8003b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80d1 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d011      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 81f2 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb8c 	bl	800430a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_UART_IRQHandler+0x17a>
 8003c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa96 	bl	8004150 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d041      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	; (8003e84 <HAL_UART_IRQHandler+0x3e0>)
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd ffca 	bl	8001c2c <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00e      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f993 	bl	8003fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00a      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f98f 	bl	8003fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f98b 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003cca:	e175      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	bf00      	nop
    return;
 8003cce:	e173      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 814f 	bne.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8148 	beq.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8141 	beq.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80b6 	beq.w	8003e88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8145 	beq.w	8003fbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 813e 	bcs.w	8003fbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f000 8088 	beq.w	8003e64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1d9      	bne.n	8003d54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e1      	bne.n	8003da0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fea9 	bl	8001bb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8b6 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e80:	e09c      	b.n	8003fbc <HAL_UART_IRQHandler+0x518>
 8003e82:	bf00      	nop
 8003e84:	08004215 	.word	0x08004215
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 808e 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8089 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ed2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f83b 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f76:	e023      	b.n	8003fc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_UART_IRQHandler+0x4f4>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f953 	bl	800423c <UART_Transmit_IT>
    return;
 8003f96:	e014      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f992 	bl	80042da <UART_EndTransmit_IT>
    return;
 8003fb6:	e004      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc0:	bf00      	nop
  }
}
 8003fc2:	37e8      	adds	r7, #232	; 0xe8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b090      	sub	sp, #64	; 0x40
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	e050      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d04c      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0x30>
 8004022:	f7fd fc73 	bl	800190c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402e:	429a      	cmp	r2, r3
 8004030:	d241      	bcs.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004052:	637a      	str	r2, [r7, #52]	; 0x34
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	613b      	str	r3, [r7, #16]
   return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004086:	623a      	str	r2, [r7, #32]
 8004088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	69f9      	ldr	r1, [r7, #28]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	61bb      	str	r3, [r7, #24]
   return(result);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e00f      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d09f      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3740      	adds	r7, #64	; 0x40
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	4613      	mov	r3, r2
 80040ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2222      	movs	r2, #34	; 0x22
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004122:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0220 	orr.w	r2, r2, #32
 8004142:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b095      	sub	sp, #84	; 0x54
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004178:	643a      	str	r2, [r7, #64]	; 0x40
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800417e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e5      	bne.n	8004158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	61fb      	str	r3, [r7, #28]
   return(result);
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d119      	bne.n	80041fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f023 0310 	bic.w	r3, r3, #16
 80041de:	647b      	str	r3, [r7, #68]	; 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e8:	61ba      	str	r2, [r7, #24]
 80041ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6979      	ldr	r1, [r7, #20]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	613b      	str	r3, [r7, #16]
   return(result);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
}
 800420a:	bf00      	nop
 800420c:	3754      	adds	r7, #84	; 0x54
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fed3 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b21      	cmp	r3, #33	; 0x21
 800424e:	d13e      	bne.n	80042ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004258:	d114      	bne.n	8004284 <UART_Transmit_IT+0x48>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d110      	bne.n	8004284 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004276:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]
 8004282:	e008      	b.n	8004296 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6211      	str	r1, [r2, #32]
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29b      	uxth	r3, r3
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	4619      	mov	r1, r3
 80042a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fe64 	bl	8003fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08c      	sub	sp, #48	; 0x30
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b22      	cmp	r3, #34	; 0x22
 800431c:	f040 80ae 	bne.w	800447c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d117      	bne.n	800435a <UART_Receive_IT+0x50>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004348:	b29a      	uxth	r2, r3
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	1c9a      	adds	r2, r3, #2
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
 8004358:	e026      	b.n	80043a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d007      	beq.n	800437e <UART_Receive_IT+0x74>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <UART_Receive_IT+0x82>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e008      	b.n	800439e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004398:	b2da      	uxtb	r2, r3
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d15d      	bne.n	8004478 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0220 	bic.w	r2, r2, #32
 80043ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d135      	bne.n	800446e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	613b      	str	r3, [r7, #16]
   return(result);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f023 0310 	bic.w	r3, r3, #16
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	623a      	str	r2, [r7, #32]
 800442a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	69f9      	ldr	r1, [r7, #28]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	61bb      	str	r3, [r7, #24]
   return(result);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b10      	cmp	r3, #16
 8004448:	d10a      	bne.n	8004460 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff fdc0 	bl	8003fec <HAL_UARTEx_RxEventCallback>
 800446c:	e002      	b.n	8004474 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fa8a 	bl	8000988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e002      	b.n	800447e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3730      	adds	r7, #48	; 0x30
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044c2:	f023 030c 	bic.w	r3, r3, #12
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2c      	ldr	r2, [pc, #176]	; (800459c <UART_SetConfig+0x114>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7ff f8e6 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	e002      	b.n	80044fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7ff f8ce 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 80044fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <UART_SetConfig+0x118>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	0119      	lsls	r1, r3, #4
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009a      	lsls	r2, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fbb2 f2f3 	udiv	r2, r2, r3
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <UART_SetConfig+0x118>)
 8004536:	fba3 0302 	umull	r0, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2064      	movs	r0, #100	; 0x64
 800453e:	fb00 f303 	mul.w	r3, r0, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	3332      	adds	r3, #50	; 0x32
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <UART_SetConfig+0x118>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004554:	4419      	add	r1, r3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f2f3 	udiv	r2, r2, r3
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <UART_SetConfig+0x118>)
 800456e:	fba3 0302 	umull	r0, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2064      	movs	r0, #100	; 0x64
 8004576:	fb00 f303 	mul.w	r3, r0, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <UART_SetConfig+0x118>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	440a      	add	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40013800 	.word	0x40013800
 80045a0:	51eb851f 	.word	0x51eb851f

080045a4 <atoi>:
 80045a4:	220a      	movs	r2, #10
 80045a6:	2100      	movs	r1, #0
 80045a8:	f000 b8ce 	b.w	8004748 <strtol>

080045ac <__errno>:
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <__errno+0x8>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000080 	.word	0x20000080

080045b8 <__libc_init_array>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	2600      	movs	r6, #0
 80045bc:	4d0c      	ldr	r5, [pc, #48]	; (80045f0 <__libc_init_array+0x38>)
 80045be:	4c0d      	ldr	r4, [pc, #52]	; (80045f4 <__libc_init_array+0x3c>)
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	42a6      	cmp	r6, r4
 80045c6:	d109      	bne.n	80045dc <__libc_init_array+0x24>
 80045c8:	f000 fd22 	bl	8005010 <_init>
 80045cc:	2600      	movs	r6, #0
 80045ce:	4d0a      	ldr	r5, [pc, #40]	; (80045f8 <__libc_init_array+0x40>)
 80045d0:	4c0a      	ldr	r4, [pc, #40]	; (80045fc <__libc_init_array+0x44>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	42a6      	cmp	r6, r4
 80045d8:	d105      	bne.n	80045e6 <__libc_init_array+0x2e>
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e0:	4798      	blx	r3
 80045e2:	3601      	adds	r6, #1
 80045e4:	e7ee      	b.n	80045c4 <__libc_init_array+0xc>
 80045e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ea:	4798      	blx	r3
 80045ec:	3601      	adds	r6, #1
 80045ee:	e7f2      	b.n	80045d6 <__libc_init_array+0x1e>
 80045f0:	08005508 	.word	0x08005508
 80045f4:	08005508 	.word	0x08005508
 80045f8:	08005508 	.word	0x08005508
 80045fc:	0800550c 	.word	0x0800550c

08004600 <memset>:
 8004600:	4603      	mov	r3, r0
 8004602:	4402      	add	r2, r0
 8004604:	4293      	cmp	r3, r2
 8004606:	d100      	bne.n	800460a <memset+0xa>
 8004608:	4770      	bx	lr
 800460a:	f803 1b01 	strb.w	r1, [r3], #1
 800460e:	e7f9      	b.n	8004604 <memset+0x4>

08004610 <siprintf>:
 8004610:	b40e      	push	{r1, r2, r3}
 8004612:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004616:	b500      	push	{lr}
 8004618:	b09c      	sub	sp, #112	; 0x70
 800461a:	ab1d      	add	r3, sp, #116	; 0x74
 800461c:	9002      	str	r0, [sp, #8]
 800461e:	9006      	str	r0, [sp, #24]
 8004620:	9107      	str	r1, [sp, #28]
 8004622:	9104      	str	r1, [sp, #16]
 8004624:	4808      	ldr	r0, [pc, #32]	; (8004648 <siprintf+0x38>)
 8004626:	4909      	ldr	r1, [pc, #36]	; (800464c <siprintf+0x3c>)
 8004628:	f853 2b04 	ldr.w	r2, [r3], #4
 800462c:	9105      	str	r1, [sp, #20]
 800462e:	6800      	ldr	r0, [r0, #0]
 8004630:	a902      	add	r1, sp, #8
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	f000 f8ee 	bl	8004814 <_svfiprintf_r>
 8004638:	2200      	movs	r2, #0
 800463a:	9b02      	ldr	r3, [sp, #8]
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	b01c      	add	sp, #112	; 0x70
 8004640:	f85d eb04 	ldr.w	lr, [sp], #4
 8004644:	b003      	add	sp, #12
 8004646:	4770      	bx	lr
 8004648:	20000080 	.word	0x20000080
 800464c:	ffff0208 	.word	0xffff0208

08004650 <_strtol_l.constprop.0>:
 8004650:	2b01      	cmp	r3, #1
 8004652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004656:	4680      	mov	r8, r0
 8004658:	d001      	beq.n	800465e <_strtol_l.constprop.0+0xe>
 800465a:	2b24      	cmp	r3, #36	; 0x24
 800465c:	d906      	bls.n	800466c <_strtol_l.constprop.0+0x1c>
 800465e:	f7ff ffa5 	bl	80045ac <__errno>
 8004662:	2316      	movs	r3, #22
 8004664:	6003      	str	r3, [r0, #0]
 8004666:	2000      	movs	r0, #0
 8004668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466c:	460d      	mov	r5, r1
 800466e:	4f35      	ldr	r7, [pc, #212]	; (8004744 <_strtol_l.constprop.0+0xf4>)
 8004670:	4628      	mov	r0, r5
 8004672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004676:	5de6      	ldrb	r6, [r4, r7]
 8004678:	f016 0608 	ands.w	r6, r6, #8
 800467c:	d1f8      	bne.n	8004670 <_strtol_l.constprop.0+0x20>
 800467e:	2c2d      	cmp	r4, #45	; 0x2d
 8004680:	d12f      	bne.n	80046e2 <_strtol_l.constprop.0+0x92>
 8004682:	2601      	movs	r6, #1
 8004684:	782c      	ldrb	r4, [r5, #0]
 8004686:	1c85      	adds	r5, r0, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d057      	beq.n	800473c <_strtol_l.constprop.0+0xec>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d109      	bne.n	80046a4 <_strtol_l.constprop.0+0x54>
 8004690:	2c30      	cmp	r4, #48	; 0x30
 8004692:	d107      	bne.n	80046a4 <_strtol_l.constprop.0+0x54>
 8004694:	7828      	ldrb	r0, [r5, #0]
 8004696:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800469a:	2858      	cmp	r0, #88	; 0x58
 800469c:	d149      	bne.n	8004732 <_strtol_l.constprop.0+0xe2>
 800469e:	2310      	movs	r3, #16
 80046a0:	786c      	ldrb	r4, [r5, #1]
 80046a2:	3502      	adds	r5, #2
 80046a4:	2700      	movs	r7, #0
 80046a6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80046aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80046ae:	fbbe f9f3 	udiv	r9, lr, r3
 80046b2:	4638      	mov	r0, r7
 80046b4:	fb03 ea19 	mls	sl, r3, r9, lr
 80046b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80046bc:	f1bc 0f09 	cmp.w	ip, #9
 80046c0:	d814      	bhi.n	80046ec <_strtol_l.constprop.0+0x9c>
 80046c2:	4664      	mov	r4, ip
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	dd22      	ble.n	800470e <_strtol_l.constprop.0+0xbe>
 80046c8:	2f00      	cmp	r7, #0
 80046ca:	db1d      	blt.n	8004708 <_strtol_l.constprop.0+0xb8>
 80046cc:	4581      	cmp	r9, r0
 80046ce:	d31b      	bcc.n	8004708 <_strtol_l.constprop.0+0xb8>
 80046d0:	d101      	bne.n	80046d6 <_strtol_l.constprop.0+0x86>
 80046d2:	45a2      	cmp	sl, r4
 80046d4:	db18      	blt.n	8004708 <_strtol_l.constprop.0+0xb8>
 80046d6:	2701      	movs	r7, #1
 80046d8:	fb00 4003 	mla	r0, r0, r3, r4
 80046dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046e0:	e7ea      	b.n	80046b8 <_strtol_l.constprop.0+0x68>
 80046e2:	2c2b      	cmp	r4, #43	; 0x2b
 80046e4:	bf04      	itt	eq
 80046e6:	782c      	ldrbeq	r4, [r5, #0]
 80046e8:	1c85      	addeq	r5, r0, #2
 80046ea:	e7cd      	b.n	8004688 <_strtol_l.constprop.0+0x38>
 80046ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80046f0:	f1bc 0f19 	cmp.w	ip, #25
 80046f4:	d801      	bhi.n	80046fa <_strtol_l.constprop.0+0xaa>
 80046f6:	3c37      	subs	r4, #55	; 0x37
 80046f8:	e7e4      	b.n	80046c4 <_strtol_l.constprop.0+0x74>
 80046fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80046fe:	f1bc 0f19 	cmp.w	ip, #25
 8004702:	d804      	bhi.n	800470e <_strtol_l.constprop.0+0xbe>
 8004704:	3c57      	subs	r4, #87	; 0x57
 8004706:	e7dd      	b.n	80046c4 <_strtol_l.constprop.0+0x74>
 8004708:	f04f 37ff 	mov.w	r7, #4294967295
 800470c:	e7e6      	b.n	80046dc <_strtol_l.constprop.0+0x8c>
 800470e:	2f00      	cmp	r7, #0
 8004710:	da07      	bge.n	8004722 <_strtol_l.constprop.0+0xd2>
 8004712:	2322      	movs	r3, #34	; 0x22
 8004714:	4670      	mov	r0, lr
 8004716:	f8c8 3000 	str.w	r3, [r8]
 800471a:	2a00      	cmp	r2, #0
 800471c:	d0a4      	beq.n	8004668 <_strtol_l.constprop.0+0x18>
 800471e:	1e69      	subs	r1, r5, #1
 8004720:	e005      	b.n	800472e <_strtol_l.constprop.0+0xde>
 8004722:	b106      	cbz	r6, 8004726 <_strtol_l.constprop.0+0xd6>
 8004724:	4240      	negs	r0, r0
 8004726:	2a00      	cmp	r2, #0
 8004728:	d09e      	beq.n	8004668 <_strtol_l.constprop.0+0x18>
 800472a:	2f00      	cmp	r7, #0
 800472c:	d1f7      	bne.n	800471e <_strtol_l.constprop.0+0xce>
 800472e:	6011      	str	r1, [r2, #0]
 8004730:	e79a      	b.n	8004668 <_strtol_l.constprop.0+0x18>
 8004732:	2430      	movs	r4, #48	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1b5      	bne.n	80046a4 <_strtol_l.constprop.0+0x54>
 8004738:	2308      	movs	r3, #8
 800473a:	e7b3      	b.n	80046a4 <_strtol_l.constprop.0+0x54>
 800473c:	2c30      	cmp	r4, #48	; 0x30
 800473e:	d0a9      	beq.n	8004694 <_strtol_l.constprop.0+0x44>
 8004740:	230a      	movs	r3, #10
 8004742:	e7af      	b.n	80046a4 <_strtol_l.constprop.0+0x54>
 8004744:	080053d3 	.word	0x080053d3

08004748 <strtol>:
 8004748:	4613      	mov	r3, r2
 800474a:	460a      	mov	r2, r1
 800474c:	4601      	mov	r1, r0
 800474e:	4802      	ldr	r0, [pc, #8]	; (8004758 <strtol+0x10>)
 8004750:	6800      	ldr	r0, [r0, #0]
 8004752:	f7ff bf7d 	b.w	8004650 <_strtol_l.constprop.0>
 8004756:	bf00      	nop
 8004758:	20000080 	.word	0x20000080

0800475c <__ssputs_r>:
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	688e      	ldr	r6, [r1, #8]
 8004762:	4682      	mov	sl, r0
 8004764:	429e      	cmp	r6, r3
 8004766:	460c      	mov	r4, r1
 8004768:	4690      	mov	r8, r2
 800476a:	461f      	mov	r7, r3
 800476c:	d838      	bhi.n	80047e0 <__ssputs_r+0x84>
 800476e:	898a      	ldrh	r2, [r1, #12]
 8004770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004774:	d032      	beq.n	80047dc <__ssputs_r+0x80>
 8004776:	6825      	ldr	r5, [r4, #0]
 8004778:	6909      	ldr	r1, [r1, #16]
 800477a:	3301      	adds	r3, #1
 800477c:	eba5 0901 	sub.w	r9, r5, r1
 8004780:	6965      	ldr	r5, [r4, #20]
 8004782:	444b      	add	r3, r9
 8004784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800478c:	106d      	asrs	r5, r5, #1
 800478e:	429d      	cmp	r5, r3
 8004790:	bf38      	it	cc
 8004792:	461d      	movcc	r5, r3
 8004794:	0553      	lsls	r3, r2, #21
 8004796:	d531      	bpl.n	80047fc <__ssputs_r+0xa0>
 8004798:	4629      	mov	r1, r5
 800479a:	f000 fb6f 	bl	8004e7c <_malloc_r>
 800479e:	4606      	mov	r6, r0
 80047a0:	b950      	cbnz	r0, 80047b8 <__ssputs_r+0x5c>
 80047a2:	230c      	movs	r3, #12
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	f8ca 3000 	str.w	r3, [sl]
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b8:	464a      	mov	r2, r9
 80047ba:	6921      	ldr	r1, [r4, #16]
 80047bc:	f000 face 	bl	8004d5c <memcpy>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	6126      	str	r6, [r4, #16]
 80047ce:	444e      	add	r6, r9
 80047d0:	6026      	str	r6, [r4, #0]
 80047d2:	463e      	mov	r6, r7
 80047d4:	6165      	str	r5, [r4, #20]
 80047d6:	eba5 0509 	sub.w	r5, r5, r9
 80047da:	60a5      	str	r5, [r4, #8]
 80047dc:	42be      	cmp	r6, r7
 80047de:	d900      	bls.n	80047e2 <__ssputs_r+0x86>
 80047e0:	463e      	mov	r6, r7
 80047e2:	4632      	mov	r2, r6
 80047e4:	4641      	mov	r1, r8
 80047e6:	6820      	ldr	r0, [r4, #0]
 80047e8:	f000 fac6 	bl	8004d78 <memmove>
 80047ec:	68a3      	ldr	r3, [r4, #8]
 80047ee:	2000      	movs	r0, #0
 80047f0:	1b9b      	subs	r3, r3, r6
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	4433      	add	r3, r6
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	e7db      	b.n	80047b4 <__ssputs_r+0x58>
 80047fc:	462a      	mov	r2, r5
 80047fe:	f000 fbb1 	bl	8004f64 <_realloc_r>
 8004802:	4606      	mov	r6, r0
 8004804:	2800      	cmp	r0, #0
 8004806:	d1e1      	bne.n	80047cc <__ssputs_r+0x70>
 8004808:	4650      	mov	r0, sl
 800480a:	6921      	ldr	r1, [r4, #16]
 800480c:	f000 face 	bl	8004dac <_free_r>
 8004810:	e7c7      	b.n	80047a2 <__ssputs_r+0x46>
	...

08004814 <_svfiprintf_r>:
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	4698      	mov	r8, r3
 800481a:	898b      	ldrh	r3, [r1, #12]
 800481c:	4607      	mov	r7, r0
 800481e:	061b      	lsls	r3, r3, #24
 8004820:	460d      	mov	r5, r1
 8004822:	4614      	mov	r4, r2
 8004824:	b09d      	sub	sp, #116	; 0x74
 8004826:	d50e      	bpl.n	8004846 <_svfiprintf_r+0x32>
 8004828:	690b      	ldr	r3, [r1, #16]
 800482a:	b963      	cbnz	r3, 8004846 <_svfiprintf_r+0x32>
 800482c:	2140      	movs	r1, #64	; 0x40
 800482e:	f000 fb25 	bl	8004e7c <_malloc_r>
 8004832:	6028      	str	r0, [r5, #0]
 8004834:	6128      	str	r0, [r5, #16]
 8004836:	b920      	cbnz	r0, 8004842 <_svfiprintf_r+0x2e>
 8004838:	230c      	movs	r3, #12
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	e0d1      	b.n	80049e6 <_svfiprintf_r+0x1d2>
 8004842:	2340      	movs	r3, #64	; 0x40
 8004844:	616b      	str	r3, [r5, #20]
 8004846:	2300      	movs	r3, #0
 8004848:	9309      	str	r3, [sp, #36]	; 0x24
 800484a:	2320      	movs	r3, #32
 800484c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004850:	2330      	movs	r3, #48	; 0x30
 8004852:	f04f 0901 	mov.w	r9, #1
 8004856:	f8cd 800c 	str.w	r8, [sp, #12]
 800485a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a00 <_svfiprintf_r+0x1ec>
 800485e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004862:	4623      	mov	r3, r4
 8004864:	469a      	mov	sl, r3
 8004866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800486a:	b10a      	cbz	r2, 8004870 <_svfiprintf_r+0x5c>
 800486c:	2a25      	cmp	r2, #37	; 0x25
 800486e:	d1f9      	bne.n	8004864 <_svfiprintf_r+0x50>
 8004870:	ebba 0b04 	subs.w	fp, sl, r4
 8004874:	d00b      	beq.n	800488e <_svfiprintf_r+0x7a>
 8004876:	465b      	mov	r3, fp
 8004878:	4622      	mov	r2, r4
 800487a:	4629      	mov	r1, r5
 800487c:	4638      	mov	r0, r7
 800487e:	f7ff ff6d 	bl	800475c <__ssputs_r>
 8004882:	3001      	adds	r0, #1
 8004884:	f000 80aa 	beq.w	80049dc <_svfiprintf_r+0x1c8>
 8004888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800488a:	445a      	add	r2, fp
 800488c:	9209      	str	r2, [sp, #36]	; 0x24
 800488e:	f89a 3000 	ldrb.w	r3, [sl]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80a2 	beq.w	80049dc <_svfiprintf_r+0x1c8>
 8004898:	2300      	movs	r3, #0
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a2:	f10a 0a01 	add.w	sl, sl, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	9307      	str	r3, [sp, #28]
 80048aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048ae:	931a      	str	r3, [sp, #104]	; 0x68
 80048b0:	4654      	mov	r4, sl
 80048b2:	2205      	movs	r2, #5
 80048b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b8:	4851      	ldr	r0, [pc, #324]	; (8004a00 <_svfiprintf_r+0x1ec>)
 80048ba:	f000 fa41 	bl	8004d40 <memchr>
 80048be:	9a04      	ldr	r2, [sp, #16]
 80048c0:	b9d8      	cbnz	r0, 80048fa <_svfiprintf_r+0xe6>
 80048c2:	06d0      	lsls	r0, r2, #27
 80048c4:	bf44      	itt	mi
 80048c6:	2320      	movmi	r3, #32
 80048c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048cc:	0711      	lsls	r1, r2, #28
 80048ce:	bf44      	itt	mi
 80048d0:	232b      	movmi	r3, #43	; 0x2b
 80048d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d6:	f89a 3000 	ldrb.w	r3, [sl]
 80048da:	2b2a      	cmp	r3, #42	; 0x2a
 80048dc:	d015      	beq.n	800490a <_svfiprintf_r+0xf6>
 80048de:	4654      	mov	r4, sl
 80048e0:	2000      	movs	r0, #0
 80048e2:	f04f 0c0a 	mov.w	ip, #10
 80048e6:	9a07      	ldr	r2, [sp, #28]
 80048e8:	4621      	mov	r1, r4
 80048ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ee:	3b30      	subs	r3, #48	; 0x30
 80048f0:	2b09      	cmp	r3, #9
 80048f2:	d94e      	bls.n	8004992 <_svfiprintf_r+0x17e>
 80048f4:	b1b0      	cbz	r0, 8004924 <_svfiprintf_r+0x110>
 80048f6:	9207      	str	r2, [sp, #28]
 80048f8:	e014      	b.n	8004924 <_svfiprintf_r+0x110>
 80048fa:	eba0 0308 	sub.w	r3, r0, r8
 80048fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004902:	4313      	orrs	r3, r2
 8004904:	46a2      	mov	sl, r4
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	e7d2      	b.n	80048b0 <_svfiprintf_r+0x9c>
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	9103      	str	r1, [sp, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfbb      	ittet	lt
 8004916:	425b      	neglt	r3, r3
 8004918:	f042 0202 	orrlt.w	r2, r2, #2
 800491c:	9307      	strge	r3, [sp, #28]
 800491e:	9307      	strlt	r3, [sp, #28]
 8004920:	bfb8      	it	lt
 8004922:	9204      	strlt	r2, [sp, #16]
 8004924:	7823      	ldrb	r3, [r4, #0]
 8004926:	2b2e      	cmp	r3, #46	; 0x2e
 8004928:	d10c      	bne.n	8004944 <_svfiprintf_r+0x130>
 800492a:	7863      	ldrb	r3, [r4, #1]
 800492c:	2b2a      	cmp	r3, #42	; 0x2a
 800492e:	d135      	bne.n	800499c <_svfiprintf_r+0x188>
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	3402      	adds	r4, #2
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	9203      	str	r2, [sp, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	bfb8      	it	lt
 800493e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004942:	9305      	str	r3, [sp, #20]
 8004944:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a04 <_svfiprintf_r+0x1f0>
 8004948:	2203      	movs	r2, #3
 800494a:	4650      	mov	r0, sl
 800494c:	7821      	ldrb	r1, [r4, #0]
 800494e:	f000 f9f7 	bl	8004d40 <memchr>
 8004952:	b140      	cbz	r0, 8004966 <_svfiprintf_r+0x152>
 8004954:	2340      	movs	r3, #64	; 0x40
 8004956:	eba0 000a 	sub.w	r0, r0, sl
 800495a:	fa03 f000 	lsl.w	r0, r3, r0
 800495e:	9b04      	ldr	r3, [sp, #16]
 8004960:	3401      	adds	r4, #1
 8004962:	4303      	orrs	r3, r0
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800496a:	2206      	movs	r2, #6
 800496c:	4826      	ldr	r0, [pc, #152]	; (8004a08 <_svfiprintf_r+0x1f4>)
 800496e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004972:	f000 f9e5 	bl	8004d40 <memchr>
 8004976:	2800      	cmp	r0, #0
 8004978:	d038      	beq.n	80049ec <_svfiprintf_r+0x1d8>
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <_svfiprintf_r+0x1f8>)
 800497c:	bb1b      	cbnz	r3, 80049c6 <_svfiprintf_r+0x1b2>
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	3307      	adds	r3, #7
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	3308      	adds	r3, #8
 8004988:	9303      	str	r3, [sp, #12]
 800498a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498c:	4433      	add	r3, r6
 800498e:	9309      	str	r3, [sp, #36]	; 0x24
 8004990:	e767      	b.n	8004862 <_svfiprintf_r+0x4e>
 8004992:	460c      	mov	r4, r1
 8004994:	2001      	movs	r0, #1
 8004996:	fb0c 3202 	mla	r2, ip, r2, r3
 800499a:	e7a5      	b.n	80048e8 <_svfiprintf_r+0xd4>
 800499c:	2300      	movs	r3, #0
 800499e:	f04f 0c0a 	mov.w	ip, #10
 80049a2:	4619      	mov	r1, r3
 80049a4:	3401      	adds	r4, #1
 80049a6:	9305      	str	r3, [sp, #20]
 80049a8:	4620      	mov	r0, r4
 80049aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ae:	3a30      	subs	r2, #48	; 0x30
 80049b0:	2a09      	cmp	r2, #9
 80049b2:	d903      	bls.n	80049bc <_svfiprintf_r+0x1a8>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0c5      	beq.n	8004944 <_svfiprintf_r+0x130>
 80049b8:	9105      	str	r1, [sp, #20]
 80049ba:	e7c3      	b.n	8004944 <_svfiprintf_r+0x130>
 80049bc:	4604      	mov	r4, r0
 80049be:	2301      	movs	r3, #1
 80049c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049c4:	e7f0      	b.n	80049a8 <_svfiprintf_r+0x194>
 80049c6:	ab03      	add	r3, sp, #12
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	462a      	mov	r2, r5
 80049cc:	4638      	mov	r0, r7
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <_svfiprintf_r+0x1fc>)
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	f3af 8000 	nop.w
 80049d6:	1c42      	adds	r2, r0, #1
 80049d8:	4606      	mov	r6, r0
 80049da:	d1d6      	bne.n	800498a <_svfiprintf_r+0x176>
 80049dc:	89ab      	ldrh	r3, [r5, #12]
 80049de:	065b      	lsls	r3, r3, #25
 80049e0:	f53f af2c 	bmi.w	800483c <_svfiprintf_r+0x28>
 80049e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e6:	b01d      	add	sp, #116	; 0x74
 80049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ec:	ab03      	add	r3, sp, #12
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	462a      	mov	r2, r5
 80049f2:	4638      	mov	r0, r7
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <_svfiprintf_r+0x1fc>)
 80049f6:	a904      	add	r1, sp, #16
 80049f8:	f000 f87c 	bl	8004af4 <_printf_i>
 80049fc:	e7eb      	b.n	80049d6 <_svfiprintf_r+0x1c2>
 80049fe:	bf00      	nop
 8004a00:	080054d3 	.word	0x080054d3
 8004a04:	080054d9 	.word	0x080054d9
 8004a08:	080054dd 	.word	0x080054dd
 8004a0c:	00000000 	.word	0x00000000
 8004a10:	0800475d 	.word	0x0800475d

08004a14 <_printf_common>:
 8004a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	4616      	mov	r6, r2
 8004a1a:	4699      	mov	r9, r3
 8004a1c:	688a      	ldr	r2, [r1, #8]
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	4607      	mov	r7, r0
 8004a22:	4293      	cmp	r3, r2
 8004a24:	bfb8      	it	lt
 8004a26:	4613      	movlt	r3, r2
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a34:	b10a      	cbz	r2, 8004a3a <_printf_common+0x26>
 8004a36:	3301      	adds	r3, #1
 8004a38:	6033      	str	r3, [r6, #0]
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	0699      	lsls	r1, r3, #26
 8004a3e:	bf42      	ittt	mi
 8004a40:	6833      	ldrmi	r3, [r6, #0]
 8004a42:	3302      	addmi	r3, #2
 8004a44:	6033      	strmi	r3, [r6, #0]
 8004a46:	6825      	ldr	r5, [r4, #0]
 8004a48:	f015 0506 	ands.w	r5, r5, #6
 8004a4c:	d106      	bne.n	8004a5c <_printf_common+0x48>
 8004a4e:	f104 0a19 	add.w	sl, r4, #25
 8004a52:	68e3      	ldr	r3, [r4, #12]
 8004a54:	6832      	ldr	r2, [r6, #0]
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	42ab      	cmp	r3, r5
 8004a5a:	dc28      	bgt.n	8004aae <_printf_common+0x9a>
 8004a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a60:	1e13      	subs	r3, r2, #0
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	bf18      	it	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	0692      	lsls	r2, r2, #26
 8004a6a:	d42d      	bmi.n	8004ac8 <_printf_common+0xb4>
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a74:	47c0      	blx	r8
 8004a76:	3001      	adds	r0, #1
 8004a78:	d020      	beq.n	8004abc <_printf_common+0xa8>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	68e5      	ldr	r5, [r4, #12]
 8004a7e:	f003 0306 	and.w	r3, r3, #6
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	bf18      	it	ne
 8004a86:	2500      	movne	r5, #0
 8004a88:	6832      	ldr	r2, [r6, #0]
 8004a8a:	f04f 0600 	mov.w	r6, #0
 8004a8e:	68a3      	ldr	r3, [r4, #8]
 8004a90:	bf08      	it	eq
 8004a92:	1aad      	subeq	r5, r5, r2
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	bf08      	it	eq
 8004a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bfc4      	itt	gt
 8004aa0:	1a9b      	subgt	r3, r3, r2
 8004aa2:	18ed      	addgt	r5, r5, r3
 8004aa4:	341a      	adds	r4, #26
 8004aa6:	42b5      	cmp	r5, r6
 8004aa8:	d11a      	bne.n	8004ae0 <_printf_common+0xcc>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e008      	b.n	8004ac0 <_printf_common+0xac>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	47c0      	blx	r8
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_printf_common+0xb0>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7c4      	b.n	8004a52 <_printf_common+0x3e>
 8004ac8:	2030      	movs	r0, #48	; 0x30
 8004aca:	18e1      	adds	r1, r4, r3
 8004acc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad6:	4422      	add	r2, r4
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ade:	e7c5      	b.n	8004a6c <_printf_common+0x58>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c0      	blx	r8
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xa8>
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7d9      	b.n	8004aa6 <_printf_common+0x92>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	7e0f      	ldrb	r7, [r1, #24]
 8004afa:	4691      	mov	r9, r2
 8004afc:	2f78      	cmp	r7, #120	; 0x78
 8004afe:	4680      	mov	r8, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	469a      	mov	sl, r3
 8004b04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b0a:	d807      	bhi.n	8004b1c <_printf_i+0x28>
 8004b0c:	2f62      	cmp	r7, #98	; 0x62
 8004b0e:	d80a      	bhi.n	8004b26 <_printf_i+0x32>
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	f000 80d9 	beq.w	8004cc8 <_printf_i+0x1d4>
 8004b16:	2f58      	cmp	r7, #88	; 0x58
 8004b18:	f000 80a4 	beq.w	8004c64 <_printf_i+0x170>
 8004b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b24:	e03a      	b.n	8004b9c <_printf_i+0xa8>
 8004b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b2a:	2b15      	cmp	r3, #21
 8004b2c:	d8f6      	bhi.n	8004b1c <_printf_i+0x28>
 8004b2e:	a101      	add	r1, pc, #4	; (adr r1, 8004b34 <_printf_i+0x40>)
 8004b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004b1d 	.word	0x08004b1d
 8004b40:	08004b1d 	.word	0x08004b1d
 8004b44:	08004b1d 	.word	0x08004b1d
 8004b48:	08004b1d 	.word	0x08004b1d
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004b1d 	.word	0x08004b1d
 8004b54:	08004b1d 	.word	0x08004b1d
 8004b58:	08004b1d 	.word	0x08004b1d
 8004b5c:	08004b1d 	.word	0x08004b1d
 8004b60:	08004caf 	.word	0x08004caf
 8004b64:	08004bd1 	.word	0x08004bd1
 8004b68:	08004c91 	.word	0x08004c91
 8004b6c:	08004b1d 	.word	0x08004b1d
 8004b70:	08004b1d 	.word	0x08004b1d
 8004b74:	08004cd1 	.word	0x08004cd1
 8004b78:	08004b1d 	.word	0x08004b1d
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004b1d 	.word	0x08004b1d
 8004b84:	08004b1d 	.word	0x08004b1d
 8004b88:	08004c99 	.word	0x08004c99
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	602a      	str	r2, [r5, #0]
 8004b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0a4      	b.n	8004cea <_printf_i+0x1f6>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	6829      	ldr	r1, [r5, #0]
 8004ba4:	0606      	lsls	r6, r0, #24
 8004ba6:	f101 0304 	add.w	r3, r1, #4
 8004baa:	d50a      	bpl.n	8004bc2 <_printf_i+0xce>
 8004bac:	680e      	ldr	r6, [r1, #0]
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	2e00      	cmp	r6, #0
 8004bb2:	da03      	bge.n	8004bbc <_printf_i+0xc8>
 8004bb4:	232d      	movs	r3, #45	; 0x2d
 8004bb6:	4276      	negs	r6, r6
 8004bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbc:	230a      	movs	r3, #10
 8004bbe:	485e      	ldr	r0, [pc, #376]	; (8004d38 <_printf_i+0x244>)
 8004bc0:	e019      	b.n	8004bf6 <_printf_i+0x102>
 8004bc2:	680e      	ldr	r6, [r1, #0]
 8004bc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bc8:	602b      	str	r3, [r5, #0]
 8004bca:	bf18      	it	ne
 8004bcc:	b236      	sxthne	r6, r6
 8004bce:	e7ef      	b.n	8004bb0 <_printf_i+0xbc>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	1d19      	adds	r1, r3, #4
 8004bd6:	6029      	str	r1, [r5, #0]
 8004bd8:	0601      	lsls	r1, r0, #24
 8004bda:	d501      	bpl.n	8004be0 <_printf_i+0xec>
 8004bdc:	681e      	ldr	r6, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <_printf_i+0xf2>
 8004be0:	0646      	lsls	r6, r0, #25
 8004be2:	d5fb      	bpl.n	8004bdc <_printf_i+0xe8>
 8004be4:	881e      	ldrh	r6, [r3, #0]
 8004be6:	2f6f      	cmp	r7, #111	; 0x6f
 8004be8:	bf0c      	ite	eq
 8004bea:	2308      	moveq	r3, #8
 8004bec:	230a      	movne	r3, #10
 8004bee:	4852      	ldr	r0, [pc, #328]	; (8004d38 <_printf_i+0x244>)
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bf6:	6865      	ldr	r5, [r4, #4]
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	bfa8      	it	ge
 8004bfc:	6821      	ldrge	r1, [r4, #0]
 8004bfe:	60a5      	str	r5, [r4, #8]
 8004c00:	bfa4      	itt	ge
 8004c02:	f021 0104 	bicge.w	r1, r1, #4
 8004c06:	6021      	strge	r1, [r4, #0]
 8004c08:	b90e      	cbnz	r6, 8004c0e <_printf_i+0x11a>
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	d04d      	beq.n	8004caa <_printf_i+0x1b6>
 8004c0e:	4615      	mov	r5, r2
 8004c10:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c14:	fb03 6711 	mls	r7, r3, r1, r6
 8004c18:	5dc7      	ldrb	r7, [r0, r7]
 8004c1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c1e:	4637      	mov	r7, r6
 8004c20:	42bb      	cmp	r3, r7
 8004c22:	460e      	mov	r6, r1
 8004c24:	d9f4      	bls.n	8004c10 <_printf_i+0x11c>
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d10b      	bne.n	8004c42 <_printf_i+0x14e>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	07de      	lsls	r6, r3, #31
 8004c2e:	d508      	bpl.n	8004c42 <_printf_i+0x14e>
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	6861      	ldr	r1, [r4, #4]
 8004c34:	4299      	cmp	r1, r3
 8004c36:	bfde      	ittt	le
 8004c38:	2330      	movle	r3, #48	; 0x30
 8004c3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c42:	1b52      	subs	r2, r2, r5
 8004c44:	6122      	str	r2, [r4, #16]
 8004c46:	464b      	mov	r3, r9
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	f8cd a000 	str.w	sl, [sp]
 8004c50:	aa03      	add	r2, sp, #12
 8004c52:	f7ff fedf 	bl	8004a14 <_printf_common>
 8004c56:	3001      	adds	r0, #1
 8004c58:	d14c      	bne.n	8004cf4 <_printf_i+0x200>
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5e:	b004      	add	sp, #16
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	4834      	ldr	r0, [pc, #208]	; (8004d38 <_printf_i+0x244>)
 8004c66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c6a:	6829      	ldr	r1, [r5, #0]
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c72:	6029      	str	r1, [r5, #0]
 8004c74:	061d      	lsls	r5, r3, #24
 8004c76:	d514      	bpl.n	8004ca2 <_printf_i+0x1ae>
 8004c78:	07df      	lsls	r7, r3, #31
 8004c7a:	bf44      	itt	mi
 8004c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c80:	6023      	strmi	r3, [r4, #0]
 8004c82:	b91e      	cbnz	r6, 8004c8c <_printf_i+0x198>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f023 0320 	bic.w	r3, r3, #32
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	e7af      	b.n	8004bf0 <_printf_i+0xfc>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f043 0320 	orr.w	r3, r3, #32
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	2378      	movs	r3, #120	; 0x78
 8004c9a:	4828      	ldr	r0, [pc, #160]	; (8004d3c <_printf_i+0x248>)
 8004c9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ca0:	e7e3      	b.n	8004c6a <_printf_i+0x176>
 8004ca2:	0659      	lsls	r1, r3, #25
 8004ca4:	bf48      	it	mi
 8004ca6:	b2b6      	uxthmi	r6, r6
 8004ca8:	e7e6      	b.n	8004c78 <_printf_i+0x184>
 8004caa:	4615      	mov	r5, r2
 8004cac:	e7bb      	b.n	8004c26 <_printf_i+0x132>
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	6826      	ldr	r6, [r4, #0]
 8004cb2:	1d18      	adds	r0, r3, #4
 8004cb4:	6961      	ldr	r1, [r4, #20]
 8004cb6:	6028      	str	r0, [r5, #0]
 8004cb8:	0635      	lsls	r5, r6, #24
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	d501      	bpl.n	8004cc2 <_printf_i+0x1ce>
 8004cbe:	6019      	str	r1, [r3, #0]
 8004cc0:	e002      	b.n	8004cc8 <_printf_i+0x1d4>
 8004cc2:	0670      	lsls	r0, r6, #25
 8004cc4:	d5fb      	bpl.n	8004cbe <_printf_i+0x1ca>
 8004cc6:	8019      	strh	r1, [r3, #0]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4615      	mov	r5, r2
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	e7ba      	b.n	8004c46 <_printf_i+0x152>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	1d1a      	adds	r2, r3, #4
 8004cd6:	602a      	str	r2, [r5, #0]
 8004cd8:	681d      	ldr	r5, [r3, #0]
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 f82f 	bl	8004d40 <memchr>
 8004ce2:	b108      	cbz	r0, 8004ce8 <_printf_i+0x1f4>
 8004ce4:	1b40      	subs	r0, r0, r5
 8004ce6:	6060      	str	r0, [r4, #4]
 8004ce8:	6863      	ldr	r3, [r4, #4]
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	2300      	movs	r3, #0
 8004cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf2:	e7a8      	b.n	8004c46 <_printf_i+0x152>
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	47d0      	blx	sl
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d0ab      	beq.n	8004c5a <_printf_i+0x166>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	079b      	lsls	r3, r3, #30
 8004d06:	d413      	bmi.n	8004d30 <_printf_i+0x23c>
 8004d08:	68e0      	ldr	r0, [r4, #12]
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	bfb8      	it	lt
 8004d10:	4618      	movlt	r0, r3
 8004d12:	e7a4      	b.n	8004c5e <_printf_i+0x16a>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4632      	mov	r2, r6
 8004d18:	4649      	mov	r1, r9
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	47d0      	blx	sl
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d09b      	beq.n	8004c5a <_printf_i+0x166>
 8004d22:	3501      	adds	r5, #1
 8004d24:	68e3      	ldr	r3, [r4, #12]
 8004d26:	9903      	ldr	r1, [sp, #12]
 8004d28:	1a5b      	subs	r3, r3, r1
 8004d2a:	42ab      	cmp	r3, r5
 8004d2c:	dcf2      	bgt.n	8004d14 <_printf_i+0x220>
 8004d2e:	e7eb      	b.n	8004d08 <_printf_i+0x214>
 8004d30:	2500      	movs	r5, #0
 8004d32:	f104 0619 	add.w	r6, r4, #25
 8004d36:	e7f5      	b.n	8004d24 <_printf_i+0x230>
 8004d38:	080054e4 	.word	0x080054e4
 8004d3c:	080054f5 	.word	0x080054f5

08004d40 <memchr>:
 8004d40:	4603      	mov	r3, r0
 8004d42:	b510      	push	{r4, lr}
 8004d44:	b2c9      	uxtb	r1, r1
 8004d46:	4402      	add	r2, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	d101      	bne.n	8004d52 <memchr+0x12>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e003      	b.n	8004d5a <memchr+0x1a>
 8004d52:	7804      	ldrb	r4, [r0, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	428c      	cmp	r4, r1
 8004d58:	d1f6      	bne.n	8004d48 <memchr+0x8>
 8004d5a:	bd10      	pop	{r4, pc}

08004d5c <memcpy>:
 8004d5c:	440a      	add	r2, r1
 8004d5e:	4291      	cmp	r1, r2
 8004d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d64:	d100      	bne.n	8004d68 <memcpy+0xc>
 8004d66:	4770      	bx	lr
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d74:	d1f9      	bne.n	8004d6a <memcpy+0xe>
 8004d76:	bd10      	pop	{r4, pc}

08004d78 <memmove>:
 8004d78:	4288      	cmp	r0, r1
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	eb01 0402 	add.w	r4, r1, r2
 8004d80:	d902      	bls.n	8004d88 <memmove+0x10>
 8004d82:	4284      	cmp	r4, r0
 8004d84:	4623      	mov	r3, r4
 8004d86:	d807      	bhi.n	8004d98 <memmove+0x20>
 8004d88:	1e43      	subs	r3, r0, #1
 8004d8a:	42a1      	cmp	r1, r4
 8004d8c:	d008      	beq.n	8004da0 <memmove+0x28>
 8004d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d96:	e7f8      	b.n	8004d8a <memmove+0x12>
 8004d98:	4601      	mov	r1, r0
 8004d9a:	4402      	add	r2, r0
 8004d9c:	428a      	cmp	r2, r1
 8004d9e:	d100      	bne.n	8004da2 <memmove+0x2a>
 8004da0:	bd10      	pop	{r4, pc}
 8004da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004da6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004daa:	e7f7      	b.n	8004d9c <memmove+0x24>

08004dac <_free_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4605      	mov	r5, r0
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d040      	beq.n	8004e36 <_free_r+0x8a>
 8004db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db8:	1f0c      	subs	r4, r1, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bfb8      	it	lt
 8004dbe:	18e4      	addlt	r4, r4, r3
 8004dc0:	f000 f910 	bl	8004fe4 <__malloc_lock>
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <_free_r+0x8c>)
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	b933      	cbnz	r3, 8004dd8 <_free_r+0x2c>
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	6014      	str	r4, [r2, #0]
 8004dce:	4628      	mov	r0, r5
 8004dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd4:	f000 b90c 	b.w	8004ff0 <__malloc_unlock>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d908      	bls.n	8004dee <_free_r+0x42>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	1821      	adds	r1, r4, r0
 8004de0:	428b      	cmp	r3, r1
 8004de2:	bf01      	itttt	eq
 8004de4:	6819      	ldreq	r1, [r3, #0]
 8004de6:	685b      	ldreq	r3, [r3, #4]
 8004de8:	1809      	addeq	r1, r1, r0
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	e7ed      	b.n	8004dca <_free_r+0x1e>
 8004dee:	461a      	mov	r2, r3
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	b10b      	cbz	r3, 8004df8 <_free_r+0x4c>
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d9fa      	bls.n	8004dee <_free_r+0x42>
 8004df8:	6811      	ldr	r1, [r2, #0]
 8004dfa:	1850      	adds	r0, r2, r1
 8004dfc:	42a0      	cmp	r0, r4
 8004dfe:	d10b      	bne.n	8004e18 <_free_r+0x6c>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	4401      	add	r1, r0
 8004e04:	1850      	adds	r0, r2, r1
 8004e06:	4283      	cmp	r3, r0
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	d1e0      	bne.n	8004dce <_free_r+0x22>
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4401      	add	r1, r0
 8004e12:	6011      	str	r1, [r2, #0]
 8004e14:	6053      	str	r3, [r2, #4]
 8004e16:	e7da      	b.n	8004dce <_free_r+0x22>
 8004e18:	d902      	bls.n	8004e20 <_free_r+0x74>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	e7d6      	b.n	8004dce <_free_r+0x22>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf01      	itttt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	1809      	addeq	r1, r1, r0
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	6054      	str	r4, [r2, #4]
 8004e34:	e7cb      	b.n	8004dce <_free_r+0x22>
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000688 	.word	0x20000688

08004e3c <sbrk_aligned>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	4e0e      	ldr	r6, [pc, #56]	; (8004e78 <sbrk_aligned+0x3c>)
 8004e40:	460c      	mov	r4, r1
 8004e42:	6831      	ldr	r1, [r6, #0]
 8004e44:	4605      	mov	r5, r0
 8004e46:	b911      	cbnz	r1, 8004e4e <sbrk_aligned+0x12>
 8004e48:	f000 f8bc 	bl	8004fc4 <_sbrk_r>
 8004e4c:	6030      	str	r0, [r6, #0]
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 f8b7 	bl	8004fc4 <_sbrk_r>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d00a      	beq.n	8004e70 <sbrk_aligned+0x34>
 8004e5a:	1cc4      	adds	r4, r0, #3
 8004e5c:	f024 0403 	bic.w	r4, r4, #3
 8004e60:	42a0      	cmp	r0, r4
 8004e62:	d007      	beq.n	8004e74 <sbrk_aligned+0x38>
 8004e64:	1a21      	subs	r1, r4, r0
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f8ac 	bl	8004fc4 <_sbrk_r>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d101      	bne.n	8004e74 <sbrk_aligned+0x38>
 8004e70:	f04f 34ff 	mov.w	r4, #4294967295
 8004e74:	4620      	mov	r0, r4
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	2000068c 	.word	0x2000068c

08004e7c <_malloc_r>:
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e80:	1ccd      	adds	r5, r1, #3
 8004e82:	f025 0503 	bic.w	r5, r5, #3
 8004e86:	3508      	adds	r5, #8
 8004e88:	2d0c      	cmp	r5, #12
 8004e8a:	bf38      	it	cc
 8004e8c:	250c      	movcc	r5, #12
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	4607      	mov	r7, r0
 8004e92:	db01      	blt.n	8004e98 <_malloc_r+0x1c>
 8004e94:	42a9      	cmp	r1, r5
 8004e96:	d905      	bls.n	8004ea4 <_malloc_r+0x28>
 8004e98:	230c      	movs	r3, #12
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	4e2e      	ldr	r6, [pc, #184]	; (8004f60 <_malloc_r+0xe4>)
 8004ea6:	f000 f89d 	bl	8004fe4 <__malloc_lock>
 8004eaa:	6833      	ldr	r3, [r6, #0]
 8004eac:	461c      	mov	r4, r3
 8004eae:	bb34      	cbnz	r4, 8004efe <_malloc_r+0x82>
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f7ff ffc2 	bl	8004e3c <sbrk_aligned>
 8004eb8:	1c43      	adds	r3, r0, #1
 8004eba:	4604      	mov	r4, r0
 8004ebc:	d14d      	bne.n	8004f5a <_malloc_r+0xde>
 8004ebe:	6834      	ldr	r4, [r6, #0]
 8004ec0:	4626      	mov	r6, r4
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	d140      	bne.n	8004f48 <_malloc_r+0xcc>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4638      	mov	r0, r7
 8004ecc:	eb04 0803 	add.w	r8, r4, r3
 8004ed0:	f000 f878 	bl	8004fc4 <_sbrk_r>
 8004ed4:	4580      	cmp	r8, r0
 8004ed6:	d13a      	bne.n	8004f4e <_malloc_r+0xd2>
 8004ed8:	6821      	ldr	r1, [r4, #0]
 8004eda:	3503      	adds	r5, #3
 8004edc:	1a6d      	subs	r5, r5, r1
 8004ede:	f025 0503 	bic.w	r5, r5, #3
 8004ee2:	3508      	adds	r5, #8
 8004ee4:	2d0c      	cmp	r5, #12
 8004ee6:	bf38      	it	cc
 8004ee8:	250c      	movcc	r5, #12
 8004eea:	4638      	mov	r0, r7
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7ff ffa5 	bl	8004e3c <sbrk_aligned>
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d02b      	beq.n	8004f4e <_malloc_r+0xd2>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	442b      	add	r3, r5
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	e00e      	b.n	8004f1c <_malloc_r+0xa0>
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	1b52      	subs	r2, r2, r5
 8004f02:	d41e      	bmi.n	8004f42 <_malloc_r+0xc6>
 8004f04:	2a0b      	cmp	r2, #11
 8004f06:	d916      	bls.n	8004f36 <_malloc_r+0xba>
 8004f08:	1961      	adds	r1, r4, r5
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	6025      	str	r5, [r4, #0]
 8004f0e:	bf18      	it	ne
 8004f10:	6059      	strne	r1, [r3, #4]
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	bf08      	it	eq
 8004f16:	6031      	streq	r1, [r6, #0]
 8004f18:	5162      	str	r2, [r4, r5]
 8004f1a:	604b      	str	r3, [r1, #4]
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f104 060b 	add.w	r6, r4, #11
 8004f22:	f000 f865 	bl	8004ff0 <__malloc_unlock>
 8004f26:	f026 0607 	bic.w	r6, r6, #7
 8004f2a:	1d23      	adds	r3, r4, #4
 8004f2c:	1af2      	subs	r2, r6, r3
 8004f2e:	d0b6      	beq.n	8004e9e <_malloc_r+0x22>
 8004f30:	1b9b      	subs	r3, r3, r6
 8004f32:	50a3      	str	r3, [r4, r2]
 8004f34:	e7b3      	b.n	8004e9e <_malloc_r+0x22>
 8004f36:	6862      	ldr	r2, [r4, #4]
 8004f38:	42a3      	cmp	r3, r4
 8004f3a:	bf0c      	ite	eq
 8004f3c:	6032      	streq	r2, [r6, #0]
 8004f3e:	605a      	strne	r2, [r3, #4]
 8004f40:	e7ec      	b.n	8004f1c <_malloc_r+0xa0>
 8004f42:	4623      	mov	r3, r4
 8004f44:	6864      	ldr	r4, [r4, #4]
 8004f46:	e7b2      	b.n	8004eae <_malloc_r+0x32>
 8004f48:	4634      	mov	r4, r6
 8004f4a:	6876      	ldr	r6, [r6, #4]
 8004f4c:	e7b9      	b.n	8004ec2 <_malloc_r+0x46>
 8004f4e:	230c      	movs	r3, #12
 8004f50:	4638      	mov	r0, r7
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	f000 f84c 	bl	8004ff0 <__malloc_unlock>
 8004f58:	e7a1      	b.n	8004e9e <_malloc_r+0x22>
 8004f5a:	6025      	str	r5, [r4, #0]
 8004f5c:	e7de      	b.n	8004f1c <_malloc_r+0xa0>
 8004f5e:	bf00      	nop
 8004f60:	20000688 	.word	0x20000688

08004f64 <_realloc_r>:
 8004f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f68:	4680      	mov	r8, r0
 8004f6a:	4614      	mov	r4, r2
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	b921      	cbnz	r1, 8004f7a <_realloc_r+0x16>
 8004f70:	4611      	mov	r1, r2
 8004f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	f7ff bf81 	b.w	8004e7c <_malloc_r>
 8004f7a:	b92a      	cbnz	r2, 8004f88 <_realloc_r+0x24>
 8004f7c:	f7ff ff16 	bl	8004dac <_free_r>
 8004f80:	4625      	mov	r5, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f88:	f000 f838 	bl	8004ffc <_malloc_usable_size_r>
 8004f8c:	4284      	cmp	r4, r0
 8004f8e:	4607      	mov	r7, r0
 8004f90:	d802      	bhi.n	8004f98 <_realloc_r+0x34>
 8004f92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f96:	d812      	bhi.n	8004fbe <_realloc_r+0x5a>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff ff6e 	bl	8004e7c <_malloc_r>
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d0ed      	beq.n	8004f82 <_realloc_r+0x1e>
 8004fa6:	42bc      	cmp	r4, r7
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4631      	mov	r1, r6
 8004fac:	bf28      	it	cs
 8004fae:	463a      	movcs	r2, r7
 8004fb0:	f7ff fed4 	bl	8004d5c <memcpy>
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	f7ff fef8 	bl	8004dac <_free_r>
 8004fbc:	e7e1      	b.n	8004f82 <_realloc_r+0x1e>
 8004fbe:	4635      	mov	r5, r6
 8004fc0:	e7df      	b.n	8004f82 <_realloc_r+0x1e>
	...

08004fc4 <_sbrk_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4d05      	ldr	r5, [pc, #20]	; (8004fe0 <_sbrk_r+0x1c>)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc fbc4 	bl	800175c <_sbrk>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_sbrk_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_sbrk_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000690 	.word	0x20000690

08004fe4 <__malloc_lock>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__malloc_lock+0x8>)
 8004fe6:	f000 b811 	b.w	800500c <__retarget_lock_acquire_recursive>
 8004fea:	bf00      	nop
 8004fec:	20000694 	.word	0x20000694

08004ff0 <__malloc_unlock>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__malloc_unlock+0x8>)
 8004ff2:	f000 b80c 	b.w	800500e <__retarget_lock_release_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	20000694 	.word	0x20000694

08004ffc <_malloc_usable_size_r>:
 8004ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005000:	1f18      	subs	r0, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfbc      	itt	lt
 8005006:	580b      	ldrlt	r3, [r1, r0]
 8005008:	18c0      	addlt	r0, r0, r3
 800500a:	4770      	bx	lr

0800500c <__retarget_lock_acquire_recursive>:
 800500c:	4770      	bx	lr

0800500e <__retarget_lock_release_recursive>:
 800500e:	4770      	bx	lr

08005010 <_init>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr

0800501c <_fini>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr
