
lifOSMQTT_MOVE_LINKER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a9c  0800c10c  0800c10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08011ba8  08011ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fb0  08011fb0  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08011fb0  08011fb0  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011fb0  08011fb0  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fb0  08011fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fb4  08011fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08011fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000013c  080120f4  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080120f4  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dddf  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265d  00000000  00000000  0002df44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000305a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00031428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a5d  00000000  00000000  000321d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ca7  00000000  00000000  0004ac35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e80  00000000  00000000  0005b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e375c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004010  00000000  00000000  000e37ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c10c <__do_global_dtors_aux>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4c05      	ldr	r4, [pc, #20]	; (800c124 <__do_global_dtors_aux+0x18>)
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	b933      	cbnz	r3, 800c122 <__do_global_dtors_aux+0x16>
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__do_global_dtors_aux+0x1c>)
 800c116:	b113      	cbz	r3, 800c11e <__do_global_dtors_aux+0x12>
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <__do_global_dtors_aux+0x20>)
 800c11a:	f3af 8000 	nop.w
 800c11e:	2301      	movs	r3, #1
 800c120:	7023      	strb	r3, [r4, #0]
 800c122:	bd10      	pop	{r4, pc}
 800c124:	2000013c 	.word	0x2000013c
 800c128:	00000000 	.word	0x00000000
 800c12c:	08011b90 	.word	0x08011b90

0800c130 <frame_dummy>:
 800c130:	b508      	push	{r3, lr}
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <frame_dummy+0x10>)
 800c134:	b11b      	cbz	r3, 800c13e <frame_dummy+0xe>
 800c136:	4903      	ldr	r1, [pc, #12]	; (800c144 <frame_dummy+0x14>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <frame_dummy+0x18>)
 800c13a:	f3af 8000 	nop.w
 800c13e:	bd08      	pop	{r3, pc}
 800c140:	00000000 	.word	0x00000000
 800c144:	20000140 	.word	0x20000140
 800c148:	08011b90 	.word	0x08011b90

0800c14c <strlen>:
 800c14c:	4603      	mov	r3, r0
 800c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c152:	2a00      	cmp	r2, #0
 800c154:	d1fb      	bne.n	800c14e <strlen+0x2>
 800c156:	1a18      	subs	r0, r3, r0
 800c158:	3801      	subs	r0, #1
 800c15a:	4770      	bx	lr

0800c15c <printUcxoBaratia>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintStr("!");
	HD44780_SetCursor(6, 1);
	HD44780_PrintStr("-_-");
}
void printUcxoBaratia(uint8_t row, uint8_t column){
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	460a      	mov	r2, r1
 800c166:	71fb      	strb	r3, [r7, #7]
 800c168:	4613      	mov	r3, r2
 800c16a:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c16c:	f000 fcde 	bl	800cb2c <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 800c170:	494e      	ldr	r1, [pc, #312]	; (800c2ac <printUcxoBaratia+0x150>)
 800c172:	2001      	movs	r0, #1
 800c174:	f000 fd38 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	79bb      	ldrb	r3, [r7, #6]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fcea 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c184:	2001      	movs	r0, #1
 800c186:	f000 fd58 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 800c18a:	4949      	ldr	r1, [pc, #292]	; (800c2b0 <printUcxoBaratia+0x154>)
 800c18c:	2002      	movs	r0, #2
 800c18e:	f000 fd2b 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c192:	79bb      	ldrb	r3, [r7, #6]
 800c194:	3301      	adds	r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fcdb 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c1a2:	2002      	movs	r0, #2
 800c1a4:	f000 fd49 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 800c1a8:	4942      	ldr	r1, [pc, #264]	; (800c2b4 <printUcxoBaratia+0x158>)
 800c1aa:	2003      	movs	r0, #3
 800c1ac:	f000 fd1c 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c1b0:	79bb      	ldrb	r3, [r7, #6]
 800c1b2:	3302      	adds	r3, #2
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	79fa      	ldrb	r2, [r7, #7]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fccc 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	f000 fd3a 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 800c1c6:	493c      	ldr	r1, [pc, #240]	; (800c2b8 <printUcxoBaratia+0x15c>)
 800c1c8:	2004      	movs	r0, #4
 800c1ca:	f000 fd0d 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c1ce:	79bb      	ldrb	r3, [r7, #6]
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fcbd 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c1de:	2004      	movs	r0, #4
 800c1e0:	f000 fd2b 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800c1e4:	4935      	ldr	r1, [pc, #212]	; (800c2bc <printUcxoBaratia+0x160>)
 800c1e6:	2005      	movs	r0, #5
 800c1e8:	f000 fcfe 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c1ec:	79bb      	ldrb	r3, [r7, #6]
 800c1ee:	3305      	adds	r3, #5
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	79fa      	ldrb	r2, [r7, #7]
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fcae 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c1fc:	2005      	movs	r0, #5
 800c1fe:	f000 fd1c 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800c202:	79bb      	ldrb	r3, [r7, #6]
 800c204:	3306      	adds	r3, #6
 800c206:	b2db      	uxtb	r3, r3
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fca3 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c212:	2004      	movs	r0, #4
 800c214:	f000 fd11 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 800c218:	4929      	ldr	r1, [pc, #164]	; (800c2c0 <printUcxoBaratia+0x164>)
 800c21a:	2006      	movs	r0, #6
 800c21c:	f000 fce4 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c220:	79bb      	ldrb	r3, [r7, #6]
 800c222:	3307      	adds	r3, #7
 800c224:	b2db      	uxtb	r3, r3
 800c226:	79fa      	ldrb	r2, [r7, #7]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fc94 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c230:	2006      	movs	r0, #6
 800c232:	f000 fd02 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800c236:	79bb      	ldrb	r3, [r7, #6]
 800c238:	3308      	adds	r3, #8
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	79fa      	ldrb	r2, [r7, #7]
 800c23e:	4611      	mov	r1, r2
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fc89 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c246:	2004      	movs	r0, #4
 800c248:	f000 fcf7 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 800c24c:	491d      	ldr	r1, [pc, #116]	; (800c2c4 <printUcxoBaratia+0x168>)
 800c24e:	2007      	movs	r0, #7
 800c250:	f000 fcca 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c254:	79bb      	ldrb	r3, [r7, #6]
 800c256:	3309      	adds	r3, #9
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	79fa      	ldrb	r2, [r7, #7]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fc7a 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c264:	2007      	movs	r0, #7
 800c266:	f000 fce8 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 800c26a:	4917      	ldr	r1, [pc, #92]	; (800c2c8 <printUcxoBaratia+0x16c>)
 800c26c:	2008      	movs	r0, #8
 800c26e:	f000 fcbb 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c272:	79bb      	ldrb	r3, [r7, #6]
 800c274:	330a      	adds	r3, #10
 800c276:	b2db      	uxtb	r3, r3
 800c278:	79fa      	ldrb	r2, [r7, #7]
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 fc6b 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c282:	2008      	movs	r0, #8
 800c284:	f000 fcd9 	bl	800cc3a <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 800c288:	79bb      	ldrb	r3, [r7, #6]
 800c28a:	330b      	adds	r3, #11
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	79fa      	ldrb	r2, [r7, #7]
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fc60 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c298:	2004      	movs	r0, #4
 800c29a:	f000 fcce 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c29e:	480b      	ldr	r0, [pc, #44]	; (800c2cc <printUcxoBaratia+0x170>)
 800c2a0:	f000 fcd8 	bl	800cc54 <HD44780_PrintStr>

}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20000008 	.word	0x20000008
 800c2b0:	20000010 	.word	0x20000010
 800c2b4:	20000068 	.word	0x20000068
 800c2b8:	20000020 	.word	0x20000020
 800c2bc:	20000030 	.word	0x20000030
 800c2c0:	20000070 	.word	0x20000070
 800c2c4:	20000058 	.word	0x20000058
 800c2c8:	20000038 	.word	0x20000038
 800c2cc:	08011ba8 	.word	0x08011ba8

0800c2d0 <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	460a      	mov	r2, r1
 800c2da:	71fb      	strb	r3, [r7, #7]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 800c2e0:	f000 fc24 	bl	800cb2c <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800c2e4:	4948      	ldr	r1, [pc, #288]	; (800c408 <printBlansiAraa+0x138>)
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	f000 fc7e 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c2ec:	79fa      	ldrb	r2, [r7, #7]
 800c2ee:	79bb      	ldrb	r3, [r7, #6]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fc30 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	f000 fc9e 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 800c2fe:	4943      	ldr	r1, [pc, #268]	; (800c40c <printBlansiAraa+0x13c>)
 800c300:	2002      	movs	r0, #2
 800c302:	f000 fc71 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c306:	79bb      	ldrb	r3, [r7, #6]
 800c308:	3301      	adds	r3, #1
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	79fa      	ldrb	r2, [r7, #7]
 800c30e:	4611      	mov	r1, r2
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fc21 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c316:	2002      	movs	r0, #2
 800c318:	f000 fc8f 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 800c31c:	493c      	ldr	r1, [pc, #240]	; (800c410 <printBlansiAraa+0x140>)
 800c31e:	2003      	movs	r0, #3
 800c320:	f000 fc62 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c324:	79bb      	ldrb	r3, [r7, #6]
 800c326:	3302      	adds	r3, #2
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	79fa      	ldrb	r2, [r7, #7]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fc12 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c334:	2003      	movs	r0, #3
 800c336:	f000 fc80 	bl	800cc3a <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 800c33a:	79bb      	ldrb	r3, [r7, #6]
 800c33c:	3303      	adds	r3, #3
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	79fa      	ldrb	r2, [r7, #7]
 800c342:	4611      	mov	r1, r2
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fc07 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c34a:	2002      	movs	r0, #2
 800c34c:	f000 fc75 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 800c350:	4930      	ldr	r1, [pc, #192]	; (800c414 <printBlansiAraa+0x144>)
 800c352:	2004      	movs	r0, #4
 800c354:	f000 fc48 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c358:	79bb      	ldrb	r3, [r7, #6]
 800c35a:	3304      	adds	r3, #4
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	79fa      	ldrb	r2, [r7, #7]
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fbf8 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c368:	2004      	movs	r0, #4
 800c36a:	f000 fc66 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 800c36e:	492a      	ldr	r1, [pc, #168]	; (800c418 <printBlansiAraa+0x148>)
 800c370:	2005      	movs	r0, #5
 800c372:	f000 fc39 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c376:	79bb      	ldrb	r3, [r7, #6]
 800c378:	3305      	adds	r3, #5
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	79fa      	ldrb	r2, [r7, #7]
 800c37e:	4611      	mov	r1, r2
 800c380:	4618      	mov	r0, r3
 800c382:	f000 fbe9 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c386:	2005      	movs	r0, #5
 800c388:	f000 fc57 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 800c38c:	4923      	ldr	r1, [pc, #140]	; (800c41c <printBlansiAraa+0x14c>)
 800c38e:	2006      	movs	r0, #6
 800c390:	f000 fc2a 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c394:	79bb      	ldrb	r3, [r7, #6]
 800c396:	3306      	adds	r3, #6
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	79fa      	ldrb	r2, [r7, #7]
 800c39c:	4611      	mov	r1, r2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fbda 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c3a4:	2006      	movs	r0, #6
 800c3a6:	f000 fc48 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 800c3aa:	79bb      	ldrb	r3, [r7, #6]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	79fa      	ldrb	r2, [r7, #7]
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fbcf 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c3ba:	2002      	movs	r0, #2
 800c3bc:	f000 fc3d 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 800c3c0:	4917      	ldr	r1, [pc, #92]	; (800c420 <printBlansiAraa+0x150>)
 800c3c2:	2007      	movs	r0, #7
 800c3c4:	f000 fc10 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 800c3c8:	79bb      	ldrb	r3, [r7, #6]
 800c3ca:	3309      	adds	r3, #9
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	79fa      	ldrb	r2, [r7, #7]
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 fbc0 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c3d8:	2007      	movs	r0, #7
 800c3da:	f000 fc2e 	bl	800cc3a <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 800c3de:	79bb      	ldrb	r3, [r7, #6]
 800c3e0:	330a      	adds	r3, #10
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	79fa      	ldrb	r2, [r7, #7]
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fbb5 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c3ee:	2002      	movs	r0, #2
 800c3f0:	f000 fc23 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c3f4:	2002      	movs	r0, #2
 800c3f6:	f000 fc20 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c3fa:	480a      	ldr	r0, [pc, #40]	; (800c424 <printBlansiAraa+0x154>)
 800c3fc:	f000 fc2a 	bl	800cc54 <HD44780_PrintStr>
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20000030 	.word	0x20000030
 800c40c:	20000020 	.word	0x20000020
 800c410:	20000040 	.word	0x20000040
 800c414:	20000000 	.word	0x20000000
 800c418:	20000008 	.word	0x20000008
 800c41c:	20000038 	.word	0x20000038
 800c420:	20000070 	.word	0x20000070
 800c424:	08011ba8 	.word	0x08011ba8

0800c428 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	460a      	mov	r2, r1
 800c432:	71fb      	strb	r3, [r7, #7]
 800c434:	4613      	mov	r3, r2
 800c436:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c438:	f000 fb78 	bl	800cb2c <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 800c43c:	4959      	ldr	r1, [pc, #356]	; (800c5a4 <printMiadetBarati+0x17c>)
 800c43e:	2001      	movs	r0, #1
 800c440:	f000 fbd2 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c444:	79fa      	ldrb	r2, [r7, #7]
 800c446:	79bb      	ldrb	r3, [r7, #6]
 800c448:	4611      	mov	r1, r2
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 fb84 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c450:	2001      	movs	r0, #1
 800c452:	f000 fbf2 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800c456:	4954      	ldr	r1, [pc, #336]	; (800c5a8 <printMiadetBarati+0x180>)
 800c458:	2002      	movs	r0, #2
 800c45a:	f000 fbc5 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c45e:	79bb      	ldrb	r3, [r7, #6]
 800c460:	3301      	adds	r3, #1
 800c462:	b2db      	uxtb	r3, r3
 800c464:	79fa      	ldrb	r2, [r7, #7]
 800c466:	4611      	mov	r1, r2
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fb75 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c46e:	2002      	movs	r0, #2
 800c470:	f000 fbe3 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800c474:	494d      	ldr	r1, [pc, #308]	; (800c5ac <printMiadetBarati+0x184>)
 800c476:	2003      	movs	r0, #3
 800c478:	f000 fbb6 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c47c:	79bb      	ldrb	r3, [r7, #6]
 800c47e:	3302      	adds	r3, #2
 800c480:	b2db      	uxtb	r3, r3
 800c482:	79fa      	ldrb	r2, [r7, #7]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fb66 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c48c:	2003      	movs	r0, #3
 800c48e:	f000 fbd4 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 800c492:	4947      	ldr	r1, [pc, #284]	; (800c5b0 <printMiadetBarati+0x188>)
 800c494:	2004      	movs	r0, #4
 800c496:	f000 fba7 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c49a:	79bb      	ldrb	r3, [r7, #6]
 800c49c:	3303      	adds	r3, #3
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	79fa      	ldrb	r2, [r7, #7]
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 fb57 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c4aa:	2004      	movs	r0, #4
 800c4ac:	f000 fbc5 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 800c4b0:	4940      	ldr	r1, [pc, #256]	; (800c5b4 <printMiadetBarati+0x18c>)
 800c4b2:	2005      	movs	r0, #5
 800c4b4:	f000 fb98 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 800c4b8:	79bb      	ldrb	r3, [r7, #6]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	79fa      	ldrb	r2, [r7, #7]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fb48 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c4c8:	2005      	movs	r0, #5
 800c4ca:	f000 fbb6 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 800c4ce:	493a      	ldr	r1, [pc, #232]	; (800c5b8 <printMiadetBarati+0x190>)
 800c4d0:	2006      	movs	r0, #6
 800c4d2:	f000 fb89 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c4d6:	79bb      	ldrb	r3, [r7, #6]
 800c4d8:	3305      	adds	r3, #5
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fb39 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c4e6:	2006      	movs	r0, #6
 800c4e8:	f000 fba7 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 800c4ec:	4933      	ldr	r1, [pc, #204]	; (800c5bc <printMiadetBarati+0x194>)
 800c4ee:	2007      	movs	r0, #7
 800c4f0:	f000 fb7a 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c4f4:	79bb      	ldrb	r3, [r7, #6]
 800c4f6:	3307      	adds	r3, #7
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	79fa      	ldrb	r2, [r7, #7]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fb2a 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c504:	2007      	movs	r0, #7
 800c506:	f000 fb98 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 800c50a:	79bb      	ldrb	r3, [r7, #6]
 800c50c:	3308      	adds	r3, #8
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	79fa      	ldrb	r2, [r7, #7]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fb1f 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c51a:	2003      	movs	r0, #3
 800c51c:	f000 fb8d 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 800c520:	4927      	ldr	r1, [pc, #156]	; (800c5c0 <printMiadetBarati+0x198>)
 800c522:	2008      	movs	r0, #8
 800c524:	f000 fb60 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c528:	79bb      	ldrb	r3, [r7, #6]
 800c52a:	3309      	adds	r3, #9
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	79fa      	ldrb	r2, [r7, #7]
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f000 fb10 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c538:	2008      	movs	r0, #8
 800c53a:	f000 fb7e 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c53e:	79bb      	ldrb	r3, [r7, #6]
 800c540:	330a      	adds	r3, #10
 800c542:	b2db      	uxtb	r3, r3
 800c544:	79fa      	ldrb	r2, [r7, #7]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 fb05 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c54e:	2003      	movs	r0, #3
 800c550:	f000 fb73 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800c554:	79bb      	ldrb	r3, [r7, #6]
 800c556:	330b      	adds	r3, #11
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	79fa      	ldrb	r2, [r7, #7]
 800c55c:	4611      	mov	r1, r2
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fafa 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c564:	2006      	movs	r0, #6
 800c566:	f000 fb68 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 800c56a:	79bb      	ldrb	r3, [r7, #6]
 800c56c:	330c      	adds	r3, #12
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	79fa      	ldrb	r2, [r7, #7]
 800c572:	4611      	mov	r1, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f000 faef 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c57a:	2002      	movs	r0, #2
 800c57c:	f000 fb5d 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 800c580:	79bb      	ldrb	r3, [r7, #6]
 800c582:	3302      	adds	r3, #2
 800c584:	b2da      	uxtb	r2, r3
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	3301      	adds	r3, #1
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f000 fae2 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintStr("0.18 GEL");
 800c594:	480b      	ldr	r0, [pc, #44]	; (800c5c4 <printMiadetBarati+0x19c>)
 800c596:	f000 fb5d 	bl	800cc54 <HD44780_PrintStr>


}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000060 	.word	0x20000060
 800c5a8:	20000038 	.word	0x20000038
 800c5ac:	20000020 	.word	0x20000020
 800c5b0:	20000018 	.word	0x20000018
 800c5b4:	20000078 	.word	0x20000078
 800c5b8:	20000058 	.word	0x20000058
 800c5bc:	20000030 	.word	0x20000030
 800c5c0:	20000070 	.word	0x20000070
 800c5c4:	08011bb0 	.word	0x08011bb0

0800c5c8 <prinWarmateba>:

void prinWarmateba(uint8_t row, uint8_t column){
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	71fb      	strb	r3, [r7, #7]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c5d8:	f000 faa8 	bl	800cb2c <HD44780_Clear>
		HD44780_CreateSpecialChar(1, wGeo);
 800c5dc:	4939      	ldr	r1, [pc, #228]	; (800c6c4 <prinWarmateba+0xfc>)
 800c5de:	2001      	movs	r0, #1
 800c5e0:	f000 fb02 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c5e4:	79fa      	ldrb	r2, [r7, #7]
 800c5e6:	79bb      	ldrb	r3, [r7, #6]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fab4 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	f000 fb22 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, aGeo);
 800c5f6:	4934      	ldr	r1, [pc, #208]	; (800c6c8 <prinWarmateba+0x100>)
 800c5f8:	2002      	movs	r0, #2
 800c5fa:	f000 faf5 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c5fe:	79bb      	ldrb	r3, [r7, #6]
 800c600:	3301      	adds	r3, #1
 800c602:	b2db      	uxtb	r3, r3
 800c604:	79fa      	ldrb	r2, [r7, #7]
 800c606:	4611      	mov	r1, r2
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 faa5 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c60e:	2002      	movs	r0, #2
 800c610:	f000 fb13 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, rGeo);
 800c614:	492d      	ldr	r1, [pc, #180]	; (800c6cc <prinWarmateba+0x104>)
 800c616:	2003      	movs	r0, #3
 800c618:	f000 fae6 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c61c:	79bb      	ldrb	r3, [r7, #6]
 800c61e:	3302      	adds	r3, #2
 800c620:	b2db      	uxtb	r3, r3
 800c622:	79fa      	ldrb	r2, [r7, #7]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fa96 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c62c:	2003      	movs	r0, #3
 800c62e:	f000 fb04 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, mGeo);
 800c632:	4927      	ldr	r1, [pc, #156]	; (800c6d0 <prinWarmateba+0x108>)
 800c634:	2004      	movs	r0, #4
 800c636:	f000 fad7 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c63a:	79bb      	ldrb	r3, [r7, #6]
 800c63c:	3303      	adds	r3, #3
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	79fa      	ldrb	r2, [r7, #7]
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f000 fa87 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c64a:	2004      	movs	r0, #4
 800c64c:	f000 faf5 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_PrintSpecialChar(2); // a
 800c650:	2002      	movs	r0, #2
 800c652:	f000 faf2 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, tGeo); //t
 800c656:	491f      	ldr	r1, [pc, #124]	; (800c6d4 <prinWarmateba+0x10c>)
 800c658:	2005      	movs	r0, #5
 800c65a:	f000 fac5 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c65e:	79bb      	ldrb	r3, [r7, #6]
 800c660:	3305      	adds	r3, #5
 800c662:	b2db      	uxtb	r3, r3
 800c664:	79fa      	ldrb	r2, [r7, #7]
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 fa75 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c66e:	2005      	movs	r0, #5
 800c670:	f000 fae3 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, eGeo); //e
 800c674:	4918      	ldr	r1, [pc, #96]	; (800c6d8 <prinWarmateba+0x110>)
 800c676:	2006      	movs	r0, #6
 800c678:	f000 fab6 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+6, row);
 800c67c:	79bb      	ldrb	r3, [r7, #6]
 800c67e:	3306      	adds	r3, #6
 800c680:	b2db      	uxtb	r3, r3
 800c682:	79fa      	ldrb	r2, [r7, #7]
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fa66 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c68c:	2006      	movs	r0, #6
 800c68e:	f000 fad4 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo); //b
 800c692:	4912      	ldr	r1, [pc, #72]	; (800c6dc <prinWarmateba+0x114>)
 800c694:	2007      	movs	r0, #7
 800c696:	f000 faa7 	bl	800cbe8 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c69a:	79bb      	ldrb	r3, [r7, #6]
 800c69c:	3307      	adds	r3, #7
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	79fa      	ldrb	r2, [r7, #7]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 fa57 	bl	800cb58 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c6aa:	2007      	movs	r0, #7
 800c6ac:	f000 fac5 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_PrintSpecialChar(2);
 800c6b0:	2002      	movs	r0, #2
 800c6b2:	f000 fac2 	bl	800cc3a <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c6b6:	480a      	ldr	r0, [pc, #40]	; (800c6e0 <prinWarmateba+0x118>)
 800c6b8:	f000 facc 	bl	800cc54 <HD44780_PrintStr>

}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20000080 	.word	0x20000080
 800c6c8:	20000020 	.word	0x20000020
 800c6cc:	20000070 	.word	0x20000070
 800c6d0:	20000060 	.word	0x20000060
 800c6d4:	20000058 	.word	0x20000058
 800c6d8:	20000078 	.word	0x20000078
 800c6dc:	20000030 	.word	0x20000030
 800c6e0:	08011ba8 	.word	0x08011ba8

0800c6e4 <printShecdoma>:
void printShecdoma(uint8_t row, uint8_t column){
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	460a      	mov	r2, r1
 800c6ee:	71fb      	strb	r3, [r7, #7]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c6f4:	f000 fa1a 	bl	800cb2c <HD44780_Clear>
	HD44780_CreateSpecialChar(1, SGeo);
 800c6f8:	493a      	ldr	r1, [pc, #232]	; (800c7e4 <printShecdoma+0x100>)
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	f000 fa74 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c700:	79fa      	ldrb	r2, [r7, #7]
 800c702:	79bb      	ldrb	r3, [r7, #6]
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fa26 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c70c:	2001      	movs	r0, #1
 800c70e:	f000 fa94 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, eGeo);
 800c712:	4935      	ldr	r1, [pc, #212]	; (800c7e8 <printShecdoma+0x104>)
 800c714:	2002      	movs	r0, #2
 800c716:	f000 fa67 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c71a:	79bb      	ldrb	r3, [r7, #6]
 800c71c:	3301      	adds	r3, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	79fa      	ldrb	r2, [r7, #7]
 800c722:	4611      	mov	r1, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fa17 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c72a:	2002      	movs	r0, #2
 800c72c:	f000 fa85 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, cGeo);
 800c730:	492e      	ldr	r1, [pc, #184]	; (800c7ec <printShecdoma+0x108>)
 800c732:	2003      	movs	r0, #3
 800c734:	f000 fa58 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c738:	79bb      	ldrb	r3, [r7, #6]
 800c73a:	3302      	adds	r3, #2
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	79fa      	ldrb	r2, [r7, #7]
 800c740:	4611      	mov	r1, r2
 800c742:	4618      	mov	r0, r3
 800c744:	f000 fa08 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c748:	2003      	movs	r0, #3
 800c74a:	f000 fa76 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800c74e:	4928      	ldr	r1, [pc, #160]	; (800c7f0 <printShecdoma+0x10c>)
 800c750:	2004      	movs	r0, #4
 800c752:	f000 fa49 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c756:	79bb      	ldrb	r3, [r7, #6]
 800c758:	3303      	adds	r3, #3
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	79fa      	ldrb	r2, [r7, #7]
 800c75e:	4611      	mov	r1, r2
 800c760:	4618      	mov	r0, r3
 800c762:	f000 f9f9 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c766:	2004      	movs	r0, #4
 800c768:	f000 fa67 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, oGeo);
 800c76c:	4921      	ldr	r1, [pc, #132]	; (800c7f4 <printShecdoma+0x110>)
 800c76e:	2005      	movs	r0, #5
 800c770:	f000 fa3a 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c774:	79bb      	ldrb	r3, [r7, #6]
 800c776:	3304      	adds	r3, #4
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	79fa      	ldrb	r2, [r7, #7]
 800c77c:	4611      	mov	r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f9ea 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c784:	2005      	movs	r0, #5
 800c786:	f000 fa58 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, mGeo);
 800c78a:	491b      	ldr	r1, [pc, #108]	; (800c7f8 <printShecdoma+0x114>)
 800c78c:	2006      	movs	r0, #6
 800c78e:	f000 fa2b 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c792:	79bb      	ldrb	r3, [r7, #6]
 800c794:	3305      	adds	r3, #5
 800c796:	b2db      	uxtb	r3, r3
 800c798:	79fa      	ldrb	r2, [r7, #7]
 800c79a:	4611      	mov	r1, r2
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 f9db 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c7a2:	2006      	movs	r0, #6
 800c7a4:	f000 fa49 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, aGeo);
 800c7a8:	4914      	ldr	r1, [pc, #80]	; (800c7fc <printShecdoma+0x118>)
 800c7aa:	2007      	movs	r0, #7
 800c7ac:	f000 fa1c 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c7b0:	79bb      	ldrb	r3, [r7, #6]
 800c7b2:	3306      	adds	r3, #6
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	79fa      	ldrb	r2, [r7, #7]
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 f9cc 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c7c0:	2007      	movs	r0, #7
 800c7c2:	f000 fa3a 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c7c6:	79bb      	ldrb	r3, [r7, #6]
 800c7c8:	3307      	adds	r3, #7
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	79fa      	ldrb	r2, [r7, #7]
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 f9c1 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 800c7d6:	480a      	ldr	r0, [pc, #40]	; (800c800 <printShecdoma+0x11c>)
 800c7d8:	f000 fa3c 	bl	800cc54 <HD44780_PrintStr>
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20000028 	.word	0x20000028
 800c7e8:	20000078 	.word	0x20000078
 800c7ec:	20000048 	.word	0x20000048
 800c7f0:	20000018 	.word	0x20000018
 800c7f4:	20000050 	.word	0x20000050
 800c7f8:	20000060 	.word	0x20000060
 800c7fc:	20000020 	.word	0x20000020
 800c800:	08011ba8 	.word	0x08011ba8

0800c804 <printDaicadet>:

void printDaicadet(uint8_t row, uint8_t column){
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	460a      	mov	r2, r1
 800c80e:	71fb      	strb	r3, [r7, #7]
 800c810:	4613      	mov	r3, r2
 800c812:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c814:	f000 f98a 	bl	800cb2c <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 800c818:	493a      	ldr	r1, [pc, #232]	; (800c904 <printDaicadet+0x100>)
 800c81a:	2001      	movs	r0, #1
 800c81c:	f000 f9e4 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c820:	79fa      	ldrb	r2, [r7, #7]
 800c822:	79bb      	ldrb	r3, [r7, #6]
 800c824:	4611      	mov	r1, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f000 f996 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c82c:	2001      	movs	r0, #1
 800c82e:	f000 fa04 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800c832:	4935      	ldr	r1, [pc, #212]	; (800c908 <printDaicadet+0x104>)
 800c834:	2002      	movs	r0, #2
 800c836:	f000 f9d7 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c83a:	79bb      	ldrb	r3, [r7, #6]
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	79fa      	ldrb	r2, [r7, #7]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f000 f987 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c84a:	2002      	movs	r0, #2
 800c84c:	f000 f9f5 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800c850:	492e      	ldr	r1, [pc, #184]	; (800c90c <printDaicadet+0x108>)
 800c852:	2003      	movs	r0, #3
 800c854:	f000 f9c8 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c858:	79bb      	ldrb	r3, [r7, #6]
 800c85a:	3302      	adds	r3, #2
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	79fa      	ldrb	r2, [r7, #7]
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f978 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c868:	2003      	movs	r0, #3
 800c86a:	f000 f9e6 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800c86e:	4928      	ldr	r1, [pc, #160]	; (800c910 <printDaicadet+0x10c>)
 800c870:	2004      	movs	r0, #4
 800c872:	f000 f9b9 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c876:	79bb      	ldrb	r3, [r7, #6]
 800c878:	3303      	adds	r3, #3
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	79fa      	ldrb	r2, [r7, #7]
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f000 f969 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c886:	2004      	movs	r0, #4
 800c888:	f000 f9d7 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c88c:	79bb      	ldrb	r3, [r7, #6]
 800c88e:	3304      	adds	r3, #4
 800c890:	b2db      	uxtb	r3, r3
 800c892:	79fa      	ldrb	r2, [r7, #7]
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f95e 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c89c:	2002      	movs	r0, #2
 800c89e:	f000 f9cc 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c8a2:	79bb      	ldrb	r3, [r7, #6]
 800c8a4:	3305      	adds	r3, #5
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	79fa      	ldrb	r2, [r7, #7]
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 f953 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	f000 f9c1 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 800c8b8:	4916      	ldr	r1, [pc, #88]	; (800c914 <printDaicadet+0x110>)
 800c8ba:	2005      	movs	r0, #5
 800c8bc:	f000 f994 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c8c0:	79bb      	ldrb	r3, [r7, #6]
 800c8c2:	3306      	adds	r3, #6
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	79fa      	ldrb	r2, [r7, #7]
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 f944 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c8d0:	2005      	movs	r0, #5
 800c8d2:	f000 f9b2 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 800c8d6:	4910      	ldr	r1, [pc, #64]	; (800c918 <printDaicadet+0x114>)
 800c8d8:	2006      	movs	r0, #6
 800c8da:	f000 f985 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c8de:	79bb      	ldrb	r3, [r7, #6]
 800c8e0:	3307      	adds	r3, #7
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	79fa      	ldrb	r2, [r7, #7]
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 f935 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c8ee:	2006      	movs	r0, #6
 800c8f0:	f000 f9a3 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c8f4:	4809      	ldr	r0, [pc, #36]	; (800c91c <printDaicadet+0x118>)
 800c8f6:	f000 f9ad 	bl	800cc54 <HD44780_PrintStr>
}
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20000018 	.word	0x20000018
 800c908:	20000020 	.word	0x20000020
 800c90c:	20000038 	.word	0x20000038
 800c910:	20000048 	.word	0x20000048
 800c914:	20000078 	.word	0x20000078
 800c918:	20000058 	.word	0x20000058
 800c91c:	08011ba8 	.word	0x08011ba8

0800c920 <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	460a      	mov	r2, r1
 800c92a:	71fb      	strb	r3, [r7, #7]
 800c92c:	4613      	mov	r3, r2
 800c92e:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c930:	f000 f8fc 	bl	800cb2c <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 800c934:	4934      	ldr	r1, [pc, #208]	; (800ca08 <printBalansi+0xe8>)
 800c936:	2001      	movs	r0, #1
 800c938:	f000 f956 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c93c:	79fa      	ldrb	r2, [r7, #7]
 800c93e:	79bb      	ldrb	r3, [r7, #6]
 800c940:	4611      	mov	r1, r2
 800c942:	4618      	mov	r0, r3
 800c944:	f000 f908 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c948:	2001      	movs	r0, #1
 800c94a:	f000 f976 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800c94e:	492f      	ldr	r1, [pc, #188]	; (800ca0c <printBalansi+0xec>)
 800c950:	2002      	movs	r0, #2
 800c952:	f000 f949 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c956:	79bb      	ldrb	r3, [r7, #6]
 800c958:	3301      	adds	r3, #1
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	79fa      	ldrb	r2, [r7, #7]
 800c95e:	4611      	mov	r1, r2
 800c960:	4618      	mov	r0, r3
 800c962:	f000 f8f9 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c966:	2002      	movs	r0, #2
 800c968:	f000 f967 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 800c96c:	4928      	ldr	r1, [pc, #160]	; (800ca10 <printBalansi+0xf0>)
 800c96e:	2003      	movs	r0, #3
 800c970:	f000 f93a 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c974:	79bb      	ldrb	r3, [r7, #6]
 800c976:	3302      	adds	r3, #2
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	79fa      	ldrb	r2, [r7, #7]
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 f8ea 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c984:	2003      	movs	r0, #3
 800c986:	f000 f958 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c98a:	2002      	movs	r0, #2
 800c98c:	f000 f955 	bl	800cc3a <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c990:	79bb      	ldrb	r3, [r7, #6]
 800c992:	3303      	adds	r3, #3
 800c994:	b2db      	uxtb	r3, r3
 800c996:	79fa      	ldrb	r2, [r7, #7]
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f000 f8dc 	bl	800cb58 <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 800c9a0:	491c      	ldr	r1, [pc, #112]	; (800ca14 <printBalansi+0xf4>)
 800c9a2:	2005      	movs	r0, #5
 800c9a4:	f000 f920 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c9a8:	79bb      	ldrb	r3, [r7, #6]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	79fa      	ldrb	r2, [r7, #7]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 f8d0 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c9b8:	2005      	movs	r0, #5
 800c9ba:	f000 f93e 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 800c9be:	4916      	ldr	r1, [pc, #88]	; (800ca18 <printBalansi+0xf8>)
 800c9c0:	2006      	movs	r0, #6
 800c9c2:	f000 f911 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c9c6:	79bb      	ldrb	r3, [r7, #6]
 800c9c8:	3305      	adds	r3, #5
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	79fa      	ldrb	r2, [r7, #7]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 f8c1 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c9d6:	2006      	movs	r0, #6
 800c9d8:	f000 f92f 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 800c9dc:	490f      	ldr	r1, [pc, #60]	; (800ca1c <printBalansi+0xfc>)
 800c9de:	2007      	movs	r0, #7
 800c9e0:	f000 f902 	bl	800cbe8 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c9e4:	79bb      	ldrb	r3, [r7, #6]
 800c9e6:	3306      	adds	r3, #6
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	79fa      	ldrb	r2, [r7, #7]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f8b2 	bl	800cb58 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c9f4:	2007      	movs	r0, #7
 800c9f6:	f000 f920 	bl	800cc3a <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 800c9fa:	4809      	ldr	r0, [pc, #36]	; (800ca20 <printBalansi+0x100>)
 800c9fc:	f000 f92a 	bl	800cc54 <HD44780_PrintStr>
}
 800ca00:	bf00      	nop
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20000030 	.word	0x20000030
 800ca0c:	20000020 	.word	0x20000020
 800ca10:	20000040 	.word	0x20000040
 800ca14:	20000000 	.word	0x20000000
 800ca18:	20000008 	.word	0x20000008
 800ca1c:	20000038 	.word	0x20000038
 800ca20:	08011bbc 	.word	0x08011bbc

0800ca24 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800ca2e:	4a38      	ldr	r2, [pc, #224]	; (800cb10 <HD44780_Init+0xec>)
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800ca34:	4b37      	ldr	r3, [pc, #220]	; (800cb14 <HD44780_Init+0xf0>)
 800ca36:	2208      	movs	r2, #8
 800ca38:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800ca3a:	4b37      	ldr	r3, [pc, #220]	; (800cb18 <HD44780_Init+0xf4>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800ca40:	4b33      	ldr	r3, [pc, #204]	; (800cb10 <HD44780_Init+0xec>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d907      	bls.n	800ca58 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800ca48:	4b33      	ldr	r3, [pc, #204]	; (800cb18 <HD44780_Init+0xf4>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	f043 0308 	orr.w	r3, r3, #8
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	4b31      	ldr	r3, [pc, #196]	; (800cb18 <HD44780_Init+0xf4>)
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e006      	b.n	800ca66 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800ca58:	4b2f      	ldr	r3, [pc, #188]	; (800cb18 <HD44780_Init+0xf4>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	f043 0304 	orr.w	r3, r3, #4
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	4b2d      	ldr	r3, [pc, #180]	; (800cb18 <HD44780_Init+0xf4>)
 800ca64:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800ca66:	f000 f993 	bl	800cd90 <DelayInit>
  HAL_Delay(50);
 800ca6a:	2032      	movs	r0, #50	; 0x32
 800ca6c:	f001 fe8a 	bl	800e784 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800ca70:	4b28      	ldr	r3, [pc, #160]	; (800cb14 <HD44780_Init+0xf0>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 f951 	bl	800cd1c <ExpanderWrite>
  HAL_Delay(1000);
 800ca7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ca7e:	f001 fe81 	bl	800e784 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800ca82:	2030      	movs	r0, #48	; 0x30
 800ca84:	f000 f938 	bl	800ccf8 <Write4Bits>
  DelayUS(4500);
 800ca88:	f241 1094 	movw	r0, #4500	; 0x1194
 800ca8c:	f000 f9a8 	bl	800cde0 <DelayUS>

  Write4Bits(0x03 << 4);
 800ca90:	2030      	movs	r0, #48	; 0x30
 800ca92:	f000 f931 	bl	800ccf8 <Write4Bits>
  DelayUS(4500);
 800ca96:	f241 1094 	movw	r0, #4500	; 0x1194
 800ca9a:	f000 f9a1 	bl	800cde0 <DelayUS>

  Write4Bits(0x03 << 4);
 800ca9e:	2030      	movs	r0, #48	; 0x30
 800caa0:	f000 f92a 	bl	800ccf8 <Write4Bits>
  DelayUS(4500);
 800caa4:	f241 1094 	movw	r0, #4500	; 0x1194
 800caa8:	f000 f99a 	bl	800cde0 <DelayUS>

  Write4Bits(0x02 << 4);
 800caac:	2020      	movs	r0, #32
 800caae:	f000 f923 	bl	800ccf8 <Write4Bits>
  DelayUS(100);
 800cab2:	2064      	movs	r0, #100	; 0x64
 800cab4:	f000 f994 	bl	800cde0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800cab8:	4b17      	ldr	r3, [pc, #92]	; (800cb18 <HD44780_Init+0xf4>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f043 0320 	orr.w	r3, r3, #32
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f8db 	bl	800cc7e <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800cac8:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <HD44780_Init+0xf8>)
 800caca:	2204      	movs	r2, #4
 800cacc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800cace:	f000 f875 	bl	800cbbc <HD44780_Display>
  HD44780_Clear();
 800cad2:	f000 f82b 	bl	800cb2c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800cad6:	4b12      	ldr	r3, [pc, #72]	; (800cb20 <HD44780_Init+0xfc>)
 800cad8:	2202      	movs	r2, #2
 800cada:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800cadc:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <HD44780_Init+0xfc>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	f043 0304 	orr.w	r3, r3, #4
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f8c9 	bl	800cc7e <SendCommand>
  DelayUS(4500);
 800caec:	f241 1094 	movw	r0, #4500	; 0x1194
 800caf0:	f000 f976 	bl	800cde0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800caf4:	490b      	ldr	r1, [pc, #44]	; (800cb24 <HD44780_Init+0x100>)
 800caf6:	2000      	movs	r0, #0
 800caf8:	f000 f876 	bl	800cbe8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800cafc:	490a      	ldr	r1, [pc, #40]	; (800cb28 <HD44780_Init+0x104>)
 800cafe:	2001      	movs	r0, #1
 800cb00:	f000 f872 	bl	800cbe8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800cb04:	f000 f81d 	bl	800cb42 <HD44780_Home>
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	2000015b 	.word	0x2000015b
 800cb14:	2000015c 	.word	0x2000015c
 800cb18:	20000158 	.word	0x20000158
 800cb1c:	20000159 	.word	0x20000159
 800cb20:	2000015a 	.word	0x2000015a
 800cb24:	20000088 	.word	0x20000088
 800cb28:	20000090 	.word	0x20000090

0800cb2c <HD44780_Clear>:

void HD44780_Clear()
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800cb30:	2001      	movs	r0, #1
 800cb32:	f000 f8a4 	bl	800cc7e <SendCommand>
  DelayUS(2000);
 800cb36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb3a:	f000 f951 	bl	800cde0 <DelayUS>
}
 800cb3e:	bf00      	nop
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <HD44780_Home>:

void HD44780_Home()
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800cb46:	2002      	movs	r0, #2
 800cb48:	f000 f899 	bl	800cc7e <SendCommand>
  DelayUS(2000);
 800cb4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb50:	f000 f946 	bl	800cde0 <DelayUS>
}
 800cb54:	bf00      	nop
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800cb58:	b590      	push	{r4, r7, lr}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	460a      	mov	r2, r1
 800cb62:	71fb      	strb	r3, [r7, #7]
 800cb64:	4613      	mov	r3, r2
 800cb66:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800cb68:	4b12      	ldr	r3, [pc, #72]	; (800cbb4 <HD44780_SetCursor+0x5c>)
 800cb6a:	f107 0408 	add.w	r4, r7, #8
 800cb6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800cb74:	4b10      	ldr	r3, [pc, #64]	; (800cbb8 <HD44780_SetCursor+0x60>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	79ba      	ldrb	r2, [r7, #6]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d303      	bcc.n	800cb86 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800cb7e:	4b0e      	ldr	r3, [pc, #56]	; (800cbb8 <HD44780_SetCursor+0x60>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800cb86:	79bb      	ldrb	r3, [r7, #6]
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	3318      	adds	r3, #24
 800cb8c:	443b      	add	r3, r7
 800cb8e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	4413      	add	r3, r2
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	b25b      	sxtb	r3, r3
 800cb9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cba0:	b25b      	sxtb	r3, r3
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 f86a 	bl	800cc7e <SendCommand>
}
 800cbaa:	bf00      	nop
 800cbac:	371c      	adds	r7, #28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd90      	pop	{r4, r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	08011bc0 	.word	0x08011bc0
 800cbb8:	2000015b 	.word	0x2000015b

0800cbbc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800cbc0:	4b08      	ldr	r3, [pc, #32]	; (800cbe4 <HD44780_Display+0x28>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	f043 0304 	orr.w	r3, r3, #4
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <HD44780_Display+0x28>)
 800cbcc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800cbce:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <HD44780_Display+0x28>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	f043 0308 	orr.w	r3, r3, #8
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f850 	bl	800cc7e <SendCommand>
}
 800cbde:	bf00      	nop
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000159 	.word	0x20000159

0800cbe8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	6039      	str	r1, [r7, #0]
 800cbf2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800cbf4:	79fb      	ldrb	r3, [r7, #7]
 800cbf6:	f003 0307 	and.w	r3, r3, #7
 800cbfa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	b25b      	sxtb	r3, r3
 800cc02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc06:	b25b      	sxtb	r3, r3
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f837 	bl	800cc7e <SendCommand>
  for (int i=0; i<8; i++)
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]
 800cc14:	e009      	b.n	800cc2a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 f83b 	bl	800cc9a <SendChar>
  for (int i=0; i<8; i++)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2b07      	cmp	r3, #7
 800cc2e:	ddf2      	ble.n	800cc16 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800cc30:	bf00      	nop
 800cc32:	bf00      	nop
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	4603      	mov	r3, r0
 800cc42:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 f827 	bl	800cc9a <SendChar>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800cc5c:	e006      	b.n	800cc6c <HD44780_PrintStr+0x18>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 f817 	bl	800cc9a <SendChar>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1f4      	bne.n	800cc5e <HD44780_PrintStr+0xa>
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	4603      	mov	r3, r0
 800cc86:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 f812 	bl	800ccb6 <Send>
}
 800cc92:	bf00      	nop
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <SendChar>:

static void SendChar(uint8_t ch)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	4603      	mov	r3, r0
 800cca2:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	2101      	movs	r1, #1
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 f804 	bl	800ccb6 <Send>
}
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	460a      	mov	r2, r1
 800ccc0:	71fb      	strb	r3, [r7, #7]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	f023 030f 	bic.w	r3, r3, #15
 800cccc:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800ccce:	79fb      	ldrb	r3, [r7, #7]
 800ccd0:	011b      	lsls	r3, r3, #4
 800ccd2:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800ccd4:	7bfa      	ldrb	r2, [r7, #15]
 800ccd6:	79bb      	ldrb	r3, [r7, #6]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 f80b 	bl	800ccf8 <Write4Bits>
  Write4Bits((lownib)|mode);
 800cce2:	7bba      	ldrb	r2, [r7, #14]
 800cce4:	79bb      	ldrb	r3, [r7, #6]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 f804 	bl	800ccf8 <Write4Bits>
}
 800ccf0:	bf00      	nop
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 f809 	bl	800cd1c <ExpanderWrite>
  PulseEnable(value);
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 f821 	bl	800cd54 <PulseEnable>
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	4603      	mov	r3, r0
 800cd24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <ExpanderWrite+0x30>)
 800cd28:	781a      	ldrb	r2, [r3, #0]
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800cd32:	f107 020f 	add.w	r2, r7, #15
 800cd36:	230a      	movs	r3, #10
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	214e      	movs	r1, #78	; 0x4e
 800cd3e:	4804      	ldr	r0, [pc, #16]	; (800cd50 <ExpanderWrite+0x34>)
 800cd40:	f002 f9fc 	bl	800f13c <HAL_I2C_Master_Transmit>
}
 800cd44:	bf00      	nop
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	2000015c 	.word	0x2000015c
 800cd50:	20000358 	.word	0x20000358

0800cd54 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	f043 0304 	orr.w	r3, r3, #4
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff ffd8 	bl	800cd1c <ExpanderWrite>
  DelayUS(20);
 800cd6c:	2014      	movs	r0, #20
 800cd6e:	f000 f837 	bl	800cde0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	f023 0304 	bic.w	r3, r3, #4
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff ffce 	bl	800cd1c <ExpanderWrite>
  DelayUS(20);
 800cd80:	2014      	movs	r0, #20
 800cd82:	f000 f82d 	bl	800cde0 <DelayUS>
}
 800cd86:	bf00      	nop
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
	...

0800cd90 <DelayInit>:

static void DelayInit(void)
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800cd94:	4b10      	ldr	r3, [pc, #64]	; (800cdd8 <DelayInit+0x48>)
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	4a0f      	ldr	r2, [pc, #60]	; (800cdd8 <DelayInit+0x48>)
 800cd9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd9e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800cda0:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <DelayInit+0x48>)
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	4a0c      	ldr	r2, [pc, #48]	; (800cdd8 <DelayInit+0x48>)
 800cda6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdaa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800cdac:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <DelayInit+0x4c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a0a      	ldr	r2, [pc, #40]	; (800cddc <DelayInit+0x4c>)
 800cdb2:	f023 0301 	bic.w	r3, r3, #1
 800cdb6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800cdb8:	4b08      	ldr	r3, [pc, #32]	; (800cddc <DelayInit+0x4c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a07      	ldr	r2, [pc, #28]	; (800cddc <DelayInit+0x4c>)
 800cdbe:	f043 0301 	orr.w	r3, r3, #1
 800cdc2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800cdc4:	4b05      	ldr	r3, [pc, #20]	; (800cddc <DelayInit+0x4c>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800cdca:	bf00      	nop
  __ASM volatile ("NOP");
 800cdcc:	bf00      	nop
  __ASM volatile ("NOP");
 800cdce:	bf00      	nop
}
 800cdd0:	bf00      	nop
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bc80      	pop	{r7}
 800cdd6:	4770      	bx	lr
 800cdd8:	e000edf0 	.word	0xe000edf0
 800cddc:	e0001000 	.word	0xe0001000

0800cde0 <DelayUS>:

static void DelayUS(uint32_t us) {
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800cde8:	4b0d      	ldr	r3, [pc, #52]	; (800ce20 <DelayUS+0x40>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a0d      	ldr	r2, [pc, #52]	; (800ce24 <DelayUS+0x44>)
 800cdee:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf2:	0c9a      	lsrs	r2, r3, #18
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	fb02 f303 	mul.w	r3, r2, r3
 800cdfa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <DelayUS+0x48>)
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800ce02:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <DelayUS+0x48>)
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d8f6      	bhi.n	800ce02 <DelayUS+0x22>
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bc80      	pop	{r7}
 800ce1e:	4770      	bx	lr
 800ce20:	200000cc 	.word	0x200000cc
 800ce24:	431bde83 	.word	0x431bde83
 800ce28:	e0001000 	.word	0xe0001000

0800ce2c <HAL_UART_RxCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]

	if(count >= 124){
 800ce34:	4b11      	ldr	r3, [pc, #68]	; (800ce7c <HAL_UART_RxCpltCallback+0x50>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b7b      	cmp	r3, #123	; 0x7b
 800ce3a:	dd02      	ble.n	800ce42 <HAL_UART_RxCpltCallback+0x16>
		count = 0;
 800ce3c:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <HAL_UART_RxCpltCallback+0x50>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
	}

	if(buffer[count] != '!'){
 800ce42:	4b0e      	ldr	r3, [pc, #56]	; (800ce7c <HAL_UART_RxCpltCallback+0x50>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a0e      	ldr	r2, [pc, #56]	; (800ce80 <HAL_UART_RxCpltCallback+0x54>)
 800ce48:	5cd3      	ldrb	r3, [r2, r3]
 800ce4a:	2b21      	cmp	r3, #33	; 0x21
 800ce4c:	d00e      	beq.n	800ce6c <HAL_UART_RxCpltCallback+0x40>

		count++;
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <HAL_UART_RxCpltCallback+0x50>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3301      	adds	r3, #1
 800ce54:	4a09      	ldr	r2, [pc, #36]	; (800ce7c <HAL_UART_RxCpltCallback+0x50>)
 800ce56:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800ce58:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <HAL_UART_RxCpltCallback+0x50>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a08      	ldr	r2, [pc, #32]	; (800ce80 <HAL_UART_RxCpltCallback+0x54>)
 800ce5e:	4413      	add	r3, r2
 800ce60:	2201      	movs	r2, #1
 800ce62:	4619      	mov	r1, r3
 800ce64:	4807      	ldr	r0, [pc, #28]	; (800ce84 <HAL_UART_RxCpltCallback+0x58>)
 800ce66:	f003 fcce 	bl	8010806 <HAL_UART_Receive_IT>
	}
	else{
		readSatus = 1;
	}

}
 800ce6a:	e002      	b.n	800ce72 <HAL_UART_RxCpltCallback+0x46>
		readSatus = 1;
 800ce6c:	4b06      	ldr	r3, [pc, #24]	; (800ce88 <HAL_UART_RxCpltCallback+0x5c>)
 800ce6e:	2201      	movs	r2, #1
 800ce70:	701a      	strb	r2, [r3, #0]
}
 800ce72:	bf00      	nop
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000354 	.word	0x20000354
 800ce80:	20000270 	.word	0x20000270
 800ce84:	20000404 	.word	0x20000404
 800ce88:	2000016c 	.word	0x2000016c

0800ce8c <takeStatus>:
void readCardData(uint8_t* finalData);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);



int takeStatus(uint8_t* data, int length){
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =5; i< length; i++){
 800ce96:	2305      	movs	r3, #5
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	e008      	b.n	800ceae <takeStatus+0x22>
	  if(data[i] == '<')
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	4413      	add	r3, r2
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b3c      	cmp	r3, #60	; 0x3c
 800cea6:	d007      	beq.n	800ceb8 <takeStatus+0x2c>
	for(i =5; i< length; i++){
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	dbf2      	blt.n	800ce9c <takeStatus+0x10>
 800ceb6:	e000      	b.n	800ceba <takeStatus+0x2e>
	  {
		  break;
 800ceb8:	bf00      	nop
	  }
	}
	STATUSSTR[0] = data[i+1];
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	3301      	adds	r3, #1
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	4413      	add	r3, r2
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	3302      	adds	r3, #2
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	3303      	adds	r3, #3
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	4413      	add	r3, r2
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	73bb      	strb	r3, [r7, #14]
	if(STATUSSTR[0] == 'E' && STATUSSTR[1] == 'R' && STATUSSTR[2] == 'A'){
 800cede:	7b3b      	ldrb	r3, [r7, #12]
 800cee0:	2b45      	cmp	r3, #69	; 0x45
 800cee2:	d109      	bne.n	800cef8 <takeStatus+0x6c>
 800cee4:	7b7b      	ldrb	r3, [r7, #13]
 800cee6:	2b52      	cmp	r3, #82	; 0x52
 800cee8:	d106      	bne.n	800cef8 <takeStatus+0x6c>
 800ceea:	7bbb      	ldrb	r3, [r7, #14]
 800ceec:	2b41      	cmp	r3, #65	; 0x41
 800ceee:	d103      	bne.n	800cef8 <takeStatus+0x6c>
		jumpToAddress(resetAddress);
 800cef0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800cef4:	f000 fc7b 	bl	800d7ee <jumpToAddress>
	}
	int Status = atoi((char*)STATUSSTR);
 800cef8:	f107 030c 	add.w	r3, r7, #12
 800cefc:	4618      	mov	r0, r3
 800cefe:	f004 f8db 	bl	80110b8 <atoi>
 800cf02:	6138      	str	r0, [r7, #16]
	return Status;
 800cf04:	693b      	ldr	r3, [r7, #16]

}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3718      	adds	r7, #24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <takeData>:
void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b088      	sub	sp, #32
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	607a      	str	r2, [r7, #4]
	int i,j,l;
	for(i =5; i< length; i++){
 800cf1a:	2305      	movs	r3, #5
 800cf1c:	61fb      	str	r3, [r7, #28]
 800cf1e:	e008      	b.n	800cf32 <takeData+0x24>
	  if(data[i] == '<')
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	4413      	add	r3, r2
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b3c      	cmp	r3, #60	; 0x3c
 800cf2a:	d007      	beq.n	800cf3c <takeData+0x2e>
	for(i =5; i< length; i++){
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	61fb      	str	r3, [r7, #28]
 800cf32:	69fa      	ldr	r2, [r7, #28]
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	dbf2      	blt.n	800cf20 <takeData+0x12>
 800cf3a:	e000      	b.n	800cf3e <takeData+0x30>
	  {
		  break;
 800cf3c:	bf00      	nop
	  }
	}
	for(j = i; j< length; j++){
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	e008      	b.n	800cf56 <takeData+0x48>
	  if(data[j] == ',')
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	4413      	add	r3, r2
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b2c      	cmp	r3, #44	; 0x2c
 800cf4e:	d007      	beq.n	800cf60 <takeData+0x52>
	for(j = i; j< length; j++){
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	3301      	adds	r3, #1
 800cf54:	61bb      	str	r3, [r7, #24]
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	dbf2      	blt.n	800cf44 <takeData+0x36>
 800cf5e:	e000      	b.n	800cf62 <takeData+0x54>
		 {
			  break;
 800cf60:	bf00      	nop
		 }
	}

	for(l = j; l< length; l++){
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e008      	b.n	800cf7a <takeData+0x6c>
	  if(data[l] == '!')
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b21      	cmp	r3, #33	; 0x21
 800cf72:	d007      	beq.n	800cf84 <takeData+0x76>
	for(l = j; l< length; l++){
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	3301      	adds	r3, #1
 800cf78:	617b      	str	r3, [r7, #20]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	dbf2      	blt.n	800cf68 <takeData+0x5a>
 800cf82:	e000      	b.n	800cf86 <takeData+0x78>
		 {
			  break;
 800cf84:	bf00      	nop
		 }
	}

	strncpy((char *)dataToDisplay, (char *)data + j + 1, l - j - 1);
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	18d1      	adds	r1, r2, r3
 800cf8e:	697a      	ldr	r2, [r7, #20]
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	3b01      	subs	r3, #1
 800cf96:	461a      	mov	r2, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f004 f8fe 	bl	801119a <strncpy>


}
 800cf9e:	bf00      	nop
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <insert>:


void insert(uint8_t* main){
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

    int lenght = strlen((char*)main);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff f8cb 	bl	800c14c <strlen>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	61bb      	str	r3, [r7, #24]
    char* operationTypePtr = strstr((char*)main, "\"payment");
 800cfba:	491c      	ldr	r1, [pc, #112]	; (800d02c <insert+0x84>)
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f004 f8ff 	bl	80111c0 <strstr>
 800cfc2:	6178      	str	r0, [r7, #20]
    char* value = strchr((char*)operationTypePtr, 'p');
 800cfc4:	2170      	movs	r1, #112	; 0x70
 800cfc6:	6978      	ldr	r0, [r7, #20]
 800cfc8:	f004 f8da 	bl	8011180 <strchr>
 800cfcc:	6138      	str	r0, [r7, #16]
    int index = value - (char*)main;
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	60fb      	str	r3, [r7, #12]


    for(int i = lenght+4; i>index; i--){
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	e00b      	b.n	800cff6 <insert+0x4e>
        main[i] = main[i - 4];
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	3b04      	subs	r3, #4
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	441a      	add	r2, r3
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	6879      	ldr	r1, [r7, #4]
 800cfea:	440b      	add	r3, r1
 800cfec:	7812      	ldrb	r2, [r2, #0]
 800cfee:	701a      	strb	r2, [r3, #0]
    for(int i = lenght+4; i>index; i--){
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	69fa      	ldr	r2, [r7, #28]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	dcef      	bgt.n	800cfde <insert+0x36>
    }
    char* valueStart = strchr((char*)operationTypePtr, '\"') + 1;
 800cffe:	2122      	movs	r1, #34	; 0x22
 800d000:	6978      	ldr	r0, [r7, #20]
 800d002:	f004 f8bd 	bl	8011180 <strchr>
 800d006:	4603      	mov	r3, r0
 800d008:	3301      	adds	r3, #1
 800d00a:	60bb      	str	r3, [r7, #8]
    strncpy((char*)valueStart, "makepayment", 11);
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	4908      	ldr	r1, [pc, #32]	; (800d030 <insert+0x88>)
 800d010:	461a      	mov	r2, r3
 800d012:	460b      	mov	r3, r1
 800d014:	cb03      	ldmia	r3!, {r0, r1}
 800d016:	6010      	str	r0, [r2, #0]
 800d018:	6051      	str	r1, [r2, #4]
 800d01a:	8819      	ldrh	r1, [r3, #0]
 800d01c:	789b      	ldrb	r3, [r3, #2]
 800d01e:	8111      	strh	r1, [r2, #8]
 800d020:	7293      	strb	r3, [r2, #10]

}
 800d022:	bf00      	nop
 800d024:	3720      	adds	r7, #32
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	08011c00 	.word	0x08011c00
 800d030:	08011c0c 	.word	0x08011c0c

0800d034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b094      	sub	sp, #80	; 0x50
 800d038:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d03a:	b672      	cpsid	i
}
 800d03c:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x800C000;
 800d03e:	4bc5      	ldr	r3, [pc, #788]	; (800d354 <main+0x320>)
 800d040:	4ac5      	ldr	r2, [pc, #788]	; (800d358 <main+0x324>)
 800d042:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800d044:	b662      	cpsie	i
}
 800d046:	bf00      	nop

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800d048:	f001 fb1c 	bl	800e684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d04c:	f000 fa4a 	bl	800d4e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d050:	f000 fb46 	bl	800d6e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800d054:	f000 fa8c 	bl	800d570 <MX_I2C1_Init>
  MX_SPI1_Init();
 800d058:	f000 fab8 	bl	800d5cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800d05c:	f000 faec 	bl	800d638 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d060:	f000 fb14 	bl	800d68c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800d064:	2002      	movs	r0, #2
 800d066:	f7ff fcdd 	bl	800ca24 <HD44780_Init>

  MFRC522_Init();
 800d06a:	f000 fef6 	bl	800de5a <MFRC522_Init>

	uint8_t cardRead = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int CardTime;


  	uint32_t version = *(__IO uint32_t *)versionAdress; // for version check
 800d074:	4bb9      	ldr	r3, [pc, #740]	; (800d35c <main+0x328>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\""STR(currentTerminal)"\",\"firmwareVersion\":%ld}}", version);
 800d07a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d07c:	49b8      	ldr	r1, [pc, #736]	; (800d360 <main+0x32c>)
 800d07e:	48b9      	ldr	r0, [pc, #740]	; (800d364 <main+0x330>)
 800d080:	f004 f85e 	bl	8011140 <siprintf>


  	HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d084:	4bb8      	ldr	r3, [pc, #736]	; (800d368 <main+0x334>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4ab8      	ldr	r2, [pc, #736]	; (800d36c <main+0x338>)
 800d08a:	4413      	add	r3, r2
 800d08c:	2201      	movs	r2, #1
 800d08e:	4619      	mov	r1, r3
 800d090:	48b7      	ldr	r0, [pc, #732]	; (800d370 <main+0x33c>)
 800d092:	f003 fbb8 	bl	8010806 <HAL_UART_Receive_IT>
  	T = HAL_GetTick();
 800d096:	f001 fb6b 	bl	800e770 <HAL_GetTick>
 800d09a:	4603      	mov	r3, r0
 800d09c:	4ab5      	ldr	r2, [pc, #724]	; (800d374 <main+0x340>)
 800d09e:	6013      	str	r3, [r2, #0]
  	 printMiadetBarati(0, 2);
 800d0a0:	2102      	movs	r1, #2
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	f7ff f9c0 	bl	800c428 <printMiadetBarati>
  	 led(1);
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	f001 f881 	bl	800e1b0 <led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cardRead == 1){
 800d0ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d117      	bne.n	800d0e6 <main+0xb2>
		  if(HAL_GetTick() - CardTime >= 20000){
 800d0b6:	f001 fb5b 	bl	800e770 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d90e      	bls.n	800d0e6 <main+0xb2>
			  printShecdoma(0, 4);
 800d0c8:	2104      	movs	r1, #4
 800d0ca:	2000      	movs	r0, #0
 800d0cc:	f7ff fb0a 	bl	800c6e4 <printShecdoma>
			  HAL_Delay(3000);
 800d0d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d0d4:	f001 fb56 	bl	800e784 <HAL_Delay>
			  printMiadetBarati(0, 2);
 800d0d8:	2102      	movs	r1, #2
 800d0da:	2000      	movs	r0, #0
 800d0dc:	f7ff f9a4 	bl	800c428 <printMiadetBarati>
			  cardRead = 0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }

	  }
	  if(HAL_GetTick() - T >= 2*(60000) && cardRead == 0){
 800d0e6:	f001 fb43 	bl	800e770 <HAL_GetTick>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	4ba1      	ldr	r3, [pc, #644]	; (800d374 <main+0x340>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	4aa1      	ldr	r2, [pc, #644]	; (800d378 <main+0x344>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d927      	bls.n	800d148 <main+0x114>
 800d0f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d123      	bne.n	800d148 <main+0x114>

		  if(temp >= check)jumpToAddress(resetAddress); //restart
 800d100:	4b9e      	ldr	r3, [pc, #632]	; (800d37c <main+0x348>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	4b9e      	ldr	r3, [pc, #632]	; (800d380 <main+0x34c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	db03      	blt.n	800d114 <main+0xe0>
 800d10c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800d110:	f000 fb6d 	bl	800d7ee <jumpToAddress>
		  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 800d114:	4893      	ldr	r0, [pc, #588]	; (800d364 <main+0x330>)
 800d116:	f7ff f819 	bl	800c14c <strlen>
 800d11a:	4603      	mov	r3, r0
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fb83 	bl	800d828 <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 800d122:	4890      	ldr	r0, [pc, #576]	; (800d364 <main+0x330>)
 800d124:	f7ff f812 	bl	800c14c <strlen>
 800d128:	4603      	mov	r3, r0
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	2332      	movs	r3, #50	; 0x32
 800d12e:	498d      	ldr	r1, [pc, #564]	; (800d364 <main+0x330>)
 800d130:	488f      	ldr	r0, [pc, #572]	; (800d370 <main+0x33c>)
 800d132:	f003 fad6 	bl	80106e2 <HAL_UART_Transmit>
		  T = HAL_GetTick();
 800d136:	f001 fb1b 	bl	800e770 <HAL_GetTick>
 800d13a:	4603      	mov	r3, r0
 800d13c:	4a8d      	ldr	r2, [pc, #564]	; (800d374 <main+0x340>)
 800d13e:	6013      	str	r3, [r2, #0]
		  temp = check;
 800d140:	4b8f      	ldr	r3, [pc, #572]	; (800d380 <main+0x34c>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a8d      	ldr	r2, [pc, #564]	; (800d37c <main+0x348>)
 800d146:	6013      	str	r3, [r2, #0]
	  }

	  if(readSatus){
 800d148:	4b8e      	ldr	r3, [pc, #568]	; (800d384 <main+0x350>)
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 8153 	beq.w	800d3f8 <main+0x3c4>
		  int Status = takeStatus(buffer, count);
 800d152:	4b85      	ldr	r3, [pc, #532]	; (800d368 <main+0x334>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4619      	mov	r1, r3
 800d158:	4884      	ldr	r0, [pc, #528]	; (800d36c <main+0x338>)
 800d15a:	f7ff fe97 	bl	800ce8c <takeStatus>
 800d15e:	63b8      	str	r0, [r7, #56]	; 0x38
		  uint8_t dispData[50];

		  switch(Status){
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d166:	f280 8115 	bge.w	800d394 <main+0x360>
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800d170:	dc0d      	bgt.n	800d18e <main+0x15a>
 800d172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d174:	2bca      	cmp	r3, #202	; 0xca
 800d176:	d025      	beq.n	800d1c4 <main+0x190>
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	2bca      	cmp	r3, #202	; 0xca
 800d17c:	f300 810a 	bgt.w	800d394 <main+0x360>
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	2bc8      	cmp	r3, #200	; 0xc8
 800d184:	d043      	beq.n	800d20e <main+0x1da>
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	2bc9      	cmp	r3, #201	; 0xc9
 800d18a:	d046      	beq.n	800d21a <main+0x1e6>
 800d18c:	e102      	b.n	800d394 <main+0x360>
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800d194:	2b08      	cmp	r3, #8
 800d196:	f200 80fd 	bhi.w	800d394 <main+0x360>
 800d19a:	a201      	add	r2, pc, #4	; (adr r2, 800d1a0 <main+0x16c>)
 800d19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a0:	0800d293 	.word	0x0800d293
 800d1a4:	0800d395 	.word	0x0800d395
 800d1a8:	0800d263 	.word	0x0800d263
 800d1ac:	0800d395 	.word	0x0800d395
 800d1b0:	0800d395 	.word	0x0800d395
 800d1b4:	0800d2c3 	.word	0x0800d2c3
 800d1b8:	0800d2f3 	.word	0x0800d2f3
 800d1bc:	0800d395 	.word	0x0800d395
 800d1c0:	0800d323 	.word	0x0800d323
		  	  	case 202:
		  	  		HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	4870      	ldr	r0, [pc, #448]	; (800d388 <main+0x354>)
 800d1c8:	f001 fe5a 	bl	800ee80 <HAL_GPIO_TogglePin>
		  	  		AppruveSound();
 800d1cc:	f001 f994 	bl	800e4f8 <AppruveSound>
		  	  	    prinWarmateba(0, 3);
 800d1d0:	2103      	movs	r1, #3
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	f7ff f9f8 	bl	800c5c8 <prinWarmateba>
		  	  		insert(postData);
 800d1d8:	486c      	ldr	r0, [pc, #432]	; (800d38c <main+0x358>)
 800d1da:	f7ff fee5 	bl	800cfa8 <insert>
		  	  		LENGTH = strlen((char*)postData);
 800d1de:	486b      	ldr	r0, [pc, #428]	; (800d38c <main+0x358>)
 800d1e0:	f7fe ffb4 	bl	800c14c <strlen>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	4b69      	ldr	r3, [pc, #420]	; (800d390 <main+0x35c>)
 800d1ea:	601a      	str	r2, [r3, #0]
					MQTTPubToTopic(LENGTH);
 800d1ec:	4b68      	ldr	r3, [pc, #416]	; (800d390 <main+0x35c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 fb19 	bl	800d828 <MQTTPubToTopic>
					HAL_Delay(50);
 800d1f6:	2032      	movs	r0, #50	; 0x32
 800d1f8:	f001 fac4 	bl	800e784 <HAL_Delay>
					HAL_UART_Transmit(&huart1, postData, LENGTH, 10);
 800d1fc:	4b64      	ldr	r3, [pc, #400]	; (800d390 <main+0x35c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	b29a      	uxth	r2, r3
 800d202:	230a      	movs	r3, #10
 800d204:	4961      	ldr	r1, [pc, #388]	; (800d38c <main+0x358>)
 800d206:	485a      	ldr	r0, [pc, #360]	; (800d370 <main+0x33c>)
 800d208:	f003 fa6b 	bl	80106e2 <HAL_UART_Transmit>
		  	  		break;
 800d20c:	e0da      	b.n	800d3c4 <main+0x390>
		  	  	case 200:
		  	  		//AppruveSound();
		  	  		check++;
 800d20e:	4b5c      	ldr	r3, [pc, #368]	; (800d380 <main+0x34c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3301      	adds	r3, #1
 800d214:	4a5a      	ldr	r2, [pc, #360]	; (800d380 <main+0x34c>)
 800d216:	6013      	str	r3, [r2, #0]
		  	  		break;
 800d218:	e0d4      	b.n	800d3c4 <main+0x390>
		  	  	case 201:
		  	  		HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800d21a:	2102      	movs	r1, #2
 800d21c:	485a      	ldr	r0, [pc, #360]	; (800d388 <main+0x354>)
 800d21e:	f001 fe2f 	bl	800ee80 <HAL_GPIO_TogglePin>
					takeData(buffer, count, dispData);
 800d222:	4b51      	ldr	r3, [pc, #324]	; (800d368 <main+0x334>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	1d3a      	adds	r2, r7, #4
 800d228:	4619      	mov	r1, r3
 800d22a:	4850      	ldr	r0, [pc, #320]	; (800d36c <main+0x338>)
 800d22c:	f7ff fe6f 	bl	800cf0e <takeData>
					printBalansi(0, 0);
 800d230:	2100      	movs	r1, #0
 800d232:	2000      	movs	r0, #0
 800d234:	f7ff fb74 	bl	800c920 <printBalansi>
					HD44780_PrintStr((char*) dispData);
 800d238:	1d3b      	adds	r3, r7, #4
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fd0a 	bl	800cc54 <HD44780_PrintStr>
					HAL_Delay(2000);
 800d240:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d244:	f001 fa9e 	bl	800e784 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d248:	2102      	movs	r1, #2
 800d24a:	2000      	movs	r0, #0
 800d24c:	f7ff f8ec 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					memset(postData, 0, sizeof(postData));
 800d256:	22ff      	movs	r2, #255	; 0xff
 800d258:	2100      	movs	r1, #0
 800d25a:	484c      	ldr	r0, [pc, #304]	; (800d38c <main+0x358>)
 800d25c:	f003 ff68 	bl	8011130 <memset>
					break;
 800d260:	e0b0      	b.n	800d3c4 <main+0x390>
				case 293:

					//takeData(buffer, count, dispData);

					HD44780_Clear();
 800d262:	f7ff fc63 	bl	800cb2c <HD44780_Clear>

					HD44780_SetCursor(0, 0);
 800d266:	2100      	movs	r1, #0
 800d268:	2000      	movs	r0, #0
 800d26a:	f7ff fc75 	bl	800cb58 <HD44780_SetCursor>

					printUcxoBaratia(0,0);
 800d26e:	2100      	movs	r1, #0
 800d270:	2000      	movs	r0, #0
 800d272:	f7fe ff73 	bl	800c15c <printUcxoBaratia>

					ErrorSound();
 800d276:	f001 f96f 	bl	800e558 <ErrorSound>

					HAL_Delay(1000);
 800d27a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d27e:	f001 fa81 	bl	800e784 <HAL_Delay>

					printMiadetBarati(0, 2);
 800d282:	2102      	movs	r1, #2
 800d284:	2000      	movs	r0, #0
 800d286:	f7ff f8cf 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d290:	e098      	b.n	800d3c4 <main+0x390>
				case 291:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d292:	f7ff fc4b 	bl	800cb2c <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d296:	2100      	movs	r1, #0
 800d298:	2000      	movs	r0, #0
 800d29a:	f7ff fc5d 	bl	800cb58 <HD44780_SetCursor>
					printBlansiAraa(0, 0);
 800d29e:	2100      	movs	r1, #0
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	f7ff f815 	bl	800c2d0 <printBlansiAraa>
					ErrorSound();
 800d2a6:	f001 f957 	bl	800e558 <ErrorSound>
					HAL_Delay(1000);
 800d2aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2ae:	f001 fa69 	bl	800e784 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	f7ff f8b7 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d2c0:	e080      	b.n	800d3c4 <main+0x390>
				case 296:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d2c2:	f7ff fc33 	bl	800cb2c <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f7ff fc45 	bl	800cb58 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d2ce:	1d3b      	adds	r3, r7, #4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fcbf 	bl	800cc54 <HD44780_PrintStr>
					ErrorSound();
 800d2d6:	f001 f93f 	bl	800e558 <ErrorSound>
					HAL_Delay(3000);
 800d2da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d2de:	f001 fa51 	bl	800e784 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f7ff f89f 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d2f0:	e068      	b.n	800d3c4 <main+0x390>
				case 297:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d2f2:	f7ff fc1b 	bl	800cb2c <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	f7ff fc2d 	bl	800cb58 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d2fe:	1d3b      	adds	r3, r7, #4
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fca7 	bl	800cc54 <HD44780_PrintStr>
					ErrorSound();
 800d306:	f001 f927 	bl	800e558 <ErrorSound>
					HAL_Delay(3000);
 800d30a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d30e:	f001 fa39 	bl	800e784 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d312:	2102      	movs	r1, #2
 800d314:	2000      	movs	r0, #0
 800d316:	f7ff f887 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d320:	e050      	b.n	800d3c4 <main+0x390>
				case 299:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d322:	f7ff fc03 	bl	800cb2c <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d326:	2100      	movs	r1, #0
 800d328:	2000      	movs	r0, #0
 800d32a:	f7ff fc15 	bl	800cb58 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d32e:	1d3b      	adds	r3, r7, #4
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff fc8f 	bl	800cc54 <HD44780_PrintStr>
					ErrorSound();
 800d336:	f001 f90f 	bl	800e558 <ErrorSound>
					HAL_Delay(3000);
 800d33a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d33e:	f001 fa21 	bl	800e784 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d342:	2102      	movs	r1, #2
 800d344:	2000      	movs	r0, #0
 800d346:	f7ff f86f 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d350:	e038      	b.n	800d3c4 <main+0x390>
 800d352:	bf00      	nop
 800d354:	e000ed00 	.word	0xe000ed00
 800d358:	0800c000 	.word	0x0800c000
 800d35c:	0800bff0 	.word	0x0800bff0
 800d360:	08011c18 	.word	0x08011c18
 800d364:	200002f0 	.word	0x200002f0
 800d368:	20000354 	.word	0x20000354
 800d36c:	20000270 	.word	0x20000270
 800d370:	20000404 	.word	0x20000404
 800d374:	20000160 	.word	0x20000160
 800d378:	0001d4bf 	.word	0x0001d4bf
 800d37c:	20000164 	.word	0x20000164
 800d380:	20000098 	.word	0x20000098
 800d384:	2000016c 	.word	0x2000016c
 800d388:	40010c00 	.word	0x40010c00
 800d38c:	20000170 	.word	0x20000170
 800d390:	20000168 	.word	0x20000168
				default:
					memset(buffer, 0, sizeof(buffer));
 800d394:	2280      	movs	r2, #128	; 0x80
 800d396:	2100      	movs	r1, #0
 800d398:	484c      	ldr	r0, [pc, #304]	; (800d4cc <main+0x498>)
 800d39a:	f003 fec9 	bl	8011130 <memset>
				    memset(dispData, 0, sizeof(dispData));
 800d39e:	1d3b      	adds	r3, r7, #4
 800d3a0:	2232      	movs	r2, #50	; 0x32
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f003 fec3 	bl	8011130 <memset>
					readSatus = 0;
 800d3aa:	4b49      	ldr	r3, [pc, #292]	; (800d4d0 <main+0x49c>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
					count = 0;
 800d3b0:	4b48      	ldr	r3, [pc, #288]	; (800d4d4 <main+0x4a0>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	601a      	str	r2, [r3, #0]
					printMiadetBarati(0, 2);
 800d3b6:	2102      	movs	r1, #2
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f7ff f835 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }
		  memset(buffer, 0, sizeof(buffer));
 800d3c4:	2280      	movs	r2, #128	; 0x80
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	4840      	ldr	r0, [pc, #256]	; (800d4cc <main+0x498>)
 800d3ca:	f003 feb1 	bl	8011130 <memset>
		  memset(dispData, 0, sizeof(dispData));
 800d3ce:	1d3b      	adds	r3, r7, #4
 800d3d0:	2232      	movs	r2, #50	; 0x32
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f003 feab 	bl	8011130 <memset>
		  readSatus = 0;
 800d3da:	4b3d      	ldr	r3, [pc, #244]	; (800d4d0 <main+0x49c>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	701a      	strb	r2, [r3, #0]
		  count = 0;
 800d3e0:	4b3c      	ldr	r3, [pc, #240]	; (800d4d4 <main+0x4a0>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d3e6:	4b3b      	ldr	r3, [pc, #236]	; (800d4d4 <main+0x4a0>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a38      	ldr	r2, [pc, #224]	; (800d4cc <main+0x498>)
 800d3ec:	4413      	add	r3, r2
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4839      	ldr	r0, [pc, #228]	; (800d4d8 <main+0x4a4>)
 800d3f4:	f003 fa07 	bl	8010806 <HAL_UART_Receive_IT>
		 }

	 uint8_t catStat = cardOperationWithBlockedSector(postData);
 800d3f8:	4838      	ldr	r0, [pc, #224]	; (800d4dc <main+0x4a8>)
 800d3fa:	f000 fd6f 	bl	800dedc <cardOperationWithBlockedSector>
 800d3fe:	4603      	mov	r3, r0
 800d400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if(catStat == 1 && cardRead == 0){
 800d404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d408:	2b01      	cmp	r3, #1
 800d40a:	f47f ae50 	bne.w	800d0ae <main+0x7a>
 800d40e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d412:	2b00      	cmp	r3, #0
 800d414:	f47f ae4b 	bne.w	800d0ae <main+0x7a>
		 uint8_t bpundCount = 0;
 800d418:	2300      	movs	r3, #0
 800d41a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 uint8_t postEnable = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		 LENGTH = strlen((char*)postData);
 800d424:	482d      	ldr	r0, [pc, #180]	; (800d4dc <main+0x4a8>)
 800d426:	f7fe fe91 	bl	800c14c <strlen>
 800d42a:	4603      	mov	r3, r0
 800d42c:	461a      	mov	r2, r3
 800d42e:	4b2c      	ldr	r3, [pc, #176]	; (800d4e0 <main+0x4ac>)
 800d430:	601a      	str	r2, [r3, #0]

		 for(int i = 0; i< LENGTH+5; i++){
 800d432:	2300      	movs	r3, #0
 800d434:	643b      	str	r3, [r7, #64]	; 0x40
 800d436:	e013      	b.n	800d460 <main+0x42c>

			 if(postData[i]== '{' || postData[i] == '}'){
 800d438:	4a28      	ldr	r2, [pc, #160]	; (800d4dc <main+0x4a8>)
 800d43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d43c:	4413      	add	r3, r2
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b7b      	cmp	r3, #123	; 0x7b
 800d442:	d005      	beq.n	800d450 <main+0x41c>
 800d444:	4a25      	ldr	r2, [pc, #148]	; (800d4dc <main+0x4a8>)
 800d446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d448:	4413      	add	r3, r2
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b7d      	cmp	r3, #125	; 0x7d
 800d44e:	d104      	bne.n	800d45a <main+0x426>
				 bpundCount++;
 800d450:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d454:	3301      	adds	r3, #1
 800d456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 for(int i = 0; i< LENGTH+5; i++){
 800d45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d45c:	3301      	adds	r3, #1
 800d45e:	643b      	str	r3, [r7, #64]	; 0x40
 800d460:	4b1f      	ldr	r3, [pc, #124]	; (800d4e0 <main+0x4ac>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3304      	adds	r3, #4
 800d466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d468:	429a      	cmp	r2, r3
 800d46a:	dde5      	ble.n	800d438 <main+0x404>
			 }

		 }
		 if(bpundCount != 4){
 800d46c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d470:	2b04      	cmp	r3, #4
 800d472:	d007      	beq.n	800d484 <main+0x450>
		 	postEnable = 1;
 800d474:	2301      	movs	r3, #1
 800d476:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		 	memset(postData, 0, sizeof(postData));
 800d47a:	22ff      	movs	r2, #255	; 0xff
 800d47c:	2100      	movs	r1, #0
 800d47e:	4817      	ldr	r0, [pc, #92]	; (800d4dc <main+0x4a8>)
 800d480:	f003 fe56 	bl	8011130 <memset>
		  }

		 if(postEnable == 0){
 800d484:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f47f ae10 	bne.w	800d0ae <main+0x7a>
			 CardReadSound();
 800d48e:	f001 f885 	bl	800e59c <CardReadSound>
			 printDaicadet(0, 3);
 800d492:	2103      	movs	r1, #3
 800d494:	2000      	movs	r0, #0
 800d496:	f7ff f9b5 	bl	800c804 <printDaicadet>
			 MQTTPubToTopic(LENGTH);
 800d49a:	4b11      	ldr	r3, [pc, #68]	; (800d4e0 <main+0x4ac>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f9c2 	bl	800d828 <MQTTPubToTopic>
			 HAL_Delay(50);
 800d4a4:	2032      	movs	r0, #50	; 0x32
 800d4a6:	f001 f96d 	bl	800e784 <HAL_Delay>

			 HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <main+0x4ac>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	2364      	movs	r3, #100	; 0x64
 800d4b2:	490a      	ldr	r1, [pc, #40]	; (800d4dc <main+0x4a8>)
 800d4b4:	4808      	ldr	r0, [pc, #32]	; (800d4d8 <main+0x4a4>)
 800d4b6:	f003 f914 	bl	80106e2 <HAL_UART_Transmit>

			 cardRead = 1;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 CardTime = HAL_GetTick();
 800d4c0:	f001 f956 	bl	800e770 <HAL_GetTick>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	64bb      	str	r3, [r7, #72]	; 0x48
  {
 800d4c8:	e5f1      	b.n	800d0ae <main+0x7a>
 800d4ca:	bf00      	nop
 800d4cc:	20000270 	.word	0x20000270
 800d4d0:	2000016c 	.word	0x2000016c
 800d4d4:	20000354 	.word	0x20000354
 800d4d8:	20000404 	.word	0x20000404
 800d4dc:	20000170 	.word	0x20000170
 800d4e0:	20000168 	.word	0x20000168

0800d4e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b090      	sub	sp, #64	; 0x40
 800d4e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d4ea:	f107 0318 	add.w	r3, r7, #24
 800d4ee:	2228      	movs	r2, #40	; 0x28
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f003 fe1c 	bl	8011130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d4f8:	1d3b      	adds	r3, r7, #4
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	605a      	str	r2, [r3, #4]
 800d500:	609a      	str	r2, [r3, #8]
 800d502:	60da      	str	r2, [r3, #12]
 800d504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d506:	2301      	movs	r3, #1
 800d508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d50a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d50e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800d510:	2300      	movs	r3, #0
 800d512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d514:	2301      	movs	r3, #1
 800d516:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d518:	2302      	movs	r3, #2
 800d51a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d51c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800d522:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d528:	f107 0318 	add.w	r3, r7, #24
 800d52c:	4618      	mov	r0, r3
 800d52e:	f002 f9a5 	bl	800f87c <HAL_RCC_OscConfig>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <SystemClock_Config+0x58>
  {
    Error_Handler();
 800d538:	f000 f954 	bl	800d7e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d53c:	230f      	movs	r3, #15
 800d53e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d540:	2302      	movs	r3, #2
 800d542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d54c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d552:	1d3b      	adds	r3, r7, #4
 800d554:	2102      	movs	r1, #2
 800d556:	4618      	mov	r0, r3
 800d558:	f002 fc12 	bl	800fd80 <HAL_RCC_ClockConfig>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800d562:	f000 f93f 	bl	800d7e4 <Error_Handler>
  }
}
 800d566:	bf00      	nop
 800d568:	3740      	adds	r7, #64	; 0x40
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d574:	4b12      	ldr	r3, [pc, #72]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d576:	4a13      	ldr	r2, [pc, #76]	; (800d5c4 <MX_I2C1_Init+0x54>)
 800d578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d57a:	4b11      	ldr	r3, [pc, #68]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d57c:	4a12      	ldr	r2, [pc, #72]	; (800d5c8 <MX_I2C1_Init+0x58>)
 800d57e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d580:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d582:	2200      	movs	r2, #0
 800d584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d586:	4b0e      	ldr	r3, [pc, #56]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d588:	2200      	movs	r2, #0
 800d58a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d58c:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d58e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d594:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d596:	2200      	movs	r2, #0
 800d598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d5a0:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d5a6:	4b06      	ldr	r3, [pc, #24]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d5ac:	4804      	ldr	r0, [pc, #16]	; (800d5c0 <MX_I2C1_Init+0x50>)
 800d5ae:	f001 fc81 	bl	800eeb4 <HAL_I2C_Init>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d5b8:	f000 f914 	bl	800d7e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d5bc:	bf00      	nop
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20000358 	.word	0x20000358
 800d5c4:	40005400 	.word	0x40005400
 800d5c8:	000186a0 	.word	0x000186a0

0800d5cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d5d0:	4b17      	ldr	r3, [pc, #92]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5d2:	4a18      	ldr	r2, [pc, #96]	; (800d634 <MX_SPI1_Init+0x68>)
 800d5d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d5d6:	4b16      	ldr	r3, [pc, #88]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d5dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d5e4:	4b12      	ldr	r3, [pc, #72]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5ea:	4b11      	ldr	r3, [pc, #68]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d5f6:	4b0e      	ldr	r3, [pc, #56]	; (800d630 <MX_SPI1_Init+0x64>)
 800d5f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d5fe:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <MX_SPI1_Init+0x64>)
 800d600:	2218      	movs	r2, #24
 800d602:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <MX_SPI1_Init+0x64>)
 800d606:	2200      	movs	r2, #0
 800d608:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <MX_SPI1_Init+0x64>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d610:	4b07      	ldr	r3, [pc, #28]	; (800d630 <MX_SPI1_Init+0x64>)
 800d612:	2200      	movs	r2, #0
 800d614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d616:	4b06      	ldr	r3, [pc, #24]	; (800d630 <MX_SPI1_Init+0x64>)
 800d618:	220a      	movs	r2, #10
 800d61a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d61c:	4804      	ldr	r0, [pc, #16]	; (800d630 <MX_SPI1_Init+0x64>)
 800d61e:	f002 fd47 	bl	80100b0 <HAL_SPI_Init>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d001      	beq.n	800d62c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d628:	f000 f8dc 	bl	800d7e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d62c:	bf00      	nop
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	200003ac 	.word	0x200003ac
 800d634:	40013000 	.word	0x40013000

0800d638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d63c:	4b11      	ldr	r3, [pc, #68]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d63e:	4a12      	ldr	r2, [pc, #72]	; (800d688 <MX_USART1_UART_Init+0x50>)
 800d640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d642:	4b10      	ldr	r3, [pc, #64]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d64a:	4b0e      	ldr	r3, [pc, #56]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d650:	4b0c      	ldr	r3, [pc, #48]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d652:	2200      	movs	r2, #0
 800d654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d656:	4b0b      	ldr	r3, [pc, #44]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d658:	2200      	movs	r2, #0
 800d65a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d65c:	4b09      	ldr	r3, [pc, #36]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d65e:	220c      	movs	r2, #12
 800d660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d662:	4b08      	ldr	r3, [pc, #32]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d664:	2200      	movs	r2, #0
 800d666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d668:	4b06      	ldr	r3, [pc, #24]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d66e:	4805      	ldr	r0, [pc, #20]	; (800d684 <MX_USART1_UART_Init+0x4c>)
 800d670:	f002 ffea 	bl	8010648 <HAL_UART_Init>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d67a:	f000 f8b3 	bl	800d7e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d67e:	bf00      	nop
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000404 	.word	0x20000404
 800d688:	40013800 	.word	0x40013800

0800d68c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d690:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d692:	4a12      	ldr	r2, [pc, #72]	; (800d6dc <MX_USART2_UART_Init+0x50>)
 800d694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d696:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d69c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d69e:	4b0e      	ldr	r3, [pc, #56]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d6a4:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d6aa:	4b0b      	ldr	r3, [pc, #44]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6b2:	220c      	movs	r2, #12
 800d6b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6b6:	4b08      	ldr	r3, [pc, #32]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6bc:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d6c2:	4805      	ldr	r0, [pc, #20]	; (800d6d8 <MX_USART2_UART_Init+0x4c>)
 800d6c4:	f002 ffc0 	bl	8010648 <HAL_UART_Init>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d001      	beq.n	800d6d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d6ce:	f000 f889 	bl	800d7e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d6d2:	bf00      	nop
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20000448 	.word	0x20000448
 800d6dc:	40004400 	.word	0x40004400

0800d6e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6e6:	f107 0310 	add.w	r3, r7, #16
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	605a      	str	r2, [r3, #4]
 800d6f0:	609a      	str	r2, [r3, #8]
 800d6f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d6f4:	4b37      	ldr	r3, [pc, #220]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d6f6:	699b      	ldr	r3, [r3, #24]
 800d6f8:	4a36      	ldr	r2, [pc, #216]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d6fa:	f043 0310 	orr.w	r3, r3, #16
 800d6fe:	6193      	str	r3, [r2, #24]
 800d700:	4b34      	ldr	r3, [pc, #208]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	f003 0310 	and.w	r3, r3, #16
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d70c:	4b31      	ldr	r3, [pc, #196]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	4a30      	ldr	r2, [pc, #192]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d712:	f043 0320 	orr.w	r3, r3, #32
 800d716:	6193      	str	r3, [r2, #24]
 800d718:	4b2e      	ldr	r3, [pc, #184]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	f003 0320 	and.w	r3, r3, #32
 800d720:	60bb      	str	r3, [r7, #8]
 800d722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d724:	4b2b      	ldr	r3, [pc, #172]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	4a2a      	ldr	r2, [pc, #168]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d72a:	f043 0304 	orr.w	r3, r3, #4
 800d72e:	6193      	str	r3, [r2, #24]
 800d730:	4b28      	ldr	r3, [pc, #160]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	f003 0304 	and.w	r3, r3, #4
 800d738:	607b      	str	r3, [r7, #4]
 800d73a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d73c:	4b25      	ldr	r3, [pc, #148]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	4a24      	ldr	r2, [pc, #144]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d742:	f043 0308 	orr.w	r3, r3, #8
 800d746:	6193      	str	r3, [r2, #24]
 800d748:	4b22      	ldr	r3, [pc, #136]	; (800d7d4 <MX_GPIO_Init+0xf4>)
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	f003 0308 	and.w	r3, r3, #8
 800d750:	603b      	str	r3, [r7, #0]
 800d752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d754:	2200      	movs	r2, #0
 800d756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d75a:	481f      	ldr	r0, [pc, #124]	; (800d7d8 <MX_GPIO_Init+0xf8>)
 800d75c:	f001 fb78 	bl	800ee50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d760:	2200      	movs	r2, #0
 800d762:	2110      	movs	r1, #16
 800d764:	481d      	ldr	r0, [pc, #116]	; (800d7dc <MX_GPIO_Init+0xfc>)
 800d766:	f001 fb73 	bl	800ee50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800d76a:	2200      	movs	r2, #0
 800d76c:	2103      	movs	r1, #3
 800d76e:	481c      	ldr	r0, [pc, #112]	; (800d7e0 <MX_GPIO_Init+0x100>)
 800d770:	f001 fb6e 	bl	800ee50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d77a:	2301      	movs	r3, #1
 800d77c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d77e:	2300      	movs	r3, #0
 800d780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d782:	2302      	movs	r3, #2
 800d784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d786:	f107 0310 	add.w	r3, r7, #16
 800d78a:	4619      	mov	r1, r3
 800d78c:	4812      	ldr	r0, [pc, #72]	; (800d7d8 <MX_GPIO_Init+0xf8>)
 800d78e:	f001 f9db 	bl	800eb48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d792:	2310      	movs	r3, #16
 800d794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d796:	2301      	movs	r3, #1
 800d798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d79e:	2302      	movs	r3, #2
 800d7a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7a2:	f107 0310 	add.w	r3, r7, #16
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	480c      	ldr	r0, [pc, #48]	; (800d7dc <MX_GPIO_Init+0xfc>)
 800d7aa:	f001 f9cd 	bl	800eb48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d7be:	f107 0310 	add.w	r3, r7, #16
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4806      	ldr	r0, [pc, #24]	; (800d7e0 <MX_GPIO_Init+0x100>)
 800d7c6:	f001 f9bf 	bl	800eb48 <HAL_GPIO_Init>

}
 800d7ca:	bf00      	nop
 800d7cc:	3720      	adds	r7, #32
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	40021000 	.word	0x40021000
 800d7d8:	40011000 	.word	0x40011000
 800d7dc:	40010800 	.word	0x40010800
 800d7e0:	40010c00 	.word	0x40010c00

0800d7e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d7e8:	b672      	cpsid	i
}
 800d7ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d7ec:	e7fe      	b.n	800d7ec <Error_Handler+0x8>

0800d7ee <jumpToAddress>:

	int Status = atoi((char*) statusString);
	return Status;

}
void jumpToAddress(uint32_t ADDRESSTOGO){
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b086      	sub	sp, #24
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
	  uint32_t addresstojump;

	  addresstojump = *((volatile uint32_t*)(ADDRESSTOGO + 4));
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	617b      	str	r3, [r7, #20]
	  HAL_DeInit();
 800d7fe:	f000 ff57 	bl	800e6b0 <HAL_DeInit>
	  HAL_RCC_DeInit();
 800d802:	f001 ffa1 	bl	800f748 <HAL_RCC_DeInit>
	  void (*GoToApp)(void);
	  GoToApp = (void (*) (void))addresstojump;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d80a:	b672      	cpsid	i
}
 800d80c:	bf00      	nop
	  __disable_irq();
	  __set_MSP(*((volatile uint32_t*)ADDRESSTOGO));
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f383 8808 	msr	MSP, r3
}
 800d81a:	bf00      	nop
	  GoToApp();
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	4798      	blx	r3
}
 800d820:	bf00      	nop
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <MQTTPubToTopic>:
//			break;
//		}
//	}
}

void MQTTPubToTopic(int length){
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\""STR(backServer)"\",%d\r\n", (length));
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	4908      	ldr	r1, [pc, #32]	; (800d854 <MQTTPubToTopic+0x2c>)
 800d834:	4808      	ldr	r0, [pc, #32]	; (800d858 <MQTTPubToTopic+0x30>)
 800d836:	f003 fc83 	bl	8011140 <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800d83a:	2364      	movs	r3, #100	; 0x64
 800d83c:	222e      	movs	r2, #46	; 0x2e
 800d83e:	4906      	ldr	r1, [pc, #24]	; (800d858 <MQTTPubToTopic+0x30>)
 800d840:	4806      	ldr	r0, [pc, #24]	; (800d85c <MQTTPubToTopic+0x34>)
 800d842:	f002 ff4e 	bl	80106e2 <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800d846:	201e      	movs	r0, #30
 800d848:	f000 ff9c 	bl	800e784 <HAL_Delay>

}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	08011cc8 	.word	0x08011cc8
 800d858:	2000009c 	.word	0x2000009c
 800d85c:	20000404 	.word	0x20000404

0800d860 <SPI1SendByte>:
extern void MFRC522_Halt(void);
extern void cardOperation(uint8_t* finalData, uint8_t* p);
extern void led(uint8_t n);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

uint8_t SPI1SendByte(uint8_t data) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af02      	add	r7, sp, #8
 800d866:	4603      	mov	r3, r0
 800d868:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800d86e:	f107 0208 	add.w	r2, r7, #8
 800d872:	f107 010c 	add.w	r1, r7, #12
 800d876:	230a      	movs	r3, #10
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	2301      	movs	r3, #1
 800d87c:	4803      	ldr	r0, [pc, #12]	; (800d88c <SPI1SendByte+0x2c>)
 800d87e:	f002 fc9b 	bl	80101b8 <HAL_SPI_TransmitReceive>
	return readValue[0];
 800d882:	7a3b      	ldrb	r3, [r7, #8]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	200003ac 	.word	0x200003ac

0800d890 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	4603      	mov	r3, r0
 800d898:	460a      	mov	r2, r1
 800d89a:	71fb      	strb	r3, [r7, #7]
 800d89c:	4613      	mov	r3, r2
 800d89e:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2110      	movs	r1, #16
 800d8a4:	4809      	ldr	r0, [pc, #36]	; (800d8cc <SPI1_WriteReg+0x3c>)
 800d8a6:	f001 fad3 	bl	800ee50 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff ffd7 	bl	800d860 <SPI1SendByte>
	SPI1SendByte(value);
 800d8b2:	79bb      	ldrb	r3, [r7, #6]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff ffd3 	bl	800d860 <SPI1SendByte>
	cs_set();
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	2110      	movs	r1, #16
 800d8be:	4803      	ldr	r0, [pc, #12]	; (800d8cc <SPI1_WriteReg+0x3c>)
 800d8c0:	f001 fac6 	bl	800ee50 <HAL_GPIO_WritePin>
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	40010800 	.word	0x40010800

0800d8d0 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2110      	movs	r1, #16
 800d8de:	480b      	ldr	r0, [pc, #44]	; (800d90c <SPI1_ReadReg+0x3c>)
 800d8e0:	f001 fab6 	bl	800ee50 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff ffba 	bl	800d860 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	f7ff ffb7 	bl	800d860 <SPI1SendByte>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	2110      	movs	r1, #16
 800d8fa:	4804      	ldr	r0, [pc, #16]	; (800d90c <SPI1_ReadReg+0x3c>)
 800d8fc:	f001 faa8 	bl	800ee50 <HAL_GPIO_WritePin>
	return val;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	40010800 	.word	0x40010800

0800d910 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	4603      	mov	r3, r0
 800d918:	460a      	mov	r2, r1
 800d91a:	71fb      	strb	r3, [r7, #7]
 800d91c:	4613      	mov	r3, r2
 800d91e:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800d920:	79fb      	ldrb	r3, [r7, #7]
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d92a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800d92c:	79ba      	ldrb	r2, [r7, #6]
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f7ff ffac 	bl	800d890 <SPI1_WriteReg>
}
 800d938:	bf00      	nop
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800d94a:	79fb      	ldrb	r3, [r7, #7]
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	b25b      	sxtb	r3, r3
 800d950:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d954:	b25b      	sxtb	r3, r3
 800d956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d95a:	b25b      	sxtb	r3, r3
 800d95c:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800d95e:	79fb      	ldrb	r3, [r7, #7]
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff ffb5 	bl	800d8d0 <SPI1_ReadReg>
 800d966:	4603      	mov	r3, r0
 800d968:	73fb      	strb	r3, [r7, #15]
	return val;	
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	460a      	mov	r2, r1
 800d97e:	71fb      	strb	r3, [r7, #7]
 800d980:	4613      	mov	r3, r2
 800d982:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800d984:	79fb      	ldrb	r3, [r7, #7]
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff ffda 	bl	800d940 <MFRC522_ReadRegister>
 800d98c:	4603      	mov	r3, r0
 800d98e:	461a      	mov	r2, r3
 800d990:	79bb      	ldrb	r3, [r7, #6]
 800d992:	4313      	orrs	r3, r2
 800d994:	b2da      	uxtb	r2, r3
 800d996:	79fb      	ldrb	r3, [r7, #7]
 800d998:	4611      	mov	r1, r2
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff ffb8 	bl	800d910 <MFRC522_WriteRegister>
}
 800d9a0:	bf00      	nop
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	460a      	mov	r2, r1
 800d9b2:	71fb      	strb	r3, [r7, #7]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800d9b8:	79fb      	ldrb	r3, [r7, #7]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7ff ffc0 	bl	800d940 <MFRC522_ReadRegister>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	b25a      	sxtb	r2, r3
 800d9c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d9c8:	43db      	mvns	r3, r3
 800d9ca:	b25b      	sxtb	r3, r3
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	b25b      	sxtb	r3, r3
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff ff9a 	bl	800d910 <MFRC522_WriteRegister>
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af02      	add	r7, sp, #8
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	6039      	str	r1, [r7, #0]
 800d9ee:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800d9f0:	2107      	movs	r1, #7
 800d9f2:	200d      	movs	r0, #13
 800d9f4:	f7ff ff8c 	bl	800d910 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	79fa      	ldrb	r2, [r7, #7]
 800d9fc:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2201      	movs	r2, #1
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	200c      	movs	r0, #12
 800da0c:	f000 f80f 	bl	800da2e <MFRC522_ToCard>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d102      	bne.n	800da20 <MFRC522_Request+0x3c>
 800da1a:	89bb      	ldrh	r3, [r7, #12]
 800da1c:	2b10      	cmp	r3, #16
 800da1e:	d001      	beq.n	800da24 <MFRC522_Request+0x40>
 800da20:	2302      	movs	r3, #2
 800da22:	73fb      	strb	r3, [r7, #15]
	return status;
 800da24:	7bfb      	ldrb	r3, [r7, #15]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800da2e:	b590      	push	{r4, r7, lr}
 800da30:	b087      	sub	sp, #28
 800da32:	af00      	add	r7, sp, #0
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607b      	str	r3, [r7, #4]
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]
 800da3c:	4613      	mov	r3, r2
 800da3e:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800da40:	2302      	movs	r3, #2
 800da42:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800da44:	2300      	movs	r3, #0
 800da46:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800da48:	2300      	movs	r3, #0
 800da4a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
 800da4e:	2b0c      	cmp	r3, #12
 800da50:	d006      	beq.n	800da60 <MFRC522_ToCard+0x32>
 800da52:	2b0e      	cmp	r3, #14
 800da54:	d109      	bne.n	800da6a <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800da56:	2312      	movs	r3, #18
 800da58:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800da5a:	2310      	movs	r3, #16
 800da5c:	757b      	strb	r3, [r7, #21]
			break;
 800da5e:	e005      	b.n	800da6c <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800da60:	2377      	movs	r3, #119	; 0x77
 800da62:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800da64:	2330      	movs	r3, #48	; 0x30
 800da66:	757b      	strb	r3, [r7, #21]
			break;
 800da68:	e000      	b.n	800da6c <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800da6a:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800da6c:	7dbb      	ldrb	r3, [r7, #22]
 800da6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da72:	b2db      	uxtb	r3, r3
 800da74:	4619      	mov	r1, r3
 800da76:	2002      	movs	r0, #2
 800da78:	f7ff ff4a 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800da7c:	2180      	movs	r1, #128	; 0x80
 800da7e:	2004      	movs	r0, #4
 800da80:	f7ff ff92 	bl	800d9a8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800da84:	2180      	movs	r1, #128	; 0x80
 800da86:	200a      	movs	r0, #10
 800da88:	f7ff ff74 	bl	800d974 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800da8c:	2100      	movs	r1, #0
 800da8e:	2001      	movs	r0, #1
 800da90:	f7ff ff3e 	bl	800d910 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800da94:	2300      	movs	r3, #0
 800da96:	827b      	strh	r3, [r7, #18]
 800da98:	e00a      	b.n	800dab0 <MFRC522_ToCard+0x82>
 800da9a:	8a7b      	ldrh	r3, [r7, #18]
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	4413      	add	r3, r2
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	4619      	mov	r1, r3
 800daa4:	2009      	movs	r0, #9
 800daa6:	f7ff ff33 	bl	800d910 <MFRC522_WriteRegister>
 800daaa:	8a7b      	ldrh	r3, [r7, #18]
 800daac:	3301      	adds	r3, #1
 800daae:	827b      	strh	r3, [r7, #18]
 800dab0:	7bbb      	ldrb	r3, [r7, #14]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	8a7a      	ldrh	r2, [r7, #18]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d3ef      	bcc.n	800da9a <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	4619      	mov	r1, r3
 800dabe:	2001      	movs	r0, #1
 800dac0:	f7ff ff26 	bl	800d910 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	2b0c      	cmp	r3, #12
 800dac8:	d103      	bne.n	800dad2 <MFRC522_ToCard+0xa4>
 800daca:	2180      	movs	r1, #128	; 0x80
 800dacc:	200d      	movs	r0, #13
 800dace:	f7ff ff51 	bl	800d974 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800dad2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dad6:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800dad8:	2004      	movs	r0, #4
 800dada:	f7ff ff31 	bl	800d940 <MFRC522_ReadRegister>
 800dade:	4603      	mov	r3, r0
 800dae0:	753b      	strb	r3, [r7, #20]
		i--;
 800dae2:	8a7b      	ldrh	r3, [r7, #18]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800dae8:	8a7b      	ldrh	r3, [r7, #18]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <MFRC522_ToCard+0xd6>
 800daee:	7d3b      	ldrb	r3, [r7, #20]
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d105      	bne.n	800db04 <MFRC522_ToCard+0xd6>
 800daf8:	7d3a      	ldrb	r2, [r7, #20]
 800dafa:	7d7b      	ldrb	r3, [r7, #21]
 800dafc:	4013      	ands	r3, r2
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d0e9      	beq.n	800dad8 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800db04:	2180      	movs	r1, #128	; 0x80
 800db06:	200d      	movs	r0, #13
 800db08:	f7ff ff4e 	bl	800d9a8 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800db0c:	8a7b      	ldrh	r3, [r7, #18]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d057      	beq.n	800dbc2 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800db12:	2006      	movs	r0, #6
 800db14:	f7ff ff14 	bl	800d940 <MFRC522_ReadRegister>
 800db18:	4603      	mov	r3, r0
 800db1a:	f003 031b 	and.w	r3, r3, #27
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d14d      	bne.n	800dbbe <MFRC522_ToCard+0x190>
			status = MI_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800db26:	7d3a      	ldrb	r2, [r7, #20]
 800db28:	7dbb      	ldrb	r3, [r7, #22]
 800db2a:	4013      	ands	r3, r2
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <MFRC522_ToCard+0x10c>
 800db36:	2301      	movs	r3, #1
 800db38:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	2b0c      	cmp	r3, #12
 800db3e:	d140      	bne.n	800dbc2 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800db40:	200a      	movs	r0, #10
 800db42:	f7ff fefd 	bl	800d940 <MFRC522_ReadRegister>
 800db46:	4603      	mov	r3, r0
 800db48:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800db4a:	200c      	movs	r0, #12
 800db4c:	f7ff fef8 	bl	800d940 <MFRC522_ReadRegister>
 800db50:	4603      	mov	r3, r0
 800db52:	f003 0307 	and.w	r3, r3, #7
 800db56:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800db58:	7c7b      	ldrb	r3, [r7, #17]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00b      	beq.n	800db76 <MFRC522_ToCard+0x148>
 800db5e:	7d3b      	ldrb	r3, [r7, #20]
 800db60:	3b01      	subs	r3, #1
 800db62:	b29b      	uxth	r3, r3
 800db64:	00db      	lsls	r3, r3, #3
 800db66:	b29a      	uxth	r2, r3
 800db68:	7c7b      	ldrb	r3, [r7, #17]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4413      	add	r3, r2
 800db6e:	b29a      	uxth	r2, r3
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	801a      	strh	r2, [r3, #0]
 800db74:	e005      	b.n	800db82 <MFRC522_ToCard+0x154>
 800db76:	7d3b      	ldrb	r3, [r7, #20]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db80:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800db82:	7d3b      	ldrb	r3, [r7, #20]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d101      	bne.n	800db8c <MFRC522_ToCard+0x15e>
 800db88:	2301      	movs	r3, #1
 800db8a:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800db8c:	7d3b      	ldrb	r3, [r7, #20]
 800db8e:	2b10      	cmp	r3, #16
 800db90:	d901      	bls.n	800db96 <MFRC522_ToCard+0x168>
 800db92:	2310      	movs	r3, #16
 800db94:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800db96:	2300      	movs	r3, #0
 800db98:	827b      	strh	r3, [r7, #18]
 800db9a:	e00a      	b.n	800dbb2 <MFRC522_ToCard+0x184>
 800db9c:	8a7b      	ldrh	r3, [r7, #18]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	18d4      	adds	r4, r2, r3
 800dba2:	2009      	movs	r0, #9
 800dba4:	f7ff fecc 	bl	800d940 <MFRC522_ReadRegister>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	7023      	strb	r3, [r4, #0]
 800dbac:	8a7b      	ldrh	r3, [r7, #18]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	827b      	strh	r3, [r7, #18]
 800dbb2:	7d3b      	ldrb	r3, [r7, #20]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	8a7a      	ldrh	r2, [r7, #18]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d3ef      	bcc.n	800db9c <MFRC522_ToCard+0x16e>
 800dbbc:	e001      	b.n	800dbc2 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	371c      	adds	r7, #28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd90      	pop	{r4, r7, pc}

0800dbcc <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af02      	add	r7, sp, #8
 800dbd2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800dbd8:	2100      	movs	r1, #0
 800dbda:	200d      	movs	r0, #13
 800dbdc:	f7ff fe98 	bl	800d910 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2293      	movs	r2, #147	; 0x93
 800dbe4:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	2220      	movs	r2, #32
 800dbec:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800dbee:	f107 030a 	add.w	r3, r7, #10
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	6879      	ldr	r1, [r7, #4]
 800dbfa:	200c      	movs	r0, #12
 800dbfc:	f7ff ff17 	bl	800da2e <MFRC522_ToCard>
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d118      	bne.n	800dc3c <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	73bb      	strb	r3, [r7, #14]
 800dc0e:	e009      	b.n	800dc24 <MFRC522_Anticoll+0x58>
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	4413      	add	r3, r2
 800dc16:	781a      	ldrb	r2, [r3, #0]
 800dc18:	7b7b      	ldrb	r3, [r7, #13]
 800dc1a:	4053      	eors	r3, r2
 800dc1c:	737b      	strb	r3, [r7, #13]
 800dc1e:	7bbb      	ldrb	r3, [r7, #14]
 800dc20:	3301      	adds	r3, #1
 800dc22:	73bb      	strb	r3, [r7, #14]
 800dc24:	7bbb      	ldrb	r3, [r7, #14]
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d9f2      	bls.n	800dc10 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800dc2a:	7bbb      	ldrb	r3, [r7, #14]
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	4413      	add	r3, r2
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	7b7a      	ldrb	r2, [r7, #13]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d001      	beq.n	800dc3c <MFRC522_Anticoll+0x70>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800dc46:	b590      	push	{r4, r7, lr}
 800dc48:	b087      	sub	sp, #28
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	60f8      	str	r0, [r7, #12]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	607a      	str	r2, [r7, #4]
 800dc52:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800dc54:	2104      	movs	r1, #4
 800dc56:	2005      	movs	r0, #5
 800dc58:	f7ff fea6 	bl	800d9a8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800dc5c:	2180      	movs	r1, #128	; 0x80
 800dc5e:	200a      	movs	r0, #10
 800dc60:	f7ff fe88 	bl	800d974 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800dc64:	2300      	movs	r3, #0
 800dc66:	75fb      	strb	r3, [r7, #23]
 800dc68:	e00a      	b.n	800dc80 <MFRC522_CalculateCRC+0x3a>
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4413      	add	r3, r2
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	4619      	mov	r1, r3
 800dc74:	2009      	movs	r0, #9
 800dc76:	f7ff fe4b 	bl	800d910 <MFRC522_WriteRegister>
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	75fb      	strb	r3, [r7, #23]
 800dc80:	7dfa      	ldrb	r2, [r7, #23]
 800dc82:	7afb      	ldrb	r3, [r7, #11]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d3f0      	bcc.n	800dc6a <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800dc88:	2103      	movs	r1, #3
 800dc8a:	2001      	movs	r0, #1
 800dc8c:	f7ff fe40 	bl	800d910 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800dc90:	23ff      	movs	r3, #255	; 0xff
 800dc92:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800dc94:	2005      	movs	r0, #5
 800dc96:	f7ff fe53 	bl	800d940 <MFRC522_ReadRegister>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	75bb      	strb	r3, [r7, #22]
		i--;
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <MFRC522_CalculateCRC+0x6e>
 800dcaa:	7dbb      	ldrb	r3, [r7, #22]
 800dcac:	f003 0304 	and.w	r3, r3, #4
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d0ef      	beq.n	800dc94 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800dcb4:	2022      	movs	r0, #34	; 0x22
 800dcb6:	f7ff fe43 	bl	800d940 <MFRC522_ReadRegister>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	1c5c      	adds	r4, r3, #1
 800dcc6:	2021      	movs	r0, #33	; 0x21
 800dcc8:	f7ff fe3a 	bl	800d940 <MFRC522_ReadRegister>
 800dccc:	4603      	mov	r3, r0
 800dcce:	7023      	strb	r3, [r4, #0]
}
 800dcd0:	bf00      	nop
 800dcd2:	371c      	adds	r7, #28
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd90      	pop	{r4, r7, pc}

0800dcd8 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b088      	sub	sp, #32
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 800dce0:	2393      	movs	r3, #147	; 0x93
 800dce2:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 800dce4:	2370      	movs	r3, #112	; 0x70
 800dce6:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 800dce8:	2300      	movs	r3, #0
 800dcea:	75fb      	strb	r3, [r7, #23]
 800dcec:	e00c      	b.n	800dd08 <MFRC522_SelectTag+0x30>
 800dcee:	7dfb      	ldrb	r3, [r7, #23]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	441a      	add	r2, r3
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
 800dcf6:	3302      	adds	r3, #2
 800dcf8:	7812      	ldrb	r2, [r2, #0]
 800dcfa:	3318      	adds	r3, #24
 800dcfc:	443b      	add	r3, r7
 800dcfe:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	3301      	adds	r3, #1
 800dd06:	75fb      	strb	r3, [r7, #23]
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
 800dd0a:	2b04      	cmp	r3, #4
 800dd0c:	d9ef      	bls.n	800dcee <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800dd0e:	f107 0308 	add.w	r3, r7, #8
 800dd12:	1dda      	adds	r2, r3, #7
 800dd14:	f107 0308 	add.w	r3, r7, #8
 800dd18:	2107      	movs	r1, #7
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff ff93 	bl	800dc46 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800dd20:	f107 0208 	add.w	r2, r7, #8
 800dd24:	f107 0108 	add.w	r1, r7, #8
 800dd28:	f107 0312 	add.w	r3, r7, #18
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	2209      	movs	r2, #9
 800dd32:	200c      	movs	r0, #12
 800dd34:	f7ff fe7b 	bl	800da2e <MFRC522_ToCard>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 800dd3c:	7d7b      	ldrb	r3, [r7, #21]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d105      	bne.n	800dd4e <MFRC522_SelectTag+0x76>
 800dd42:	8a7b      	ldrh	r3, [r7, #18]
 800dd44:	2b18      	cmp	r3, #24
 800dd46:	d102      	bne.n	800dd4e <MFRC522_SelectTag+0x76>
 800dd48:	7a3b      	ldrb	r3, [r7, #8]
 800dd4a:	75bb      	strb	r3, [r7, #22]
 800dd4c:	e001      	b.n	800dd52 <MFRC522_SelectTag+0x7a>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	75bb      	strb	r3, [r7, #22]
	return size;
 800dd52:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08a      	sub	sp, #40	; 0x28
 800dd60:	af02      	add	r7, sp, #8
 800dd62:	60ba      	str	r2, [r7, #8]
 800dd64:	607b      	str	r3, [r7, #4]
 800dd66:	4603      	mov	r3, r0
 800dd68:	73fb      	strb	r3, [r7, #15]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800dd72:	7bbb      	ldrb	r3, [r7, #14]
 800dd74:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 800dd76:	2300      	movs	r3, #0
 800dd78:	77bb      	strb	r3, [r7, #30]
 800dd7a:	e00c      	b.n	800dd96 <MFRC522_Auth+0x3a>
 800dd7c:	7fbb      	ldrb	r3, [r7, #30]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	441a      	add	r2, r3
 800dd82:	7fbb      	ldrb	r3, [r7, #30]
 800dd84:	3302      	adds	r3, #2
 800dd86:	7812      	ldrb	r2, [r2, #0]
 800dd88:	3320      	adds	r3, #32
 800dd8a:	443b      	add	r3, r7
 800dd8c:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dd90:	7fbb      	ldrb	r3, [r7, #30]
 800dd92:	3301      	adds	r3, #1
 800dd94:	77bb      	strb	r3, [r7, #30]
 800dd96:	7fbb      	ldrb	r3, [r7, #30]
 800dd98:	2b05      	cmp	r3, #5
 800dd9a:	d9ef      	bls.n	800dd7c <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	77bb      	strb	r3, [r7, #30]
 800dda0:	e00c      	b.n	800ddbc <MFRC522_Auth+0x60>
 800dda2:	7fbb      	ldrb	r3, [r7, #30]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	441a      	add	r2, r3
 800dda8:	7fbb      	ldrb	r3, [r7, #30]
 800ddaa:	3308      	adds	r3, #8
 800ddac:	7812      	ldrb	r2, [r2, #0]
 800ddae:	3320      	adds	r3, #32
 800ddb0:	443b      	add	r3, r7
 800ddb2:	f803 2c10 	strb.w	r2, [r3, #-16]
 800ddb6:	7fbb      	ldrb	r3, [r7, #30]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	77bb      	strb	r3, [r7, #30]
 800ddbc:	7fbb      	ldrb	r3, [r7, #30]
 800ddbe:	2b03      	cmp	r3, #3
 800ddc0:	d9ef      	bls.n	800dda2 <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800ddc2:	f107 0210 	add.w	r2, r7, #16
 800ddc6:	f107 0110 	add.w	r1, r7, #16
 800ddca:	f107 031c 	add.w	r3, r7, #28
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	220c      	movs	r2, #12
 800ddd4:	200e      	movs	r0, #14
 800ddd6:	f7ff fe2a 	bl	800da2e <MFRC522_ToCard>
 800ddda:	4603      	mov	r3, r0
 800dddc:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 800ddde:	7ffb      	ldrb	r3, [r7, #31]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d107      	bne.n	800ddf4 <MFRC522_Auth+0x98>
 800dde4:	2008      	movs	r0, #8
 800dde6:	f7ff fdab 	bl	800d940 <MFRC522_ReadRegister>
 800ddea:	4603      	mov	r3, r0
 800ddec:	f003 0308 	and.w	r3, r3, #8
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d101      	bne.n	800ddf8 <MFRC522_Auth+0x9c>
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	77fb      	strb	r3, [r7, #31]
	return status;
 800ddf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3720      	adds	r7, #32
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 800de02:	b580      	push	{r7, lr}
 800de04:	b086      	sub	sp, #24
 800de06:	af02      	add	r7, sp, #8
 800de08:	4603      	mov	r3, r0
 800de0a:	6039      	str	r1, [r7, #0]
 800de0c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2230      	movs	r2, #48	; 0x30
 800de12:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	3301      	adds	r3, #1
 800de18:	79fa      	ldrb	r2, [r7, #7]
 800de1a:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	3302      	adds	r3, #2
 800de20:	461a      	mov	r2, r3
 800de22:	2102      	movs	r1, #2
 800de24:	6838      	ldr	r0, [r7, #0]
 800de26:	f7ff ff0e 	bl	800dc46 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800de2a:	f107 030c 	add.w	r3, r7, #12
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	2204      	movs	r2, #4
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	200c      	movs	r0, #12
 800de38:	f7ff fdf9 	bl	800da2e <MFRC522_ToCard>
 800de3c:	4603      	mov	r3, r0
 800de3e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800de40:	7bfb      	ldrb	r3, [r7, #15]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d102      	bne.n	800de4c <MFRC522_Read+0x4a>
 800de46:	89bb      	ldrh	r3, [r7, #12]
 800de48:	2b90      	cmp	r3, #144	; 0x90
 800de4a:	d001      	beq.n	800de50 <MFRC522_Read+0x4e>
 800de4c:	2302      	movs	r3, #2
 800de4e:	73fb      	strb	r3, [r7, #15]
	return status;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800de5a:	b580      	push	{r7, lr}
 800de5c:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800de5e:	f000 f820 	bl	800dea2 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800de62:	218d      	movs	r1, #141	; 0x8d
 800de64:	202a      	movs	r0, #42	; 0x2a
 800de66:	f7ff fd53 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800de6a:	213e      	movs	r1, #62	; 0x3e
 800de6c:	202b      	movs	r0, #43	; 0x2b
 800de6e:	f7ff fd4f 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800de72:	211e      	movs	r1, #30
 800de74:	202d      	movs	r0, #45	; 0x2d
 800de76:	f7ff fd4b 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800de7a:	2100      	movs	r1, #0
 800de7c:	202c      	movs	r0, #44	; 0x2c
 800de7e:	f7ff fd47 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800de82:	2170      	movs	r1, #112	; 0x70
 800de84:	2026      	movs	r0, #38	; 0x26
 800de86:	f7ff fd43 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800de8a:	2140      	movs	r1, #64	; 0x40
 800de8c:	2015      	movs	r0, #21
 800de8e:	f7ff fd3f 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800de92:	213d      	movs	r1, #61	; 0x3d
 800de94:	2011      	movs	r0, #17
 800de96:	f7ff fd3b 	bl	800d910 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800de9a:	f000 f80a 	bl	800deb2 <MFRC522_AntennaOn>
}
 800de9e:	bf00      	nop
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800dea2:	b580      	push	{r7, lr}
 800dea4:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800dea6:	210f      	movs	r1, #15
 800dea8:	2001      	movs	r0, #1
 800deaa:	f7ff fd31 	bl	800d910 <MFRC522_WriteRegister>
}
 800deae:	bf00      	nop
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800deb8:	2014      	movs	r0, #20
 800deba:	f7ff fd41 	bl	800d940 <MFRC522_ReadRegister>
 800debe:	4603      	mov	r3, r0
 800dec0:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800dec2:	79fb      	ldrb	r3, [r7, #7]
 800dec4:	f003 0303 	and.w	r3, r3, #3
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d103      	bne.n	800ded4 <MFRC522_AntennaOn+0x22>
 800decc:	2103      	movs	r1, #3
 800dece:	2014      	movs	r0, #20
 800ded0:	f7ff fd50 	bl	800d974 <MFRC522_SetBitMask>
}
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 800dedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dede:	b0f1      	sub	sp, #452	; 0x1c4
 800dee0:	af0e      	add	r7, sp, #56	; 0x38
 800dee2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800dee6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800deea:	6018      	str	r0, [r3, #0]
	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 800deec:	4aad      	ldr	r2, [pc, #692]	; (800e1a4 <cardOperationWithBlockedSector+0x2c8>)
 800deee:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800def2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800def6:	6018      	str	r0, [r3, #0]
 800def8:	3304      	adds	r3, #4
 800defa:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 800df08:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d13b      	bne.n	800df88 <cardOperationWithBlockedSector+0xac>
	     MFRC522_Init();
 800df10:	f7ff ffa3 	bl	800de5a <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 800df14:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800df18:	4619      	mov	r1, r3
 800df1a:	2026      	movs	r0, #38	; 0x26
 800df1c:	f7ff fd62 	bl	800d9e4 <MFRC522_Request>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d130      	bne.n	800df88 <cardOperationWithBlockedSector+0xac>
	       if (!MFRC522_Anticoll(str)) {
 800df26:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7ff fe4e 	bl	800dbcc <MFRC522_Anticoll>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d128      	bne.n	800df88 <cardOperationWithBlockedSector+0xac>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\""STR(currentTerminal)"\",\"cardID\":\"%x%x%x%x\",", str[0],str[1], str[2], str[3]);
 800df36:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800df3a:	4619      	mov	r1, r3
 800df3c:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800df40:	461c      	mov	r4, r3
 800df42:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800df46:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 800df4a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800df4e:	9201      	str	r2, [sp, #4]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	4623      	mov	r3, r4
 800df54:	460a      	mov	r2, r1
 800df56:	4994      	ldr	r1, [pc, #592]	; (800e1a8 <cardOperationWithBlockedSector+0x2cc>)
 800df58:	f003 f8f2 	bl	8011140 <siprintf>

	         l = strlen((char*)IDBuff);
 800df5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800df60:	4618      	mov	r0, r3
 800df62:	f7fe f8f3 	bl	800c14c <strlen>
 800df66:	4603      	mov	r3, r0
 800df68:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 800df6c:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800df70:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800df74:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800df78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	f003 f8c9 	bl	8011114 <memcpy>

	         cardIDStatus = 1;
 800df82:	2301      	movs	r3, #1
 800df84:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 800df88:	2014      	movs	r0, #20
 800df8a:	f000 fbfb 	bl	800e784 <HAL_Delay>
	  MFRC522_Init();
 800df8e:	f7ff ff64 	bl	800de5a <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 800df92:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800df96:	2b01      	cmp	r3, #1
 800df98:	f040 80ed 	bne.w	800e176 <cardOperationWithBlockedSector+0x29a>
 800df9c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f040 80e8 	bne.w	800e176 <cardOperationWithBlockedSector+0x29a>
	    MFRC522_Init();
 800dfa6:	f7ff ff58 	bl	800de5a <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 800dfaa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dfae:	4619      	mov	r1, r3
 800dfb0:	2026      	movs	r0, #38	; 0x26
 800dfb2:	f7ff fd17 	bl	800d9e4 <MFRC522_Request>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 800dfbc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f040 80ce 	bne.w	800e162 <cardOperationWithBlockedSector+0x286>
	      status = MFRC522_Anticoll(str);
 800dfc6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7ff fdfe 	bl	800dbcc <MFRC522_Anticoll>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 800dfd6:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f040 80b7 	bne.w	800e14e <cardOperationWithBlockedSector+0x272>
	        status = MFRC522_SelectTag(str);
 800dfe0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7ff fe77 	bl	800dcd8 <MFRC522_SelectTag>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 800dff0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f000 80a0 	beq.w	800e13a <cardOperationWithBlockedSector+0x25e>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 800dffa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dffe:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800e002:	2102      	movs	r1, #2
 800e004:	2061      	movs	r0, #97	; 0x61
 800e006:	f7ff fea9 	bl	800dd5c <MFRC522_Auth>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 800e010:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e014:	2b00      	cmp	r3, #0
 800e016:	f040 8086 	bne.w	800e126 <cardOperationWithBlockedSector+0x24a>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 800e01a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e01e:	4619      	mov	r1, r3
 800e020:	2002      	movs	r0, #2
 800e022:	f7ff feee 	bl	800de02 <MFRC522_Read>
 800e026:	4603      	mov	r3, r0
 800e028:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 800e02c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e030:	2b00      	cmp	r3, #0
 800e032:	d16e      	bne.n	800e112 <cardOperationWithBlockedSector+0x236>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 800e034:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800e038:	469c      	mov	ip, r3
 800e03a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800e03e:	469e      	mov	lr, r3
 800e040:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800e044:	461c      	mov	r4, r3
 800e046:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800e04a:	461d      	mov	r5, r3
 800e04c:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800e050:	461e      	mov	r6, r3
 800e052:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800e056:	623b      	str	r3, [r7, #32]
 800e058:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800e05c:	61fb      	str	r3, [r7, #28]
 800e05e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800e062:	61bb      	str	r3, [r7, #24]
 800e064:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800e06e:	613b      	str	r3, [r7, #16]
 800e070:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800e074:	60fb      	str	r3, [r7, #12]
 800e076:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800e07a:	60bb      	str	r3, [r7, #8]
 800e07c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800e080:	607b      	str	r3, [r7, #4]
 800e082:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800e086:	4619      	mov	r1, r3
 800e088:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800e08c:	461a      	mov	r2, r3
 800e08e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800e092:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e096:	930d      	str	r3, [sp, #52]	; 0x34
 800e098:	920c      	str	r2, [sp, #48]	; 0x30
 800e09a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	920a      	str	r2, [sp, #40]	; 0x28
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	9208      	str	r2, [sp, #32]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	9207      	str	r2, [sp, #28]
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	9206      	str	r2, [sp, #24]
 800e0b0:	69ba      	ldr	r2, [r7, #24]
 800e0b2:	9205      	str	r2, [sp, #20]
 800e0b4:	69fa      	ldr	r2, [r7, #28]
 800e0b6:	9204      	str	r2, [sp, #16]
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	9303      	str	r3, [sp, #12]
 800e0bc:	9602      	str	r6, [sp, #8]
 800e0be:	9501      	str	r5, [sp, #4]
 800e0c0:	9400      	str	r4, [sp, #0]
 800e0c2:	4673      	mov	r3, lr
 800e0c4:	4662      	mov	r2, ip
 800e0c6:	4939      	ldr	r1, [pc, #228]	; (800e1ac <cardOperationWithBlockedSector+0x2d0>)
 800e0c8:	f003 f83a 	bl	8011140 <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800e0cc:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e0d0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800e0d4:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800e0d8:	6812      	ldr	r2, [r2, #0]
 800e0da:	18d4      	adds	r4, r2, r3
 800e0dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe f833 	bl	800c14c <strlen>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f003 f810 	bl	8011114 <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 800e0f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fe f827 	bl	800c14c <strlen>
 800e0fe:	4603      	mov	r3, r0
 800e100:	b2da      	uxtb	r2, r3
 800e102:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e106:	4413      	add	r3, r2
 800e108:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 800e10c:	2301      	movs	r3, #1
 800e10e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 800e112:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e116:	2b02      	cmp	r3, #2
 800e118:	d105      	bne.n	800e126 <cardOperationWithBlockedSector+0x24a>
	              led(READ_ERR);
 800e11a:	2005      	movs	r0, #5
 800e11c:	f000 f848 	bl	800e1b0 <led>
	              cardIDStatus = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800e126:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d005      	beq.n	800e13a <cardOperationWithBlockedSector+0x25e>
	            led(AUTH_ERR);
 800e12e:	2004      	movs	r0, #4
 800e130:	f000 f83e 	bl	800e1b0 <led>
	            cardIDStatus = 0;
 800e134:	2300      	movs	r3, #0
 800e136:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800e13a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d005      	beq.n	800e14e <cardOperationWithBlockedSector+0x272>
	          led(TAG_SELECT_ERR);
 800e142:	2003      	movs	r0, #3
 800e144:	f000 f834 	bl	800e1b0 <led>
	          cardIDStatus = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 800e14e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e152:	2b00      	cmp	r3, #0
 800e154:	d005      	beq.n	800e162 <cardOperationWithBlockedSector+0x286>
	        led(ANTICOL_ERR);
 800e156:	2002      	movs	r0, #2
 800e158:	f000 f82a 	bl	800e1b0 <led>
	        cardIDStatus = 0;
 800e15c:	2300      	movs	r3, #0
 800e15e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 800e162:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e166:	2b00      	cmp	r3, #0
 800e168:	d005      	beq.n	800e176 <cardOperationWithBlockedSector+0x29a>
	      led(REQUEST_ERR);
 800e16a:	2001      	movs	r0, #1
 800e16c:	f000 f820 	bl	800e1b0 <led>
	      cardIDStatus = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800e176:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d10b      	bne.n	800e196 <cardOperationWithBlockedSector+0x2ba>
 800e17e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e182:	2b01      	cmp	r3, #1
 800e184:	d107      	bne.n	800e196 <cardOperationWithBlockedSector+0x2ba>

	      cardIDStatus = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 800e192:	2301      	movs	r3, #1
 800e194:	e000      	b.n	800e198 <cardOperationWithBlockedSector+0x2bc>
	    }
	  return 0;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	08011d94 	.word	0x08011d94
 800e1a8:	08011d08 	.word	0x08011d08
 800e1ac:	08011d64 	.word	0x08011d64

0800e1b0 <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	73fb      	strb	r3, [r7, #15]
 800e1be:	e014      	b.n	800e1ea <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e1c6:	480d      	ldr	r0, [pc, #52]	; (800e1fc <led+0x4c>)
 800e1c8:	f000 fe42 	bl	800ee50 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e1cc:	2064      	movs	r0, #100	; 0x64
 800e1ce:	f000 fad9 	bl	800e784 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e1d8:	4808      	ldr	r0, [pc, #32]	; (800e1fc <led+0x4c>)
 800e1da:	f000 fe39 	bl	800ee50 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e1de:	2064      	movs	r0, #100	; 0x64
 800e1e0:	f000 fad0 	bl	800e784 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	73fb      	strb	r3, [r7, #15]
 800e1ea:	7bfa      	ldrb	r2, [r7, #15]
 800e1ec:	79fb      	ldrb	r3, [r7, #7]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d3e6      	bcc.n	800e1c0 <led+0x10>
	}
}
 800e1f2:	bf00      	nop
 800e1f4:	bf00      	nop
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	40011000 	.word	0x40011000

0800e200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800e206:	4b15      	ldr	r3, [pc, #84]	; (800e25c <HAL_MspInit+0x5c>)
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	4a14      	ldr	r2, [pc, #80]	; (800e25c <HAL_MspInit+0x5c>)
 800e20c:	f043 0301 	orr.w	r3, r3, #1
 800e210:	6193      	str	r3, [r2, #24]
 800e212:	4b12      	ldr	r3, [pc, #72]	; (800e25c <HAL_MspInit+0x5c>)
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	60bb      	str	r3, [r7, #8]
 800e21c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e21e:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <HAL_MspInit+0x5c>)
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	4a0e      	ldr	r2, [pc, #56]	; (800e25c <HAL_MspInit+0x5c>)
 800e224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e228:	61d3      	str	r3, [r2, #28]
 800e22a:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <HAL_MspInit+0x5c>)
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e232:	607b      	str	r3, [r7, #4]
 800e234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800e236:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <HAL_MspInit+0x60>)
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	4a04      	ldr	r2, [pc, #16]	; (800e260 <HAL_MspInit+0x60>)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e252:	bf00      	nop
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	bc80      	pop	{r7}
 800e25a:	4770      	bx	lr
 800e25c:	40021000 	.word	0x40021000
 800e260:	40010000 	.word	0x40010000

0800e264 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b088      	sub	sp, #32
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e26c:	f107 0310 	add.w	r3, r7, #16
 800e270:	2200      	movs	r2, #0
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	605a      	str	r2, [r3, #4]
 800e276:	609a      	str	r2, [r3, #8]
 800e278:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a15      	ldr	r2, [pc, #84]	; (800e2d4 <HAL_I2C_MspInit+0x70>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d123      	bne.n	800e2cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e284:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <HAL_I2C_MspInit+0x74>)
 800e286:	699b      	ldr	r3, [r3, #24]
 800e288:	4a13      	ldr	r2, [pc, #76]	; (800e2d8 <HAL_I2C_MspInit+0x74>)
 800e28a:	f043 0308 	orr.w	r3, r3, #8
 800e28e:	6193      	str	r3, [r2, #24]
 800e290:	4b11      	ldr	r3, [pc, #68]	; (800e2d8 <HAL_I2C_MspInit+0x74>)
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	f003 0308 	and.w	r3, r3, #8
 800e298:	60fb      	str	r3, [r7, #12]
 800e29a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e29c:	23c0      	movs	r3, #192	; 0xc0
 800e29e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e2a0:	2312      	movs	r3, #18
 800e2a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2a8:	f107 0310 	add.w	r3, r7, #16
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	480b      	ldr	r0, [pc, #44]	; (800e2dc <HAL_I2C_MspInit+0x78>)
 800e2b0:	f000 fc4a 	bl	800eb48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e2b4:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <HAL_I2C_MspInit+0x74>)
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	4a07      	ldr	r2, [pc, #28]	; (800e2d8 <HAL_I2C_MspInit+0x74>)
 800e2ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2be:	61d3      	str	r3, [r2, #28]
 800e2c0:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <HAL_I2C_MspInit+0x74>)
 800e2c2:	69db      	ldr	r3, [r3, #28]
 800e2c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2c8:	60bb      	str	r3, [r7, #8]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e2cc:	bf00      	nop
 800e2ce:	3720      	adds	r7, #32
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	40005400 	.word	0x40005400
 800e2d8:	40021000 	.word	0x40021000
 800e2dc:	40010c00 	.word	0x40010c00

0800e2e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2e8:	f107 0310 	add.w	r3, r7, #16
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	601a      	str	r2, [r3, #0]
 800e2f0:	605a      	str	r2, [r3, #4]
 800e2f2:	609a      	str	r2, [r3, #8]
 800e2f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a1b      	ldr	r2, [pc, #108]	; (800e368 <HAL_SPI_MspInit+0x88>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d12f      	bne.n	800e360 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e300:	4b1a      	ldr	r3, [pc, #104]	; (800e36c <HAL_SPI_MspInit+0x8c>)
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	4a19      	ldr	r2, [pc, #100]	; (800e36c <HAL_SPI_MspInit+0x8c>)
 800e306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e30a:	6193      	str	r3, [r2, #24]
 800e30c:	4b17      	ldr	r3, [pc, #92]	; (800e36c <HAL_SPI_MspInit+0x8c>)
 800e30e:	699b      	ldr	r3, [r3, #24]
 800e310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e314:	60fb      	str	r3, [r7, #12]
 800e316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e318:	4b14      	ldr	r3, [pc, #80]	; (800e36c <HAL_SPI_MspInit+0x8c>)
 800e31a:	699b      	ldr	r3, [r3, #24]
 800e31c:	4a13      	ldr	r2, [pc, #76]	; (800e36c <HAL_SPI_MspInit+0x8c>)
 800e31e:	f043 0304 	orr.w	r3, r3, #4
 800e322:	6193      	str	r3, [r2, #24]
 800e324:	4b11      	ldr	r3, [pc, #68]	; (800e36c <HAL_SPI_MspInit+0x8c>)
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	f003 0304 	and.w	r3, r3, #4
 800e32c:	60bb      	str	r3, [r7, #8]
 800e32e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800e330:	23a0      	movs	r3, #160	; 0xa0
 800e332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e334:	2302      	movs	r3, #2
 800e336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e338:	2303      	movs	r3, #3
 800e33a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e33c:	f107 0310 	add.w	r3, r7, #16
 800e340:	4619      	mov	r1, r3
 800e342:	480b      	ldr	r0, [pc, #44]	; (800e370 <HAL_SPI_MspInit+0x90>)
 800e344:	f000 fc00 	bl	800eb48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e348:	2340      	movs	r3, #64	; 0x40
 800e34a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e34c:	2300      	movs	r3, #0
 800e34e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e350:	2300      	movs	r3, #0
 800e352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e354:	f107 0310 	add.w	r3, r7, #16
 800e358:	4619      	mov	r1, r3
 800e35a:	4805      	ldr	r0, [pc, #20]	; (800e370 <HAL_SPI_MspInit+0x90>)
 800e35c:	f000 fbf4 	bl	800eb48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e360:	bf00      	nop
 800e362:	3720      	adds	r7, #32
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	40013000 	.word	0x40013000
 800e36c:	40021000 	.word	0x40021000
 800e370:	40010800 	.word	0x40010800

0800e374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08a      	sub	sp, #40	; 0x28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e37c:	f107 0318 	add.w	r3, r7, #24
 800e380:	2200      	movs	r2, #0
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	605a      	str	r2, [r3, #4]
 800e386:	609a      	str	r2, [r3, #8]
 800e388:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a3b      	ldr	r2, [pc, #236]	; (800e47c <HAL_UART_MspInit+0x108>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d13a      	bne.n	800e40a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e394:	4b3a      	ldr	r3, [pc, #232]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e396:	699b      	ldr	r3, [r3, #24]
 800e398:	4a39      	ldr	r2, [pc, #228]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e39a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e39e:	6193      	str	r3, [r2, #24]
 800e3a0:	4b37      	ldr	r3, [pc, #220]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e3a2:	699b      	ldr	r3, [r3, #24]
 800e3a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3a8:	617b      	str	r3, [r7, #20]
 800e3aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3ac:	4b34      	ldr	r3, [pc, #208]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	4a33      	ldr	r2, [pc, #204]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e3b2:	f043 0304 	orr.w	r3, r3, #4
 800e3b6:	6193      	str	r3, [r2, #24]
 800e3b8:	4b31      	ldr	r3, [pc, #196]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	f003 0304 	and.w	r3, r3, #4
 800e3c0:	613b      	str	r3, [r7, #16]
 800e3c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e3c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3ca:	2302      	movs	r3, #2
 800e3cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e3ce:	2303      	movs	r3, #3
 800e3d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3d2:	f107 0318 	add.w	r3, r7, #24
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	482a      	ldr	r0, [pc, #168]	; (800e484 <HAL_UART_MspInit+0x110>)
 800e3da:	f000 fbb5 	bl	800eb48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3ec:	f107 0318 	add.w	r3, r7, #24
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4824      	ldr	r0, [pc, #144]	; (800e484 <HAL_UART_MspInit+0x110>)
 800e3f4:	f000 fba8 	bl	800eb48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	2025      	movs	r0, #37	; 0x25
 800e3fe:	f000 fabc 	bl	800e97a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e402:	2025      	movs	r0, #37	; 0x25
 800e404:	f000 fad5 	bl	800e9b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e408:	e034      	b.n	800e474 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a1e      	ldr	r2, [pc, #120]	; (800e488 <HAL_UART_MspInit+0x114>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d12f      	bne.n	800e474 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e414:	4b1a      	ldr	r3, [pc, #104]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e416:	69db      	ldr	r3, [r3, #28]
 800e418:	4a19      	ldr	r2, [pc, #100]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e41a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e41e:	61d3      	str	r3, [r2, #28]
 800e420:	4b17      	ldr	r3, [pc, #92]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e422:	69db      	ldr	r3, [r3, #28]
 800e424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e42c:	4b14      	ldr	r3, [pc, #80]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e42e:	699b      	ldr	r3, [r3, #24]
 800e430:	4a13      	ldr	r2, [pc, #76]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e432:	f043 0304 	orr.w	r3, r3, #4
 800e436:	6193      	str	r3, [r2, #24]
 800e438:	4b11      	ldr	r3, [pc, #68]	; (800e480 <HAL_UART_MspInit+0x10c>)
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	60bb      	str	r3, [r7, #8]
 800e442:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e444:	2304      	movs	r3, #4
 800e446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e448:	2302      	movs	r3, #2
 800e44a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e44c:	2303      	movs	r3, #3
 800e44e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e450:	f107 0318 	add.w	r3, r7, #24
 800e454:	4619      	mov	r1, r3
 800e456:	480b      	ldr	r0, [pc, #44]	; (800e484 <HAL_UART_MspInit+0x110>)
 800e458:	f000 fb76 	bl	800eb48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e45c:	2308      	movs	r3, #8
 800e45e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e460:	2300      	movs	r3, #0
 800e462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e464:	2300      	movs	r3, #0
 800e466:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e468:	f107 0318 	add.w	r3, r7, #24
 800e46c:	4619      	mov	r1, r3
 800e46e:	4805      	ldr	r0, [pc, #20]	; (800e484 <HAL_UART_MspInit+0x110>)
 800e470:	f000 fb6a 	bl	800eb48 <HAL_GPIO_Init>
}
 800e474:	bf00      	nop
 800e476:	3728      	adds	r7, #40	; 0x28
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	40013800 	.word	0x40013800
 800e480:	40021000 	.word	0x40021000
 800e484:	40010800 	.word	0x40010800
 800e488:	40004400 	.word	0x40004400

0800e48c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e48c:	b480      	push	{r7}
 800e48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e490:	e7fe      	b.n	800e490 <NMI_Handler+0x4>

0800e492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	jumpToAddress(0x08000000);
 800e496:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800e49a:	f7ff f9a8 	bl	800d7ee <jumpToAddress>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e49e:	e7fe      	b.n	800e49e <HardFault_Handler+0xc>

0800e4a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e4a4:	e7fe      	b.n	800e4a4 <MemManage_Handler+0x4>

0800e4a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e4aa:	e7fe      	b.n	800e4aa <BusFault_Handler+0x4>

0800e4ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e4b0:	e7fe      	b.n	800e4b0 <UsageFault_Handler+0x4>

0800e4b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e4b6:	bf00      	nop
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bc80      	pop	{r7}
 800e4bc:	4770      	bx	lr

0800e4be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e4be:	b480      	push	{r7}
 800e4c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e4c2:	bf00      	nop
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bc80      	pop	{r7}
 800e4c8:	4770      	bx	lr

0800e4ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e4ce:	bf00      	nop
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bc80      	pop	{r7}
 800e4d4:	4770      	bx	lr

0800e4d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e4da:	f000 f937 	bl	800e74c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e4de:	bf00      	nop
 800e4e0:	bd80      	pop	{r7, pc}
	...

0800e4e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e4e8:	4802      	ldr	r0, [pc, #8]	; (800e4f4 <USART1_IRQHandler+0x10>)
 800e4ea:	f002 f9bd 	bl	8010868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e4ee:	bf00      	nop
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000404 	.word	0x20000404

0800e4f8 <AppruveSound>:

#include "stm32f1xx_hal.h"
#include "switchSounds.h"
#include "main.h"

void AppruveSound() {
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	4815      	ldr	r0, [pc, #84]	; (800e554 <AppruveSound+0x5c>)
 800e500:	f000 fcbe 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e504:	2050      	movs	r0, #80	; 0x50
 800e506:	f000 f93d 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e50a:	2101      	movs	r1, #1
 800e50c:	4811      	ldr	r0, [pc, #68]	; (800e554 <AppruveSound+0x5c>)
 800e50e:	f000 fcb7 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e512:	2050      	movs	r0, #80	; 0x50
 800e514:	f000 f936 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e518:	2101      	movs	r1, #1
 800e51a:	480e      	ldr	r0, [pc, #56]	; (800e554 <AppruveSound+0x5c>)
 800e51c:	f000 fcb0 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e520:	2050      	movs	r0, #80	; 0x50
 800e522:	f000 f92f 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e526:	2101      	movs	r1, #1
 800e528:	480a      	ldr	r0, [pc, #40]	; (800e554 <AppruveSound+0x5c>)
 800e52a:	f000 fca9 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e52e:	2050      	movs	r0, #80	; 0x50
 800e530:	f000 f928 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e534:	2101      	movs	r1, #1
 800e536:	4807      	ldr	r0, [pc, #28]	; (800e554 <AppruveSound+0x5c>)
 800e538:	f000 fca2 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e53c:	2050      	movs	r0, #80	; 0x50
 800e53e:	f000 f921 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e542:	2101      	movs	r1, #1
 800e544:	4803      	ldr	r0, [pc, #12]	; (800e554 <AppruveSound+0x5c>)
 800e546:	f000 fc9b 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e54a:	2050      	movs	r0, #80	; 0x50
 800e54c:	f000 f91a 	bl	800e784 <HAL_Delay>
}
 800e550:	bf00      	nop
 800e552:	bd80      	pop	{r7, pc}
 800e554:	40010c00 	.word	0x40010c00

0800e558 <ErrorSound>:
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);

}
void ErrorSound() {
 800e558:	b580      	push	{r7, lr}
 800e55a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e55c:	2101      	movs	r1, #1
 800e55e:	480e      	ldr	r0, [pc, #56]	; (800e598 <ErrorSound+0x40>)
 800e560:	f000 fc8e 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e568:	f000 f90c 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e56c:	2101      	movs	r1, #1
 800e56e:	480a      	ldr	r0, [pc, #40]	; (800e598 <ErrorSound+0x40>)
 800e570:	f000 fc86 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800e574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e578:	f000 f904 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e57c:	2101      	movs	r1, #1
 800e57e:	4806      	ldr	r0, [pc, #24]	; (800e598 <ErrorSound+0x40>)
 800e580:	f000 fc7e 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e588:	f000 f8fc 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e58c:	2101      	movs	r1, #1
 800e58e:	4802      	ldr	r0, [pc, #8]	; (800e598 <ErrorSound+0x40>)
 800e590:	f000 fc76 	bl	800ee80 <HAL_GPIO_TogglePin>

}
 800e594:	bf00      	nop
 800e596:	bd80      	pop	{r7, pc}
 800e598:	40010c00 	.word	0x40010c00

0800e59c <CardReadSound>:
void CardReadSound() {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e5a0:	2101      	movs	r1, #1
 800e5a2:	4806      	ldr	r0, [pc, #24]	; (800e5bc <CardReadSound+0x20>)
 800e5a4:	f000 fc6c 	bl	800ee80 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800e5a8:	2032      	movs	r0, #50	; 0x32
 800e5aa:	f000 f8eb 	bl	800e784 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	4802      	ldr	r0, [pc, #8]	; (800e5bc <CardReadSound+0x20>)
 800e5b2:	f000 fc65 	bl	800ee80 <HAL_GPIO_TogglePin>

}
 800e5b6:	bf00      	nop
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	40010c00 	.word	0x40010c00

0800e5c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e5c8:	4a14      	ldr	r2, [pc, #80]	; (800e61c <_sbrk+0x5c>)
 800e5ca:	4b15      	ldr	r3, [pc, #84]	; (800e620 <_sbrk+0x60>)
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e5d4:	4b13      	ldr	r3, [pc, #76]	; (800e624 <_sbrk+0x64>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d102      	bne.n	800e5e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e5dc:	4b11      	ldr	r3, [pc, #68]	; (800e624 <_sbrk+0x64>)
 800e5de:	4a12      	ldr	r2, [pc, #72]	; (800e628 <_sbrk+0x68>)
 800e5e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e5e2:	4b10      	ldr	r3, [pc, #64]	; (800e624 <_sbrk+0x64>)
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d207      	bcs.n	800e600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e5f0:	f002 fd66 	bl	80110c0 <__errno>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	220c      	movs	r2, #12
 800e5f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e5fe:	e009      	b.n	800e614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e600:	4b08      	ldr	r3, [pc, #32]	; (800e624 <_sbrk+0x64>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e606:	4b07      	ldr	r3, [pc, #28]	; (800e624 <_sbrk+0x64>)
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4413      	add	r3, r2
 800e60e:	4a05      	ldr	r2, [pc, #20]	; (800e624 <_sbrk+0x64>)
 800e610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e612:	68fb      	ldr	r3, [r7, #12]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3718      	adds	r7, #24
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	20005000 	.word	0x20005000
 800e620:	00000400 	.word	0x00000400
 800e624:	2000048c 	.word	0x2000048c
 800e628:	200004a8 	.word	0x200004a8

0800e62c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e62c:	b480      	push	{r7}
 800e62e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e630:	bf00      	nop
 800e632:	46bd      	mov	sp, r7
 800e634:	bc80      	pop	{r7}
 800e636:	4770      	bx	lr

0800e638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e638:	480c      	ldr	r0, [pc, #48]	; (800e66c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e63a:	490d      	ldr	r1, [pc, #52]	; (800e670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e63c:	4a0d      	ldr	r2, [pc, #52]	; (800e674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e63e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e640:	e002      	b.n	800e648 <LoopCopyDataInit>

0800e642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e646:	3304      	adds	r3, #4

0800e648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e64a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e64c:	d3f9      	bcc.n	800e642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e64e:	4a0a      	ldr	r2, [pc, #40]	; (800e678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e650:	4c0a      	ldr	r4, [pc, #40]	; (800e67c <LoopFillZerobss+0x22>)
  movs r3, #0
 800e652:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e654:	e001      	b.n	800e65a <LoopFillZerobss>

0800e656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e658:	3204      	adds	r2, #4

0800e65a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e65a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e65c:	d3fb      	bcc.n	800e656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e65e:	f7ff ffe5 	bl	800e62c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e662:	f002 fd33 	bl	80110cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e666:	f7fe fce5 	bl	800d034 <main>
  bx lr
 800e66a:	4770      	bx	lr
  ldr r0, =_sdata
 800e66c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e670:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 800e674:	08011fb8 	.word	0x08011fb8
  ldr r2, =_sbss
 800e678:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 800e67c:	200004a4 	.word	0x200004a4

0800e680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e680:	e7fe      	b.n	800e680 <ADC1_2_IRQHandler>
	...

0800e684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e688:	4b08      	ldr	r3, [pc, #32]	; (800e6ac <HAL_Init+0x28>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a07      	ldr	r2, [pc, #28]	; (800e6ac <HAL_Init+0x28>)
 800e68e:	f043 0310 	orr.w	r3, r3, #16
 800e692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e694:	2003      	movs	r0, #3
 800e696:	f000 f965 	bl	800e964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e69a:	200f      	movs	r0, #15
 800e69c:	f000 f826 	bl	800e6ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e6a0:	f7ff fdae 	bl	800e200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	40022000 	.word	0x40022000

0800e6b0 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800e6b4:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <HAL_DeInit+0x2c>)
 800e6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ba:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 800e6bc:	4b07      	ldr	r3, [pc, #28]	; (800e6dc <HAL_DeInit+0x2c>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800e6c2:	4b06      	ldr	r3, [pc, #24]	; (800e6dc <HAL_DeInit+0x2c>)
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800e6ca:	4b04      	ldr	r3, [pc, #16]	; (800e6dc <HAL_DeInit+0x2c>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800e6d0:	f000 f806 	bl	800e6e0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	40021000 	.word	0x40021000

0800e6e0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800e6e4:	bf00      	nop
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bc80      	pop	{r7}
 800e6ea:	4770      	bx	lr

0800e6ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e6f4:	4b12      	ldr	r3, [pc, #72]	; (800e740 <HAL_InitTick+0x54>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	4b12      	ldr	r3, [pc, #72]	; (800e744 <HAL_InitTick+0x58>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e702:	fbb3 f3f1 	udiv	r3, r3, r1
 800e706:	fbb2 f3f3 	udiv	r3, r2, r3
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 f95f 	bl	800e9ce <HAL_SYSTICK_Config>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	e00e      	b.n	800e738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b0f      	cmp	r3, #15
 800e71e:	d80a      	bhi.n	800e736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e720:	2200      	movs	r2, #0
 800e722:	6879      	ldr	r1, [r7, #4]
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	f000 f927 	bl	800e97a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e72c:	4a06      	ldr	r2, [pc, #24]	; (800e748 <HAL_InitTick+0x5c>)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e732:	2300      	movs	r3, #0
 800e734:	e000      	b.n	800e738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e736:	2301      	movs	r3, #1
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	200000cc 	.word	0x200000cc
 800e744:	200000d4 	.word	0x200000d4
 800e748:	200000d0 	.word	0x200000d0

0800e74c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e74c:	b480      	push	{r7}
 800e74e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <HAL_IncTick+0x1c>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	461a      	mov	r2, r3
 800e756:	4b05      	ldr	r3, [pc, #20]	; (800e76c <HAL_IncTick+0x20>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4413      	add	r3, r2
 800e75c:	4a03      	ldr	r2, [pc, #12]	; (800e76c <HAL_IncTick+0x20>)
 800e75e:	6013      	str	r3, [r2, #0]
}
 800e760:	bf00      	nop
 800e762:	46bd      	mov	sp, r7
 800e764:	bc80      	pop	{r7}
 800e766:	4770      	bx	lr
 800e768:	200000d4 	.word	0x200000d4
 800e76c:	20000490 	.word	0x20000490

0800e770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e770:	b480      	push	{r7}
 800e772:	af00      	add	r7, sp, #0
  return uwTick;
 800e774:	4b02      	ldr	r3, [pc, #8]	; (800e780 <HAL_GetTick+0x10>)
 800e776:	681b      	ldr	r3, [r3, #0]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bc80      	pop	{r7}
 800e77e:	4770      	bx	lr
 800e780:	20000490 	.word	0x20000490

0800e784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e78c:	f7ff fff0 	bl	800e770 <HAL_GetTick>
 800e790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79c:	d005      	beq.n	800e7aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e79e:	4b0a      	ldr	r3, [pc, #40]	; (800e7c8 <HAL_Delay+0x44>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e7aa:	bf00      	nop
 800e7ac:	f7ff ffe0 	bl	800e770 <HAL_GetTick>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d8f7      	bhi.n	800e7ac <HAL_Delay+0x28>
  {
  }
}
 800e7bc:	bf00      	nop
 800e7be:	bf00      	nop
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	200000d4 	.word	0x200000d4

0800e7cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f003 0307 	and.w	r3, r3, #7
 800e7da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e7dc:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <__NVIC_SetPriorityGrouping+0x44>)
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e7f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e7f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e7fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e7fe:	4a04      	ldr	r2, [pc, #16]	; (800e810 <__NVIC_SetPriorityGrouping+0x44>)
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	60d3      	str	r3, [r2, #12]
}
 800e804:	bf00      	nop
 800e806:	3714      	adds	r7, #20
 800e808:	46bd      	mov	sp, r7
 800e80a:	bc80      	pop	{r7}
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	e000ed00 	.word	0xe000ed00

0800e814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e818:	4b04      	ldr	r3, [pc, #16]	; (800e82c <__NVIC_GetPriorityGrouping+0x18>)
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	0a1b      	lsrs	r3, r3, #8
 800e81e:	f003 0307 	and.w	r3, r3, #7
}
 800e822:	4618      	mov	r0, r3
 800e824:	46bd      	mov	sp, r7
 800e826:	bc80      	pop	{r7}
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	e000ed00 	.word	0xe000ed00

0800e830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	4603      	mov	r3, r0
 800e838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	db0b      	blt.n	800e85a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e842:	79fb      	ldrb	r3, [r7, #7]
 800e844:	f003 021f 	and.w	r2, r3, #31
 800e848:	4906      	ldr	r1, [pc, #24]	; (800e864 <__NVIC_EnableIRQ+0x34>)
 800e84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e84e:	095b      	lsrs	r3, r3, #5
 800e850:	2001      	movs	r0, #1
 800e852:	fa00 f202 	lsl.w	r2, r0, r2
 800e856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e85a:	bf00      	nop
 800e85c:	370c      	adds	r7, #12
 800e85e:	46bd      	mov	sp, r7
 800e860:	bc80      	pop	{r7}
 800e862:	4770      	bx	lr
 800e864:	e000e100 	.word	0xe000e100

0800e868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	4603      	mov	r3, r0
 800e870:	6039      	str	r1, [r7, #0]
 800e872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	db0a      	blt.n	800e892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	490c      	ldr	r1, [pc, #48]	; (800e8b4 <__NVIC_SetPriority+0x4c>)
 800e882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e886:	0112      	lsls	r2, r2, #4
 800e888:	b2d2      	uxtb	r2, r2
 800e88a:	440b      	add	r3, r1
 800e88c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e890:	e00a      	b.n	800e8a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	b2da      	uxtb	r2, r3
 800e896:	4908      	ldr	r1, [pc, #32]	; (800e8b8 <__NVIC_SetPriority+0x50>)
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	f003 030f 	and.w	r3, r3, #15
 800e89e:	3b04      	subs	r3, #4
 800e8a0:	0112      	lsls	r2, r2, #4
 800e8a2:	b2d2      	uxtb	r2, r2
 800e8a4:	440b      	add	r3, r1
 800e8a6:	761a      	strb	r2, [r3, #24]
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bc80      	pop	{r7}
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	e000e100 	.word	0xe000e100
 800e8b8:	e000ed00 	.word	0xe000ed00

0800e8bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b089      	sub	sp, #36	; 0x24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f003 0307 	and.w	r3, r3, #7
 800e8ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f1c3 0307 	rsb	r3, r3, #7
 800e8d6:	2b04      	cmp	r3, #4
 800e8d8:	bf28      	it	cs
 800e8da:	2304      	movcs	r3, #4
 800e8dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	2b06      	cmp	r3, #6
 800e8e4:	d902      	bls.n	800e8ec <NVIC_EncodePriority+0x30>
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	3b03      	subs	r3, #3
 800e8ea:	e000      	b.n	800e8ee <NVIC_EncodePriority+0x32>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fa:	43da      	mvns	r2, r3
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	401a      	ands	r2, r3
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e904:	f04f 31ff 	mov.w	r1, #4294967295
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	fa01 f303 	lsl.w	r3, r1, r3
 800e90e:	43d9      	mvns	r1, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e914:	4313      	orrs	r3, r2
         );
}
 800e916:	4618      	mov	r0, r3
 800e918:	3724      	adds	r7, #36	; 0x24
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bc80      	pop	{r7}
 800e91e:	4770      	bx	lr

0800e920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e930:	d301      	bcc.n	800e936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e932:	2301      	movs	r3, #1
 800e934:	e00f      	b.n	800e956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e936:	4a0a      	ldr	r2, [pc, #40]	; (800e960 <SysTick_Config+0x40>)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	3b01      	subs	r3, #1
 800e93c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e93e:	210f      	movs	r1, #15
 800e940:	f04f 30ff 	mov.w	r0, #4294967295
 800e944:	f7ff ff90 	bl	800e868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e948:	4b05      	ldr	r3, [pc, #20]	; (800e960 <SysTick_Config+0x40>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e94e:	4b04      	ldr	r3, [pc, #16]	; (800e960 <SysTick_Config+0x40>)
 800e950:	2207      	movs	r2, #7
 800e952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	e000e010 	.word	0xe000e010

0800e964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff ff2d 	bl	800e7cc <__NVIC_SetPriorityGrouping>
}
 800e972:	bf00      	nop
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b086      	sub	sp, #24
 800e97e:	af00      	add	r7, sp, #0
 800e980:	4603      	mov	r3, r0
 800e982:	60b9      	str	r1, [r7, #8]
 800e984:	607a      	str	r2, [r7, #4]
 800e986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e98c:	f7ff ff42 	bl	800e814 <__NVIC_GetPriorityGrouping>
 800e990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	6978      	ldr	r0, [r7, #20]
 800e998:	f7ff ff90 	bl	800e8bc <NVIC_EncodePriority>
 800e99c:	4602      	mov	r2, r0
 800e99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7ff ff5f 	bl	800e868 <__NVIC_SetPriority>
}
 800e9aa:	bf00      	nop
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e9bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7ff ff35 	bl	800e830 <__NVIC_EnableIRQ>
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b082      	sub	sp, #8
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7ff ffa2 	bl	800e920 <SysTick_Config>
 800e9dc:	4603      	mov	r3, r0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	b085      	sub	sp, #20
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	d008      	beq.n	800ea0e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2204      	movs	r2, #4
 800ea00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e020      	b.n	800ea50 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f022 020e 	bic.w	r2, r2, #14
 800ea1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f022 0201 	bic.w	r2, r2, #1
 800ea2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea36:	2101      	movs	r1, #1
 800ea38:	fa01 f202 	lsl.w	r2, r1, r2
 800ea3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bc80      	pop	{r7}
 800ea58:	4770      	bx	lr
	...

0800ea5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d005      	beq.n	800ea7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2204      	movs	r2, #4
 800ea76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	73fb      	strb	r3, [r7, #15]
 800ea7c:	e051      	b.n	800eb22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 020e 	bic.w	r2, r2, #14
 800ea8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f022 0201 	bic.w	r2, r2, #1
 800ea9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a22      	ldr	r2, [pc, #136]	; (800eb2c <HAL_DMA_Abort_IT+0xd0>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d029      	beq.n	800eafc <HAL_DMA_Abort_IT+0xa0>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a20      	ldr	r2, [pc, #128]	; (800eb30 <HAL_DMA_Abort_IT+0xd4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d022      	beq.n	800eaf8 <HAL_DMA_Abort_IT+0x9c>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a1f      	ldr	r2, [pc, #124]	; (800eb34 <HAL_DMA_Abort_IT+0xd8>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d01a      	beq.n	800eaf2 <HAL_DMA_Abort_IT+0x96>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a1d      	ldr	r2, [pc, #116]	; (800eb38 <HAL_DMA_Abort_IT+0xdc>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d012      	beq.n	800eaec <HAL_DMA_Abort_IT+0x90>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a1c      	ldr	r2, [pc, #112]	; (800eb3c <HAL_DMA_Abort_IT+0xe0>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d00a      	beq.n	800eae6 <HAL_DMA_Abort_IT+0x8a>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a1a      	ldr	r2, [pc, #104]	; (800eb40 <HAL_DMA_Abort_IT+0xe4>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d102      	bne.n	800eae0 <HAL_DMA_Abort_IT+0x84>
 800eada:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eade:	e00e      	b.n	800eafe <HAL_DMA_Abort_IT+0xa2>
 800eae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eae4:	e00b      	b.n	800eafe <HAL_DMA_Abort_IT+0xa2>
 800eae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800eaea:	e008      	b.n	800eafe <HAL_DMA_Abort_IT+0xa2>
 800eaec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eaf0:	e005      	b.n	800eafe <HAL_DMA_Abort_IT+0xa2>
 800eaf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eaf6:	e002      	b.n	800eafe <HAL_DMA_Abort_IT+0xa2>
 800eaf8:	2310      	movs	r3, #16
 800eafa:	e000      	b.n	800eafe <HAL_DMA_Abort_IT+0xa2>
 800eafc:	2301      	movs	r3, #1
 800eafe:	4a11      	ldr	r2, [pc, #68]	; (800eb44 <HAL_DMA_Abort_IT+0xe8>)
 800eb00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	4798      	blx	r3
    } 
  }
  return status;
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	40020008 	.word	0x40020008
 800eb30:	4002001c 	.word	0x4002001c
 800eb34:	40020030 	.word	0x40020030
 800eb38:	40020044 	.word	0x40020044
 800eb3c:	40020058 	.word	0x40020058
 800eb40:	4002006c 	.word	0x4002006c
 800eb44:	40020000 	.word	0x40020000

0800eb48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b08b      	sub	sp, #44	; 0x2c
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800eb52:	2300      	movs	r3, #0
 800eb54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800eb56:	2300      	movs	r3, #0
 800eb58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800eb5a:	e169      	b.n	800ee30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb60:	fa02 f303 	lsl.w	r3, r2, r3
 800eb64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800eb70:	69ba      	ldr	r2, [r7, #24]
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	f040 8158 	bne.w	800ee2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	4a9a      	ldr	r2, [pc, #616]	; (800ede8 <HAL_GPIO_Init+0x2a0>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d05e      	beq.n	800ec42 <HAL_GPIO_Init+0xfa>
 800eb84:	4a98      	ldr	r2, [pc, #608]	; (800ede8 <HAL_GPIO_Init+0x2a0>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d875      	bhi.n	800ec76 <HAL_GPIO_Init+0x12e>
 800eb8a:	4a98      	ldr	r2, [pc, #608]	; (800edec <HAL_GPIO_Init+0x2a4>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d058      	beq.n	800ec42 <HAL_GPIO_Init+0xfa>
 800eb90:	4a96      	ldr	r2, [pc, #600]	; (800edec <HAL_GPIO_Init+0x2a4>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d86f      	bhi.n	800ec76 <HAL_GPIO_Init+0x12e>
 800eb96:	4a96      	ldr	r2, [pc, #600]	; (800edf0 <HAL_GPIO_Init+0x2a8>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d052      	beq.n	800ec42 <HAL_GPIO_Init+0xfa>
 800eb9c:	4a94      	ldr	r2, [pc, #592]	; (800edf0 <HAL_GPIO_Init+0x2a8>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d869      	bhi.n	800ec76 <HAL_GPIO_Init+0x12e>
 800eba2:	4a94      	ldr	r2, [pc, #592]	; (800edf4 <HAL_GPIO_Init+0x2ac>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d04c      	beq.n	800ec42 <HAL_GPIO_Init+0xfa>
 800eba8:	4a92      	ldr	r2, [pc, #584]	; (800edf4 <HAL_GPIO_Init+0x2ac>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d863      	bhi.n	800ec76 <HAL_GPIO_Init+0x12e>
 800ebae:	4a92      	ldr	r2, [pc, #584]	; (800edf8 <HAL_GPIO_Init+0x2b0>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d046      	beq.n	800ec42 <HAL_GPIO_Init+0xfa>
 800ebb4:	4a90      	ldr	r2, [pc, #576]	; (800edf8 <HAL_GPIO_Init+0x2b0>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d85d      	bhi.n	800ec76 <HAL_GPIO_Init+0x12e>
 800ebba:	2b12      	cmp	r3, #18
 800ebbc:	d82a      	bhi.n	800ec14 <HAL_GPIO_Init+0xcc>
 800ebbe:	2b12      	cmp	r3, #18
 800ebc0:	d859      	bhi.n	800ec76 <HAL_GPIO_Init+0x12e>
 800ebc2:	a201      	add	r2, pc, #4	; (adr r2, 800ebc8 <HAL_GPIO_Init+0x80>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ec43 	.word	0x0800ec43
 800ebcc:	0800ec1d 	.word	0x0800ec1d
 800ebd0:	0800ec2f 	.word	0x0800ec2f
 800ebd4:	0800ec71 	.word	0x0800ec71
 800ebd8:	0800ec77 	.word	0x0800ec77
 800ebdc:	0800ec77 	.word	0x0800ec77
 800ebe0:	0800ec77 	.word	0x0800ec77
 800ebe4:	0800ec77 	.word	0x0800ec77
 800ebe8:	0800ec77 	.word	0x0800ec77
 800ebec:	0800ec77 	.word	0x0800ec77
 800ebf0:	0800ec77 	.word	0x0800ec77
 800ebf4:	0800ec77 	.word	0x0800ec77
 800ebf8:	0800ec77 	.word	0x0800ec77
 800ebfc:	0800ec77 	.word	0x0800ec77
 800ec00:	0800ec77 	.word	0x0800ec77
 800ec04:	0800ec77 	.word	0x0800ec77
 800ec08:	0800ec77 	.word	0x0800ec77
 800ec0c:	0800ec25 	.word	0x0800ec25
 800ec10:	0800ec39 	.word	0x0800ec39
 800ec14:	4a79      	ldr	r2, [pc, #484]	; (800edfc <HAL_GPIO_Init+0x2b4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d013      	beq.n	800ec42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ec1a:	e02c      	b.n	800ec76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	623b      	str	r3, [r7, #32]
          break;
 800ec22:	e029      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	623b      	str	r3, [r7, #32]
          break;
 800ec2c:	e024      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	3308      	adds	r3, #8
 800ec34:	623b      	str	r3, [r7, #32]
          break;
 800ec36:	e01f      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	330c      	adds	r3, #12
 800ec3e:	623b      	str	r3, [r7, #32]
          break;
 800ec40:	e01a      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d102      	bne.n	800ec50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800ec4a:	2304      	movs	r3, #4
 800ec4c:	623b      	str	r3, [r7, #32]
          break;
 800ec4e:	e013      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d105      	bne.n	800ec64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ec58:	2308      	movs	r3, #8
 800ec5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	69fa      	ldr	r2, [r7, #28]
 800ec60:	611a      	str	r2, [r3, #16]
          break;
 800ec62:	e009      	b.n	800ec78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ec64:	2308      	movs	r3, #8
 800ec66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	69fa      	ldr	r2, [r7, #28]
 800ec6c:	615a      	str	r2, [r3, #20]
          break;
 800ec6e:	e003      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800ec70:	2300      	movs	r3, #0
 800ec72:	623b      	str	r3, [r7, #32]
          break;
 800ec74:	e000      	b.n	800ec78 <HAL_GPIO_Init+0x130>
          break;
 800ec76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	2bff      	cmp	r3, #255	; 0xff
 800ec7c:	d801      	bhi.n	800ec82 <HAL_GPIO_Init+0x13a>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	e001      	b.n	800ec86 <HAL_GPIO_Init+0x13e>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3304      	adds	r3, #4
 800ec86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	2bff      	cmp	r3, #255	; 0xff
 800ec8c:	d802      	bhi.n	800ec94 <HAL_GPIO_Init+0x14c>
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	e002      	b.n	800ec9a <HAL_GPIO_Init+0x152>
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	3b08      	subs	r3, #8
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	210f      	movs	r1, #15
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	fa01 f303 	lsl.w	r3, r1, r3
 800eca8:	43db      	mvns	r3, r3
 800ecaa:	401a      	ands	r2, r3
 800ecac:	6a39      	ldr	r1, [r7, #32]
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	fa01 f303 	lsl.w	r3, r1, r3
 800ecb4:	431a      	orrs	r2, r3
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f000 80b1 	beq.w	800ee2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800ecc8:	4b4d      	ldr	r3, [pc, #308]	; (800ee00 <HAL_GPIO_Init+0x2b8>)
 800ecca:	699b      	ldr	r3, [r3, #24]
 800eccc:	4a4c      	ldr	r2, [pc, #304]	; (800ee00 <HAL_GPIO_Init+0x2b8>)
 800ecce:	f043 0301 	orr.w	r3, r3, #1
 800ecd2:	6193      	str	r3, [r2, #24]
 800ecd4:	4b4a      	ldr	r3, [pc, #296]	; (800ee00 <HAL_GPIO_Init+0x2b8>)
 800ecd6:	699b      	ldr	r3, [r3, #24]
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	60bb      	str	r3, [r7, #8]
 800ecde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800ece0:	4a48      	ldr	r2, [pc, #288]	; (800ee04 <HAL_GPIO_Init+0x2bc>)
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	089b      	lsrs	r3, r3, #2
 800ece6:	3302      	adds	r3, #2
 800ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800ecee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf0:	f003 0303 	and.w	r3, r3, #3
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	220f      	movs	r2, #15
 800ecf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecfc:	43db      	mvns	r3, r3
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	4013      	ands	r3, r2
 800ed02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a40      	ldr	r2, [pc, #256]	; (800ee08 <HAL_GPIO_Init+0x2c0>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d013      	beq.n	800ed34 <HAL_GPIO_Init+0x1ec>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a3f      	ldr	r2, [pc, #252]	; (800ee0c <HAL_GPIO_Init+0x2c4>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00d      	beq.n	800ed30 <HAL_GPIO_Init+0x1e8>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a3e      	ldr	r2, [pc, #248]	; (800ee10 <HAL_GPIO_Init+0x2c8>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d007      	beq.n	800ed2c <HAL_GPIO_Init+0x1e4>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a3d      	ldr	r2, [pc, #244]	; (800ee14 <HAL_GPIO_Init+0x2cc>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d101      	bne.n	800ed28 <HAL_GPIO_Init+0x1e0>
 800ed24:	2303      	movs	r3, #3
 800ed26:	e006      	b.n	800ed36 <HAL_GPIO_Init+0x1ee>
 800ed28:	2304      	movs	r3, #4
 800ed2a:	e004      	b.n	800ed36 <HAL_GPIO_Init+0x1ee>
 800ed2c:	2302      	movs	r3, #2
 800ed2e:	e002      	b.n	800ed36 <HAL_GPIO_Init+0x1ee>
 800ed30:	2301      	movs	r3, #1
 800ed32:	e000      	b.n	800ed36 <HAL_GPIO_Init+0x1ee>
 800ed34:	2300      	movs	r3, #0
 800ed36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed38:	f002 0203 	and.w	r2, r2, #3
 800ed3c:	0092      	lsls	r2, r2, #2
 800ed3e:	4093      	lsls	r3, r2
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800ed46:	492f      	ldr	r1, [pc, #188]	; (800ee04 <HAL_GPIO_Init+0x2bc>)
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	089b      	lsrs	r3, r3, #2
 800ed4c:	3302      	adds	r3, #2
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d006      	beq.n	800ed6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ed60:	4b2d      	ldr	r3, [pc, #180]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	492c      	ldr	r1, [pc, #176]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	600b      	str	r3, [r1, #0]
 800ed6c:	e006      	b.n	800ed7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ed6e:	4b2a      	ldr	r3, [pc, #168]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	43db      	mvns	r3, r3
 800ed76:	4928      	ldr	r1, [pc, #160]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed78:	4013      	ands	r3, r2
 800ed7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d006      	beq.n	800ed96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ed88:	4b23      	ldr	r3, [pc, #140]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	4922      	ldr	r1, [pc, #136]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	604b      	str	r3, [r1, #4]
 800ed94:	e006      	b.n	800eda4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ed96:	4b20      	ldr	r3, [pc, #128]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	43db      	mvns	r3, r3
 800ed9e:	491e      	ldr	r1, [pc, #120]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800eda0:	4013      	ands	r3, r2
 800eda2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800edac:	2b00      	cmp	r3, #0
 800edae:	d006      	beq.n	800edbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800edb0:	4b19      	ldr	r3, [pc, #100]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800edb2:	689a      	ldr	r2, [r3, #8]
 800edb4:	4918      	ldr	r1, [pc, #96]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	4313      	orrs	r3, r2
 800edba:	608b      	str	r3, [r1, #8]
 800edbc:	e006      	b.n	800edcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800edbe:	4b16      	ldr	r3, [pc, #88]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800edc0:	689a      	ldr	r2, [r3, #8]
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	43db      	mvns	r3, r3
 800edc6:	4914      	ldr	r1, [pc, #80]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800edc8:	4013      	ands	r3, r2
 800edca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d021      	beq.n	800ee1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800edd8:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800edda:	68da      	ldr	r2, [r3, #12]
 800eddc:	490e      	ldr	r1, [pc, #56]	; (800ee18 <HAL_GPIO_Init+0x2d0>)
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	60cb      	str	r3, [r1, #12]
 800ede4:	e021      	b.n	800ee2a <HAL_GPIO_Init+0x2e2>
 800ede6:	bf00      	nop
 800ede8:	10320000 	.word	0x10320000
 800edec:	10310000 	.word	0x10310000
 800edf0:	10220000 	.word	0x10220000
 800edf4:	10210000 	.word	0x10210000
 800edf8:	10120000 	.word	0x10120000
 800edfc:	10110000 	.word	0x10110000
 800ee00:	40021000 	.word	0x40021000
 800ee04:	40010000 	.word	0x40010000
 800ee08:	40010800 	.word	0x40010800
 800ee0c:	40010c00 	.word	0x40010c00
 800ee10:	40011000 	.word	0x40011000
 800ee14:	40011400 	.word	0x40011400
 800ee18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ee1c:	4b0b      	ldr	r3, [pc, #44]	; (800ee4c <HAL_GPIO_Init+0x304>)
 800ee1e:	68da      	ldr	r2, [r3, #12]
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	43db      	mvns	r3, r3
 800ee24:	4909      	ldr	r1, [pc, #36]	; (800ee4c <HAL_GPIO_Init+0x304>)
 800ee26:	4013      	ands	r3, r2
 800ee28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	fa22 f303 	lsr.w	r3, r2, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f47f ae8e 	bne.w	800eb5c <HAL_GPIO_Init+0x14>
  }
}
 800ee40:	bf00      	nop
 800ee42:	bf00      	nop
 800ee44:	372c      	adds	r7, #44	; 0x2c
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bc80      	pop	{r7}
 800ee4a:	4770      	bx	lr
 800ee4c:	40010400 	.word	0x40010400

0800ee50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	807b      	strh	r3, [r7, #2]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ee60:	787b      	ldrb	r3, [r7, #1]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d003      	beq.n	800ee6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ee66:	887a      	ldrh	r2, [r7, #2]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800ee6c:	e003      	b.n	800ee76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800ee6e:	887b      	ldrh	r3, [r7, #2]
 800ee70:	041a      	lsls	r2, r3, #16
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	611a      	str	r2, [r3, #16]
}
 800ee76:	bf00      	nop
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bc80      	pop	{r7}
 800ee7e:	4770      	bx	lr

0800ee80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ee92:	887a      	ldrh	r2, [r7, #2]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	4013      	ands	r3, r2
 800ee98:	041a      	lsls	r2, r3, #16
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	43d9      	mvns	r1, r3
 800ee9e:	887b      	ldrh	r3, [r7, #2]
 800eea0:	400b      	ands	r3, r1
 800eea2:	431a      	orrs	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	611a      	str	r2, [r3, #16]
}
 800eea8:	bf00      	nop
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bc80      	pop	{r7}
 800eeb0:	4770      	bx	lr
	...

0800eeb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e12b      	b.n	800f11e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7ff f9c2 	bl	800e264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2224      	movs	r2, #36	; 0x24
 800eee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f022 0201 	bic.w	r2, r2, #1
 800eef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ef18:	f001 f884 	bl	8010024 <HAL_RCC_GetPCLK1Freq>
 800ef1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	4a81      	ldr	r2, [pc, #516]	; (800f128 <HAL_I2C_Init+0x274>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d807      	bhi.n	800ef38 <HAL_I2C_Init+0x84>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	4a80      	ldr	r2, [pc, #512]	; (800f12c <HAL_I2C_Init+0x278>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	bf94      	ite	ls
 800ef30:	2301      	movls	r3, #1
 800ef32:	2300      	movhi	r3, #0
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	e006      	b.n	800ef46 <HAL_I2C_Init+0x92>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	4a7d      	ldr	r2, [pc, #500]	; (800f130 <HAL_I2C_Init+0x27c>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	bf94      	ite	ls
 800ef40:	2301      	movls	r3, #1
 800ef42:	2300      	movhi	r3, #0
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e0e7      	b.n	800f11e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4a78      	ldr	r2, [pc, #480]	; (800f134 <HAL_I2C_Init+0x280>)
 800ef52:	fba2 2303 	umull	r2, r3, r2, r3
 800ef56:	0c9b      	lsrs	r3, r3, #18
 800ef58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	430a      	orrs	r2, r1
 800ef6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	6a1b      	ldr	r3, [r3, #32]
 800ef74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	4a6a      	ldr	r2, [pc, #424]	; (800f128 <HAL_I2C_Init+0x274>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d802      	bhi.n	800ef88 <HAL_I2C_Init+0xd4>
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	3301      	adds	r3, #1
 800ef86:	e009      	b.n	800ef9c <HAL_I2C_Init+0xe8>
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ef8e:	fb02 f303 	mul.w	r3, r2, r3
 800ef92:	4a69      	ldr	r2, [pc, #420]	; (800f138 <HAL_I2C_Init+0x284>)
 800ef94:	fba2 2303 	umull	r2, r3, r2, r3
 800ef98:	099b      	lsrs	r3, r3, #6
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	6812      	ldr	r2, [r2, #0]
 800efa0:	430b      	orrs	r3, r1
 800efa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800efae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	495c      	ldr	r1, [pc, #368]	; (800f128 <HAL_I2C_Init+0x274>)
 800efb8:	428b      	cmp	r3, r1
 800efba:	d819      	bhi.n	800eff0 <HAL_I2C_Init+0x13c>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	1e59      	subs	r1, r3, #1
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	fbb1 f3f3 	udiv	r3, r1, r3
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800efd0:	400b      	ands	r3, r1
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00a      	beq.n	800efec <HAL_I2C_Init+0x138>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	1e59      	subs	r1, r3, #1
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	fbb1 f3f3 	udiv	r3, r1, r3
 800efe4:	3301      	adds	r3, #1
 800efe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efea:	e051      	b.n	800f090 <HAL_I2C_Init+0x1dc>
 800efec:	2304      	movs	r3, #4
 800efee:	e04f      	b.n	800f090 <HAL_I2C_Init+0x1dc>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d111      	bne.n	800f01c <HAL_I2C_Init+0x168>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	1e58      	subs	r0, r3, #1
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6859      	ldr	r1, [r3, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	440b      	add	r3, r1
 800f006:	fbb0 f3f3 	udiv	r3, r0, r3
 800f00a:	3301      	adds	r3, #1
 800f00c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f010:	2b00      	cmp	r3, #0
 800f012:	bf0c      	ite	eq
 800f014:	2301      	moveq	r3, #1
 800f016:	2300      	movne	r3, #0
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	e012      	b.n	800f042 <HAL_I2C_Init+0x18e>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	1e58      	subs	r0, r3, #1
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6859      	ldr	r1, [r3, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	440b      	add	r3, r1
 800f02a:	0099      	lsls	r1, r3, #2
 800f02c:	440b      	add	r3, r1
 800f02e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f032:	3301      	adds	r3, #1
 800f034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f038:	2b00      	cmp	r3, #0
 800f03a:	bf0c      	ite	eq
 800f03c:	2301      	moveq	r3, #1
 800f03e:	2300      	movne	r3, #0
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <HAL_I2C_Init+0x196>
 800f046:	2301      	movs	r3, #1
 800f048:	e022      	b.n	800f090 <HAL_I2C_Init+0x1dc>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d10e      	bne.n	800f070 <HAL_I2C_Init+0x1bc>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	1e58      	subs	r0, r3, #1
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6859      	ldr	r1, [r3, #4]
 800f05a:	460b      	mov	r3, r1
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	440b      	add	r3, r1
 800f060:	fbb0 f3f3 	udiv	r3, r0, r3
 800f064:	3301      	adds	r3, #1
 800f066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f06a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f06e:	e00f      	b.n	800f090 <HAL_I2C_Init+0x1dc>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	1e58      	subs	r0, r3, #1
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6859      	ldr	r1, [r3, #4]
 800f078:	460b      	mov	r3, r1
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	440b      	add	r3, r1
 800f07e:	0099      	lsls	r1, r3, #2
 800f080:	440b      	add	r3, r1
 800f082:	fbb0 f3f3 	udiv	r3, r0, r3
 800f086:	3301      	adds	r3, #1
 800f088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f08c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f090:	6879      	ldr	r1, [r7, #4]
 800f092:	6809      	ldr	r1, [r1, #0]
 800f094:	4313      	orrs	r3, r2
 800f096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	69da      	ldr	r2, [r3, #28]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	431a      	orrs	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	430a      	orrs	r2, r1
 800f0b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800f0be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	6911      	ldr	r1, [r2, #16]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	68d2      	ldr	r2, [r2, #12]
 800f0ca:	4311      	orrs	r1, r2
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	6812      	ldr	r2, [r2, #0]
 800f0d0:	430b      	orrs	r3, r1
 800f0d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	695a      	ldr	r2, [r3, #20]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	699b      	ldr	r3, [r3, #24]
 800f0e6:	431a      	orrs	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	430a      	orrs	r2, r1
 800f0ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f042 0201 	orr.w	r2, r2, #1
 800f0fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2220      	movs	r2, #32
 800f10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	000186a0 	.word	0x000186a0
 800f12c:	001e847f 	.word	0x001e847f
 800f130:	003d08ff 	.word	0x003d08ff
 800f134:	431bde83 	.word	0x431bde83
 800f138:	10624dd3 	.word	0x10624dd3

0800f13c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b088      	sub	sp, #32
 800f140:	af02      	add	r7, sp, #8
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	607a      	str	r2, [r7, #4]
 800f146:	461a      	mov	r2, r3
 800f148:	460b      	mov	r3, r1
 800f14a:	817b      	strh	r3, [r7, #10]
 800f14c:	4613      	mov	r3, r2
 800f14e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f150:	f7ff fb0e 	bl	800e770 <HAL_GetTick>
 800f154:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	2b20      	cmp	r3, #32
 800f160:	f040 80e0 	bne.w	800f324 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	2319      	movs	r3, #25
 800f16a:	2201      	movs	r2, #1
 800f16c:	4970      	ldr	r1, [pc, #448]	; (800f330 <HAL_I2C_Master_Transmit+0x1f4>)
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f000 f964 	bl	800f43c <I2C_WaitOnFlagUntilTimeout>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800f17a:	2302      	movs	r3, #2
 800f17c:	e0d3      	b.n	800f326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f184:	2b01      	cmp	r3, #1
 800f186:	d101      	bne.n	800f18c <HAL_I2C_Master_Transmit+0x50>
 800f188:	2302      	movs	r3, #2
 800f18a:	e0cc      	b.n	800f326 <HAL_I2C_Master_Transmit+0x1ea>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f003 0301 	and.w	r3, r3, #1
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d007      	beq.n	800f1b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f042 0201 	orr.w	r2, r2, #1
 800f1b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f1c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2221      	movs	r2, #33	; 0x21
 800f1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2210      	movs	r2, #16
 800f1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	893a      	ldrh	r2, [r7, #8]
 800f1e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	4a50      	ldr	r2, [pc, #320]	; (800f334 <HAL_I2C_Master_Transmit+0x1f8>)
 800f1f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f1f4:	8979      	ldrh	r1, [r7, #10]
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	6a3a      	ldr	r2, [r7, #32]
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f000 f89c 	bl	800f338 <I2C_MasterRequestWrite>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d001      	beq.n	800f20a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f206:	2301      	movs	r3, #1
 800f208:	e08d      	b.n	800f326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f20a:	2300      	movs	r3, #0
 800f20c:	613b      	str	r3, [r7, #16]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	613b      	str	r3, [r7, #16]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	613b      	str	r3, [r7, #16]
 800f21e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f220:	e066      	b.n	800f2f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	6a39      	ldr	r1, [r7, #32]
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 f9de 	bl	800f5e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00d      	beq.n	800f24e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f236:	2b04      	cmp	r3, #4
 800f238:	d107      	bne.n	800f24a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	e06b      	b.n	800f326 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25e:	1c5a      	adds	r2, r3, #1
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f268:	b29b      	uxth	r3, r3
 800f26a:	3b01      	subs	r3, #1
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	695b      	ldr	r3, [r3, #20]
 800f284:	f003 0304 	and.w	r3, r3, #4
 800f288:	2b04      	cmp	r3, #4
 800f28a:	d11b      	bne.n	800f2c4 <HAL_I2C_Master_Transmit+0x188>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f290:	2b00      	cmp	r3, #0
 800f292:	d017      	beq.n	800f2c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	781a      	ldrb	r2, [r3, #0]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a4:	1c5a      	adds	r2, r3, #1
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	6a39      	ldr	r1, [r7, #32]
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f000 f9ce 	bl	800f66a <I2C_WaitOnBTFFlagUntilTimeout>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00d      	beq.n	800f2f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d8:	2b04      	cmp	r3, #4
 800f2da:	d107      	bne.n	800f2ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e01a      	b.n	800f326 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d194      	bne.n	800f222 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2220      	movs	r2, #32
 800f30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f320:	2300      	movs	r3, #0
 800f322:	e000      	b.n	800f326 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f324:	2302      	movs	r3, #2
  }
}
 800f326:	4618      	mov	r0, r3
 800f328:	3718      	adds	r7, #24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	00100002 	.word	0x00100002
 800f334:	ffff0000 	.word	0xffff0000

0800f338 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b088      	sub	sp, #32
 800f33c:	af02      	add	r7, sp, #8
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	607a      	str	r2, [r7, #4]
 800f342:	603b      	str	r3, [r7, #0]
 800f344:	460b      	mov	r3, r1
 800f346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2b08      	cmp	r3, #8
 800f352:	d006      	beq.n	800f362 <I2C_MasterRequestWrite+0x2a>
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d003      	beq.n	800f362 <I2C_MasterRequestWrite+0x2a>
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f360:	d108      	bne.n	800f374 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	e00b      	b.n	800f38c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f378:	2b12      	cmp	r3, #18
 800f37a:	d107      	bne.n	800f38c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f38a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	9300      	str	r3, [sp, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f84f 	bl	800f43c <I2C_WaitOnFlagUntilTimeout>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d00d      	beq.n	800f3c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3b2:	d103      	bne.n	800f3bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	e035      	b.n	800f42c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f3c8:	d108      	bne.n	800f3dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f3ca:	897b      	ldrh	r3, [r7, #10]
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f3d8:	611a      	str	r2, [r3, #16]
 800f3da:	e01b      	b.n	800f414 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f3dc:	897b      	ldrh	r3, [r7, #10]
 800f3de:	11db      	asrs	r3, r3, #7
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	f003 0306 	and.w	r3, r3, #6
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f063 030f 	orn	r3, r3, #15
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	490e      	ldr	r1, [pc, #56]	; (800f434 <I2C_MasterRequestWrite+0xfc>)
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f000 f875 	bl	800f4ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	e010      	b.n	800f42c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f40a:	897b      	ldrh	r3, [r7, #10]
 800f40c:	b2da      	uxtb	r2, r3
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	4907      	ldr	r1, [pc, #28]	; (800f438 <I2C_MasterRequestWrite+0x100>)
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f000 f865 	bl	800f4ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e000      	b.n	800f42c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3718      	adds	r7, #24
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	00010008 	.word	0x00010008
 800f438:	00010002 	.word	0x00010002

0800f43c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	603b      	str	r3, [r7, #0]
 800f448:	4613      	mov	r3, r2
 800f44a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f44c:	e025      	b.n	800f49a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f454:	d021      	beq.n	800f49a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f456:	f7ff f98b 	bl	800e770 <HAL_GetTick>
 800f45a:	4602      	mov	r2, r0
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	1ad3      	subs	r3, r2, r3
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	429a      	cmp	r2, r3
 800f464:	d302      	bcc.n	800f46c <I2C_WaitOnFlagUntilTimeout+0x30>
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d116      	bne.n	800f49a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2200      	movs	r2, #0
 800f470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2220      	movs	r2, #32
 800f476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f486:	f043 0220 	orr.w	r2, r3, #32
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f496:	2301      	movs	r3, #1
 800f498:	e023      	b.n	800f4e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	0c1b      	lsrs	r3, r3, #16
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d10d      	bne.n	800f4c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	695b      	ldr	r3, [r3, #20]
 800f4aa:	43da      	mvns	r2, r3
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	4013      	ands	r3, r2
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	bf0c      	ite	eq
 800f4b6:	2301      	moveq	r3, #1
 800f4b8:	2300      	movne	r3, #0
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	461a      	mov	r2, r3
 800f4be:	e00c      	b.n	800f4da <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	699b      	ldr	r3, [r3, #24]
 800f4c6:	43da      	mvns	r2, r3
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	bf0c      	ite	eq
 800f4d2:	2301      	moveq	r3, #1
 800f4d4:	2300      	movne	r3, #0
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	461a      	mov	r2, r3
 800f4da:	79fb      	ldrb	r3, [r7, #7]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d0b6      	beq.n	800f44e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b084      	sub	sp, #16
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	60f8      	str	r0, [r7, #12]
 800f4f2:	60b9      	str	r1, [r7, #8]
 800f4f4:	607a      	str	r2, [r7, #4]
 800f4f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f4f8:	e051      	b.n	800f59e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	695b      	ldr	r3, [r3, #20]
 800f500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f508:	d123      	bne.n	800f552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f518:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f522:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2220      	movs	r2, #32
 800f52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53e:	f043 0204 	orr.w	r2, r3, #4
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e046      	b.n	800f5e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f558:	d021      	beq.n	800f59e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f55a:	f7ff f909 	bl	800e770 <HAL_GetTick>
 800f55e:	4602      	mov	r2, r0
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	1ad3      	subs	r3, r2, r3
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	429a      	cmp	r2, r3
 800f568:	d302      	bcc.n	800f570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d116      	bne.n	800f59e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2200      	movs	r2, #0
 800f574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2220      	movs	r2, #32
 800f57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2200      	movs	r2, #0
 800f582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58a:	f043 0220 	orr.w	r2, r3, #32
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f59a:	2301      	movs	r3, #1
 800f59c:	e020      	b.n	800f5e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	0c1b      	lsrs	r3, r3, #16
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d10c      	bne.n	800f5c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	695b      	ldr	r3, [r3, #20]
 800f5ae:	43da      	mvns	r2, r3
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bf14      	ite	ne
 800f5ba:	2301      	movne	r3, #1
 800f5bc:	2300      	moveq	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	e00b      	b.n	800f5da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	43da      	mvns	r2, r3
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	bf14      	ite	ne
 800f5d4:	2301      	movne	r3, #1
 800f5d6:	2300      	moveq	r3, #0
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d18d      	bne.n	800f4fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f5f4:	e02d      	b.n	800f652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f000 f878 	bl	800f6ec <I2C_IsAcknowledgeFailed>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	e02d      	b.n	800f662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60c:	d021      	beq.n	800f652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f60e:	f7ff f8af 	bl	800e770 <HAL_GetTick>
 800f612:	4602      	mov	r2, r0
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	1ad3      	subs	r3, r2, r3
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d302      	bcc.n	800f624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d116      	bne.n	800f652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2200      	movs	r2, #0
 800f628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2220      	movs	r2, #32
 800f62e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f63e:	f043 0220 	orr.w	r2, r3, #32
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e007      	b.n	800f662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	695b      	ldr	r3, [r3, #20]
 800f658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f65c:	2b80      	cmp	r3, #128	; 0x80
 800f65e:	d1ca      	bne.n	800f5f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b084      	sub	sp, #16
 800f66e:	af00      	add	r7, sp, #0
 800f670:	60f8      	str	r0, [r7, #12]
 800f672:	60b9      	str	r1, [r7, #8]
 800f674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f676:	e02d      	b.n	800f6d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f000 f837 	bl	800f6ec <I2C_IsAcknowledgeFailed>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f684:	2301      	movs	r3, #1
 800f686:	e02d      	b.n	800f6e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68e:	d021      	beq.n	800f6d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f690:	f7ff f86e 	bl	800e770 <HAL_GetTick>
 800f694:	4602      	mov	r2, r0
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d302      	bcc.n	800f6a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d116      	bne.n	800f6d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2220      	movs	r2, #32
 800f6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c0:	f043 0220 	orr.w	r2, r3, #32
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e007      	b.n	800f6e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	695b      	ldr	r3, [r3, #20]
 800f6da:	f003 0304 	and.w	r3, r3, #4
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d1ca      	bne.n	800f678 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f702:	d11b      	bne.n	800f73c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f70c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2220      	movs	r2, #32
 800f718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f728:	f043 0204 	orr.w	r2, r3, #4
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	bc80      	pop	{r7}
 800f746:	4770      	bx	lr

0800f748 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f74e:	f7ff f80f 	bl	800e770 <HAL_GetTick>
 800f752:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800f754:	4b45      	ldr	r3, [pc, #276]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4a44      	ldr	r2, [pc, #272]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f75a:	f043 0301 	orr.w	r3, r3, #1
 800f75e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800f760:	e008      	b.n	800f774 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f762:	f7ff f805 	bl	800e770 <HAL_GetTick>
 800f766:	4602      	mov	r2, r0
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	1ad3      	subs	r3, r2, r3
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d901      	bls.n	800f774 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800f770:	2303      	movs	r3, #3
 800f772:	e077      	b.n	800f864 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800f774:	4b3d      	ldr	r3, [pc, #244]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f003 0302 	and.w	r3, r3, #2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d0f0      	beq.n	800f762 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800f780:	4b3a      	ldr	r3, [pc, #232]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f788:	4a38      	ldr	r2, [pc, #224]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f78e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f790:	f7fe ffee 	bl	800e770 <HAL_GetTick>
 800f794:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800f796:	4b35      	ldr	r3, [pc, #212]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f798:	2200      	movs	r2, #0
 800f79a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800f79c:	e00a      	b.n	800f7b4 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f79e:	f7fe ffe7 	bl	800e770 <HAL_GetTick>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d901      	bls.n	800f7b4 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800f7b0:	2303      	movs	r3, #3
 800f7b2:	e057      	b.n	800f864 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800f7b4:	4b2d      	ldr	r3, [pc, #180]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	f003 030c 	and.w	r3, r3, #12
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1ee      	bne.n	800f79e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800f7c0:	4b2b      	ldr	r3, [pc, #172]	; (800f870 <HAL_RCC_DeInit+0x128>)
 800f7c2:	4a2c      	ldr	r2, [pc, #176]	; (800f874 <HAL_RCC_DeInit+0x12c>)
 800f7c4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800f7c6:	4b2c      	ldr	r3, [pc, #176]	; (800f878 <HAL_RCC_DeInit+0x130>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe ff8e 	bl	800e6ec <HAL_InitTick>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d001      	beq.n	800f7da <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e044      	b.n	800f864 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f7da:	f7fe ffc9 	bl	800e770 <HAL_GetTick>
 800f7de:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f7e0:	4b22      	ldr	r3, [pc, #136]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a21      	ldr	r2, [pc, #132]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f7e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f7ea:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800f7ec:	e008      	b.n	800f800 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f7ee:	f7fe ffbf 	bl	800e770 <HAL_GetTick>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	d901      	bls.n	800f800 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800f7fc:	2303      	movs	r3, #3
 800f7fe:	e031      	b.n	800f864 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800f800:	4b1a      	ldr	r3, [pc, #104]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1f0      	bne.n	800f7ee <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800f80c:	4b17      	ldr	r3, [pc, #92]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f80e:	2200      	movs	r2, #0
 800f810:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f812:	f7fe ffad 	bl	800e770 <HAL_GetTick>
 800f816:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800f818:	4b14      	ldr	r3, [pc, #80]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a13      	ldr	r2, [pc, #76]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f81e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f822:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800f824:	e008      	b.n	800f838 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f826:	f7fe ffa3 	bl	800e770 <HAL_GetTick>
 800f82a:	4602      	mov	r2, r0
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	2b64      	cmp	r3, #100	; 0x64
 800f832:	d901      	bls.n	800f838 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800f834:	2303      	movs	r3, #3
 800f836:	e015      	b.n	800f864 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800f838:	4b0c      	ldr	r3, [pc, #48]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1f0      	bne.n	800f826 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800f844:	4b09      	ldr	r3, [pc, #36]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a08      	ldr	r2, [pc, #32]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f84a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f84e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800f850:	4b06      	ldr	r3, [pc, #24]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f854:	4a05      	ldr	r2, [pc, #20]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f85a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800f85c:	4b03      	ldr	r3, [pc, #12]	; (800f86c <HAL_RCC_DeInit+0x124>)
 800f85e:	2200      	movs	r2, #0
 800f860:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	40021000 	.word	0x40021000
 800f870:	200000cc 	.word	0x200000cc
 800f874:	007a1200 	.word	0x007a1200
 800f878:	200000d0 	.word	0x200000d0

0800f87c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d101      	bne.n	800f88e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	e272      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 8087 	beq.w	800f9aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f89c:	4b92      	ldr	r3, [pc, #584]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	f003 030c 	and.w	r3, r3, #12
 800f8a4:	2b04      	cmp	r3, #4
 800f8a6:	d00c      	beq.n	800f8c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800f8a8:	4b8f      	ldr	r3, [pc, #572]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	f003 030c 	and.w	r3, r3, #12
 800f8b0:	2b08      	cmp	r3, #8
 800f8b2:	d112      	bne.n	800f8da <HAL_RCC_OscConfig+0x5e>
 800f8b4:	4b8c      	ldr	r3, [pc, #560]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8c0:	d10b      	bne.n	800f8da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f8c2:	4b89      	ldr	r3, [pc, #548]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d06c      	beq.n	800f9a8 <HAL_RCC_OscConfig+0x12c>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d168      	bne.n	800f9a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e24c      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8e2:	d106      	bne.n	800f8f2 <HAL_RCC_OscConfig+0x76>
 800f8e4:	4b80      	ldr	r3, [pc, #512]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a7f      	ldr	r2, [pc, #508]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f8ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	e02e      	b.n	800f950 <HAL_RCC_OscConfig+0xd4>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d10c      	bne.n	800f914 <HAL_RCC_OscConfig+0x98>
 800f8fa:	4b7b      	ldr	r3, [pc, #492]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a7a      	ldr	r2, [pc, #488]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f904:	6013      	str	r3, [r2, #0]
 800f906:	4b78      	ldr	r3, [pc, #480]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a77      	ldr	r2, [pc, #476]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f90c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	e01d      	b.n	800f950 <HAL_RCC_OscConfig+0xd4>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f91c:	d10c      	bne.n	800f938 <HAL_RCC_OscConfig+0xbc>
 800f91e:	4b72      	ldr	r3, [pc, #456]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4a71      	ldr	r2, [pc, #452]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f928:	6013      	str	r3, [r2, #0]
 800f92a:	4b6f      	ldr	r3, [pc, #444]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a6e      	ldr	r2, [pc, #440]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f934:	6013      	str	r3, [r2, #0]
 800f936:	e00b      	b.n	800f950 <HAL_RCC_OscConfig+0xd4>
 800f938:	4b6b      	ldr	r3, [pc, #428]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a6a      	ldr	r2, [pc, #424]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f93e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	4b68      	ldr	r3, [pc, #416]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a67      	ldr	r2, [pc, #412]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f94a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f94e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d013      	beq.n	800f980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f958:	f7fe ff0a 	bl	800e770 <HAL_GetTick>
 800f95c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f95e:	e008      	b.n	800f972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f960:	f7fe ff06 	bl	800e770 <HAL_GetTick>
 800f964:	4602      	mov	r2, r0
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	2b64      	cmp	r3, #100	; 0x64
 800f96c:	d901      	bls.n	800f972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800f96e:	2303      	movs	r3, #3
 800f970:	e200      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f972:	4b5d      	ldr	r3, [pc, #372]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0f0      	beq.n	800f960 <HAL_RCC_OscConfig+0xe4>
 800f97e:	e014      	b.n	800f9aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f980:	f7fe fef6 	bl	800e770 <HAL_GetTick>
 800f984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f986:	e008      	b.n	800f99a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f988:	f7fe fef2 	bl	800e770 <HAL_GetTick>
 800f98c:	4602      	mov	r2, r0
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	2b64      	cmp	r3, #100	; 0x64
 800f994:	d901      	bls.n	800f99a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800f996:	2303      	movs	r3, #3
 800f998:	e1ec      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f99a:	4b53      	ldr	r3, [pc, #332]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1f0      	bne.n	800f988 <HAL_RCC_OscConfig+0x10c>
 800f9a6:	e000      	b.n	800f9aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f9a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f003 0302 	and.w	r3, r3, #2
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d063      	beq.n	800fa7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f9b6:	4b4c      	ldr	r3, [pc, #304]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	f003 030c 	and.w	r3, r3, #12
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00b      	beq.n	800f9da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800f9c2:	4b49      	ldr	r3, [pc, #292]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	f003 030c 	and.w	r3, r3, #12
 800f9ca:	2b08      	cmp	r3, #8
 800f9cc:	d11c      	bne.n	800fa08 <HAL_RCC_OscConfig+0x18c>
 800f9ce:	4b46      	ldr	r3, [pc, #280]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d116      	bne.n	800fa08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f9da:	4b43      	ldr	r3, [pc, #268]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 0302 	and.w	r3, r3, #2
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d005      	beq.n	800f9f2 <HAL_RCC_OscConfig+0x176>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d001      	beq.n	800f9f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e1c0      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9f2:	4b3d      	ldr	r3, [pc, #244]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	4939      	ldr	r1, [pc, #228]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800fa02:	4313      	orrs	r3, r2
 800fa04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fa06:	e03a      	b.n	800fa7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	691b      	ldr	r3, [r3, #16]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d020      	beq.n	800fa52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fa10:	4b36      	ldr	r3, [pc, #216]	; (800faec <HAL_RCC_OscConfig+0x270>)
 800fa12:	2201      	movs	r2, #1
 800fa14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa16:	f7fe feab 	bl	800e770 <HAL_GetTick>
 800fa1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fa1c:	e008      	b.n	800fa30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fa1e:	f7fe fea7 	bl	800e770 <HAL_GetTick>
 800fa22:	4602      	mov	r2, r0
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d901      	bls.n	800fa30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e1a1      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fa30:	4b2d      	ldr	r3, [pc, #180]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0f0      	beq.n	800fa1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa3c:	4b2a      	ldr	r3, [pc, #168]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	695b      	ldr	r3, [r3, #20]
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	4927      	ldr	r1, [pc, #156]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	600b      	str	r3, [r1, #0]
 800fa50:	e015      	b.n	800fa7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fa52:	4b26      	ldr	r3, [pc, #152]	; (800faec <HAL_RCC_OscConfig+0x270>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa58:	f7fe fe8a 	bl	800e770 <HAL_GetTick>
 800fa5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fa5e:	e008      	b.n	800fa72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fa60:	f7fe fe86 	bl	800e770 <HAL_GetTick>
 800fa64:	4602      	mov	r2, r0
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	1ad3      	subs	r3, r2, r3
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d901      	bls.n	800fa72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800fa6e:	2303      	movs	r3, #3
 800fa70:	e180      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fa72:	4b1d      	ldr	r3, [pc, #116]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f003 0302 	and.w	r3, r3, #2
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1f0      	bne.n	800fa60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f003 0308 	and.w	r3, r3, #8
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d03a      	beq.n	800fb00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	699b      	ldr	r3, [r3, #24]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d019      	beq.n	800fac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fa92:	4b17      	ldr	r3, [pc, #92]	; (800faf0 <HAL_RCC_OscConfig+0x274>)
 800fa94:	2201      	movs	r2, #1
 800fa96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fa98:	f7fe fe6a 	bl	800e770 <HAL_GetTick>
 800fa9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fa9e:	e008      	b.n	800fab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800faa0:	f7fe fe66 	bl	800e770 <HAL_GetTick>
 800faa4:	4602      	mov	r2, r0
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	2b02      	cmp	r3, #2
 800faac:	d901      	bls.n	800fab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800faae:	2303      	movs	r3, #3
 800fab0:	e160      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fab2:	4b0d      	ldr	r3, [pc, #52]	; (800fae8 <HAL_RCC_OscConfig+0x26c>)
 800fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab6:	f003 0302 	and.w	r3, r3, #2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0f0      	beq.n	800faa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800fabe:	2001      	movs	r0, #1
 800fac0:	f000 fad8 	bl	8010074 <RCC_Delay>
 800fac4:	e01c      	b.n	800fb00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fac6:	4b0a      	ldr	r3, [pc, #40]	; (800faf0 <HAL_RCC_OscConfig+0x274>)
 800fac8:	2200      	movs	r2, #0
 800faca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800facc:	f7fe fe50 	bl	800e770 <HAL_GetTick>
 800fad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fad2:	e00f      	b.n	800faf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fad4:	f7fe fe4c 	bl	800e770 <HAL_GetTick>
 800fad8:	4602      	mov	r2, r0
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	2b02      	cmp	r3, #2
 800fae0:	d908      	bls.n	800faf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800fae2:	2303      	movs	r3, #3
 800fae4:	e146      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
 800fae6:	bf00      	nop
 800fae8:	40021000 	.word	0x40021000
 800faec:	42420000 	.word	0x42420000
 800faf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800faf4:	4b92      	ldr	r3, [pc, #584]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800faf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf8:	f003 0302 	and.w	r3, r3, #2
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d1e9      	bne.n	800fad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f003 0304 	and.w	r3, r3, #4
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 80a6 	beq.w	800fc5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fb12:	4b8b      	ldr	r3, [pc, #556]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb14:	69db      	ldr	r3, [r3, #28]
 800fb16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10d      	bne.n	800fb3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fb1e:	4b88      	ldr	r3, [pc, #544]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb20:	69db      	ldr	r3, [r3, #28]
 800fb22:	4a87      	ldr	r2, [pc, #540]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb28:	61d3      	str	r3, [r2, #28]
 800fb2a:	4b85      	ldr	r3, [pc, #532]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb2c:	69db      	ldr	r3, [r3, #28]
 800fb2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb32:	60bb      	str	r3, [r7, #8]
 800fb34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fb36:	2301      	movs	r3, #1
 800fb38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fb3a:	4b82      	ldr	r3, [pc, #520]	; (800fd44 <HAL_RCC_OscConfig+0x4c8>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d118      	bne.n	800fb78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fb46:	4b7f      	ldr	r3, [pc, #508]	; (800fd44 <HAL_RCC_OscConfig+0x4c8>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a7e      	ldr	r2, [pc, #504]	; (800fd44 <HAL_RCC_OscConfig+0x4c8>)
 800fb4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fb52:	f7fe fe0d 	bl	800e770 <HAL_GetTick>
 800fb56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fb58:	e008      	b.n	800fb6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fb5a:	f7fe fe09 	bl	800e770 <HAL_GetTick>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	2b64      	cmp	r3, #100	; 0x64
 800fb66:	d901      	bls.n	800fb6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800fb68:	2303      	movs	r3, #3
 800fb6a:	e103      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fb6c:	4b75      	ldr	r3, [pc, #468]	; (800fd44 <HAL_RCC_OscConfig+0x4c8>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d0f0      	beq.n	800fb5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d106      	bne.n	800fb8e <HAL_RCC_OscConfig+0x312>
 800fb80:	4b6f      	ldr	r3, [pc, #444]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb82:	6a1b      	ldr	r3, [r3, #32]
 800fb84:	4a6e      	ldr	r2, [pc, #440]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb86:	f043 0301 	orr.w	r3, r3, #1
 800fb8a:	6213      	str	r3, [r2, #32]
 800fb8c:	e02d      	b.n	800fbea <HAL_RCC_OscConfig+0x36e>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d10c      	bne.n	800fbb0 <HAL_RCC_OscConfig+0x334>
 800fb96:	4b6a      	ldr	r3, [pc, #424]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	4a69      	ldr	r2, [pc, #420]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fb9c:	f023 0301 	bic.w	r3, r3, #1
 800fba0:	6213      	str	r3, [r2, #32]
 800fba2:	4b67      	ldr	r3, [pc, #412]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fba4:	6a1b      	ldr	r3, [r3, #32]
 800fba6:	4a66      	ldr	r2, [pc, #408]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fba8:	f023 0304 	bic.w	r3, r3, #4
 800fbac:	6213      	str	r3, [r2, #32]
 800fbae:	e01c      	b.n	800fbea <HAL_RCC_OscConfig+0x36e>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	2b05      	cmp	r3, #5
 800fbb6:	d10c      	bne.n	800fbd2 <HAL_RCC_OscConfig+0x356>
 800fbb8:	4b61      	ldr	r3, [pc, #388]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbba:	6a1b      	ldr	r3, [r3, #32]
 800fbbc:	4a60      	ldr	r2, [pc, #384]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbbe:	f043 0304 	orr.w	r3, r3, #4
 800fbc2:	6213      	str	r3, [r2, #32]
 800fbc4:	4b5e      	ldr	r3, [pc, #376]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	4a5d      	ldr	r2, [pc, #372]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbca:	f043 0301 	orr.w	r3, r3, #1
 800fbce:	6213      	str	r3, [r2, #32]
 800fbd0:	e00b      	b.n	800fbea <HAL_RCC_OscConfig+0x36e>
 800fbd2:	4b5b      	ldr	r3, [pc, #364]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbd4:	6a1b      	ldr	r3, [r3, #32]
 800fbd6:	4a5a      	ldr	r2, [pc, #360]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbd8:	f023 0301 	bic.w	r3, r3, #1
 800fbdc:	6213      	str	r3, [r2, #32]
 800fbde:	4b58      	ldr	r3, [pc, #352]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbe0:	6a1b      	ldr	r3, [r3, #32]
 800fbe2:	4a57      	ldr	r2, [pc, #348]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fbe4:	f023 0304 	bic.w	r3, r3, #4
 800fbe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d015      	beq.n	800fc1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fbf2:	f7fe fdbd 	bl	800e770 <HAL_GetTick>
 800fbf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fbf8:	e00a      	b.n	800fc10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbfa:	f7fe fdb9 	bl	800e770 <HAL_GetTick>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d901      	bls.n	800fc10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e0b1      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fc10:	4b4b      	ldr	r3, [pc, #300]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fc12:	6a1b      	ldr	r3, [r3, #32]
 800fc14:	f003 0302 	and.w	r3, r3, #2
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d0ee      	beq.n	800fbfa <HAL_RCC_OscConfig+0x37e>
 800fc1c:	e014      	b.n	800fc48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc1e:	f7fe fda7 	bl	800e770 <HAL_GetTick>
 800fc22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fc24:	e00a      	b.n	800fc3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fc26:	f7fe fda3 	bl	800e770 <HAL_GetTick>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	1ad3      	subs	r3, r2, r3
 800fc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d901      	bls.n	800fc3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e09b      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fc3c:	4b40      	ldr	r3, [pc, #256]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fc3e:	6a1b      	ldr	r3, [r3, #32]
 800fc40:	f003 0302 	and.w	r3, r3, #2
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1ee      	bne.n	800fc26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800fc48:	7dfb      	ldrb	r3, [r7, #23]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d105      	bne.n	800fc5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fc4e:	4b3c      	ldr	r3, [pc, #240]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	4a3b      	ldr	r2, [pc, #236]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fc54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	69db      	ldr	r3, [r3, #28]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f000 8087 	beq.w	800fd72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fc64:	4b36      	ldr	r3, [pc, #216]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	f003 030c 	and.w	r3, r3, #12
 800fc6c:	2b08      	cmp	r3, #8
 800fc6e:	d061      	beq.n	800fd34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	69db      	ldr	r3, [r3, #28]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d146      	bne.n	800fd06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fc78:	4b33      	ldr	r3, [pc, #204]	; (800fd48 <HAL_RCC_OscConfig+0x4cc>)
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc7e:	f7fe fd77 	bl	800e770 <HAL_GetTick>
 800fc82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fc84:	e008      	b.n	800fc98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc86:	f7fe fd73 	bl	800e770 <HAL_GetTick>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d901      	bls.n	800fc98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800fc94:	2303      	movs	r3, #3
 800fc96:	e06d      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fc98:	4b29      	ldr	r3, [pc, #164]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1f0      	bne.n	800fc86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6a1b      	ldr	r3, [r3, #32]
 800fca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcac:	d108      	bne.n	800fcc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800fcae:	4b24      	ldr	r3, [pc, #144]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	689b      	ldr	r3, [r3, #8]
 800fcba:	4921      	ldr	r1, [pc, #132]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fcc0:	4b1f      	ldr	r3, [pc, #124]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a19      	ldr	r1, [r3, #32]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd0:	430b      	orrs	r3, r1
 800fcd2:	491b      	ldr	r1, [pc, #108]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fcd8:	4b1b      	ldr	r3, [pc, #108]	; (800fd48 <HAL_RCC_OscConfig+0x4cc>)
 800fcda:	2201      	movs	r2, #1
 800fcdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fcde:	f7fe fd47 	bl	800e770 <HAL_GetTick>
 800fce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800fce4:	e008      	b.n	800fcf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fce6:	f7fe fd43 	bl	800e770 <HAL_GetTick>
 800fcea:	4602      	mov	r2, r0
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d901      	bls.n	800fcf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e03d      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800fcf8:	4b11      	ldr	r3, [pc, #68]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0f0      	beq.n	800fce6 <HAL_RCC_OscConfig+0x46a>
 800fd04:	e035      	b.n	800fd72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd06:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <HAL_RCC_OscConfig+0x4cc>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd0c:	f7fe fd30 	bl	800e770 <HAL_GetTick>
 800fd10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fd12:	e008      	b.n	800fd26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd14:	f7fe fd2c 	bl	800e770 <HAL_GetTick>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	2b02      	cmp	r3, #2
 800fd20:	d901      	bls.n	800fd26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800fd22:	2303      	movs	r3, #3
 800fd24:	e026      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fd26:	4b06      	ldr	r3, [pc, #24]	; (800fd40 <HAL_RCC_OscConfig+0x4c4>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1f0      	bne.n	800fd14 <HAL_RCC_OscConfig+0x498>
 800fd32:	e01e      	b.n	800fd72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	69db      	ldr	r3, [r3, #28]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d107      	bne.n	800fd4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e019      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
 800fd40:	40021000 	.word	0x40021000
 800fd44:	40007000 	.word	0x40007000
 800fd48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <HAL_RCC_OscConfig+0x500>)
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6a1b      	ldr	r3, [r3, #32]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d106      	bne.n	800fd6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d001      	beq.n	800fd72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e000      	b.n	800fd74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	40021000 	.word	0x40021000

0800fd80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fd90:	2301      	movs	r3, #1
 800fd92:	e0d0      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fd94:	4b6a      	ldr	r3, [pc, #424]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f003 0307 	and.w	r3, r3, #7
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d910      	bls.n	800fdc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fda2:	4b67      	ldr	r3, [pc, #412]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f023 0207 	bic.w	r2, r3, #7
 800fdaa:	4965      	ldr	r1, [pc, #404]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fdb2:	4b63      	ldr	r3, [pc, #396]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f003 0307 	and.w	r3, r3, #7
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d001      	beq.n	800fdc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e0b8      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f003 0302 	and.w	r3, r3, #2
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d020      	beq.n	800fe12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f003 0304 	and.w	r3, r3, #4
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d005      	beq.n	800fde8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fddc:	4b59      	ldr	r3, [pc, #356]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	4a58      	ldr	r2, [pc, #352]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fde2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800fde6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0308 	and.w	r3, r3, #8
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d005      	beq.n	800fe00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fdf4:	4b53      	ldr	r3, [pc, #332]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	4a52      	ldr	r2, [pc, #328]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fdfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800fdfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe00:	4b50      	ldr	r3, [pc, #320]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	494d      	ldr	r1, [pc, #308]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f003 0301 	and.w	r3, r3, #1
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d040      	beq.n	800fea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d107      	bne.n	800fe36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe26:	4b47      	ldr	r3, [pc, #284]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d115      	bne.n	800fe5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fe32:	2301      	movs	r3, #1
 800fe34:	e07f      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d107      	bne.n	800fe4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fe3e:	4b41      	ldr	r3, [pc, #260]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e073      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fe4e:	4b3d      	ldr	r3, [pc, #244]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f003 0302 	and.w	r3, r3, #2
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d101      	bne.n	800fe5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e06b      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fe5e:	4b39      	ldr	r3, [pc, #228]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	f023 0203 	bic.w	r2, r3, #3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	4936      	ldr	r1, [pc, #216]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fe70:	f7fe fc7e 	bl	800e770 <HAL_GetTick>
 800fe74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe76:	e00a      	b.n	800fe8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fe78:	f7fe fc7a 	bl	800e770 <HAL_GetTick>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	1ad3      	subs	r3, r2, r3
 800fe82:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d901      	bls.n	800fe8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fe8a:	2303      	movs	r3, #3
 800fe8c:	e053      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe8e:	4b2d      	ldr	r3, [pc, #180]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	f003 020c 	and.w	r2, r3, #12
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d1eb      	bne.n	800fe78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fea0:	4b27      	ldr	r3, [pc, #156]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f003 0307 	and.w	r3, r3, #7
 800fea8:	683a      	ldr	r2, [r7, #0]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d210      	bcs.n	800fed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800feae:	4b24      	ldr	r3, [pc, #144]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f023 0207 	bic.w	r2, r3, #7
 800feb6:	4922      	ldr	r1, [pc, #136]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	4313      	orrs	r3, r2
 800febc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800febe:	4b20      	ldr	r3, [pc, #128]	; (800ff40 <HAL_RCC_ClockConfig+0x1c0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f003 0307 	and.w	r3, r3, #7
 800fec6:	683a      	ldr	r2, [r7, #0]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d001      	beq.n	800fed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800fecc:	2301      	movs	r3, #1
 800fece:	e032      	b.n	800ff36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f003 0304 	and.w	r3, r3, #4
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d008      	beq.n	800feee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fedc:	4b19      	ldr	r3, [pc, #100]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	4916      	ldr	r1, [pc, #88]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800feea:	4313      	orrs	r3, r2
 800feec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f003 0308 	and.w	r3, r3, #8
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d009      	beq.n	800ff0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800fefa:	4b12      	ldr	r3, [pc, #72]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	00db      	lsls	r3, r3, #3
 800ff08:	490e      	ldr	r1, [pc, #56]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ff0e:	f000 f821 	bl	800ff54 <HAL_RCC_GetSysClockFreq>
 800ff12:	4602      	mov	r2, r0
 800ff14:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <HAL_RCC_ClockConfig+0x1c4>)
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	091b      	lsrs	r3, r3, #4
 800ff1a:	f003 030f 	and.w	r3, r3, #15
 800ff1e:	490a      	ldr	r1, [pc, #40]	; (800ff48 <HAL_RCC_ClockConfig+0x1c8>)
 800ff20:	5ccb      	ldrb	r3, [r1, r3]
 800ff22:	fa22 f303 	lsr.w	r3, r2, r3
 800ff26:	4a09      	ldr	r2, [pc, #36]	; (800ff4c <HAL_RCC_ClockConfig+0x1cc>)
 800ff28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ff2a:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <HAL_RCC_ClockConfig+0x1d0>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fe fbdc 	bl	800e6ec <HAL_InitTick>

  return HAL_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	40022000 	.word	0x40022000
 800ff44:	40021000 	.word	0x40021000
 800ff48:	08011e64 	.word	0x08011e64
 800ff4c:	200000cc 	.word	0x200000cc
 800ff50:	200000d0 	.word	0x200000d0

0800ff54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ff54:	b490      	push	{r4, r7}
 800ff56:	b08a      	sub	sp, #40	; 0x28
 800ff58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800ff5a:	4b29      	ldr	r3, [pc, #164]	; (8010000 <HAL_RCC_GetSysClockFreq+0xac>)
 800ff5c:	1d3c      	adds	r4, r7, #4
 800ff5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800ff64:	f240 2301 	movw	r3, #513	; 0x201
 800ff68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	61fb      	str	r3, [r7, #28]
 800ff6e:	2300      	movs	r3, #0
 800ff70:	61bb      	str	r3, [r7, #24]
 800ff72:	2300      	movs	r3, #0
 800ff74:	627b      	str	r3, [r7, #36]	; 0x24
 800ff76:	2300      	movs	r3, #0
 800ff78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ff7e:	4b21      	ldr	r3, [pc, #132]	; (8010004 <HAL_RCC_GetSysClockFreq+0xb0>)
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	f003 030c 	and.w	r3, r3, #12
 800ff8a:	2b04      	cmp	r3, #4
 800ff8c:	d002      	beq.n	800ff94 <HAL_RCC_GetSysClockFreq+0x40>
 800ff8e:	2b08      	cmp	r3, #8
 800ff90:	d003      	beq.n	800ff9a <HAL_RCC_GetSysClockFreq+0x46>
 800ff92:	e02b      	b.n	800ffec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ff94:	4b1c      	ldr	r3, [pc, #112]	; (8010008 <HAL_RCC_GetSysClockFreq+0xb4>)
 800ff96:	623b      	str	r3, [r7, #32]
      break;
 800ff98:	e02b      	b.n	800fff2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	0c9b      	lsrs	r3, r3, #18
 800ff9e:	f003 030f 	and.w	r3, r3, #15
 800ffa2:	3328      	adds	r3, #40	; 0x28
 800ffa4:	443b      	add	r3, r7
 800ffa6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800ffaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d012      	beq.n	800ffdc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ffb6:	4b13      	ldr	r3, [pc, #76]	; (8010004 <HAL_RCC_GetSysClockFreq+0xb0>)
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	0c5b      	lsrs	r3, r3, #17
 800ffbc:	f003 0301 	and.w	r3, r3, #1
 800ffc0:	3328      	adds	r3, #40	; 0x28
 800ffc2:	443b      	add	r3, r7
 800ffc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ffc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	4a0e      	ldr	r2, [pc, #56]	; (8010008 <HAL_RCC_GetSysClockFreq+0xb4>)
 800ffce:	fb03 f202 	mul.w	r2, r3, r2
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffd8:	627b      	str	r3, [r7, #36]	; 0x24
 800ffda:	e004      	b.n	800ffe6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	4a0b      	ldr	r2, [pc, #44]	; (801000c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ffe0:	fb02 f303 	mul.w	r3, r2, r3
 800ffe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	623b      	str	r3, [r7, #32]
      break;
 800ffea:	e002      	b.n	800fff2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ffec:	4b06      	ldr	r3, [pc, #24]	; (8010008 <HAL_RCC_GetSysClockFreq+0xb4>)
 800ffee:	623b      	str	r3, [r7, #32]
      break;
 800fff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fff2:	6a3b      	ldr	r3, [r7, #32]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3728      	adds	r7, #40	; 0x28
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bc90      	pop	{r4, r7}
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	08011e54 	.word	0x08011e54
 8010004:	40021000 	.word	0x40021000
 8010008:	007a1200 	.word	0x007a1200
 801000c:	003d0900 	.word	0x003d0900

08010010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010010:	b480      	push	{r7}
 8010012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010014:	4b02      	ldr	r3, [pc, #8]	; (8010020 <HAL_RCC_GetHCLKFreq+0x10>)
 8010016:	681b      	ldr	r3, [r3, #0]
}
 8010018:	4618      	mov	r0, r3
 801001a:	46bd      	mov	sp, r7
 801001c:	bc80      	pop	{r7}
 801001e:	4770      	bx	lr
 8010020:	200000cc 	.word	0x200000cc

08010024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010028:	f7ff fff2 	bl	8010010 <HAL_RCC_GetHCLKFreq>
 801002c:	4602      	mov	r2, r0
 801002e:	4b05      	ldr	r3, [pc, #20]	; (8010044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	0a1b      	lsrs	r3, r3, #8
 8010034:	f003 0307 	and.w	r3, r3, #7
 8010038:	4903      	ldr	r1, [pc, #12]	; (8010048 <HAL_RCC_GetPCLK1Freq+0x24>)
 801003a:	5ccb      	ldrb	r3, [r1, r3]
 801003c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010040:	4618      	mov	r0, r3
 8010042:	bd80      	pop	{r7, pc}
 8010044:	40021000 	.word	0x40021000
 8010048:	08011e74 	.word	0x08011e74

0801004c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010050:	f7ff ffde 	bl	8010010 <HAL_RCC_GetHCLKFreq>
 8010054:	4602      	mov	r2, r0
 8010056:	4b05      	ldr	r3, [pc, #20]	; (801006c <HAL_RCC_GetPCLK2Freq+0x20>)
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	0adb      	lsrs	r3, r3, #11
 801005c:	f003 0307 	and.w	r3, r3, #7
 8010060:	4903      	ldr	r1, [pc, #12]	; (8010070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010062:	5ccb      	ldrb	r3, [r1, r3]
 8010064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010068:	4618      	mov	r0, r3
 801006a:	bd80      	pop	{r7, pc}
 801006c:	40021000 	.word	0x40021000
 8010070:	08011e74 	.word	0x08011e74

08010074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 801007c:	4b0a      	ldr	r3, [pc, #40]	; (80100a8 <RCC_Delay+0x34>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a0a      	ldr	r2, [pc, #40]	; (80100ac <RCC_Delay+0x38>)
 8010082:	fba2 2303 	umull	r2, r3, r2, r3
 8010086:	0a5b      	lsrs	r3, r3, #9
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	fb02 f303 	mul.w	r3, r2, r3
 801008e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8010090:	bf00      	nop
  }
  while (Delay --);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	1e5a      	subs	r2, r3, #1
 8010096:	60fa      	str	r2, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d1f9      	bne.n	8010090 <RCC_Delay+0x1c>
}
 801009c:	bf00      	nop
 801009e:	bf00      	nop
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bc80      	pop	{r7}
 80100a6:	4770      	bx	lr
 80100a8:	200000cc 	.word	0x200000cc
 80100ac:	10624dd3 	.word	0x10624dd3

080100b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d101      	bne.n	80100c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	e076      	b.n	80101b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d108      	bne.n	80100dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80100d2:	d009      	beq.n	80100e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	61da      	str	r2, [r3, #28]
 80100da:	e005      	b.n	80100e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7fe f8ec 	bl	800e2e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2202      	movs	r2, #2
 801010c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801011e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010130:	431a      	orrs	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801013a:	431a      	orrs	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	691b      	ldr	r3, [r3, #16]
 8010140:	f003 0302 	and.w	r3, r3, #2
 8010144:	431a      	orrs	r2, r3
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	695b      	ldr	r3, [r3, #20]
 801014a:	f003 0301 	and.w	r3, r3, #1
 801014e:	431a      	orrs	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	699b      	ldr	r3, [r3, #24]
 8010154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010158:	431a      	orrs	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	69db      	ldr	r3, [r3, #28]
 801015e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010162:	431a      	orrs	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a1b      	ldr	r3, [r3, #32]
 8010168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801016c:	ea42 0103 	orr.w	r1, r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010174:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	430a      	orrs	r2, r1
 801017e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	699b      	ldr	r3, [r3, #24]
 8010184:	0c1a      	lsrs	r2, r3, #16
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f002 0204 	and.w	r2, r2, #4
 801018e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	69da      	ldr	r2, [r3, #28]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801019e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2201      	movs	r2, #1
 80101aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b08c      	sub	sp, #48	; 0x30
 80101bc:	af00      	add	r7, sp, #0
 80101be:	60f8      	str	r0, [r7, #12]
 80101c0:	60b9      	str	r1, [r7, #8]
 80101c2:	607a      	str	r2, [r7, #4]
 80101c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80101c6:	2301      	movs	r3, #1
 80101c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d101      	bne.n	80101de <HAL_SPI_TransmitReceive+0x26>
 80101da:	2302      	movs	r3, #2
 80101dc:	e18a      	b.n	80104f4 <HAL_SPI_TransmitReceive+0x33c>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80101e6:	f7fe fac3 	bl	800e770 <HAL_GetTick>
 80101ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80101fc:	887b      	ldrh	r3, [r7, #2]
 80101fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010204:	2b01      	cmp	r3, #1
 8010206:	d00f      	beq.n	8010228 <HAL_SPI_TransmitReceive+0x70>
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801020e:	d107      	bne.n	8010220 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d103      	bne.n	8010220 <HAL_SPI_TransmitReceive+0x68>
 8010218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801021c:	2b04      	cmp	r3, #4
 801021e:	d003      	beq.n	8010228 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010220:	2302      	movs	r3, #2
 8010222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010226:	e15b      	b.n	80104e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d005      	beq.n	801023a <HAL_SPI_TransmitReceive+0x82>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d002      	beq.n	801023a <HAL_SPI_TransmitReceive+0x82>
 8010234:	887b      	ldrh	r3, [r7, #2]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d103      	bne.n	8010242 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801023a:	2301      	movs	r3, #1
 801023c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010240:	e14e      	b.n	80104e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010248:	b2db      	uxtb	r3, r3
 801024a:	2b04      	cmp	r3, #4
 801024c:	d003      	beq.n	8010256 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2205      	movs	r2, #5
 8010252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2200      	movs	r2, #0
 801025a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	887a      	ldrh	r2, [r7, #2]
 8010266:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	887a      	ldrh	r2, [r7, #2]
 801026c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	887a      	ldrh	r2, [r7, #2]
 8010278:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	887a      	ldrh	r2, [r7, #2]
 801027e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2200      	movs	r2, #0
 801028a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010296:	2b40      	cmp	r3, #64	; 0x40
 8010298:	d007      	beq.n	80102aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80102a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80102b2:	d178      	bne.n	80103a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d002      	beq.n	80102c2 <HAL_SPI_TransmitReceive+0x10a>
 80102bc:	8b7b      	ldrh	r3, [r7, #26]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d166      	bne.n	8010390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c6:	881a      	ldrh	r2, [r3, #0]
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d2:	1c9a      	adds	r2, r3, #2
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102dc:	b29b      	uxth	r3, r3
 80102de:	3b01      	subs	r3, #1
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102e6:	e053      	b.n	8010390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f003 0302 	and.w	r3, r3, #2
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d11b      	bne.n	801032e <HAL_SPI_TransmitReceive+0x176>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d016      	beq.n	801032e <HAL_SPI_TransmitReceive+0x176>
 8010300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010302:	2b01      	cmp	r3, #1
 8010304:	d113      	bne.n	801032e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801030a:	881a      	ldrh	r2, [r3, #0]
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010316:	1c9a      	adds	r2, r3, #2
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010320:	b29b      	uxth	r3, r3
 8010322:	3b01      	subs	r3, #1
 8010324:	b29a      	uxth	r2, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801032a:	2300      	movs	r3, #0
 801032c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b01      	cmp	r3, #1
 801033a:	d119      	bne.n	8010370 <HAL_SPI_TransmitReceive+0x1b8>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010340:	b29b      	uxth	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d014      	beq.n	8010370 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	68da      	ldr	r2, [r3, #12]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010350:	b292      	uxth	r2, r2
 8010352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010358:	1c9a      	adds	r2, r3, #2
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010362:	b29b      	uxth	r3, r3
 8010364:	3b01      	subs	r3, #1
 8010366:	b29a      	uxth	r2, r3
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801036c:	2301      	movs	r3, #1
 801036e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010370:	f7fe f9fe 	bl	800e770 <HAL_GetTick>
 8010374:	4602      	mov	r2, r0
 8010376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801037c:	429a      	cmp	r2, r3
 801037e:	d807      	bhi.n	8010390 <HAL_SPI_TransmitReceive+0x1d8>
 8010380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010386:	d003      	beq.n	8010390 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010388:	2303      	movs	r3, #3
 801038a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801038e:	e0a7      	b.n	80104e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010394:	b29b      	uxth	r3, r3
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1a6      	bne.n	80102e8 <HAL_SPI_TransmitReceive+0x130>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801039e:	b29b      	uxth	r3, r3
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1a1      	bne.n	80102e8 <HAL_SPI_TransmitReceive+0x130>
 80103a4:	e07c      	b.n	80104a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d002      	beq.n	80103b4 <HAL_SPI_TransmitReceive+0x1fc>
 80103ae:	8b7b      	ldrh	r3, [r7, #26]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d16b      	bne.n	801048c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	330c      	adds	r3, #12
 80103be:	7812      	ldrb	r2, [r2, #0]
 80103c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	3b01      	subs	r3, #1
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80103da:	e057      	b.n	801048c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	f003 0302 	and.w	r3, r3, #2
 80103e6:	2b02      	cmp	r3, #2
 80103e8:	d11c      	bne.n	8010424 <HAL_SPI_TransmitReceive+0x26c>
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d017      	beq.n	8010424 <HAL_SPI_TransmitReceive+0x26c>
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	2b01      	cmp	r3, #1
 80103f8:	d114      	bne.n	8010424 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	330c      	adds	r3, #12
 8010404:	7812      	ldrb	r2, [r2, #0]
 8010406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010416:	b29b      	uxth	r3, r3
 8010418:	3b01      	subs	r3, #1
 801041a:	b29a      	uxth	r2, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010420:	2300      	movs	r3, #0
 8010422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	2b01      	cmp	r3, #1
 8010430:	d119      	bne.n	8010466 <HAL_SPI_TransmitReceive+0x2ae>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010436:	b29b      	uxth	r3, r3
 8010438:	2b00      	cmp	r3, #0
 801043a:	d014      	beq.n	8010466 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	68da      	ldr	r2, [r3, #12]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010446:	b2d2      	uxtb	r2, r2
 8010448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044e:	1c5a      	adds	r2, r3, #1
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010458:	b29b      	uxth	r3, r3
 801045a:	3b01      	subs	r3, #1
 801045c:	b29a      	uxth	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010462:	2301      	movs	r3, #1
 8010464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010466:	f7fe f983 	bl	800e770 <HAL_GetTick>
 801046a:	4602      	mov	r2, r0
 801046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010472:	429a      	cmp	r2, r3
 8010474:	d803      	bhi.n	801047e <HAL_SPI_TransmitReceive+0x2c6>
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801047c:	d102      	bne.n	8010484 <HAL_SPI_TransmitReceive+0x2cc>
 801047e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010480:	2b00      	cmp	r3, #0
 8010482:	d103      	bne.n	801048c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010484:	2303      	movs	r3, #3
 8010486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801048a:	e029      	b.n	80104e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010490:	b29b      	uxth	r3, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1a2      	bne.n	80103dc <HAL_SPI_TransmitReceive+0x224>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801049a:	b29b      	uxth	r3, r3
 801049c:	2b00      	cmp	r3, #0
 801049e:	d19d      	bne.n	80103dc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80104a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f000 f8b1 	bl	801060c <SPI_EndRxTxTransaction>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d006      	beq.n	80104be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2220      	movs	r2, #32
 80104ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80104bc:	e010      	b.n	80104e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d10b      	bne.n	80104de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80104c6:	2300      	movs	r3, #0
 80104c8:	617b      	str	r3, [r7, #20]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	617b      	str	r3, [r7, #20]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	617b      	str	r3, [r7, #20]
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	e000      	b.n	80104e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80104de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80104f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3730      	adds	r7, #48	; 0x30
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b088      	sub	sp, #32
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	603b      	str	r3, [r7, #0]
 8010508:	4613      	mov	r3, r2
 801050a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801050c:	f7fe f930 	bl	800e770 <HAL_GetTick>
 8010510:	4602      	mov	r2, r0
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	1a9b      	subs	r3, r3, r2
 8010516:	683a      	ldr	r2, [r7, #0]
 8010518:	4413      	add	r3, r2
 801051a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801051c:	f7fe f928 	bl	800e770 <HAL_GetTick>
 8010520:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010522:	4b39      	ldr	r3, [pc, #228]	; (8010608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	015b      	lsls	r3, r3, #5
 8010528:	0d1b      	lsrs	r3, r3, #20
 801052a:	69fa      	ldr	r2, [r7, #28]
 801052c:	fb02 f303 	mul.w	r3, r2, r3
 8010530:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010532:	e054      	b.n	80105de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d050      	beq.n	80105de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801053c:	f7fe f918 	bl	800e770 <HAL_GetTick>
 8010540:	4602      	mov	r2, r0
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	429a      	cmp	r2, r3
 801054a:	d902      	bls.n	8010552 <SPI_WaitFlagStateUntilTimeout+0x56>
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d13d      	bne.n	80105ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	685a      	ldr	r2, [r3, #4]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010560:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801056a:	d111      	bne.n	8010590 <SPI_WaitFlagStateUntilTimeout+0x94>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010574:	d004      	beq.n	8010580 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801057e:	d107      	bne.n	8010590 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801058e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010598:	d10f      	bne.n	80105ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80105b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2201      	movs	r2, #1
 80105be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2200      	movs	r2, #0
 80105c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80105ca:	2303      	movs	r3, #3
 80105cc:	e017      	b.n	80105fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d101      	bne.n	80105d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80105d4:	2300      	movs	r3, #0
 80105d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	3b01      	subs	r3, #1
 80105dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	689a      	ldr	r2, [r3, #8]
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	4013      	ands	r3, r2
 80105e8:	68ba      	ldr	r2, [r7, #8]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	bf0c      	ite	eq
 80105ee:	2301      	moveq	r3, #1
 80105f0:	2300      	movne	r3, #0
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	461a      	mov	r2, r3
 80105f6:	79fb      	ldrb	r3, [r7, #7]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d19b      	bne.n	8010534 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80105fc:	2300      	movs	r3, #0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	200000cc 	.word	0x200000cc

0801060c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b086      	sub	sp, #24
 8010610:	af02      	add	r7, sp, #8
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2200      	movs	r2, #0
 8010620:	2180      	movs	r1, #128	; 0x80
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f7ff ff6a 	bl	80104fc <SPI_WaitFlagStateUntilTimeout>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d007      	beq.n	801063e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010632:	f043 0220 	orr.w	r2, r3, #32
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 801063a:	2303      	movs	r3, #3
 801063c:	e000      	b.n	8010640 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d101      	bne.n	801065a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010656:	2301      	movs	r3, #1
 8010658:	e03f      	b.n	80106da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010660:	b2db      	uxtb	r3, r3
 8010662:	2b00      	cmp	r3, #0
 8010664:	d106      	bne.n	8010674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2200      	movs	r2, #0
 801066a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f7fd fe80 	bl	800e374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2224      	movs	r2, #36	; 0x24
 8010678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68da      	ldr	r2, [r3, #12]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801068a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 fc85 	bl	8010f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	691a      	ldr	r2, [r3, #16]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80106a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	695a      	ldr	r2, [r3, #20]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80106b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	68da      	ldr	r2, [r3, #12]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80106c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2220      	movs	r2, #32
 80106cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2220      	movs	r2, #32
 80106d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80106d8:	2300      	movs	r3, #0
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b08a      	sub	sp, #40	; 0x28
 80106e6:	af02      	add	r7, sp, #8
 80106e8:	60f8      	str	r0, [r7, #12]
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	603b      	str	r3, [r7, #0]
 80106ee:	4613      	mov	r3, r2
 80106f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80106f2:	2300      	movs	r3, #0
 80106f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	2b20      	cmp	r3, #32
 8010700:	d17c      	bne.n	80107fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d002      	beq.n	801070e <HAL_UART_Transmit+0x2c>
 8010708:	88fb      	ldrh	r3, [r7, #6]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801070e:	2301      	movs	r3, #1
 8010710:	e075      	b.n	80107fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010718:	2b01      	cmp	r3, #1
 801071a:	d101      	bne.n	8010720 <HAL_UART_Transmit+0x3e>
 801071c:	2302      	movs	r3, #2
 801071e:	e06e      	b.n	80107fe <HAL_UART_Transmit+0x11c>
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2201      	movs	r2, #1
 8010724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2221      	movs	r2, #33	; 0x21
 8010732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010736:	f7fe f81b 	bl	800e770 <HAL_GetTick>
 801073a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	88fa      	ldrh	r2, [r7, #6]
 8010740:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	88fa      	ldrh	r2, [r7, #6]
 8010746:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010750:	d108      	bne.n	8010764 <HAL_UART_Transmit+0x82>
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d104      	bne.n	8010764 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	61bb      	str	r3, [r7, #24]
 8010762:	e003      	b.n	801076c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010768:	2300      	movs	r3, #0
 801076a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010774:	e02a      	b.n	80107cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	2200      	movs	r2, #0
 801077e:	2180      	movs	r1, #128	; 0x80
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f000 fa38 	bl	8010bf6 <UART_WaitOnFlagUntilTimeout>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d001      	beq.n	8010790 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801078c:	2303      	movs	r3, #3
 801078e:	e036      	b.n	80107fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10b      	bne.n	80107ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	461a      	mov	r2, r3
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80107a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	3302      	adds	r3, #2
 80107aa:	61bb      	str	r3, [r7, #24]
 80107ac:	e007      	b.n	80107be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	781a      	ldrb	r2, [r3, #0]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	3301      	adds	r3, #1
 80107bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	3b01      	subs	r3, #1
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1cf      	bne.n	8010776 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	9300      	str	r3, [sp, #0]
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	2200      	movs	r2, #0
 80107de:	2140      	movs	r1, #64	; 0x40
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f000 fa08 	bl	8010bf6 <UART_WaitOnFlagUntilTimeout>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d001      	beq.n	80107f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80107ec:	2303      	movs	r3, #3
 80107ee:	e006      	b.n	80107fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2220      	movs	r2, #32
 80107f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80107f8:	2300      	movs	r3, #0
 80107fa:	e000      	b.n	80107fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80107fc:	2302      	movs	r3, #2
  }
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3720      	adds	r7, #32
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b084      	sub	sp, #16
 801080a:	af00      	add	r7, sp, #0
 801080c:	60f8      	str	r0, [r7, #12]
 801080e:	60b9      	str	r1, [r7, #8]
 8010810:	4613      	mov	r3, r2
 8010812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2b20      	cmp	r3, #32
 801081e:	d11d      	bne.n	801085c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <HAL_UART_Receive_IT+0x26>
 8010826:	88fb      	ldrh	r3, [r7, #6]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d101      	bne.n	8010830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	e016      	b.n	801085e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010836:	2b01      	cmp	r3, #1
 8010838:	d101      	bne.n	801083e <HAL_UART_Receive_IT+0x38>
 801083a:	2302      	movs	r3, #2
 801083c:	e00f      	b.n	801085e <HAL_UART_Receive_IT+0x58>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2201      	movs	r2, #1
 8010842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2200      	movs	r2, #0
 801084a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 801084c:	88fb      	ldrh	r3, [r7, #6]
 801084e:	461a      	mov	r2, r3
 8010850:	68b9      	ldr	r1, [r7, #8]
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f000 fa19 	bl	8010c8a <UART_Start_Receive_IT>
 8010858:	4603      	mov	r3, r0
 801085a:	e000      	b.n	801085e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801085c:	2302      	movs	r3, #2
  }
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
	...

08010868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08a      	sub	sp, #40	; 0x28
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	695b      	ldr	r3, [r3, #20]
 8010886:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8010888:	2300      	movs	r3, #0
 801088a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 801088c:	2300      	movs	r3, #0
 801088e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	f003 030f 	and.w	r3, r3, #15
 8010896:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8010898:	69bb      	ldr	r3, [r7, #24]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d10d      	bne.n	80108ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	f003 0320 	and.w	r3, r3, #32
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d008      	beq.n	80108ba <HAL_UART_IRQHandler+0x52>
 80108a8:	6a3b      	ldr	r3, [r7, #32]
 80108aa:	f003 0320 	and.w	r3, r3, #32
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d003      	beq.n	80108ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 fac9 	bl	8010e4a <UART_Receive_IT>
      return;
 80108b8:	e17b      	b.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 80b1 	beq.w	8010a24 <HAL_UART_IRQHandler+0x1bc>
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	f003 0301 	and.w	r3, r3, #1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d105      	bne.n	80108d8 <HAL_UART_IRQHandler+0x70>
 80108cc:	6a3b      	ldr	r3, [r7, #32]
 80108ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f000 80a6 	beq.w	8010a24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80108d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00a      	beq.n	80108f8 <HAL_UART_IRQHandler+0x90>
 80108e2:	6a3b      	ldr	r3, [r7, #32]
 80108e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d005      	beq.n	80108f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f0:	f043 0201 	orr.w	r2, r3, #1
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	f003 0304 	and.w	r3, r3, #4
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <HAL_UART_IRQHandler+0xb0>
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	f003 0301 	and.w	r3, r3, #1
 8010908:	2b00      	cmp	r3, #0
 801090a:	d005      	beq.n	8010918 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010910:	f043 0202 	orr.w	r2, r3, #2
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091a:	f003 0302 	and.w	r3, r3, #2
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00a      	beq.n	8010938 <HAL_UART_IRQHandler+0xd0>
 8010922:	69fb      	ldr	r3, [r7, #28]
 8010924:	f003 0301 	and.w	r3, r3, #1
 8010928:	2b00      	cmp	r3, #0
 801092a:	d005      	beq.n	8010938 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010930:	f043 0204 	orr.w	r2, r3, #4
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	f003 0308 	and.w	r3, r3, #8
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00f      	beq.n	8010962 <HAL_UART_IRQHandler+0xfa>
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	f003 0320 	and.w	r3, r3, #32
 8010948:	2b00      	cmp	r3, #0
 801094a:	d104      	bne.n	8010956 <HAL_UART_IRQHandler+0xee>
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	f003 0301 	and.w	r3, r3, #1
 8010952:	2b00      	cmp	r3, #0
 8010954:	d005      	beq.n	8010962 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095a:	f043 0208 	orr.w	r2, r3, #8
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 811e 	beq.w	8010ba8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096e:	f003 0320 	and.w	r3, r3, #32
 8010972:	2b00      	cmp	r3, #0
 8010974:	d007      	beq.n	8010986 <HAL_UART_IRQHandler+0x11e>
 8010976:	6a3b      	ldr	r3, [r7, #32]
 8010978:	f003 0320 	and.w	r3, r3, #32
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 fa62 	bl	8010e4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	695b      	ldr	r3, [r3, #20]
 801098c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010990:	2b00      	cmp	r3, #0
 8010992:	bf14      	ite	ne
 8010994:	2301      	movne	r3, #1
 8010996:	2300      	moveq	r3, #0
 8010998:	b2db      	uxtb	r3, r3
 801099a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a0:	f003 0308 	and.w	r3, r3, #8
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d102      	bne.n	80109ae <HAL_UART_IRQHandler+0x146>
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d031      	beq.n	8010a12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f9a4 	bl	8010cfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	695b      	ldr	r3, [r3, #20]
 80109ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d023      	beq.n	8010a0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	695a      	ldr	r2, [r3, #20]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d013      	beq.n	8010a02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109de:	4a76      	ldr	r2, [pc, #472]	; (8010bb8 <HAL_UART_IRQHandler+0x350>)
 80109e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe f838 	bl	800ea5c <HAL_DMA_Abort_IT>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d016      	beq.n	8010a20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80109fc:	4610      	mov	r0, r2
 80109fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a00:	e00e      	b.n	8010a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 f8e3 	bl	8010bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a08:	e00a      	b.n	8010a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 f8df 	bl	8010bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a10:	e006      	b.n	8010a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f8db 	bl	8010bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010a1e:	e0c3      	b.n	8010ba8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a20:	bf00      	nop
    return;
 8010a22:	e0c1      	b.n	8010ba8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	f040 80a1 	bne.w	8010b70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a30:	f003 0310 	and.w	r3, r3, #16
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f000 809b 	beq.w	8010b70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8010a3a:	6a3b      	ldr	r3, [r7, #32]
 8010a3c:	f003 0310 	and.w	r3, r3, #16
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 8095 	beq.w	8010b70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010a46:	2300      	movs	r3, #0
 8010a48:	60fb      	str	r3, [r7, #12]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	60fb      	str	r3, [r7, #12]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	60fb      	str	r3, [r7, #12]
 8010a5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	695b      	ldr	r3, [r3, #20]
 8010a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d04e      	beq.n	8010b08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8010a74:	8a3b      	ldrh	r3, [r7, #16]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f000 8098 	beq.w	8010bac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010a80:	8a3a      	ldrh	r2, [r7, #16]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	f080 8092 	bcs.w	8010bac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8a3a      	ldrh	r2, [r7, #16]
 8010a8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a92:	699b      	ldr	r3, [r3, #24]
 8010a94:	2b20      	cmp	r3, #32
 8010a96:	d02b      	beq.n	8010af0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	68da      	ldr	r2, [r3, #12]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010aa6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	695a      	ldr	r2, [r3, #20]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f022 0201 	bic.w	r2, r2, #1
 8010ab6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	695a      	ldr	r2, [r3, #20]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ac6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2220      	movs	r2, #32
 8010acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68da      	ldr	r2, [r3, #12]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f022 0210 	bic.w	r2, r2, #16
 8010ae4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fd ff7b 	bl	800e9e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	4619      	mov	r1, r3
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 f86d 	bl	8010be0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010b06:	e051      	b.n	8010bac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d047      	beq.n	8010bb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8010b20:	8a7b      	ldrh	r3, [r7, #18]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d044      	beq.n	8010bb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	68da      	ldr	r2, [r3, #12]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	695a      	ldr	r2, [r3, #20]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f022 0201 	bic.w	r2, r2, #1
 8010b44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2220      	movs	r2, #32
 8010b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2200      	movs	r2, #0
 8010b52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68da      	ldr	r2, [r3, #12]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f022 0210 	bic.w	r2, r2, #16
 8010b62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b64:	8a7b      	ldrh	r3, [r7, #18]
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 f839 	bl	8010be0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010b6e:	e01f      	b.n	8010bb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d008      	beq.n	8010b8c <HAL_UART_IRQHandler+0x324>
 8010b7a:	6a3b      	ldr	r3, [r7, #32]
 8010b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d003      	beq.n	8010b8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f000 f8f9 	bl	8010d7c <UART_Transmit_IT>
    return;
 8010b8a:	e012      	b.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00d      	beq.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
 8010b96:	6a3b      	ldr	r3, [r7, #32]
 8010b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d008      	beq.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f000 f93a 	bl	8010e1a <UART_EndTransmit_IT>
    return;
 8010ba6:	e004      	b.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8010ba8:	bf00      	nop
 8010baa:	e002      	b.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8010bac:	bf00      	nop
 8010bae:	e000      	b.n	8010bb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8010bb0:	bf00      	nop
  }
}
 8010bb2:	3728      	adds	r7, #40	; 0x28
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	08010d55 	.word	0x08010d55

08010bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010bc4:	bf00      	nop
 8010bc6:	370c      	adds	r7, #12
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bc80      	pop	{r7}
 8010bcc:	4770      	bx	lr

08010bce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010bce:	b480      	push	{r7}
 8010bd0:	b083      	sub	sp, #12
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010bd6:	bf00      	nop
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bc80      	pop	{r7}
 8010bde:	4770      	bx	lr

08010be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	460b      	mov	r3, r1
 8010bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010bec:	bf00      	nop
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bc80      	pop	{r7}
 8010bf4:	4770      	bx	lr

08010bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b084      	sub	sp, #16
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	60f8      	str	r0, [r7, #12]
 8010bfe:	60b9      	str	r1, [r7, #8]
 8010c00:	603b      	str	r3, [r7, #0]
 8010c02:	4613      	mov	r3, r2
 8010c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c06:	e02c      	b.n	8010c62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0e:	d028      	beq.n	8010c62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d007      	beq.n	8010c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8010c16:	f7fd fdab 	bl	800e770 <HAL_GetTick>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	69ba      	ldr	r2, [r7, #24]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d21d      	bcs.n	8010c62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	68da      	ldr	r2, [r3, #12]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010c34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	695a      	ldr	r2, [r3, #20]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f022 0201 	bic.w	r2, r2, #1
 8010c44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2220      	movs	r2, #32
 8010c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2220      	movs	r2, #32
 8010c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010c5e:	2303      	movs	r3, #3
 8010c60:	e00f      	b.n	8010c82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	4013      	ands	r3, r2
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	bf0c      	ite	eq
 8010c72:	2301      	moveq	r3, #1
 8010c74:	2300      	movne	r3, #0
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	461a      	mov	r2, r3
 8010c7a:	79fb      	ldrb	r3, [r7, #7]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d0c3      	beq.n	8010c08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b085      	sub	sp, #20
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	60f8      	str	r0, [r7, #12]
 8010c92:	60b9      	str	r1, [r7, #8]
 8010c94:	4613      	mov	r3, r2
 8010c96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	88fa      	ldrh	r2, [r7, #6]
 8010ca2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	88fa      	ldrh	r2, [r7, #6]
 8010ca8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2200      	movs	r2, #0
 8010cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2222      	movs	r2, #34	; 0x22
 8010cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68da      	ldr	r2, [r3, #12]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010cce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	695a      	ldr	r2, [r3, #20]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f042 0201 	orr.w	r2, r2, #1
 8010cde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	68da      	ldr	r2, [r3, #12]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f042 0220 	orr.w	r2, r2, #32
 8010cee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010cf0:	2300      	movs	r3, #0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3714      	adds	r7, #20
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bc80      	pop	{r7}
 8010cfa:	4770      	bx	lr

08010cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	68da      	ldr	r2, [r3, #12]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010d12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	695a      	ldr	r2, [r3, #20]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f022 0201 	bic.w	r2, r2, #1
 8010d22:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d107      	bne.n	8010d3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	68da      	ldr	r2, [r3, #12]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f022 0210 	bic.w	r2, r2, #16
 8010d3a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2220      	movs	r2, #32
 8010d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010d4a:	bf00      	nop
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bc80      	pop	{r7}
 8010d52:	4770      	bx	lr

08010d54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f7ff ff2d 	bl	8010bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d74:	bf00      	nop
 8010d76:	3710      	adds	r7, #16
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b21      	cmp	r3, #33	; 0x21
 8010d8e:	d13e      	bne.n	8010e0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d98:	d114      	bne.n	8010dc4 <UART_Transmit_IT+0x48>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d110      	bne.n	8010dc4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6a1b      	ldr	r3, [r3, #32]
 8010da6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	461a      	mov	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010db6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6a1b      	ldr	r3, [r3, #32]
 8010dbc:	1c9a      	adds	r2, r3, #2
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	621a      	str	r2, [r3, #32]
 8010dc2:	e008      	b.n	8010dd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a1b      	ldr	r3, [r3, #32]
 8010dc8:	1c59      	adds	r1, r3, #1
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	6211      	str	r1, [r2, #32]
 8010dce:	781a      	ldrb	r2, [r3, #0]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	4619      	mov	r1, r3
 8010de4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10f      	bne.n	8010e0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	68da      	ldr	r2, [r3, #12]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010df8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	68da      	ldr	r2, [r3, #12]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	e000      	b.n	8010e10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010e0e:	2302      	movs	r3, #2
  }
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bc80      	pop	{r7}
 8010e18:	4770      	bx	lr

08010e1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b082      	sub	sp, #8
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	68da      	ldr	r2, [r3, #12]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2220      	movs	r2, #32
 8010e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7ff febe 	bl	8010bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b086      	sub	sp, #24
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	2b22      	cmp	r3, #34	; 0x22
 8010e5c:	f040 8099 	bne.w	8010f92 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e68:	d117      	bne.n	8010e9a <UART_Receive_IT+0x50>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d113      	bne.n	8010e9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010e72:	2300      	movs	r3, #0
 8010e74:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e7a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e92:	1c9a      	adds	r2, r3, #2
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	629a      	str	r2, [r3, #40]	; 0x28
 8010e98:	e026      	b.n	8010ee8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e9e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	689b      	ldr	r3, [r3, #8]
 8010ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010eac:	d007      	beq.n	8010ebe <UART_Receive_IT+0x74>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d10a      	bne.n	8010ecc <UART_Receive_IT+0x82>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	691b      	ldr	r3, [r3, #16]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d106      	bne.n	8010ecc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	701a      	strb	r2, [r3, #0]
 8010eca:	e008      	b.n	8010ede <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ee2:	1c5a      	adds	r2, r3, #1
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d148      	bne.n	8010f8e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	68da      	ldr	r2, [r3, #12]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f022 0220 	bic.w	r2, r2, #32
 8010f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68da      	ldr	r2, [r3, #12]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	695a      	ldr	r2, [r3, #20]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f022 0201 	bic.w	r2, r2, #1
 8010f2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2220      	movs	r2, #32
 8010f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d123      	bne.n	8010f84 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	68da      	ldr	r2, [r3, #12]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f022 0210 	bic.w	r2, r2, #16
 8010f50:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f003 0310 	and.w	r3, r3, #16
 8010f5c:	2b10      	cmp	r3, #16
 8010f5e:	d10a      	bne.n	8010f76 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010f60:	2300      	movs	r3, #0
 8010f62:	60fb      	str	r3, [r7, #12]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	60fb      	str	r3, [r7, #12]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	60fb      	str	r3, [r7, #12]
 8010f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7ff fe2f 	bl	8010be0 <HAL_UARTEx_RxEventCallback>
 8010f82:	e002      	b.n	8010f8a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7fb ff51 	bl	800ce2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e002      	b.n	8010f94 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e000      	b.n	8010f94 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8010f92:	2302      	movs	r3, #2
  }
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3718      	adds	r7, #24
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	68da      	ldr	r2, [r3, #12]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	689a      	ldr	r2, [r3, #8]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	691b      	ldr	r3, [r3, #16]
 8010fc2:	431a      	orrs	r2, r3
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	695b      	ldr	r3, [r3, #20]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010fd6:	f023 030c 	bic.w	r3, r3, #12
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	6812      	ldr	r2, [r2, #0]
 8010fde:	68b9      	ldr	r1, [r7, #8]
 8010fe0:	430b      	orrs	r3, r1
 8010fe2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	695b      	ldr	r3, [r3, #20]
 8010fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	699a      	ldr	r2, [r3, #24]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	430a      	orrs	r2, r1
 8010ff8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4a2c      	ldr	r2, [pc, #176]	; (80110b0 <UART_SetConfig+0x114>)
 8011000:	4293      	cmp	r3, r2
 8011002:	d103      	bne.n	801100c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011004:	f7ff f822 	bl	801004c <HAL_RCC_GetPCLK2Freq>
 8011008:	60f8      	str	r0, [r7, #12]
 801100a:	e002      	b.n	8011012 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 801100c:	f7ff f80a 	bl	8010024 <HAL_RCC_GetPCLK1Freq>
 8011010:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	4613      	mov	r3, r2
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4413      	add	r3, r2
 801101a:	009a      	lsls	r2, r3, #2
 801101c:	441a      	add	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	fbb2 f3f3 	udiv	r3, r2, r3
 8011028:	4a22      	ldr	r2, [pc, #136]	; (80110b4 <UART_SetConfig+0x118>)
 801102a:	fba2 2303 	umull	r2, r3, r2, r3
 801102e:	095b      	lsrs	r3, r3, #5
 8011030:	0119      	lsls	r1, r3, #4
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	4613      	mov	r3, r2
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	4413      	add	r3, r2
 801103a:	009a      	lsls	r2, r3, #2
 801103c:	441a      	add	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	fbb2 f2f3 	udiv	r2, r2, r3
 8011048:	4b1a      	ldr	r3, [pc, #104]	; (80110b4 <UART_SetConfig+0x118>)
 801104a:	fba3 0302 	umull	r0, r3, r3, r2
 801104e:	095b      	lsrs	r3, r3, #5
 8011050:	2064      	movs	r0, #100	; 0x64
 8011052:	fb00 f303 	mul.w	r3, r0, r3
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	011b      	lsls	r3, r3, #4
 801105a:	3332      	adds	r3, #50	; 0x32
 801105c:	4a15      	ldr	r2, [pc, #84]	; (80110b4 <UART_SetConfig+0x118>)
 801105e:	fba2 2303 	umull	r2, r3, r2, r3
 8011062:	095b      	lsrs	r3, r3, #5
 8011064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011068:	4419      	add	r1, r3
 801106a:	68fa      	ldr	r2, [r7, #12]
 801106c:	4613      	mov	r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	4413      	add	r3, r2
 8011072:	009a      	lsls	r2, r3, #2
 8011074:	441a      	add	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011080:	4b0c      	ldr	r3, [pc, #48]	; (80110b4 <UART_SetConfig+0x118>)
 8011082:	fba3 0302 	umull	r0, r3, r3, r2
 8011086:	095b      	lsrs	r3, r3, #5
 8011088:	2064      	movs	r0, #100	; 0x64
 801108a:	fb00 f303 	mul.w	r3, r0, r3
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	011b      	lsls	r3, r3, #4
 8011092:	3332      	adds	r3, #50	; 0x32
 8011094:	4a07      	ldr	r2, [pc, #28]	; (80110b4 <UART_SetConfig+0x118>)
 8011096:	fba2 2303 	umull	r2, r3, r2, r3
 801109a:	095b      	lsrs	r3, r3, #5
 801109c:	f003 020f 	and.w	r2, r3, #15
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	440a      	add	r2, r1
 80110a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80110a8:	bf00      	nop
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	40013800 	.word	0x40013800
 80110b4:	51eb851f 	.word	0x51eb851f

080110b8 <atoi>:
 80110b8:	220a      	movs	r2, #10
 80110ba:	2100      	movs	r1, #0
 80110bc:	f000 b912 	b.w	80112e4 <strtol>

080110c0 <__errno>:
 80110c0:	4b01      	ldr	r3, [pc, #4]	; (80110c8 <__errno+0x8>)
 80110c2:	6818      	ldr	r0, [r3, #0]
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	200000d8 	.word	0x200000d8

080110cc <__libc_init_array>:
 80110cc:	b570      	push	{r4, r5, r6, lr}
 80110ce:	2600      	movs	r6, #0
 80110d0:	4d0c      	ldr	r5, [pc, #48]	; (8011104 <__libc_init_array+0x38>)
 80110d2:	4c0d      	ldr	r4, [pc, #52]	; (8011108 <__libc_init_array+0x3c>)
 80110d4:	1b64      	subs	r4, r4, r5
 80110d6:	10a4      	asrs	r4, r4, #2
 80110d8:	42a6      	cmp	r6, r4
 80110da:	d109      	bne.n	80110f0 <__libc_init_array+0x24>
 80110dc:	f000 fd58 	bl	8011b90 <_init>
 80110e0:	2600      	movs	r6, #0
 80110e2:	4d0a      	ldr	r5, [pc, #40]	; (801110c <__libc_init_array+0x40>)
 80110e4:	4c0a      	ldr	r4, [pc, #40]	; (8011110 <__libc_init_array+0x44>)
 80110e6:	1b64      	subs	r4, r4, r5
 80110e8:	10a4      	asrs	r4, r4, #2
 80110ea:	42a6      	cmp	r6, r4
 80110ec:	d105      	bne.n	80110fa <__libc_init_array+0x2e>
 80110ee:	bd70      	pop	{r4, r5, r6, pc}
 80110f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110f4:	4798      	blx	r3
 80110f6:	3601      	adds	r6, #1
 80110f8:	e7ee      	b.n	80110d8 <__libc_init_array+0xc>
 80110fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80110fe:	4798      	blx	r3
 8011100:	3601      	adds	r6, #1
 8011102:	e7f2      	b.n	80110ea <__libc_init_array+0x1e>
 8011104:	08011fb0 	.word	0x08011fb0
 8011108:	08011fb0 	.word	0x08011fb0
 801110c:	08011fb0 	.word	0x08011fb0
 8011110:	08011fb4 	.word	0x08011fb4

08011114 <memcpy>:
 8011114:	440a      	add	r2, r1
 8011116:	4291      	cmp	r1, r2
 8011118:	f100 33ff 	add.w	r3, r0, #4294967295
 801111c:	d100      	bne.n	8011120 <memcpy+0xc>
 801111e:	4770      	bx	lr
 8011120:	b510      	push	{r4, lr}
 8011122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011126:	4291      	cmp	r1, r2
 8011128:	f803 4f01 	strb.w	r4, [r3, #1]!
 801112c:	d1f9      	bne.n	8011122 <memcpy+0xe>
 801112e:	bd10      	pop	{r4, pc}

08011130 <memset>:
 8011130:	4603      	mov	r3, r0
 8011132:	4402      	add	r2, r0
 8011134:	4293      	cmp	r3, r2
 8011136:	d100      	bne.n	801113a <memset+0xa>
 8011138:	4770      	bx	lr
 801113a:	f803 1b01 	strb.w	r1, [r3], #1
 801113e:	e7f9      	b.n	8011134 <memset+0x4>

08011140 <siprintf>:
 8011140:	b40e      	push	{r1, r2, r3}
 8011142:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011146:	b500      	push	{lr}
 8011148:	b09c      	sub	sp, #112	; 0x70
 801114a:	ab1d      	add	r3, sp, #116	; 0x74
 801114c:	9002      	str	r0, [sp, #8]
 801114e:	9006      	str	r0, [sp, #24]
 8011150:	9107      	str	r1, [sp, #28]
 8011152:	9104      	str	r1, [sp, #16]
 8011154:	4808      	ldr	r0, [pc, #32]	; (8011178 <siprintf+0x38>)
 8011156:	4909      	ldr	r1, [pc, #36]	; (801117c <siprintf+0x3c>)
 8011158:	f853 2b04 	ldr.w	r2, [r3], #4
 801115c:	9105      	str	r1, [sp, #20]
 801115e:	6800      	ldr	r0, [r0, #0]
 8011160:	a902      	add	r1, sp, #8
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	f000 f924 	bl	80113b0 <_svfiprintf_r>
 8011168:	2200      	movs	r2, #0
 801116a:	9b02      	ldr	r3, [sp, #8]
 801116c:	701a      	strb	r2, [r3, #0]
 801116e:	b01c      	add	sp, #112	; 0x70
 8011170:	f85d eb04 	ldr.w	lr, [sp], #4
 8011174:	b003      	add	sp, #12
 8011176:	4770      	bx	lr
 8011178:	200000d8 	.word	0x200000d8
 801117c:	ffff0208 	.word	0xffff0208

08011180 <strchr>:
 8011180:	4603      	mov	r3, r0
 8011182:	b2c9      	uxtb	r1, r1
 8011184:	4618      	mov	r0, r3
 8011186:	f813 2b01 	ldrb.w	r2, [r3], #1
 801118a:	b112      	cbz	r2, 8011192 <strchr+0x12>
 801118c:	428a      	cmp	r2, r1
 801118e:	d1f9      	bne.n	8011184 <strchr+0x4>
 8011190:	4770      	bx	lr
 8011192:	2900      	cmp	r1, #0
 8011194:	bf18      	it	ne
 8011196:	2000      	movne	r0, #0
 8011198:	4770      	bx	lr

0801119a <strncpy>:
 801119a:	4603      	mov	r3, r0
 801119c:	b510      	push	{r4, lr}
 801119e:	3901      	subs	r1, #1
 80111a0:	b132      	cbz	r2, 80111b0 <strncpy+0x16>
 80111a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111a6:	3a01      	subs	r2, #1
 80111a8:	f803 4b01 	strb.w	r4, [r3], #1
 80111ac:	2c00      	cmp	r4, #0
 80111ae:	d1f7      	bne.n	80111a0 <strncpy+0x6>
 80111b0:	2100      	movs	r1, #0
 80111b2:	441a      	add	r2, r3
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d100      	bne.n	80111ba <strncpy+0x20>
 80111b8:	bd10      	pop	{r4, pc}
 80111ba:	f803 1b01 	strb.w	r1, [r3], #1
 80111be:	e7f9      	b.n	80111b4 <strncpy+0x1a>

080111c0 <strstr>:
 80111c0:	780a      	ldrb	r2, [r1, #0]
 80111c2:	b570      	push	{r4, r5, r6, lr}
 80111c4:	b96a      	cbnz	r2, 80111e2 <strstr+0x22>
 80111c6:	bd70      	pop	{r4, r5, r6, pc}
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d109      	bne.n	80111e0 <strstr+0x20>
 80111cc:	460c      	mov	r4, r1
 80111ce:	4605      	mov	r5, r0
 80111d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d0f6      	beq.n	80111c6 <strstr+0x6>
 80111d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80111dc:	429e      	cmp	r6, r3
 80111de:	d0f7      	beq.n	80111d0 <strstr+0x10>
 80111e0:	3001      	adds	r0, #1
 80111e2:	7803      	ldrb	r3, [r0, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1ef      	bne.n	80111c8 <strstr+0x8>
 80111e8:	4618      	mov	r0, r3
 80111ea:	e7ec      	b.n	80111c6 <strstr+0x6>

080111ec <_strtol_l.constprop.0>:
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111f2:	4680      	mov	r8, r0
 80111f4:	d001      	beq.n	80111fa <_strtol_l.constprop.0+0xe>
 80111f6:	2b24      	cmp	r3, #36	; 0x24
 80111f8:	d906      	bls.n	8011208 <_strtol_l.constprop.0+0x1c>
 80111fa:	f7ff ff61 	bl	80110c0 <__errno>
 80111fe:	2316      	movs	r3, #22
 8011200:	6003      	str	r3, [r0, #0]
 8011202:	2000      	movs	r0, #0
 8011204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011208:	460d      	mov	r5, r1
 801120a:	4f35      	ldr	r7, [pc, #212]	; (80112e0 <_strtol_l.constprop.0+0xf4>)
 801120c:	4628      	mov	r0, r5
 801120e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011212:	5de6      	ldrb	r6, [r4, r7]
 8011214:	f016 0608 	ands.w	r6, r6, #8
 8011218:	d1f8      	bne.n	801120c <_strtol_l.constprop.0+0x20>
 801121a:	2c2d      	cmp	r4, #45	; 0x2d
 801121c:	d12f      	bne.n	801127e <_strtol_l.constprop.0+0x92>
 801121e:	2601      	movs	r6, #1
 8011220:	782c      	ldrb	r4, [r5, #0]
 8011222:	1c85      	adds	r5, r0, #2
 8011224:	2b00      	cmp	r3, #0
 8011226:	d057      	beq.n	80112d8 <_strtol_l.constprop.0+0xec>
 8011228:	2b10      	cmp	r3, #16
 801122a:	d109      	bne.n	8011240 <_strtol_l.constprop.0+0x54>
 801122c:	2c30      	cmp	r4, #48	; 0x30
 801122e:	d107      	bne.n	8011240 <_strtol_l.constprop.0+0x54>
 8011230:	7828      	ldrb	r0, [r5, #0]
 8011232:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011236:	2858      	cmp	r0, #88	; 0x58
 8011238:	d149      	bne.n	80112ce <_strtol_l.constprop.0+0xe2>
 801123a:	2310      	movs	r3, #16
 801123c:	786c      	ldrb	r4, [r5, #1]
 801123e:	3502      	adds	r5, #2
 8011240:	2700      	movs	r7, #0
 8011242:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8011246:	f10e 3eff 	add.w	lr, lr, #4294967295
 801124a:	fbbe f9f3 	udiv	r9, lr, r3
 801124e:	4638      	mov	r0, r7
 8011250:	fb03 ea19 	mls	sl, r3, r9, lr
 8011254:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011258:	f1bc 0f09 	cmp.w	ip, #9
 801125c:	d814      	bhi.n	8011288 <_strtol_l.constprop.0+0x9c>
 801125e:	4664      	mov	r4, ip
 8011260:	42a3      	cmp	r3, r4
 8011262:	dd22      	ble.n	80112aa <_strtol_l.constprop.0+0xbe>
 8011264:	2f00      	cmp	r7, #0
 8011266:	db1d      	blt.n	80112a4 <_strtol_l.constprop.0+0xb8>
 8011268:	4581      	cmp	r9, r0
 801126a:	d31b      	bcc.n	80112a4 <_strtol_l.constprop.0+0xb8>
 801126c:	d101      	bne.n	8011272 <_strtol_l.constprop.0+0x86>
 801126e:	45a2      	cmp	sl, r4
 8011270:	db18      	blt.n	80112a4 <_strtol_l.constprop.0+0xb8>
 8011272:	2701      	movs	r7, #1
 8011274:	fb00 4003 	mla	r0, r0, r3, r4
 8011278:	f815 4b01 	ldrb.w	r4, [r5], #1
 801127c:	e7ea      	b.n	8011254 <_strtol_l.constprop.0+0x68>
 801127e:	2c2b      	cmp	r4, #43	; 0x2b
 8011280:	bf04      	itt	eq
 8011282:	782c      	ldrbeq	r4, [r5, #0]
 8011284:	1c85      	addeq	r5, r0, #2
 8011286:	e7cd      	b.n	8011224 <_strtol_l.constprop.0+0x38>
 8011288:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801128c:	f1bc 0f19 	cmp.w	ip, #25
 8011290:	d801      	bhi.n	8011296 <_strtol_l.constprop.0+0xaa>
 8011292:	3c37      	subs	r4, #55	; 0x37
 8011294:	e7e4      	b.n	8011260 <_strtol_l.constprop.0+0x74>
 8011296:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801129a:	f1bc 0f19 	cmp.w	ip, #25
 801129e:	d804      	bhi.n	80112aa <_strtol_l.constprop.0+0xbe>
 80112a0:	3c57      	subs	r4, #87	; 0x57
 80112a2:	e7dd      	b.n	8011260 <_strtol_l.constprop.0+0x74>
 80112a4:	f04f 37ff 	mov.w	r7, #4294967295
 80112a8:	e7e6      	b.n	8011278 <_strtol_l.constprop.0+0x8c>
 80112aa:	2f00      	cmp	r7, #0
 80112ac:	da07      	bge.n	80112be <_strtol_l.constprop.0+0xd2>
 80112ae:	2322      	movs	r3, #34	; 0x22
 80112b0:	4670      	mov	r0, lr
 80112b2:	f8c8 3000 	str.w	r3, [r8]
 80112b6:	2a00      	cmp	r2, #0
 80112b8:	d0a4      	beq.n	8011204 <_strtol_l.constprop.0+0x18>
 80112ba:	1e69      	subs	r1, r5, #1
 80112bc:	e005      	b.n	80112ca <_strtol_l.constprop.0+0xde>
 80112be:	b106      	cbz	r6, 80112c2 <_strtol_l.constprop.0+0xd6>
 80112c0:	4240      	negs	r0, r0
 80112c2:	2a00      	cmp	r2, #0
 80112c4:	d09e      	beq.n	8011204 <_strtol_l.constprop.0+0x18>
 80112c6:	2f00      	cmp	r7, #0
 80112c8:	d1f7      	bne.n	80112ba <_strtol_l.constprop.0+0xce>
 80112ca:	6011      	str	r1, [r2, #0]
 80112cc:	e79a      	b.n	8011204 <_strtol_l.constprop.0+0x18>
 80112ce:	2430      	movs	r4, #48	; 0x30
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1b5      	bne.n	8011240 <_strtol_l.constprop.0+0x54>
 80112d4:	2308      	movs	r3, #8
 80112d6:	e7b3      	b.n	8011240 <_strtol_l.constprop.0+0x54>
 80112d8:	2c30      	cmp	r4, #48	; 0x30
 80112da:	d0a9      	beq.n	8011230 <_strtol_l.constprop.0+0x44>
 80112dc:	230a      	movs	r3, #10
 80112de:	e7af      	b.n	8011240 <_strtol_l.constprop.0+0x54>
 80112e0:	08011e7d 	.word	0x08011e7d

080112e4 <strtol>:
 80112e4:	4613      	mov	r3, r2
 80112e6:	460a      	mov	r2, r1
 80112e8:	4601      	mov	r1, r0
 80112ea:	4802      	ldr	r0, [pc, #8]	; (80112f4 <strtol+0x10>)
 80112ec:	6800      	ldr	r0, [r0, #0]
 80112ee:	f7ff bf7d 	b.w	80111ec <_strtol_l.constprop.0>
 80112f2:	bf00      	nop
 80112f4:	200000d8 	.word	0x200000d8

080112f8 <__ssputs_r>:
 80112f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112fc:	688e      	ldr	r6, [r1, #8]
 80112fe:	4682      	mov	sl, r0
 8011300:	429e      	cmp	r6, r3
 8011302:	460c      	mov	r4, r1
 8011304:	4690      	mov	r8, r2
 8011306:	461f      	mov	r7, r3
 8011308:	d838      	bhi.n	801137c <__ssputs_r+0x84>
 801130a:	898a      	ldrh	r2, [r1, #12]
 801130c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011310:	d032      	beq.n	8011378 <__ssputs_r+0x80>
 8011312:	6825      	ldr	r5, [r4, #0]
 8011314:	6909      	ldr	r1, [r1, #16]
 8011316:	3301      	adds	r3, #1
 8011318:	eba5 0901 	sub.w	r9, r5, r1
 801131c:	6965      	ldr	r5, [r4, #20]
 801131e:	444b      	add	r3, r9
 8011320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011328:	106d      	asrs	r5, r5, #1
 801132a:	429d      	cmp	r5, r3
 801132c:	bf38      	it	cc
 801132e:	461d      	movcc	r5, r3
 8011330:	0553      	lsls	r3, r2, #21
 8011332:	d531      	bpl.n	8011398 <__ssputs_r+0xa0>
 8011334:	4629      	mov	r1, r5
 8011336:	f000 fb61 	bl	80119fc <_malloc_r>
 801133a:	4606      	mov	r6, r0
 801133c:	b950      	cbnz	r0, 8011354 <__ssputs_r+0x5c>
 801133e:	230c      	movs	r3, #12
 8011340:	f04f 30ff 	mov.w	r0, #4294967295
 8011344:	f8ca 3000 	str.w	r3, [sl]
 8011348:	89a3      	ldrh	r3, [r4, #12]
 801134a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801134e:	81a3      	strh	r3, [r4, #12]
 8011350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011354:	464a      	mov	r2, r9
 8011356:	6921      	ldr	r1, [r4, #16]
 8011358:	f7ff fedc 	bl	8011114 <memcpy>
 801135c:	89a3      	ldrh	r3, [r4, #12]
 801135e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011366:	81a3      	strh	r3, [r4, #12]
 8011368:	6126      	str	r6, [r4, #16]
 801136a:	444e      	add	r6, r9
 801136c:	6026      	str	r6, [r4, #0]
 801136e:	463e      	mov	r6, r7
 8011370:	6165      	str	r5, [r4, #20]
 8011372:	eba5 0509 	sub.w	r5, r5, r9
 8011376:	60a5      	str	r5, [r4, #8]
 8011378:	42be      	cmp	r6, r7
 801137a:	d900      	bls.n	801137e <__ssputs_r+0x86>
 801137c:	463e      	mov	r6, r7
 801137e:	4632      	mov	r2, r6
 8011380:	4641      	mov	r1, r8
 8011382:	6820      	ldr	r0, [r4, #0]
 8011384:	f000 fab8 	bl	80118f8 <memmove>
 8011388:	68a3      	ldr	r3, [r4, #8]
 801138a:	2000      	movs	r0, #0
 801138c:	1b9b      	subs	r3, r3, r6
 801138e:	60a3      	str	r3, [r4, #8]
 8011390:	6823      	ldr	r3, [r4, #0]
 8011392:	4433      	add	r3, r6
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	e7db      	b.n	8011350 <__ssputs_r+0x58>
 8011398:	462a      	mov	r2, r5
 801139a:	f000 fba3 	bl	8011ae4 <_realloc_r>
 801139e:	4606      	mov	r6, r0
 80113a0:	2800      	cmp	r0, #0
 80113a2:	d1e1      	bne.n	8011368 <__ssputs_r+0x70>
 80113a4:	4650      	mov	r0, sl
 80113a6:	6921      	ldr	r1, [r4, #16]
 80113a8:	f000 fac0 	bl	801192c <_free_r>
 80113ac:	e7c7      	b.n	801133e <__ssputs_r+0x46>
	...

080113b0 <_svfiprintf_r>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	4698      	mov	r8, r3
 80113b6:	898b      	ldrh	r3, [r1, #12]
 80113b8:	4607      	mov	r7, r0
 80113ba:	061b      	lsls	r3, r3, #24
 80113bc:	460d      	mov	r5, r1
 80113be:	4614      	mov	r4, r2
 80113c0:	b09d      	sub	sp, #116	; 0x74
 80113c2:	d50e      	bpl.n	80113e2 <_svfiprintf_r+0x32>
 80113c4:	690b      	ldr	r3, [r1, #16]
 80113c6:	b963      	cbnz	r3, 80113e2 <_svfiprintf_r+0x32>
 80113c8:	2140      	movs	r1, #64	; 0x40
 80113ca:	f000 fb17 	bl	80119fc <_malloc_r>
 80113ce:	6028      	str	r0, [r5, #0]
 80113d0:	6128      	str	r0, [r5, #16]
 80113d2:	b920      	cbnz	r0, 80113de <_svfiprintf_r+0x2e>
 80113d4:	230c      	movs	r3, #12
 80113d6:	603b      	str	r3, [r7, #0]
 80113d8:	f04f 30ff 	mov.w	r0, #4294967295
 80113dc:	e0d1      	b.n	8011582 <_svfiprintf_r+0x1d2>
 80113de:	2340      	movs	r3, #64	; 0x40
 80113e0:	616b      	str	r3, [r5, #20]
 80113e2:	2300      	movs	r3, #0
 80113e4:	9309      	str	r3, [sp, #36]	; 0x24
 80113e6:	2320      	movs	r3, #32
 80113e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ec:	2330      	movs	r3, #48	; 0x30
 80113ee:	f04f 0901 	mov.w	r9, #1
 80113f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80113f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801159c <_svfiprintf_r+0x1ec>
 80113fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113fe:	4623      	mov	r3, r4
 8011400:	469a      	mov	sl, r3
 8011402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011406:	b10a      	cbz	r2, 801140c <_svfiprintf_r+0x5c>
 8011408:	2a25      	cmp	r2, #37	; 0x25
 801140a:	d1f9      	bne.n	8011400 <_svfiprintf_r+0x50>
 801140c:	ebba 0b04 	subs.w	fp, sl, r4
 8011410:	d00b      	beq.n	801142a <_svfiprintf_r+0x7a>
 8011412:	465b      	mov	r3, fp
 8011414:	4622      	mov	r2, r4
 8011416:	4629      	mov	r1, r5
 8011418:	4638      	mov	r0, r7
 801141a:	f7ff ff6d 	bl	80112f8 <__ssputs_r>
 801141e:	3001      	adds	r0, #1
 8011420:	f000 80aa 	beq.w	8011578 <_svfiprintf_r+0x1c8>
 8011424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011426:	445a      	add	r2, fp
 8011428:	9209      	str	r2, [sp, #36]	; 0x24
 801142a:	f89a 3000 	ldrb.w	r3, [sl]
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 80a2 	beq.w	8011578 <_svfiprintf_r+0x1c8>
 8011434:	2300      	movs	r3, #0
 8011436:	f04f 32ff 	mov.w	r2, #4294967295
 801143a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801143e:	f10a 0a01 	add.w	sl, sl, #1
 8011442:	9304      	str	r3, [sp, #16]
 8011444:	9307      	str	r3, [sp, #28]
 8011446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801144a:	931a      	str	r3, [sp, #104]	; 0x68
 801144c:	4654      	mov	r4, sl
 801144e:	2205      	movs	r2, #5
 8011450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011454:	4851      	ldr	r0, [pc, #324]	; (801159c <_svfiprintf_r+0x1ec>)
 8011456:	f000 fa41 	bl	80118dc <memchr>
 801145a:	9a04      	ldr	r2, [sp, #16]
 801145c:	b9d8      	cbnz	r0, 8011496 <_svfiprintf_r+0xe6>
 801145e:	06d0      	lsls	r0, r2, #27
 8011460:	bf44      	itt	mi
 8011462:	2320      	movmi	r3, #32
 8011464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011468:	0711      	lsls	r1, r2, #28
 801146a:	bf44      	itt	mi
 801146c:	232b      	movmi	r3, #43	; 0x2b
 801146e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011472:	f89a 3000 	ldrb.w	r3, [sl]
 8011476:	2b2a      	cmp	r3, #42	; 0x2a
 8011478:	d015      	beq.n	80114a6 <_svfiprintf_r+0xf6>
 801147a:	4654      	mov	r4, sl
 801147c:	2000      	movs	r0, #0
 801147e:	f04f 0c0a 	mov.w	ip, #10
 8011482:	9a07      	ldr	r2, [sp, #28]
 8011484:	4621      	mov	r1, r4
 8011486:	f811 3b01 	ldrb.w	r3, [r1], #1
 801148a:	3b30      	subs	r3, #48	; 0x30
 801148c:	2b09      	cmp	r3, #9
 801148e:	d94e      	bls.n	801152e <_svfiprintf_r+0x17e>
 8011490:	b1b0      	cbz	r0, 80114c0 <_svfiprintf_r+0x110>
 8011492:	9207      	str	r2, [sp, #28]
 8011494:	e014      	b.n	80114c0 <_svfiprintf_r+0x110>
 8011496:	eba0 0308 	sub.w	r3, r0, r8
 801149a:	fa09 f303 	lsl.w	r3, r9, r3
 801149e:	4313      	orrs	r3, r2
 80114a0:	46a2      	mov	sl, r4
 80114a2:	9304      	str	r3, [sp, #16]
 80114a4:	e7d2      	b.n	801144c <_svfiprintf_r+0x9c>
 80114a6:	9b03      	ldr	r3, [sp, #12]
 80114a8:	1d19      	adds	r1, r3, #4
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	9103      	str	r1, [sp, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	bfbb      	ittet	lt
 80114b2:	425b      	neglt	r3, r3
 80114b4:	f042 0202 	orrlt.w	r2, r2, #2
 80114b8:	9307      	strge	r3, [sp, #28]
 80114ba:	9307      	strlt	r3, [sp, #28]
 80114bc:	bfb8      	it	lt
 80114be:	9204      	strlt	r2, [sp, #16]
 80114c0:	7823      	ldrb	r3, [r4, #0]
 80114c2:	2b2e      	cmp	r3, #46	; 0x2e
 80114c4:	d10c      	bne.n	80114e0 <_svfiprintf_r+0x130>
 80114c6:	7863      	ldrb	r3, [r4, #1]
 80114c8:	2b2a      	cmp	r3, #42	; 0x2a
 80114ca:	d135      	bne.n	8011538 <_svfiprintf_r+0x188>
 80114cc:	9b03      	ldr	r3, [sp, #12]
 80114ce:	3402      	adds	r4, #2
 80114d0:	1d1a      	adds	r2, r3, #4
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	9203      	str	r2, [sp, #12]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	bfb8      	it	lt
 80114da:	f04f 33ff 	movlt.w	r3, #4294967295
 80114de:	9305      	str	r3, [sp, #20]
 80114e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80115a0 <_svfiprintf_r+0x1f0>
 80114e4:	2203      	movs	r2, #3
 80114e6:	4650      	mov	r0, sl
 80114e8:	7821      	ldrb	r1, [r4, #0]
 80114ea:	f000 f9f7 	bl	80118dc <memchr>
 80114ee:	b140      	cbz	r0, 8011502 <_svfiprintf_r+0x152>
 80114f0:	2340      	movs	r3, #64	; 0x40
 80114f2:	eba0 000a 	sub.w	r0, r0, sl
 80114f6:	fa03 f000 	lsl.w	r0, r3, r0
 80114fa:	9b04      	ldr	r3, [sp, #16]
 80114fc:	3401      	adds	r4, #1
 80114fe:	4303      	orrs	r3, r0
 8011500:	9304      	str	r3, [sp, #16]
 8011502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011506:	2206      	movs	r2, #6
 8011508:	4826      	ldr	r0, [pc, #152]	; (80115a4 <_svfiprintf_r+0x1f4>)
 801150a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801150e:	f000 f9e5 	bl	80118dc <memchr>
 8011512:	2800      	cmp	r0, #0
 8011514:	d038      	beq.n	8011588 <_svfiprintf_r+0x1d8>
 8011516:	4b24      	ldr	r3, [pc, #144]	; (80115a8 <_svfiprintf_r+0x1f8>)
 8011518:	bb1b      	cbnz	r3, 8011562 <_svfiprintf_r+0x1b2>
 801151a:	9b03      	ldr	r3, [sp, #12]
 801151c:	3307      	adds	r3, #7
 801151e:	f023 0307 	bic.w	r3, r3, #7
 8011522:	3308      	adds	r3, #8
 8011524:	9303      	str	r3, [sp, #12]
 8011526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011528:	4433      	add	r3, r6
 801152a:	9309      	str	r3, [sp, #36]	; 0x24
 801152c:	e767      	b.n	80113fe <_svfiprintf_r+0x4e>
 801152e:	460c      	mov	r4, r1
 8011530:	2001      	movs	r0, #1
 8011532:	fb0c 3202 	mla	r2, ip, r2, r3
 8011536:	e7a5      	b.n	8011484 <_svfiprintf_r+0xd4>
 8011538:	2300      	movs	r3, #0
 801153a:	f04f 0c0a 	mov.w	ip, #10
 801153e:	4619      	mov	r1, r3
 8011540:	3401      	adds	r4, #1
 8011542:	9305      	str	r3, [sp, #20]
 8011544:	4620      	mov	r0, r4
 8011546:	f810 2b01 	ldrb.w	r2, [r0], #1
 801154a:	3a30      	subs	r2, #48	; 0x30
 801154c:	2a09      	cmp	r2, #9
 801154e:	d903      	bls.n	8011558 <_svfiprintf_r+0x1a8>
 8011550:	2b00      	cmp	r3, #0
 8011552:	d0c5      	beq.n	80114e0 <_svfiprintf_r+0x130>
 8011554:	9105      	str	r1, [sp, #20]
 8011556:	e7c3      	b.n	80114e0 <_svfiprintf_r+0x130>
 8011558:	4604      	mov	r4, r0
 801155a:	2301      	movs	r3, #1
 801155c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011560:	e7f0      	b.n	8011544 <_svfiprintf_r+0x194>
 8011562:	ab03      	add	r3, sp, #12
 8011564:	9300      	str	r3, [sp, #0]
 8011566:	462a      	mov	r2, r5
 8011568:	4638      	mov	r0, r7
 801156a:	4b10      	ldr	r3, [pc, #64]	; (80115ac <_svfiprintf_r+0x1fc>)
 801156c:	a904      	add	r1, sp, #16
 801156e:	f3af 8000 	nop.w
 8011572:	1c42      	adds	r2, r0, #1
 8011574:	4606      	mov	r6, r0
 8011576:	d1d6      	bne.n	8011526 <_svfiprintf_r+0x176>
 8011578:	89ab      	ldrh	r3, [r5, #12]
 801157a:	065b      	lsls	r3, r3, #25
 801157c:	f53f af2c 	bmi.w	80113d8 <_svfiprintf_r+0x28>
 8011580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011582:	b01d      	add	sp, #116	; 0x74
 8011584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011588:	ab03      	add	r3, sp, #12
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	462a      	mov	r2, r5
 801158e:	4638      	mov	r0, r7
 8011590:	4b06      	ldr	r3, [pc, #24]	; (80115ac <_svfiprintf_r+0x1fc>)
 8011592:	a904      	add	r1, sp, #16
 8011594:	f000 f87c 	bl	8011690 <_printf_i>
 8011598:	e7eb      	b.n	8011572 <_svfiprintf_r+0x1c2>
 801159a:	bf00      	nop
 801159c:	08011f7d 	.word	0x08011f7d
 80115a0:	08011f83 	.word	0x08011f83
 80115a4:	08011f87 	.word	0x08011f87
 80115a8:	00000000 	.word	0x00000000
 80115ac:	080112f9 	.word	0x080112f9

080115b0 <_printf_common>:
 80115b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b4:	4616      	mov	r6, r2
 80115b6:	4699      	mov	r9, r3
 80115b8:	688a      	ldr	r2, [r1, #8]
 80115ba:	690b      	ldr	r3, [r1, #16]
 80115bc:	4607      	mov	r7, r0
 80115be:	4293      	cmp	r3, r2
 80115c0:	bfb8      	it	lt
 80115c2:	4613      	movlt	r3, r2
 80115c4:	6033      	str	r3, [r6, #0]
 80115c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80115ca:	460c      	mov	r4, r1
 80115cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80115d0:	b10a      	cbz	r2, 80115d6 <_printf_common+0x26>
 80115d2:	3301      	adds	r3, #1
 80115d4:	6033      	str	r3, [r6, #0]
 80115d6:	6823      	ldr	r3, [r4, #0]
 80115d8:	0699      	lsls	r1, r3, #26
 80115da:	bf42      	ittt	mi
 80115dc:	6833      	ldrmi	r3, [r6, #0]
 80115de:	3302      	addmi	r3, #2
 80115e0:	6033      	strmi	r3, [r6, #0]
 80115e2:	6825      	ldr	r5, [r4, #0]
 80115e4:	f015 0506 	ands.w	r5, r5, #6
 80115e8:	d106      	bne.n	80115f8 <_printf_common+0x48>
 80115ea:	f104 0a19 	add.w	sl, r4, #25
 80115ee:	68e3      	ldr	r3, [r4, #12]
 80115f0:	6832      	ldr	r2, [r6, #0]
 80115f2:	1a9b      	subs	r3, r3, r2
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	dc28      	bgt.n	801164a <_printf_common+0x9a>
 80115f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80115fc:	1e13      	subs	r3, r2, #0
 80115fe:	6822      	ldr	r2, [r4, #0]
 8011600:	bf18      	it	ne
 8011602:	2301      	movne	r3, #1
 8011604:	0692      	lsls	r2, r2, #26
 8011606:	d42d      	bmi.n	8011664 <_printf_common+0xb4>
 8011608:	4649      	mov	r1, r9
 801160a:	4638      	mov	r0, r7
 801160c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011610:	47c0      	blx	r8
 8011612:	3001      	adds	r0, #1
 8011614:	d020      	beq.n	8011658 <_printf_common+0xa8>
 8011616:	6823      	ldr	r3, [r4, #0]
 8011618:	68e5      	ldr	r5, [r4, #12]
 801161a:	f003 0306 	and.w	r3, r3, #6
 801161e:	2b04      	cmp	r3, #4
 8011620:	bf18      	it	ne
 8011622:	2500      	movne	r5, #0
 8011624:	6832      	ldr	r2, [r6, #0]
 8011626:	f04f 0600 	mov.w	r6, #0
 801162a:	68a3      	ldr	r3, [r4, #8]
 801162c:	bf08      	it	eq
 801162e:	1aad      	subeq	r5, r5, r2
 8011630:	6922      	ldr	r2, [r4, #16]
 8011632:	bf08      	it	eq
 8011634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011638:	4293      	cmp	r3, r2
 801163a:	bfc4      	itt	gt
 801163c:	1a9b      	subgt	r3, r3, r2
 801163e:	18ed      	addgt	r5, r5, r3
 8011640:	341a      	adds	r4, #26
 8011642:	42b5      	cmp	r5, r6
 8011644:	d11a      	bne.n	801167c <_printf_common+0xcc>
 8011646:	2000      	movs	r0, #0
 8011648:	e008      	b.n	801165c <_printf_common+0xac>
 801164a:	2301      	movs	r3, #1
 801164c:	4652      	mov	r2, sl
 801164e:	4649      	mov	r1, r9
 8011650:	4638      	mov	r0, r7
 8011652:	47c0      	blx	r8
 8011654:	3001      	adds	r0, #1
 8011656:	d103      	bne.n	8011660 <_printf_common+0xb0>
 8011658:	f04f 30ff 	mov.w	r0, #4294967295
 801165c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011660:	3501      	adds	r5, #1
 8011662:	e7c4      	b.n	80115ee <_printf_common+0x3e>
 8011664:	2030      	movs	r0, #48	; 0x30
 8011666:	18e1      	adds	r1, r4, r3
 8011668:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011672:	4422      	add	r2, r4
 8011674:	3302      	adds	r3, #2
 8011676:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801167a:	e7c5      	b.n	8011608 <_printf_common+0x58>
 801167c:	2301      	movs	r3, #1
 801167e:	4622      	mov	r2, r4
 8011680:	4649      	mov	r1, r9
 8011682:	4638      	mov	r0, r7
 8011684:	47c0      	blx	r8
 8011686:	3001      	adds	r0, #1
 8011688:	d0e6      	beq.n	8011658 <_printf_common+0xa8>
 801168a:	3601      	adds	r6, #1
 801168c:	e7d9      	b.n	8011642 <_printf_common+0x92>
	...

08011690 <_printf_i>:
 8011690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011694:	7e0f      	ldrb	r7, [r1, #24]
 8011696:	4691      	mov	r9, r2
 8011698:	2f78      	cmp	r7, #120	; 0x78
 801169a:	4680      	mov	r8, r0
 801169c:	460c      	mov	r4, r1
 801169e:	469a      	mov	sl, r3
 80116a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80116a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80116a6:	d807      	bhi.n	80116b8 <_printf_i+0x28>
 80116a8:	2f62      	cmp	r7, #98	; 0x62
 80116aa:	d80a      	bhi.n	80116c2 <_printf_i+0x32>
 80116ac:	2f00      	cmp	r7, #0
 80116ae:	f000 80d9 	beq.w	8011864 <_printf_i+0x1d4>
 80116b2:	2f58      	cmp	r7, #88	; 0x58
 80116b4:	f000 80a4 	beq.w	8011800 <_printf_i+0x170>
 80116b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80116bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80116c0:	e03a      	b.n	8011738 <_printf_i+0xa8>
 80116c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80116c6:	2b15      	cmp	r3, #21
 80116c8:	d8f6      	bhi.n	80116b8 <_printf_i+0x28>
 80116ca:	a101      	add	r1, pc, #4	; (adr r1, 80116d0 <_printf_i+0x40>)
 80116cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116d0:	08011729 	.word	0x08011729
 80116d4:	0801173d 	.word	0x0801173d
 80116d8:	080116b9 	.word	0x080116b9
 80116dc:	080116b9 	.word	0x080116b9
 80116e0:	080116b9 	.word	0x080116b9
 80116e4:	080116b9 	.word	0x080116b9
 80116e8:	0801173d 	.word	0x0801173d
 80116ec:	080116b9 	.word	0x080116b9
 80116f0:	080116b9 	.word	0x080116b9
 80116f4:	080116b9 	.word	0x080116b9
 80116f8:	080116b9 	.word	0x080116b9
 80116fc:	0801184b 	.word	0x0801184b
 8011700:	0801176d 	.word	0x0801176d
 8011704:	0801182d 	.word	0x0801182d
 8011708:	080116b9 	.word	0x080116b9
 801170c:	080116b9 	.word	0x080116b9
 8011710:	0801186d 	.word	0x0801186d
 8011714:	080116b9 	.word	0x080116b9
 8011718:	0801176d 	.word	0x0801176d
 801171c:	080116b9 	.word	0x080116b9
 8011720:	080116b9 	.word	0x080116b9
 8011724:	08011835 	.word	0x08011835
 8011728:	682b      	ldr	r3, [r5, #0]
 801172a:	1d1a      	adds	r2, r3, #4
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	602a      	str	r2, [r5, #0]
 8011730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011738:	2301      	movs	r3, #1
 801173a:	e0a4      	b.n	8011886 <_printf_i+0x1f6>
 801173c:	6820      	ldr	r0, [r4, #0]
 801173e:	6829      	ldr	r1, [r5, #0]
 8011740:	0606      	lsls	r6, r0, #24
 8011742:	f101 0304 	add.w	r3, r1, #4
 8011746:	d50a      	bpl.n	801175e <_printf_i+0xce>
 8011748:	680e      	ldr	r6, [r1, #0]
 801174a:	602b      	str	r3, [r5, #0]
 801174c:	2e00      	cmp	r6, #0
 801174e:	da03      	bge.n	8011758 <_printf_i+0xc8>
 8011750:	232d      	movs	r3, #45	; 0x2d
 8011752:	4276      	negs	r6, r6
 8011754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011758:	230a      	movs	r3, #10
 801175a:	485e      	ldr	r0, [pc, #376]	; (80118d4 <_printf_i+0x244>)
 801175c:	e019      	b.n	8011792 <_printf_i+0x102>
 801175e:	680e      	ldr	r6, [r1, #0]
 8011760:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011764:	602b      	str	r3, [r5, #0]
 8011766:	bf18      	it	ne
 8011768:	b236      	sxthne	r6, r6
 801176a:	e7ef      	b.n	801174c <_printf_i+0xbc>
 801176c:	682b      	ldr	r3, [r5, #0]
 801176e:	6820      	ldr	r0, [r4, #0]
 8011770:	1d19      	adds	r1, r3, #4
 8011772:	6029      	str	r1, [r5, #0]
 8011774:	0601      	lsls	r1, r0, #24
 8011776:	d501      	bpl.n	801177c <_printf_i+0xec>
 8011778:	681e      	ldr	r6, [r3, #0]
 801177a:	e002      	b.n	8011782 <_printf_i+0xf2>
 801177c:	0646      	lsls	r6, r0, #25
 801177e:	d5fb      	bpl.n	8011778 <_printf_i+0xe8>
 8011780:	881e      	ldrh	r6, [r3, #0]
 8011782:	2f6f      	cmp	r7, #111	; 0x6f
 8011784:	bf0c      	ite	eq
 8011786:	2308      	moveq	r3, #8
 8011788:	230a      	movne	r3, #10
 801178a:	4852      	ldr	r0, [pc, #328]	; (80118d4 <_printf_i+0x244>)
 801178c:	2100      	movs	r1, #0
 801178e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011792:	6865      	ldr	r5, [r4, #4]
 8011794:	2d00      	cmp	r5, #0
 8011796:	bfa8      	it	ge
 8011798:	6821      	ldrge	r1, [r4, #0]
 801179a:	60a5      	str	r5, [r4, #8]
 801179c:	bfa4      	itt	ge
 801179e:	f021 0104 	bicge.w	r1, r1, #4
 80117a2:	6021      	strge	r1, [r4, #0]
 80117a4:	b90e      	cbnz	r6, 80117aa <_printf_i+0x11a>
 80117a6:	2d00      	cmp	r5, #0
 80117a8:	d04d      	beq.n	8011846 <_printf_i+0x1b6>
 80117aa:	4615      	mov	r5, r2
 80117ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80117b0:	fb03 6711 	mls	r7, r3, r1, r6
 80117b4:	5dc7      	ldrb	r7, [r0, r7]
 80117b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80117ba:	4637      	mov	r7, r6
 80117bc:	42bb      	cmp	r3, r7
 80117be:	460e      	mov	r6, r1
 80117c0:	d9f4      	bls.n	80117ac <_printf_i+0x11c>
 80117c2:	2b08      	cmp	r3, #8
 80117c4:	d10b      	bne.n	80117de <_printf_i+0x14e>
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	07de      	lsls	r6, r3, #31
 80117ca:	d508      	bpl.n	80117de <_printf_i+0x14e>
 80117cc:	6923      	ldr	r3, [r4, #16]
 80117ce:	6861      	ldr	r1, [r4, #4]
 80117d0:	4299      	cmp	r1, r3
 80117d2:	bfde      	ittt	le
 80117d4:	2330      	movle	r3, #48	; 0x30
 80117d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80117da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80117de:	1b52      	subs	r2, r2, r5
 80117e0:	6122      	str	r2, [r4, #16]
 80117e2:	464b      	mov	r3, r9
 80117e4:	4621      	mov	r1, r4
 80117e6:	4640      	mov	r0, r8
 80117e8:	f8cd a000 	str.w	sl, [sp]
 80117ec:	aa03      	add	r2, sp, #12
 80117ee:	f7ff fedf 	bl	80115b0 <_printf_common>
 80117f2:	3001      	adds	r0, #1
 80117f4:	d14c      	bne.n	8011890 <_printf_i+0x200>
 80117f6:	f04f 30ff 	mov.w	r0, #4294967295
 80117fa:	b004      	add	sp, #16
 80117fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011800:	4834      	ldr	r0, [pc, #208]	; (80118d4 <_printf_i+0x244>)
 8011802:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011806:	6829      	ldr	r1, [r5, #0]
 8011808:	6823      	ldr	r3, [r4, #0]
 801180a:	f851 6b04 	ldr.w	r6, [r1], #4
 801180e:	6029      	str	r1, [r5, #0]
 8011810:	061d      	lsls	r5, r3, #24
 8011812:	d514      	bpl.n	801183e <_printf_i+0x1ae>
 8011814:	07df      	lsls	r7, r3, #31
 8011816:	bf44      	itt	mi
 8011818:	f043 0320 	orrmi.w	r3, r3, #32
 801181c:	6023      	strmi	r3, [r4, #0]
 801181e:	b91e      	cbnz	r6, 8011828 <_printf_i+0x198>
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	f023 0320 	bic.w	r3, r3, #32
 8011826:	6023      	str	r3, [r4, #0]
 8011828:	2310      	movs	r3, #16
 801182a:	e7af      	b.n	801178c <_printf_i+0xfc>
 801182c:	6823      	ldr	r3, [r4, #0]
 801182e:	f043 0320 	orr.w	r3, r3, #32
 8011832:	6023      	str	r3, [r4, #0]
 8011834:	2378      	movs	r3, #120	; 0x78
 8011836:	4828      	ldr	r0, [pc, #160]	; (80118d8 <_printf_i+0x248>)
 8011838:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801183c:	e7e3      	b.n	8011806 <_printf_i+0x176>
 801183e:	0659      	lsls	r1, r3, #25
 8011840:	bf48      	it	mi
 8011842:	b2b6      	uxthmi	r6, r6
 8011844:	e7e6      	b.n	8011814 <_printf_i+0x184>
 8011846:	4615      	mov	r5, r2
 8011848:	e7bb      	b.n	80117c2 <_printf_i+0x132>
 801184a:	682b      	ldr	r3, [r5, #0]
 801184c:	6826      	ldr	r6, [r4, #0]
 801184e:	1d18      	adds	r0, r3, #4
 8011850:	6961      	ldr	r1, [r4, #20]
 8011852:	6028      	str	r0, [r5, #0]
 8011854:	0635      	lsls	r5, r6, #24
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	d501      	bpl.n	801185e <_printf_i+0x1ce>
 801185a:	6019      	str	r1, [r3, #0]
 801185c:	e002      	b.n	8011864 <_printf_i+0x1d4>
 801185e:	0670      	lsls	r0, r6, #25
 8011860:	d5fb      	bpl.n	801185a <_printf_i+0x1ca>
 8011862:	8019      	strh	r1, [r3, #0]
 8011864:	2300      	movs	r3, #0
 8011866:	4615      	mov	r5, r2
 8011868:	6123      	str	r3, [r4, #16]
 801186a:	e7ba      	b.n	80117e2 <_printf_i+0x152>
 801186c:	682b      	ldr	r3, [r5, #0]
 801186e:	2100      	movs	r1, #0
 8011870:	1d1a      	adds	r2, r3, #4
 8011872:	602a      	str	r2, [r5, #0]
 8011874:	681d      	ldr	r5, [r3, #0]
 8011876:	6862      	ldr	r2, [r4, #4]
 8011878:	4628      	mov	r0, r5
 801187a:	f000 f82f 	bl	80118dc <memchr>
 801187e:	b108      	cbz	r0, 8011884 <_printf_i+0x1f4>
 8011880:	1b40      	subs	r0, r0, r5
 8011882:	6060      	str	r0, [r4, #4]
 8011884:	6863      	ldr	r3, [r4, #4]
 8011886:	6123      	str	r3, [r4, #16]
 8011888:	2300      	movs	r3, #0
 801188a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801188e:	e7a8      	b.n	80117e2 <_printf_i+0x152>
 8011890:	462a      	mov	r2, r5
 8011892:	4649      	mov	r1, r9
 8011894:	4640      	mov	r0, r8
 8011896:	6923      	ldr	r3, [r4, #16]
 8011898:	47d0      	blx	sl
 801189a:	3001      	adds	r0, #1
 801189c:	d0ab      	beq.n	80117f6 <_printf_i+0x166>
 801189e:	6823      	ldr	r3, [r4, #0]
 80118a0:	079b      	lsls	r3, r3, #30
 80118a2:	d413      	bmi.n	80118cc <_printf_i+0x23c>
 80118a4:	68e0      	ldr	r0, [r4, #12]
 80118a6:	9b03      	ldr	r3, [sp, #12]
 80118a8:	4298      	cmp	r0, r3
 80118aa:	bfb8      	it	lt
 80118ac:	4618      	movlt	r0, r3
 80118ae:	e7a4      	b.n	80117fa <_printf_i+0x16a>
 80118b0:	2301      	movs	r3, #1
 80118b2:	4632      	mov	r2, r6
 80118b4:	4649      	mov	r1, r9
 80118b6:	4640      	mov	r0, r8
 80118b8:	47d0      	blx	sl
 80118ba:	3001      	adds	r0, #1
 80118bc:	d09b      	beq.n	80117f6 <_printf_i+0x166>
 80118be:	3501      	adds	r5, #1
 80118c0:	68e3      	ldr	r3, [r4, #12]
 80118c2:	9903      	ldr	r1, [sp, #12]
 80118c4:	1a5b      	subs	r3, r3, r1
 80118c6:	42ab      	cmp	r3, r5
 80118c8:	dcf2      	bgt.n	80118b0 <_printf_i+0x220>
 80118ca:	e7eb      	b.n	80118a4 <_printf_i+0x214>
 80118cc:	2500      	movs	r5, #0
 80118ce:	f104 0619 	add.w	r6, r4, #25
 80118d2:	e7f5      	b.n	80118c0 <_printf_i+0x230>
 80118d4:	08011f8e 	.word	0x08011f8e
 80118d8:	08011f9f 	.word	0x08011f9f

080118dc <memchr>:
 80118dc:	4603      	mov	r3, r0
 80118de:	b510      	push	{r4, lr}
 80118e0:	b2c9      	uxtb	r1, r1
 80118e2:	4402      	add	r2, r0
 80118e4:	4293      	cmp	r3, r2
 80118e6:	4618      	mov	r0, r3
 80118e8:	d101      	bne.n	80118ee <memchr+0x12>
 80118ea:	2000      	movs	r0, #0
 80118ec:	e003      	b.n	80118f6 <memchr+0x1a>
 80118ee:	7804      	ldrb	r4, [r0, #0]
 80118f0:	3301      	adds	r3, #1
 80118f2:	428c      	cmp	r4, r1
 80118f4:	d1f6      	bne.n	80118e4 <memchr+0x8>
 80118f6:	bd10      	pop	{r4, pc}

080118f8 <memmove>:
 80118f8:	4288      	cmp	r0, r1
 80118fa:	b510      	push	{r4, lr}
 80118fc:	eb01 0402 	add.w	r4, r1, r2
 8011900:	d902      	bls.n	8011908 <memmove+0x10>
 8011902:	4284      	cmp	r4, r0
 8011904:	4623      	mov	r3, r4
 8011906:	d807      	bhi.n	8011918 <memmove+0x20>
 8011908:	1e43      	subs	r3, r0, #1
 801190a:	42a1      	cmp	r1, r4
 801190c:	d008      	beq.n	8011920 <memmove+0x28>
 801190e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011916:	e7f8      	b.n	801190a <memmove+0x12>
 8011918:	4601      	mov	r1, r0
 801191a:	4402      	add	r2, r0
 801191c:	428a      	cmp	r2, r1
 801191e:	d100      	bne.n	8011922 <memmove+0x2a>
 8011920:	bd10      	pop	{r4, pc}
 8011922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801192a:	e7f7      	b.n	801191c <memmove+0x24>

0801192c <_free_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	4605      	mov	r5, r0
 8011930:	2900      	cmp	r1, #0
 8011932:	d040      	beq.n	80119b6 <_free_r+0x8a>
 8011934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011938:	1f0c      	subs	r4, r1, #4
 801193a:	2b00      	cmp	r3, #0
 801193c:	bfb8      	it	lt
 801193e:	18e4      	addlt	r4, r4, r3
 8011940:	f000 f910 	bl	8011b64 <__malloc_lock>
 8011944:	4a1c      	ldr	r2, [pc, #112]	; (80119b8 <_free_r+0x8c>)
 8011946:	6813      	ldr	r3, [r2, #0]
 8011948:	b933      	cbnz	r3, 8011958 <_free_r+0x2c>
 801194a:	6063      	str	r3, [r4, #4]
 801194c:	6014      	str	r4, [r2, #0]
 801194e:	4628      	mov	r0, r5
 8011950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011954:	f000 b90c 	b.w	8011b70 <__malloc_unlock>
 8011958:	42a3      	cmp	r3, r4
 801195a:	d908      	bls.n	801196e <_free_r+0x42>
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	1821      	adds	r1, r4, r0
 8011960:	428b      	cmp	r3, r1
 8011962:	bf01      	itttt	eq
 8011964:	6819      	ldreq	r1, [r3, #0]
 8011966:	685b      	ldreq	r3, [r3, #4]
 8011968:	1809      	addeq	r1, r1, r0
 801196a:	6021      	streq	r1, [r4, #0]
 801196c:	e7ed      	b.n	801194a <_free_r+0x1e>
 801196e:	461a      	mov	r2, r3
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	b10b      	cbz	r3, 8011978 <_free_r+0x4c>
 8011974:	42a3      	cmp	r3, r4
 8011976:	d9fa      	bls.n	801196e <_free_r+0x42>
 8011978:	6811      	ldr	r1, [r2, #0]
 801197a:	1850      	adds	r0, r2, r1
 801197c:	42a0      	cmp	r0, r4
 801197e:	d10b      	bne.n	8011998 <_free_r+0x6c>
 8011980:	6820      	ldr	r0, [r4, #0]
 8011982:	4401      	add	r1, r0
 8011984:	1850      	adds	r0, r2, r1
 8011986:	4283      	cmp	r3, r0
 8011988:	6011      	str	r1, [r2, #0]
 801198a:	d1e0      	bne.n	801194e <_free_r+0x22>
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	4401      	add	r1, r0
 8011992:	6011      	str	r1, [r2, #0]
 8011994:	6053      	str	r3, [r2, #4]
 8011996:	e7da      	b.n	801194e <_free_r+0x22>
 8011998:	d902      	bls.n	80119a0 <_free_r+0x74>
 801199a:	230c      	movs	r3, #12
 801199c:	602b      	str	r3, [r5, #0]
 801199e:	e7d6      	b.n	801194e <_free_r+0x22>
 80119a0:	6820      	ldr	r0, [r4, #0]
 80119a2:	1821      	adds	r1, r4, r0
 80119a4:	428b      	cmp	r3, r1
 80119a6:	bf01      	itttt	eq
 80119a8:	6819      	ldreq	r1, [r3, #0]
 80119aa:	685b      	ldreq	r3, [r3, #4]
 80119ac:	1809      	addeq	r1, r1, r0
 80119ae:	6021      	streq	r1, [r4, #0]
 80119b0:	6063      	str	r3, [r4, #4]
 80119b2:	6054      	str	r4, [r2, #4]
 80119b4:	e7cb      	b.n	801194e <_free_r+0x22>
 80119b6:	bd38      	pop	{r3, r4, r5, pc}
 80119b8:	20000494 	.word	0x20000494

080119bc <sbrk_aligned>:
 80119bc:	b570      	push	{r4, r5, r6, lr}
 80119be:	4e0e      	ldr	r6, [pc, #56]	; (80119f8 <sbrk_aligned+0x3c>)
 80119c0:	460c      	mov	r4, r1
 80119c2:	6831      	ldr	r1, [r6, #0]
 80119c4:	4605      	mov	r5, r0
 80119c6:	b911      	cbnz	r1, 80119ce <sbrk_aligned+0x12>
 80119c8:	f000 f8bc 	bl	8011b44 <_sbrk_r>
 80119cc:	6030      	str	r0, [r6, #0]
 80119ce:	4621      	mov	r1, r4
 80119d0:	4628      	mov	r0, r5
 80119d2:	f000 f8b7 	bl	8011b44 <_sbrk_r>
 80119d6:	1c43      	adds	r3, r0, #1
 80119d8:	d00a      	beq.n	80119f0 <sbrk_aligned+0x34>
 80119da:	1cc4      	adds	r4, r0, #3
 80119dc:	f024 0403 	bic.w	r4, r4, #3
 80119e0:	42a0      	cmp	r0, r4
 80119e2:	d007      	beq.n	80119f4 <sbrk_aligned+0x38>
 80119e4:	1a21      	subs	r1, r4, r0
 80119e6:	4628      	mov	r0, r5
 80119e8:	f000 f8ac 	bl	8011b44 <_sbrk_r>
 80119ec:	3001      	adds	r0, #1
 80119ee:	d101      	bne.n	80119f4 <sbrk_aligned+0x38>
 80119f0:	f04f 34ff 	mov.w	r4, #4294967295
 80119f4:	4620      	mov	r0, r4
 80119f6:	bd70      	pop	{r4, r5, r6, pc}
 80119f8:	20000498 	.word	0x20000498

080119fc <_malloc_r>:
 80119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a00:	1ccd      	adds	r5, r1, #3
 8011a02:	f025 0503 	bic.w	r5, r5, #3
 8011a06:	3508      	adds	r5, #8
 8011a08:	2d0c      	cmp	r5, #12
 8011a0a:	bf38      	it	cc
 8011a0c:	250c      	movcc	r5, #12
 8011a0e:	2d00      	cmp	r5, #0
 8011a10:	4607      	mov	r7, r0
 8011a12:	db01      	blt.n	8011a18 <_malloc_r+0x1c>
 8011a14:	42a9      	cmp	r1, r5
 8011a16:	d905      	bls.n	8011a24 <_malloc_r+0x28>
 8011a18:	230c      	movs	r3, #12
 8011a1a:	2600      	movs	r6, #0
 8011a1c:	603b      	str	r3, [r7, #0]
 8011a1e:	4630      	mov	r0, r6
 8011a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a24:	4e2e      	ldr	r6, [pc, #184]	; (8011ae0 <_malloc_r+0xe4>)
 8011a26:	f000 f89d 	bl	8011b64 <__malloc_lock>
 8011a2a:	6833      	ldr	r3, [r6, #0]
 8011a2c:	461c      	mov	r4, r3
 8011a2e:	bb34      	cbnz	r4, 8011a7e <_malloc_r+0x82>
 8011a30:	4629      	mov	r1, r5
 8011a32:	4638      	mov	r0, r7
 8011a34:	f7ff ffc2 	bl	80119bc <sbrk_aligned>
 8011a38:	1c43      	adds	r3, r0, #1
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	d14d      	bne.n	8011ada <_malloc_r+0xde>
 8011a3e:	6834      	ldr	r4, [r6, #0]
 8011a40:	4626      	mov	r6, r4
 8011a42:	2e00      	cmp	r6, #0
 8011a44:	d140      	bne.n	8011ac8 <_malloc_r+0xcc>
 8011a46:	6823      	ldr	r3, [r4, #0]
 8011a48:	4631      	mov	r1, r6
 8011a4a:	4638      	mov	r0, r7
 8011a4c:	eb04 0803 	add.w	r8, r4, r3
 8011a50:	f000 f878 	bl	8011b44 <_sbrk_r>
 8011a54:	4580      	cmp	r8, r0
 8011a56:	d13a      	bne.n	8011ace <_malloc_r+0xd2>
 8011a58:	6821      	ldr	r1, [r4, #0]
 8011a5a:	3503      	adds	r5, #3
 8011a5c:	1a6d      	subs	r5, r5, r1
 8011a5e:	f025 0503 	bic.w	r5, r5, #3
 8011a62:	3508      	adds	r5, #8
 8011a64:	2d0c      	cmp	r5, #12
 8011a66:	bf38      	it	cc
 8011a68:	250c      	movcc	r5, #12
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	f7ff ffa5 	bl	80119bc <sbrk_aligned>
 8011a72:	3001      	adds	r0, #1
 8011a74:	d02b      	beq.n	8011ace <_malloc_r+0xd2>
 8011a76:	6823      	ldr	r3, [r4, #0]
 8011a78:	442b      	add	r3, r5
 8011a7a:	6023      	str	r3, [r4, #0]
 8011a7c:	e00e      	b.n	8011a9c <_malloc_r+0xa0>
 8011a7e:	6822      	ldr	r2, [r4, #0]
 8011a80:	1b52      	subs	r2, r2, r5
 8011a82:	d41e      	bmi.n	8011ac2 <_malloc_r+0xc6>
 8011a84:	2a0b      	cmp	r2, #11
 8011a86:	d916      	bls.n	8011ab6 <_malloc_r+0xba>
 8011a88:	1961      	adds	r1, r4, r5
 8011a8a:	42a3      	cmp	r3, r4
 8011a8c:	6025      	str	r5, [r4, #0]
 8011a8e:	bf18      	it	ne
 8011a90:	6059      	strne	r1, [r3, #4]
 8011a92:	6863      	ldr	r3, [r4, #4]
 8011a94:	bf08      	it	eq
 8011a96:	6031      	streq	r1, [r6, #0]
 8011a98:	5162      	str	r2, [r4, r5]
 8011a9a:	604b      	str	r3, [r1, #4]
 8011a9c:	4638      	mov	r0, r7
 8011a9e:	f104 060b 	add.w	r6, r4, #11
 8011aa2:	f000 f865 	bl	8011b70 <__malloc_unlock>
 8011aa6:	f026 0607 	bic.w	r6, r6, #7
 8011aaa:	1d23      	adds	r3, r4, #4
 8011aac:	1af2      	subs	r2, r6, r3
 8011aae:	d0b6      	beq.n	8011a1e <_malloc_r+0x22>
 8011ab0:	1b9b      	subs	r3, r3, r6
 8011ab2:	50a3      	str	r3, [r4, r2]
 8011ab4:	e7b3      	b.n	8011a1e <_malloc_r+0x22>
 8011ab6:	6862      	ldr	r2, [r4, #4]
 8011ab8:	42a3      	cmp	r3, r4
 8011aba:	bf0c      	ite	eq
 8011abc:	6032      	streq	r2, [r6, #0]
 8011abe:	605a      	strne	r2, [r3, #4]
 8011ac0:	e7ec      	b.n	8011a9c <_malloc_r+0xa0>
 8011ac2:	4623      	mov	r3, r4
 8011ac4:	6864      	ldr	r4, [r4, #4]
 8011ac6:	e7b2      	b.n	8011a2e <_malloc_r+0x32>
 8011ac8:	4634      	mov	r4, r6
 8011aca:	6876      	ldr	r6, [r6, #4]
 8011acc:	e7b9      	b.n	8011a42 <_malloc_r+0x46>
 8011ace:	230c      	movs	r3, #12
 8011ad0:	4638      	mov	r0, r7
 8011ad2:	603b      	str	r3, [r7, #0]
 8011ad4:	f000 f84c 	bl	8011b70 <__malloc_unlock>
 8011ad8:	e7a1      	b.n	8011a1e <_malloc_r+0x22>
 8011ada:	6025      	str	r5, [r4, #0]
 8011adc:	e7de      	b.n	8011a9c <_malloc_r+0xa0>
 8011ade:	bf00      	nop
 8011ae0:	20000494 	.word	0x20000494

08011ae4 <_realloc_r>:
 8011ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae8:	4680      	mov	r8, r0
 8011aea:	4614      	mov	r4, r2
 8011aec:	460e      	mov	r6, r1
 8011aee:	b921      	cbnz	r1, 8011afa <_realloc_r+0x16>
 8011af0:	4611      	mov	r1, r2
 8011af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011af6:	f7ff bf81 	b.w	80119fc <_malloc_r>
 8011afa:	b92a      	cbnz	r2, 8011b08 <_realloc_r+0x24>
 8011afc:	f7ff ff16 	bl	801192c <_free_r>
 8011b00:	4625      	mov	r5, r4
 8011b02:	4628      	mov	r0, r5
 8011b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b08:	f000 f838 	bl	8011b7c <_malloc_usable_size_r>
 8011b0c:	4284      	cmp	r4, r0
 8011b0e:	4607      	mov	r7, r0
 8011b10:	d802      	bhi.n	8011b18 <_realloc_r+0x34>
 8011b12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b16:	d812      	bhi.n	8011b3e <_realloc_r+0x5a>
 8011b18:	4621      	mov	r1, r4
 8011b1a:	4640      	mov	r0, r8
 8011b1c:	f7ff ff6e 	bl	80119fc <_malloc_r>
 8011b20:	4605      	mov	r5, r0
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d0ed      	beq.n	8011b02 <_realloc_r+0x1e>
 8011b26:	42bc      	cmp	r4, r7
 8011b28:	4622      	mov	r2, r4
 8011b2a:	4631      	mov	r1, r6
 8011b2c:	bf28      	it	cs
 8011b2e:	463a      	movcs	r2, r7
 8011b30:	f7ff faf0 	bl	8011114 <memcpy>
 8011b34:	4631      	mov	r1, r6
 8011b36:	4640      	mov	r0, r8
 8011b38:	f7ff fef8 	bl	801192c <_free_r>
 8011b3c:	e7e1      	b.n	8011b02 <_realloc_r+0x1e>
 8011b3e:	4635      	mov	r5, r6
 8011b40:	e7df      	b.n	8011b02 <_realloc_r+0x1e>
	...

08011b44 <_sbrk_r>:
 8011b44:	b538      	push	{r3, r4, r5, lr}
 8011b46:	2300      	movs	r3, #0
 8011b48:	4d05      	ldr	r5, [pc, #20]	; (8011b60 <_sbrk_r+0x1c>)
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	4608      	mov	r0, r1
 8011b4e:	602b      	str	r3, [r5, #0]
 8011b50:	f7fc fd36 	bl	800e5c0 <_sbrk>
 8011b54:	1c43      	adds	r3, r0, #1
 8011b56:	d102      	bne.n	8011b5e <_sbrk_r+0x1a>
 8011b58:	682b      	ldr	r3, [r5, #0]
 8011b5a:	b103      	cbz	r3, 8011b5e <_sbrk_r+0x1a>
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	2000049c 	.word	0x2000049c

08011b64 <__malloc_lock>:
 8011b64:	4801      	ldr	r0, [pc, #4]	; (8011b6c <__malloc_lock+0x8>)
 8011b66:	f000 b811 	b.w	8011b8c <__retarget_lock_acquire_recursive>
 8011b6a:	bf00      	nop
 8011b6c:	200004a0 	.word	0x200004a0

08011b70 <__malloc_unlock>:
 8011b70:	4801      	ldr	r0, [pc, #4]	; (8011b78 <__malloc_unlock+0x8>)
 8011b72:	f000 b80c 	b.w	8011b8e <__retarget_lock_release_recursive>
 8011b76:	bf00      	nop
 8011b78:	200004a0 	.word	0x200004a0

08011b7c <_malloc_usable_size_r>:
 8011b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b80:	1f18      	subs	r0, r3, #4
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bfbc      	itt	lt
 8011b86:	580b      	ldrlt	r3, [r1, r0]
 8011b88:	18c0      	addlt	r0, r0, r3
 8011b8a:	4770      	bx	lr

08011b8c <__retarget_lock_acquire_recursive>:
 8011b8c:	4770      	bx	lr

08011b8e <__retarget_lock_release_recursive>:
 8011b8e:	4770      	bx	lr

08011b90 <_init>:
 8011b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b92:	bf00      	nop
 8011b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b96:	bc08      	pop	{r3}
 8011b98:	469e      	mov	lr, r3
 8011b9a:	4770      	bx	lr

08011b9c <_fini>:
 8011b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9e:	bf00      	nop
 8011ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ba2:	bc08      	pop	{r3}
 8011ba4:	469e      	mov	lr, r3
 8011ba6:	4770      	bx	lr
