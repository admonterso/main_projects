
lifOSMQTT_MOVE_LINKER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c30  0800c10c  0800c10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08012d3c  08012d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801313c  0801313c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0801313c  0801313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013144  08013144  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013144  08013144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013148  08013148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0801314c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000013c  08013288  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08013288  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a69  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cab  00000000  00000000  00034bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00037880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  00038c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019990  00000000  00000000  00039fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ee6  00000000  00000000  00053940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904be  00000000  00000000  0006a826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000face4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a30  00000000  00000000  000fad34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c10c <__do_global_dtors_aux>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4c05      	ldr	r4, [pc, #20]	; (800c124 <__do_global_dtors_aux+0x18>)
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	b933      	cbnz	r3, 800c122 <__do_global_dtors_aux+0x16>
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__do_global_dtors_aux+0x1c>)
 800c116:	b113      	cbz	r3, 800c11e <__do_global_dtors_aux+0x12>
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <__do_global_dtors_aux+0x20>)
 800c11a:	f3af 8000 	nop.w
 800c11e:	2301      	movs	r3, #1
 800c120:	7023      	strb	r3, [r4, #0]
 800c122:	bd10      	pop	{r4, pc}
 800c124:	2000013c 	.word	0x2000013c
 800c128:	00000000 	.word	0x00000000
 800c12c:	08012d24 	.word	0x08012d24

0800c130 <frame_dummy>:
 800c130:	b508      	push	{r3, lr}
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <frame_dummy+0x10>)
 800c134:	b11b      	cbz	r3, 800c13e <frame_dummy+0xe>
 800c136:	4903      	ldr	r1, [pc, #12]	; (800c144 <frame_dummy+0x14>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <frame_dummy+0x18>)
 800c13a:	f3af 8000 	nop.w
 800c13e:	bd08      	pop	{r3, pc}
 800c140:	00000000 	.word	0x00000000
 800c144:	20000140 	.word	0x20000140
 800c148:	08012d24 	.word	0x08012d24

0800c14c <strlen>:
 800c14c:	4603      	mov	r3, r0
 800c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c152:	2a00      	cmp	r2, #0
 800c154:	d1fb      	bne.n	800c14e <strlen+0x2>
 800c156:	1a18      	subs	r0, r3, r0
 800c158:	3801      	subs	r0, #1
 800c15a:	4770      	bx	lr

0800c15c <__aeabi_uldivmod>:
 800c15c:	b953      	cbnz	r3, 800c174 <__aeabi_uldivmod+0x18>
 800c15e:	b94a      	cbnz	r2, 800c174 <__aeabi_uldivmod+0x18>
 800c160:	2900      	cmp	r1, #0
 800c162:	bf08      	it	eq
 800c164:	2800      	cmpeq	r0, #0
 800c166:	bf1c      	itt	ne
 800c168:	f04f 31ff 	movne.w	r1, #4294967295
 800c16c:	f04f 30ff 	movne.w	r0, #4294967295
 800c170:	f000 b976 	b.w	800c460 <__aeabi_idiv0>
 800c174:	f1ad 0c08 	sub.w	ip, sp, #8
 800c178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c17c:	f000 f806 	bl	800c18c <__udivmoddi4>
 800c180:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c188:	b004      	add	sp, #16
 800c18a:	4770      	bx	lr

0800c18c <__udivmoddi4>:
 800c18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c190:	9e08      	ldr	r6, [sp, #32]
 800c192:	460d      	mov	r5, r1
 800c194:	4604      	mov	r4, r0
 800c196:	4688      	mov	r8, r1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d14d      	bne.n	800c238 <__udivmoddi4+0xac>
 800c19c:	428a      	cmp	r2, r1
 800c19e:	4694      	mov	ip, r2
 800c1a0:	d968      	bls.n	800c274 <__udivmoddi4+0xe8>
 800c1a2:	fab2 f282 	clz	r2, r2
 800c1a6:	b152      	cbz	r2, 800c1be <__udivmoddi4+0x32>
 800c1a8:	fa01 f302 	lsl.w	r3, r1, r2
 800c1ac:	f1c2 0120 	rsb	r1, r2, #32
 800c1b0:	fa20 f101 	lsr.w	r1, r0, r1
 800c1b4:	fa0c fc02 	lsl.w	ip, ip, r2
 800c1b8:	ea41 0803 	orr.w	r8, r1, r3
 800c1bc:	4094      	lsls	r4, r2
 800c1be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800c1c2:	fbb8 f7f1 	udiv	r7, r8, r1
 800c1c6:	fa1f fe8c 	uxth.w	lr, ip
 800c1ca:	fb01 8817 	mls	r8, r1, r7, r8
 800c1ce:	fb07 f00e 	mul.w	r0, r7, lr
 800c1d2:	0c23      	lsrs	r3, r4, #16
 800c1d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c1d8:	4298      	cmp	r0, r3
 800c1da:	d90a      	bls.n	800c1f2 <__udivmoddi4+0x66>
 800c1dc:	eb1c 0303 	adds.w	r3, ip, r3
 800c1e0:	f107 35ff 	add.w	r5, r7, #4294967295
 800c1e4:	f080 811e 	bcs.w	800c424 <__udivmoddi4+0x298>
 800c1e8:	4298      	cmp	r0, r3
 800c1ea:	f240 811b 	bls.w	800c424 <__udivmoddi4+0x298>
 800c1ee:	3f02      	subs	r7, #2
 800c1f0:	4463      	add	r3, ip
 800c1f2:	1a1b      	subs	r3, r3, r0
 800c1f4:	fbb3 f0f1 	udiv	r0, r3, r1
 800c1f8:	fb01 3310 	mls	r3, r1, r0, r3
 800c1fc:	fb00 fe0e 	mul.w	lr, r0, lr
 800c200:	b2a4      	uxth	r4, r4
 800c202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c206:	45a6      	cmp	lr, r4
 800c208:	d90a      	bls.n	800c220 <__udivmoddi4+0x94>
 800c20a:	eb1c 0404 	adds.w	r4, ip, r4
 800c20e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c212:	f080 8109 	bcs.w	800c428 <__udivmoddi4+0x29c>
 800c216:	45a6      	cmp	lr, r4
 800c218:	f240 8106 	bls.w	800c428 <__udivmoddi4+0x29c>
 800c21c:	4464      	add	r4, ip
 800c21e:	3802      	subs	r0, #2
 800c220:	2100      	movs	r1, #0
 800c222:	eba4 040e 	sub.w	r4, r4, lr
 800c226:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c22a:	b11e      	cbz	r6, 800c234 <__udivmoddi4+0xa8>
 800c22c:	2300      	movs	r3, #0
 800c22e:	40d4      	lsrs	r4, r2
 800c230:	e9c6 4300 	strd	r4, r3, [r6]
 800c234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c238:	428b      	cmp	r3, r1
 800c23a:	d908      	bls.n	800c24e <__udivmoddi4+0xc2>
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	f000 80ee 	beq.w	800c41e <__udivmoddi4+0x292>
 800c242:	2100      	movs	r1, #0
 800c244:	e9c6 0500 	strd	r0, r5, [r6]
 800c248:	4608      	mov	r0, r1
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	fab3 f183 	clz	r1, r3
 800c252:	2900      	cmp	r1, #0
 800c254:	d14a      	bne.n	800c2ec <__udivmoddi4+0x160>
 800c256:	42ab      	cmp	r3, r5
 800c258:	d302      	bcc.n	800c260 <__udivmoddi4+0xd4>
 800c25a:	4282      	cmp	r2, r0
 800c25c:	f200 80fc 	bhi.w	800c458 <__udivmoddi4+0x2cc>
 800c260:	1a84      	subs	r4, r0, r2
 800c262:	eb65 0303 	sbc.w	r3, r5, r3
 800c266:	2001      	movs	r0, #1
 800c268:	4698      	mov	r8, r3
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	d0e2      	beq.n	800c234 <__udivmoddi4+0xa8>
 800c26e:	e9c6 4800 	strd	r4, r8, [r6]
 800c272:	e7df      	b.n	800c234 <__udivmoddi4+0xa8>
 800c274:	b902      	cbnz	r2, 800c278 <__udivmoddi4+0xec>
 800c276:	deff      	udf	#255	; 0xff
 800c278:	fab2 f282 	clz	r2, r2
 800c27c:	2a00      	cmp	r2, #0
 800c27e:	f040 8091 	bne.w	800c3a4 <__udivmoddi4+0x218>
 800c282:	eba1 000c 	sub.w	r0, r1, ip
 800c286:	2101      	movs	r1, #1
 800c288:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c28c:	fa1f fe8c 	uxth.w	lr, ip
 800c290:	fbb0 f3f7 	udiv	r3, r0, r7
 800c294:	fb07 0013 	mls	r0, r7, r3, r0
 800c298:	0c25      	lsrs	r5, r4, #16
 800c29a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800c29e:	fb0e f003 	mul.w	r0, lr, r3
 800c2a2:	42a8      	cmp	r0, r5
 800c2a4:	d908      	bls.n	800c2b8 <__udivmoddi4+0x12c>
 800c2a6:	eb1c 0505 	adds.w	r5, ip, r5
 800c2aa:	f103 38ff 	add.w	r8, r3, #4294967295
 800c2ae:	d202      	bcs.n	800c2b6 <__udivmoddi4+0x12a>
 800c2b0:	42a8      	cmp	r0, r5
 800c2b2:	f200 80ce 	bhi.w	800c452 <__udivmoddi4+0x2c6>
 800c2b6:	4643      	mov	r3, r8
 800c2b8:	1a2d      	subs	r5, r5, r0
 800c2ba:	fbb5 f0f7 	udiv	r0, r5, r7
 800c2be:	fb07 5510 	mls	r5, r7, r0, r5
 800c2c2:	fb0e fe00 	mul.w	lr, lr, r0
 800c2c6:	b2a4      	uxth	r4, r4
 800c2c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800c2cc:	45a6      	cmp	lr, r4
 800c2ce:	d908      	bls.n	800c2e2 <__udivmoddi4+0x156>
 800c2d0:	eb1c 0404 	adds.w	r4, ip, r4
 800c2d4:	f100 35ff 	add.w	r5, r0, #4294967295
 800c2d8:	d202      	bcs.n	800c2e0 <__udivmoddi4+0x154>
 800c2da:	45a6      	cmp	lr, r4
 800c2dc:	f200 80b6 	bhi.w	800c44c <__udivmoddi4+0x2c0>
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	eba4 040e 	sub.w	r4, r4, lr
 800c2e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c2ea:	e79e      	b.n	800c22a <__udivmoddi4+0x9e>
 800c2ec:	f1c1 0720 	rsb	r7, r1, #32
 800c2f0:	408b      	lsls	r3, r1
 800c2f2:	fa22 fc07 	lsr.w	ip, r2, r7
 800c2f6:	ea4c 0c03 	orr.w	ip, ip, r3
 800c2fa:	fa25 fa07 	lsr.w	sl, r5, r7
 800c2fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800c302:	fbba f8f9 	udiv	r8, sl, r9
 800c306:	fa20 f307 	lsr.w	r3, r0, r7
 800c30a:	fb09 aa18 	mls	sl, r9, r8, sl
 800c30e:	408d      	lsls	r5, r1
 800c310:	fa1f fe8c 	uxth.w	lr, ip
 800c314:	431d      	orrs	r5, r3
 800c316:	fa00 f301 	lsl.w	r3, r0, r1
 800c31a:	fb08 f00e 	mul.w	r0, r8, lr
 800c31e:	0c2c      	lsrs	r4, r5, #16
 800c320:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c324:	42a0      	cmp	r0, r4
 800c326:	fa02 f201 	lsl.w	r2, r2, r1
 800c32a:	d90b      	bls.n	800c344 <__udivmoddi4+0x1b8>
 800c32c:	eb1c 0404 	adds.w	r4, ip, r4
 800c330:	f108 3aff 	add.w	sl, r8, #4294967295
 800c334:	f080 8088 	bcs.w	800c448 <__udivmoddi4+0x2bc>
 800c338:	42a0      	cmp	r0, r4
 800c33a:	f240 8085 	bls.w	800c448 <__udivmoddi4+0x2bc>
 800c33e:	f1a8 0802 	sub.w	r8, r8, #2
 800c342:	4464      	add	r4, ip
 800c344:	1a24      	subs	r4, r4, r0
 800c346:	fbb4 f0f9 	udiv	r0, r4, r9
 800c34a:	fb09 4410 	mls	r4, r9, r0, r4
 800c34e:	fb00 fe0e 	mul.w	lr, r0, lr
 800c352:	b2ad      	uxth	r5, r5
 800c354:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800c358:	45a6      	cmp	lr, r4
 800c35a:	d908      	bls.n	800c36e <__udivmoddi4+0x1e2>
 800c35c:	eb1c 0404 	adds.w	r4, ip, r4
 800c360:	f100 35ff 	add.w	r5, r0, #4294967295
 800c364:	d26c      	bcs.n	800c440 <__udivmoddi4+0x2b4>
 800c366:	45a6      	cmp	lr, r4
 800c368:	d96a      	bls.n	800c440 <__udivmoddi4+0x2b4>
 800c36a:	3802      	subs	r0, #2
 800c36c:	4464      	add	r4, ip
 800c36e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c372:	fba0 9502 	umull	r9, r5, r0, r2
 800c376:	eba4 040e 	sub.w	r4, r4, lr
 800c37a:	42ac      	cmp	r4, r5
 800c37c:	46c8      	mov	r8, r9
 800c37e:	46ae      	mov	lr, r5
 800c380:	d356      	bcc.n	800c430 <__udivmoddi4+0x2a4>
 800c382:	d053      	beq.n	800c42c <__udivmoddi4+0x2a0>
 800c384:	2e00      	cmp	r6, #0
 800c386:	d069      	beq.n	800c45c <__udivmoddi4+0x2d0>
 800c388:	ebb3 0208 	subs.w	r2, r3, r8
 800c38c:	eb64 040e 	sbc.w	r4, r4, lr
 800c390:	fa22 f301 	lsr.w	r3, r2, r1
 800c394:	fa04 f707 	lsl.w	r7, r4, r7
 800c398:	431f      	orrs	r7, r3
 800c39a:	40cc      	lsrs	r4, r1
 800c39c:	e9c6 7400 	strd	r7, r4, [r6]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	e747      	b.n	800c234 <__udivmoddi4+0xa8>
 800c3a4:	fa0c fc02 	lsl.w	ip, ip, r2
 800c3a8:	f1c2 0120 	rsb	r1, r2, #32
 800c3ac:	fa25 f301 	lsr.w	r3, r5, r1
 800c3b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c3b4:	fa20 f101 	lsr.w	r1, r0, r1
 800c3b8:	4095      	lsls	r5, r2
 800c3ba:	430d      	orrs	r5, r1
 800c3bc:	fbb3 f1f7 	udiv	r1, r3, r7
 800c3c0:	fb07 3311 	mls	r3, r7, r1, r3
 800c3c4:	fa1f fe8c 	uxth.w	lr, ip
 800c3c8:	0c28      	lsrs	r0, r5, #16
 800c3ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c3ce:	fb01 f30e 	mul.w	r3, r1, lr
 800c3d2:	4283      	cmp	r3, r0
 800c3d4:	fa04 f402 	lsl.w	r4, r4, r2
 800c3d8:	d908      	bls.n	800c3ec <__udivmoddi4+0x260>
 800c3da:	eb1c 0000 	adds.w	r0, ip, r0
 800c3de:	f101 38ff 	add.w	r8, r1, #4294967295
 800c3e2:	d22f      	bcs.n	800c444 <__udivmoddi4+0x2b8>
 800c3e4:	4283      	cmp	r3, r0
 800c3e6:	d92d      	bls.n	800c444 <__udivmoddi4+0x2b8>
 800c3e8:	3902      	subs	r1, #2
 800c3ea:	4460      	add	r0, ip
 800c3ec:	1ac0      	subs	r0, r0, r3
 800c3ee:	fbb0 f3f7 	udiv	r3, r0, r7
 800c3f2:	fb07 0013 	mls	r0, r7, r3, r0
 800c3f6:	b2ad      	uxth	r5, r5
 800c3f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800c3fc:	fb03 f00e 	mul.w	r0, r3, lr
 800c400:	42a8      	cmp	r0, r5
 800c402:	d908      	bls.n	800c416 <__udivmoddi4+0x28a>
 800c404:	eb1c 0505 	adds.w	r5, ip, r5
 800c408:	f103 38ff 	add.w	r8, r3, #4294967295
 800c40c:	d216      	bcs.n	800c43c <__udivmoddi4+0x2b0>
 800c40e:	42a8      	cmp	r0, r5
 800c410:	d914      	bls.n	800c43c <__udivmoddi4+0x2b0>
 800c412:	3b02      	subs	r3, #2
 800c414:	4465      	add	r5, ip
 800c416:	1a28      	subs	r0, r5, r0
 800c418:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c41c:	e738      	b.n	800c290 <__udivmoddi4+0x104>
 800c41e:	4631      	mov	r1, r6
 800c420:	4630      	mov	r0, r6
 800c422:	e707      	b.n	800c234 <__udivmoddi4+0xa8>
 800c424:	462f      	mov	r7, r5
 800c426:	e6e4      	b.n	800c1f2 <__udivmoddi4+0x66>
 800c428:	4618      	mov	r0, r3
 800c42a:	e6f9      	b.n	800c220 <__udivmoddi4+0x94>
 800c42c:	454b      	cmp	r3, r9
 800c42e:	d2a9      	bcs.n	800c384 <__udivmoddi4+0x1f8>
 800c430:	ebb9 0802 	subs.w	r8, r9, r2
 800c434:	eb65 0e0c 	sbc.w	lr, r5, ip
 800c438:	3801      	subs	r0, #1
 800c43a:	e7a3      	b.n	800c384 <__udivmoddi4+0x1f8>
 800c43c:	4643      	mov	r3, r8
 800c43e:	e7ea      	b.n	800c416 <__udivmoddi4+0x28a>
 800c440:	4628      	mov	r0, r5
 800c442:	e794      	b.n	800c36e <__udivmoddi4+0x1e2>
 800c444:	4641      	mov	r1, r8
 800c446:	e7d1      	b.n	800c3ec <__udivmoddi4+0x260>
 800c448:	46d0      	mov	r8, sl
 800c44a:	e77b      	b.n	800c344 <__udivmoddi4+0x1b8>
 800c44c:	4464      	add	r4, ip
 800c44e:	3802      	subs	r0, #2
 800c450:	e747      	b.n	800c2e2 <__udivmoddi4+0x156>
 800c452:	3b02      	subs	r3, #2
 800c454:	4465      	add	r5, ip
 800c456:	e72f      	b.n	800c2b8 <__udivmoddi4+0x12c>
 800c458:	4608      	mov	r0, r1
 800c45a:	e706      	b.n	800c26a <__udivmoddi4+0xde>
 800c45c:	4631      	mov	r1, r6
 800c45e:	e6e9      	b.n	800c234 <__udivmoddi4+0xa8>

0800c460 <__aeabi_idiv0>:
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop

0800c464 <printUcxoBaratia>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintStr("!");
	HD44780_SetCursor(6, 1);
	HD44780_PrintStr("-_-");
}
void printUcxoBaratia(uint8_t row, uint8_t column){
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	460a      	mov	r2, r1
 800c46e:	71fb      	strb	r3, [r7, #7]
 800c470:	4613      	mov	r3, r2
 800c472:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c474:	f000 fcde 	bl	800ce34 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 800c478:	494e      	ldr	r1, [pc, #312]	; (800c5b4 <printUcxoBaratia+0x150>)
 800c47a:	2001      	movs	r0, #1
 800c47c:	f000 fd38 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c480:	79fa      	ldrb	r2, [r7, #7]
 800c482:	79bb      	ldrb	r3, [r7, #6]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fcea 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c48c:	2001      	movs	r0, #1
 800c48e:	f000 fd58 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 800c492:	4949      	ldr	r1, [pc, #292]	; (800c5b8 <printUcxoBaratia+0x154>)
 800c494:	2002      	movs	r0, #2
 800c496:	f000 fd2b 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c49a:	79bb      	ldrb	r3, [r7, #6]
 800c49c:	3301      	adds	r3, #1
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	79fa      	ldrb	r2, [r7, #7]
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 fcdb 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c4aa:	2002      	movs	r0, #2
 800c4ac:	f000 fd49 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 800c4b0:	4942      	ldr	r1, [pc, #264]	; (800c5bc <printUcxoBaratia+0x158>)
 800c4b2:	2003      	movs	r0, #3
 800c4b4:	f000 fd1c 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c4b8:	79bb      	ldrb	r3, [r7, #6]
 800c4ba:	3302      	adds	r3, #2
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	79fa      	ldrb	r2, [r7, #7]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fccc 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c4c8:	2003      	movs	r0, #3
 800c4ca:	f000 fd3a 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 800c4ce:	493c      	ldr	r1, [pc, #240]	; (800c5c0 <printUcxoBaratia+0x15c>)
 800c4d0:	2004      	movs	r0, #4
 800c4d2:	f000 fd0d 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c4d6:	79bb      	ldrb	r3, [r7, #6]
 800c4d8:	3303      	adds	r3, #3
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fcbd 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c4e6:	2004      	movs	r0, #4
 800c4e8:	f000 fd2b 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800c4ec:	4935      	ldr	r1, [pc, #212]	; (800c5c4 <printUcxoBaratia+0x160>)
 800c4ee:	2005      	movs	r0, #5
 800c4f0:	f000 fcfe 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c4f4:	79bb      	ldrb	r3, [r7, #6]
 800c4f6:	3305      	adds	r3, #5
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	79fa      	ldrb	r2, [r7, #7]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fcae 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c504:	2005      	movs	r0, #5
 800c506:	f000 fd1c 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800c50a:	79bb      	ldrb	r3, [r7, #6]
 800c50c:	3306      	adds	r3, #6
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	79fa      	ldrb	r2, [r7, #7]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fca3 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c51a:	2004      	movs	r0, #4
 800c51c:	f000 fd11 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 800c520:	4929      	ldr	r1, [pc, #164]	; (800c5c8 <printUcxoBaratia+0x164>)
 800c522:	2006      	movs	r0, #6
 800c524:	f000 fce4 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c528:	79bb      	ldrb	r3, [r7, #6]
 800c52a:	3307      	adds	r3, #7
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	79fa      	ldrb	r2, [r7, #7]
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f000 fc94 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c538:	2006      	movs	r0, #6
 800c53a:	f000 fd02 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800c53e:	79bb      	ldrb	r3, [r7, #6]
 800c540:	3308      	adds	r3, #8
 800c542:	b2db      	uxtb	r3, r3
 800c544:	79fa      	ldrb	r2, [r7, #7]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 fc89 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c54e:	2004      	movs	r0, #4
 800c550:	f000 fcf7 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 800c554:	491d      	ldr	r1, [pc, #116]	; (800c5cc <printUcxoBaratia+0x168>)
 800c556:	2007      	movs	r0, #7
 800c558:	f000 fcca 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c55c:	79bb      	ldrb	r3, [r7, #6]
 800c55e:	3309      	adds	r3, #9
 800c560:	b2db      	uxtb	r3, r3
 800c562:	79fa      	ldrb	r2, [r7, #7]
 800c564:	4611      	mov	r1, r2
 800c566:	4618      	mov	r0, r3
 800c568:	f000 fc7a 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c56c:	2007      	movs	r0, #7
 800c56e:	f000 fce8 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 800c572:	4917      	ldr	r1, [pc, #92]	; (800c5d0 <printUcxoBaratia+0x16c>)
 800c574:	2008      	movs	r0, #8
 800c576:	f000 fcbb 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c57a:	79bb      	ldrb	r3, [r7, #6]
 800c57c:	330a      	adds	r3, #10
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	79fa      	ldrb	r2, [r7, #7]
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f000 fc6b 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c58a:	2008      	movs	r0, #8
 800c58c:	f000 fcd9 	bl	800cf42 <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 800c590:	79bb      	ldrb	r3, [r7, #6]
 800c592:	330b      	adds	r3, #11
 800c594:	b2db      	uxtb	r3, r3
 800c596:	79fa      	ldrb	r2, [r7, #7]
 800c598:	4611      	mov	r1, r2
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 fc60 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c5a0:	2004      	movs	r0, #4
 800c5a2:	f000 fcce 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c5a6:	480b      	ldr	r0, [pc, #44]	; (800c5d4 <printUcxoBaratia+0x170>)
 800c5a8:	f000 fcd8 	bl	800cf5c <HD44780_PrintStr>

}
 800c5ac:	bf00      	nop
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20000008 	.word	0x20000008
 800c5b8:	20000010 	.word	0x20000010
 800c5bc:	20000068 	.word	0x20000068
 800c5c0:	20000020 	.word	0x20000020
 800c5c4:	20000030 	.word	0x20000030
 800c5c8:	20000070 	.word	0x20000070
 800c5cc:	20000058 	.word	0x20000058
 800c5d0:	20000038 	.word	0x20000038
 800c5d4:	08012d3c 	.word	0x08012d3c

0800c5d8 <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	460a      	mov	r2, r1
 800c5e2:	71fb      	strb	r3, [r7, #7]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 800c5e8:	f000 fc24 	bl	800ce34 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800c5ec:	4948      	ldr	r1, [pc, #288]	; (800c710 <printBlansiAraa+0x138>)
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	f000 fc7e 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c5f4:	79fa      	ldrb	r2, [r7, #7]
 800c5f6:	79bb      	ldrb	r3, [r7, #6]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 fc30 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c600:	2001      	movs	r0, #1
 800c602:	f000 fc9e 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 800c606:	4943      	ldr	r1, [pc, #268]	; (800c714 <printBlansiAraa+0x13c>)
 800c608:	2002      	movs	r0, #2
 800c60a:	f000 fc71 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c60e:	79bb      	ldrb	r3, [r7, #6]
 800c610:	3301      	adds	r3, #1
 800c612:	b2db      	uxtb	r3, r3
 800c614:	79fa      	ldrb	r2, [r7, #7]
 800c616:	4611      	mov	r1, r2
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fc21 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c61e:	2002      	movs	r0, #2
 800c620:	f000 fc8f 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 800c624:	493c      	ldr	r1, [pc, #240]	; (800c718 <printBlansiAraa+0x140>)
 800c626:	2003      	movs	r0, #3
 800c628:	f000 fc62 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c62c:	79bb      	ldrb	r3, [r7, #6]
 800c62e:	3302      	adds	r3, #2
 800c630:	b2db      	uxtb	r3, r3
 800c632:	79fa      	ldrb	r2, [r7, #7]
 800c634:	4611      	mov	r1, r2
 800c636:	4618      	mov	r0, r3
 800c638:	f000 fc12 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c63c:	2003      	movs	r0, #3
 800c63e:	f000 fc80 	bl	800cf42 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 800c642:	79bb      	ldrb	r3, [r7, #6]
 800c644:	3303      	adds	r3, #3
 800c646:	b2db      	uxtb	r3, r3
 800c648:	79fa      	ldrb	r2, [r7, #7]
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 fc07 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c652:	2002      	movs	r0, #2
 800c654:	f000 fc75 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 800c658:	4930      	ldr	r1, [pc, #192]	; (800c71c <printBlansiAraa+0x144>)
 800c65a:	2004      	movs	r0, #4
 800c65c:	f000 fc48 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c660:	79bb      	ldrb	r3, [r7, #6]
 800c662:	3304      	adds	r3, #4
 800c664:	b2db      	uxtb	r3, r3
 800c666:	79fa      	ldrb	r2, [r7, #7]
 800c668:	4611      	mov	r1, r2
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fbf8 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c670:	2004      	movs	r0, #4
 800c672:	f000 fc66 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 800c676:	492a      	ldr	r1, [pc, #168]	; (800c720 <printBlansiAraa+0x148>)
 800c678:	2005      	movs	r0, #5
 800c67a:	f000 fc39 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c67e:	79bb      	ldrb	r3, [r7, #6]
 800c680:	3305      	adds	r3, #5
 800c682:	b2db      	uxtb	r3, r3
 800c684:	79fa      	ldrb	r2, [r7, #7]
 800c686:	4611      	mov	r1, r2
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fbe9 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c68e:	2005      	movs	r0, #5
 800c690:	f000 fc57 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 800c694:	4923      	ldr	r1, [pc, #140]	; (800c724 <printBlansiAraa+0x14c>)
 800c696:	2006      	movs	r0, #6
 800c698:	f000 fc2a 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c69c:	79bb      	ldrb	r3, [r7, #6]
 800c69e:	3306      	adds	r3, #6
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	79fa      	ldrb	r2, [r7, #7]
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fbda 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c6ac:	2006      	movs	r0, #6
 800c6ae:	f000 fc48 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 800c6b2:	79bb      	ldrb	r3, [r7, #6]
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	79fa      	ldrb	r2, [r7, #7]
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 fbcf 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c6c2:	2002      	movs	r0, #2
 800c6c4:	f000 fc3d 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 800c6c8:	4917      	ldr	r1, [pc, #92]	; (800c728 <printBlansiAraa+0x150>)
 800c6ca:	2007      	movs	r0, #7
 800c6cc:	f000 fc10 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 800c6d0:	79bb      	ldrb	r3, [r7, #6]
 800c6d2:	3309      	adds	r3, #9
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	79fa      	ldrb	r2, [r7, #7]
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fbc0 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c6e0:	2007      	movs	r0, #7
 800c6e2:	f000 fc2e 	bl	800cf42 <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 800c6e6:	79bb      	ldrb	r3, [r7, #6]
 800c6e8:	330a      	adds	r3, #10
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	79fa      	ldrb	r2, [r7, #7]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 fbb5 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c6f6:	2002      	movs	r0, #2
 800c6f8:	f000 fc23 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c6fc:	2002      	movs	r0, #2
 800c6fe:	f000 fc20 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c702:	480a      	ldr	r0, [pc, #40]	; (800c72c <printBlansiAraa+0x154>)
 800c704:	f000 fc2a 	bl	800cf5c <HD44780_PrintStr>
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20000030 	.word	0x20000030
 800c714:	20000020 	.word	0x20000020
 800c718:	20000040 	.word	0x20000040
 800c71c:	20000000 	.word	0x20000000
 800c720:	20000008 	.word	0x20000008
 800c724:	20000038 	.word	0x20000038
 800c728:	20000070 	.word	0x20000070
 800c72c:	08012d3c 	.word	0x08012d3c

0800c730 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	460a      	mov	r2, r1
 800c73a:	71fb      	strb	r3, [r7, #7]
 800c73c:	4613      	mov	r3, r2
 800c73e:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c740:	f000 fb78 	bl	800ce34 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 800c744:	4959      	ldr	r1, [pc, #356]	; (800c8ac <printMiadetBarati+0x17c>)
 800c746:	2001      	movs	r0, #1
 800c748:	f000 fbd2 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c74c:	79fa      	ldrb	r2, [r7, #7]
 800c74e:	79bb      	ldrb	r3, [r7, #6]
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f000 fb84 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c758:	2001      	movs	r0, #1
 800c75a:	f000 fbf2 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800c75e:	4954      	ldr	r1, [pc, #336]	; (800c8b0 <printMiadetBarati+0x180>)
 800c760:	2002      	movs	r0, #2
 800c762:	f000 fbc5 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c766:	79bb      	ldrb	r3, [r7, #6]
 800c768:	3301      	adds	r3, #1
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	79fa      	ldrb	r2, [r7, #7]
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fb75 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c776:	2002      	movs	r0, #2
 800c778:	f000 fbe3 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800c77c:	494d      	ldr	r1, [pc, #308]	; (800c8b4 <printMiadetBarati+0x184>)
 800c77e:	2003      	movs	r0, #3
 800c780:	f000 fbb6 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c784:	79bb      	ldrb	r3, [r7, #6]
 800c786:	3302      	adds	r3, #2
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	79fa      	ldrb	r2, [r7, #7]
 800c78c:	4611      	mov	r1, r2
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fb66 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c794:	2003      	movs	r0, #3
 800c796:	f000 fbd4 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 800c79a:	4947      	ldr	r1, [pc, #284]	; (800c8b8 <printMiadetBarati+0x188>)
 800c79c:	2004      	movs	r0, #4
 800c79e:	f000 fba7 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c7a2:	79bb      	ldrb	r3, [r7, #6]
 800c7a4:	3303      	adds	r3, #3
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	79fa      	ldrb	r2, [r7, #7]
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fb57 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c7b2:	2004      	movs	r0, #4
 800c7b4:	f000 fbc5 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 800c7b8:	4940      	ldr	r1, [pc, #256]	; (800c8bc <printMiadetBarati+0x18c>)
 800c7ba:	2005      	movs	r0, #5
 800c7bc:	f000 fb98 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 800c7c0:	79bb      	ldrb	r3, [r7, #6]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	79fa      	ldrb	r2, [r7, #7]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fb48 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c7d0:	2005      	movs	r0, #5
 800c7d2:	f000 fbb6 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 800c7d6:	493a      	ldr	r1, [pc, #232]	; (800c8c0 <printMiadetBarati+0x190>)
 800c7d8:	2006      	movs	r0, #6
 800c7da:	f000 fb89 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c7de:	79bb      	ldrb	r3, [r7, #6]
 800c7e0:	3305      	adds	r3, #5
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	79fa      	ldrb	r2, [r7, #7]
 800c7e6:	4611      	mov	r1, r2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 fb39 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c7ee:	2006      	movs	r0, #6
 800c7f0:	f000 fba7 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 800c7f4:	4933      	ldr	r1, [pc, #204]	; (800c8c4 <printMiadetBarati+0x194>)
 800c7f6:	2007      	movs	r0, #7
 800c7f8:	f000 fb7a 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c7fc:	79bb      	ldrb	r3, [r7, #6]
 800c7fe:	3307      	adds	r3, #7
 800c800:	b2db      	uxtb	r3, r3
 800c802:	79fa      	ldrb	r2, [r7, #7]
 800c804:	4611      	mov	r1, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fb2a 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c80c:	2007      	movs	r0, #7
 800c80e:	f000 fb98 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 800c812:	79bb      	ldrb	r3, [r7, #6]
 800c814:	3308      	adds	r3, #8
 800c816:	b2db      	uxtb	r3, r3
 800c818:	79fa      	ldrb	r2, [r7, #7]
 800c81a:	4611      	mov	r1, r2
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 fb1f 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c822:	2003      	movs	r0, #3
 800c824:	f000 fb8d 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 800c828:	4927      	ldr	r1, [pc, #156]	; (800c8c8 <printMiadetBarati+0x198>)
 800c82a:	2008      	movs	r0, #8
 800c82c:	f000 fb60 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c830:	79bb      	ldrb	r3, [r7, #6]
 800c832:	3309      	adds	r3, #9
 800c834:	b2db      	uxtb	r3, r3
 800c836:	79fa      	ldrb	r2, [r7, #7]
 800c838:	4611      	mov	r1, r2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 fb10 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c840:	2008      	movs	r0, #8
 800c842:	f000 fb7e 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c846:	79bb      	ldrb	r3, [r7, #6]
 800c848:	330a      	adds	r3, #10
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	79fa      	ldrb	r2, [r7, #7]
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f000 fb05 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c856:	2003      	movs	r0, #3
 800c858:	f000 fb73 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800c85c:	79bb      	ldrb	r3, [r7, #6]
 800c85e:	330b      	adds	r3, #11
 800c860:	b2db      	uxtb	r3, r3
 800c862:	79fa      	ldrb	r2, [r7, #7]
 800c864:	4611      	mov	r1, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f000 fafa 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c86c:	2006      	movs	r0, #6
 800c86e:	f000 fb68 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 800c872:	79bb      	ldrb	r3, [r7, #6]
 800c874:	330c      	adds	r3, #12
 800c876:	b2db      	uxtb	r3, r3
 800c878:	79fa      	ldrb	r2, [r7, #7]
 800c87a:	4611      	mov	r1, r2
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 faef 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c882:	2002      	movs	r0, #2
 800c884:	f000 fb5d 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 800c888:	79bb      	ldrb	r3, [r7, #6]
 800c88a:	3302      	adds	r3, #2
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	3301      	adds	r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	4619      	mov	r1, r3
 800c896:	4610      	mov	r0, r2
 800c898:	f000 fae2 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintStr("0.10 GEL");
 800c89c:	480b      	ldr	r0, [pc, #44]	; (800c8cc <printMiadetBarati+0x19c>)
 800c89e:	f000 fb5d 	bl	800cf5c <HD44780_PrintStr>


}
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20000060 	.word	0x20000060
 800c8b0:	20000038 	.word	0x20000038
 800c8b4:	20000020 	.word	0x20000020
 800c8b8:	20000018 	.word	0x20000018
 800c8bc:	20000078 	.word	0x20000078
 800c8c0:	20000058 	.word	0x20000058
 800c8c4:	20000030 	.word	0x20000030
 800c8c8:	20000070 	.word	0x20000070
 800c8cc:	08012d44 	.word	0x08012d44

0800c8d0 <prinWarmateba>:

void prinWarmateba(uint8_t row, uint8_t column){
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	460a      	mov	r2, r1
 800c8da:	71fb      	strb	r3, [r7, #7]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c8e0:	f000 faa8 	bl	800ce34 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, wGeo);
 800c8e4:	4939      	ldr	r1, [pc, #228]	; (800c9cc <prinWarmateba+0xfc>)
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	f000 fb02 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c8ec:	79fa      	ldrb	r2, [r7, #7]
 800c8ee:	79bb      	ldrb	r3, [r7, #6]
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fab4 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c8f8:	2001      	movs	r0, #1
 800c8fa:	f000 fb22 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, aGeo);
 800c8fe:	4934      	ldr	r1, [pc, #208]	; (800c9d0 <prinWarmateba+0x100>)
 800c900:	2002      	movs	r0, #2
 800c902:	f000 faf5 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c906:	79bb      	ldrb	r3, [r7, #6]
 800c908:	3301      	adds	r3, #1
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	79fa      	ldrb	r2, [r7, #7]
 800c90e:	4611      	mov	r1, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f000 faa5 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c916:	2002      	movs	r0, #2
 800c918:	f000 fb13 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, rGeo);
 800c91c:	492d      	ldr	r1, [pc, #180]	; (800c9d4 <prinWarmateba+0x104>)
 800c91e:	2003      	movs	r0, #3
 800c920:	f000 fae6 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c924:	79bb      	ldrb	r3, [r7, #6]
 800c926:	3302      	adds	r3, #2
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	79fa      	ldrb	r2, [r7, #7]
 800c92c:	4611      	mov	r1, r2
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 fa96 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c934:	2003      	movs	r0, #3
 800c936:	f000 fb04 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, mGeo);
 800c93a:	4927      	ldr	r1, [pc, #156]	; (800c9d8 <prinWarmateba+0x108>)
 800c93c:	2004      	movs	r0, #4
 800c93e:	f000 fad7 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c942:	79bb      	ldrb	r3, [r7, #6]
 800c944:	3303      	adds	r3, #3
 800c946:	b2db      	uxtb	r3, r3
 800c948:	79fa      	ldrb	r2, [r7, #7]
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 fa87 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c952:	2004      	movs	r0, #4
 800c954:	f000 faf5 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_PrintSpecialChar(2); // a
 800c958:	2002      	movs	r0, #2
 800c95a:	f000 faf2 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, tGeo); //t
 800c95e:	491f      	ldr	r1, [pc, #124]	; (800c9dc <prinWarmateba+0x10c>)
 800c960:	2005      	movs	r0, #5
 800c962:	f000 fac5 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c966:	79bb      	ldrb	r3, [r7, #6]
 800c968:	3305      	adds	r3, #5
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	79fa      	ldrb	r2, [r7, #7]
 800c96e:	4611      	mov	r1, r2
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fa75 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c976:	2005      	movs	r0, #5
 800c978:	f000 fae3 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, eGeo); //e
 800c97c:	4918      	ldr	r1, [pc, #96]	; (800c9e0 <prinWarmateba+0x110>)
 800c97e:	2006      	movs	r0, #6
 800c980:	f000 fab6 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+6, row);
 800c984:	79bb      	ldrb	r3, [r7, #6]
 800c986:	3306      	adds	r3, #6
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	79fa      	ldrb	r2, [r7, #7]
 800c98c:	4611      	mov	r1, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 fa66 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c994:	2006      	movs	r0, #6
 800c996:	f000 fad4 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo); //b
 800c99a:	4912      	ldr	r1, [pc, #72]	; (800c9e4 <prinWarmateba+0x114>)
 800c99c:	2007      	movs	r0, #7
 800c99e:	f000 faa7 	bl	800cef0 <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c9a2:	79bb      	ldrb	r3, [r7, #6]
 800c9a4:	3307      	adds	r3, #7
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	79fa      	ldrb	r2, [r7, #7]
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 fa57 	bl	800ce60 <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c9b2:	2007      	movs	r0, #7
 800c9b4:	f000 fac5 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_PrintSpecialChar(2);
 800c9b8:	2002      	movs	r0, #2
 800c9ba:	f000 fac2 	bl	800cf42 <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c9be:	480a      	ldr	r0, [pc, #40]	; (800c9e8 <prinWarmateba+0x118>)
 800c9c0:	f000 facc 	bl	800cf5c <HD44780_PrintStr>

}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20000080 	.word	0x20000080
 800c9d0:	20000020 	.word	0x20000020
 800c9d4:	20000070 	.word	0x20000070
 800c9d8:	20000060 	.word	0x20000060
 800c9dc:	20000058 	.word	0x20000058
 800c9e0:	20000078 	.word	0x20000078
 800c9e4:	20000030 	.word	0x20000030
 800c9e8:	08012d3c 	.word	0x08012d3c

0800c9ec <printShecdoma>:
void printShecdoma(uint8_t row, uint8_t column){
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	71fb      	strb	r3, [r7, #7]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c9fc:	f000 fa1a 	bl	800ce34 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, SGeo);
 800ca00:	493a      	ldr	r1, [pc, #232]	; (800caec <printShecdoma+0x100>)
 800ca02:	2001      	movs	r0, #1
 800ca04:	f000 fa74 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800ca08:	79fa      	ldrb	r2, [r7, #7]
 800ca0a:	79bb      	ldrb	r3, [r7, #6]
 800ca0c:	4611      	mov	r1, r2
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 fa26 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800ca14:	2001      	movs	r0, #1
 800ca16:	f000 fa94 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, eGeo);
 800ca1a:	4935      	ldr	r1, [pc, #212]	; (800caf0 <printShecdoma+0x104>)
 800ca1c:	2002      	movs	r0, #2
 800ca1e:	f000 fa67 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800ca22:	79bb      	ldrb	r3, [r7, #6]
 800ca24:	3301      	adds	r3, #1
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	79fa      	ldrb	r2, [r7, #7]
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 fa17 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800ca32:	2002      	movs	r0, #2
 800ca34:	f000 fa85 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, cGeo);
 800ca38:	492e      	ldr	r1, [pc, #184]	; (800caf4 <printShecdoma+0x108>)
 800ca3a:	2003      	movs	r0, #3
 800ca3c:	f000 fa58 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800ca40:	79bb      	ldrb	r3, [r7, #6]
 800ca42:	3302      	adds	r3, #2
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	79fa      	ldrb	r2, [r7, #7]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fa08 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800ca50:	2003      	movs	r0, #3
 800ca52:	f000 fa76 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800ca56:	4928      	ldr	r1, [pc, #160]	; (800caf8 <printShecdoma+0x10c>)
 800ca58:	2004      	movs	r0, #4
 800ca5a:	f000 fa49 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800ca5e:	79bb      	ldrb	r3, [r7, #6]
 800ca60:	3303      	adds	r3, #3
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	79fa      	ldrb	r2, [r7, #7]
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 f9f9 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800ca6e:	2004      	movs	r0, #4
 800ca70:	f000 fa67 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, oGeo);
 800ca74:	4921      	ldr	r1, [pc, #132]	; (800cafc <printShecdoma+0x110>)
 800ca76:	2005      	movs	r0, #5
 800ca78:	f000 fa3a 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800ca7c:	79bb      	ldrb	r3, [r7, #6]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	79fa      	ldrb	r2, [r7, #7]
 800ca84:	4611      	mov	r1, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f9ea 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800ca8c:	2005      	movs	r0, #5
 800ca8e:	f000 fa58 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, mGeo);
 800ca92:	491b      	ldr	r1, [pc, #108]	; (800cb00 <printShecdoma+0x114>)
 800ca94:	2006      	movs	r0, #6
 800ca96:	f000 fa2b 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800ca9a:	79bb      	ldrb	r3, [r7, #6]
 800ca9c:	3305      	adds	r3, #5
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	79fa      	ldrb	r2, [r7, #7]
 800caa2:	4611      	mov	r1, r2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 f9db 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800caaa:	2006      	movs	r0, #6
 800caac:	f000 fa49 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, aGeo);
 800cab0:	4914      	ldr	r1, [pc, #80]	; (800cb04 <printShecdoma+0x118>)
 800cab2:	2007      	movs	r0, #7
 800cab4:	f000 fa1c 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800cab8:	79bb      	ldrb	r3, [r7, #6]
 800caba:	3306      	adds	r3, #6
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	79fa      	ldrb	r2, [r7, #7]
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f9cc 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800cac8:	2007      	movs	r0, #7
 800caca:	f000 fa3a 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+7, row);
 800cace:	79bb      	ldrb	r3, [r7, #6]
 800cad0:	3307      	adds	r3, #7
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	79fa      	ldrb	r2, [r7, #7]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 f9c1 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintStr("!");
 800cade:	480a      	ldr	r0, [pc, #40]	; (800cb08 <printShecdoma+0x11c>)
 800cae0:	f000 fa3c 	bl	800cf5c <HD44780_PrintStr>
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20000028 	.word	0x20000028
 800caf0:	20000078 	.word	0x20000078
 800caf4:	20000048 	.word	0x20000048
 800caf8:	20000018 	.word	0x20000018
 800cafc:	20000050 	.word	0x20000050
 800cb00:	20000060 	.word	0x20000060
 800cb04:	20000020 	.word	0x20000020
 800cb08:	08012d3c 	.word	0x08012d3c

0800cb0c <printDaicadet>:

void printDaicadet(uint8_t row, uint8_t column){
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	460a      	mov	r2, r1
 800cb16:	71fb      	strb	r3, [r7, #7]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800cb1c:	f000 f98a 	bl	800ce34 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 800cb20:	493a      	ldr	r1, [pc, #232]	; (800cc0c <printDaicadet+0x100>)
 800cb22:	2001      	movs	r0, #1
 800cb24:	f000 f9e4 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800cb28:	79fa      	ldrb	r2, [r7, #7]
 800cb2a:	79bb      	ldrb	r3, [r7, #6]
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 f996 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800cb34:	2001      	movs	r0, #1
 800cb36:	f000 fa04 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800cb3a:	4935      	ldr	r1, [pc, #212]	; (800cc10 <printDaicadet+0x104>)
 800cb3c:	2002      	movs	r0, #2
 800cb3e:	f000 f9d7 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800cb42:	79bb      	ldrb	r3, [r7, #6]
 800cb44:	3301      	adds	r3, #1
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	79fa      	ldrb	r2, [r7, #7]
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 f987 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800cb52:	2002      	movs	r0, #2
 800cb54:	f000 f9f5 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800cb58:	492e      	ldr	r1, [pc, #184]	; (800cc14 <printDaicadet+0x108>)
 800cb5a:	2003      	movs	r0, #3
 800cb5c:	f000 f9c8 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800cb60:	79bb      	ldrb	r3, [r7, #6]
 800cb62:	3302      	adds	r3, #2
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	79fa      	ldrb	r2, [r7, #7]
 800cb68:	4611      	mov	r1, r2
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 f978 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800cb70:	2003      	movs	r0, #3
 800cb72:	f000 f9e6 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800cb76:	4928      	ldr	r1, [pc, #160]	; (800cc18 <printDaicadet+0x10c>)
 800cb78:	2004      	movs	r0, #4
 800cb7a:	f000 f9b9 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800cb7e:	79bb      	ldrb	r3, [r7, #6]
 800cb80:	3303      	adds	r3, #3
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	79fa      	ldrb	r2, [r7, #7]
 800cb86:	4611      	mov	r1, r2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 f969 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800cb8e:	2004      	movs	r0, #4
 800cb90:	f000 f9d7 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 800cb94:	79bb      	ldrb	r3, [r7, #6]
 800cb96:	3304      	adds	r3, #4
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	79fa      	ldrb	r2, [r7, #7]
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f000 f95e 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800cba4:	2002      	movs	r0, #2
 800cba6:	f000 f9cc 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 800cbaa:	79bb      	ldrb	r3, [r7, #6]
 800cbac:	3305      	adds	r3, #5
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	79fa      	ldrb	r2, [r7, #7]
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 f953 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800cbba:	2001      	movs	r0, #1
 800cbbc:	f000 f9c1 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 800cbc0:	4916      	ldr	r1, [pc, #88]	; (800cc1c <printDaicadet+0x110>)
 800cbc2:	2005      	movs	r0, #5
 800cbc4:	f000 f994 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800cbc8:	79bb      	ldrb	r3, [r7, #6]
 800cbca:	3306      	adds	r3, #6
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	79fa      	ldrb	r2, [r7, #7]
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f944 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800cbd8:	2005      	movs	r0, #5
 800cbda:	f000 f9b2 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 800cbde:	4910      	ldr	r1, [pc, #64]	; (800cc20 <printDaicadet+0x114>)
 800cbe0:	2006      	movs	r0, #6
 800cbe2:	f000 f985 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800cbe6:	79bb      	ldrb	r3, [r7, #6]
 800cbe8:	3307      	adds	r3, #7
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	79fa      	ldrb	r2, [r7, #7]
 800cbee:	4611      	mov	r1, r2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 f935 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800cbf6:	2006      	movs	r0, #6
 800cbf8:	f000 f9a3 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800cbfc:	4809      	ldr	r0, [pc, #36]	; (800cc24 <printDaicadet+0x118>)
 800cbfe:	f000 f9ad 	bl	800cf5c <HD44780_PrintStr>
}
 800cc02:	bf00      	nop
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000018 	.word	0x20000018
 800cc10:	20000020 	.word	0x20000020
 800cc14:	20000038 	.word	0x20000038
 800cc18:	20000048 	.word	0x20000048
 800cc1c:	20000078 	.word	0x20000078
 800cc20:	20000058 	.word	0x20000058
 800cc24:	08012d3c 	.word	0x08012d3c

0800cc28 <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	460a      	mov	r2, r1
 800cc32:	71fb      	strb	r3, [r7, #7]
 800cc34:	4613      	mov	r3, r2
 800cc36:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800cc38:	f000 f8fc 	bl	800ce34 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 800cc3c:	4934      	ldr	r1, [pc, #208]	; (800cd10 <printBalansi+0xe8>)
 800cc3e:	2001      	movs	r0, #1
 800cc40:	f000 f956 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800cc44:	79fa      	ldrb	r2, [r7, #7]
 800cc46:	79bb      	ldrb	r3, [r7, #6]
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 f908 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800cc50:	2001      	movs	r0, #1
 800cc52:	f000 f976 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800cc56:	492f      	ldr	r1, [pc, #188]	; (800cd14 <printBalansi+0xec>)
 800cc58:	2002      	movs	r0, #2
 800cc5a:	f000 f949 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800cc5e:	79bb      	ldrb	r3, [r7, #6]
 800cc60:	3301      	adds	r3, #1
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	79fa      	ldrb	r2, [r7, #7]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 f8f9 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800cc6e:	2002      	movs	r0, #2
 800cc70:	f000 f967 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 800cc74:	4928      	ldr	r1, [pc, #160]	; (800cd18 <printBalansi+0xf0>)
 800cc76:	2003      	movs	r0, #3
 800cc78:	f000 f93a 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800cc7c:	79bb      	ldrb	r3, [r7, #6]
 800cc7e:	3302      	adds	r3, #2
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	79fa      	ldrb	r2, [r7, #7]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 f8ea 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800cc8c:	2003      	movs	r0, #3
 800cc8e:	f000 f958 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800cc92:	2002      	movs	r0, #2
 800cc94:	f000 f955 	bl	800cf42 <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800cc98:	79bb      	ldrb	r3, [r7, #6]
 800cc9a:	3303      	adds	r3, #3
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	79fa      	ldrb	r2, [r7, #7]
 800cca0:	4611      	mov	r1, r2
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 f8dc 	bl	800ce60 <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 800cca8:	491c      	ldr	r1, [pc, #112]	; (800cd1c <printBalansi+0xf4>)
 800ccaa:	2005      	movs	r0, #5
 800ccac:	f000 f920 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800ccb0:	79bb      	ldrb	r3, [r7, #6]
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	79fa      	ldrb	r2, [r7, #7]
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 f8d0 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800ccc0:	2005      	movs	r0, #5
 800ccc2:	f000 f93e 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 800ccc6:	4916      	ldr	r1, [pc, #88]	; (800cd20 <printBalansi+0xf8>)
 800ccc8:	2006      	movs	r0, #6
 800ccca:	f000 f911 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800ccce:	79bb      	ldrb	r3, [r7, #6]
 800ccd0:	3305      	adds	r3, #5
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	79fa      	ldrb	r2, [r7, #7]
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 f8c1 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800ccde:	2006      	movs	r0, #6
 800cce0:	f000 f92f 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 800cce4:	490f      	ldr	r1, [pc, #60]	; (800cd24 <printBalansi+0xfc>)
 800cce6:	2007      	movs	r0, #7
 800cce8:	f000 f902 	bl	800cef0 <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800ccec:	79bb      	ldrb	r3, [r7, #6]
 800ccee:	3306      	adds	r3, #6
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	79fa      	ldrb	r2, [r7, #7]
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 f8b2 	bl	800ce60 <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800ccfc:	2007      	movs	r0, #7
 800ccfe:	f000 f920 	bl	800cf42 <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 800cd02:	4809      	ldr	r0, [pc, #36]	; (800cd28 <printBalansi+0x100>)
 800cd04:	f000 f92a 	bl	800cf5c <HD44780_PrintStr>
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20000030 	.word	0x20000030
 800cd14:	20000020 	.word	0x20000020
 800cd18:	20000040 	.word	0x20000040
 800cd1c:	20000000 	.word	0x20000000
 800cd20:	20000008 	.word	0x20000008
 800cd24:	20000038 	.word	0x20000038
 800cd28:	08012d50 	.word	0x08012d50

0800cd2c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800cd36:	4a38      	ldr	r2, [pc, #224]	; (800ce18 <HD44780_Init+0xec>)
 800cd38:	79fb      	ldrb	r3, [r7, #7]
 800cd3a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800cd3c:	4b37      	ldr	r3, [pc, #220]	; (800ce1c <HD44780_Init+0xf0>)
 800cd3e:	2208      	movs	r2, #8
 800cd40:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800cd42:	4b37      	ldr	r3, [pc, #220]	; (800ce20 <HD44780_Init+0xf4>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800cd48:	4b33      	ldr	r3, [pc, #204]	; (800ce18 <HD44780_Init+0xec>)
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d907      	bls.n	800cd60 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800cd50:	4b33      	ldr	r3, [pc, #204]	; (800ce20 <HD44780_Init+0xf4>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	f043 0308 	orr.w	r3, r3, #8
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	4b31      	ldr	r3, [pc, #196]	; (800ce20 <HD44780_Init+0xf4>)
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	e006      	b.n	800cd6e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800cd60:	4b2f      	ldr	r3, [pc, #188]	; (800ce20 <HD44780_Init+0xf4>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	f043 0304 	orr.w	r3, r3, #4
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	4b2d      	ldr	r3, [pc, #180]	; (800ce20 <HD44780_Init+0xf4>)
 800cd6c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800cd6e:	f000 f993 	bl	800d098 <DelayInit>
  HAL_Delay(50);
 800cd72:	2032      	movs	r0, #50	; 0x32
 800cd74:	f002 f804 	bl	800ed80 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800cd78:	4b28      	ldr	r3, [pc, #160]	; (800ce1c <HD44780_Init+0xf0>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 f951 	bl	800d024 <ExpanderWrite>
  HAL_Delay(1000);
 800cd82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd86:	f001 fffb 	bl	800ed80 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800cd8a:	2030      	movs	r0, #48	; 0x30
 800cd8c:	f000 f938 	bl	800d000 <Write4Bits>
  DelayUS(4500);
 800cd90:	f241 1094 	movw	r0, #4500	; 0x1194
 800cd94:	f000 f9a8 	bl	800d0e8 <DelayUS>

  Write4Bits(0x03 << 4);
 800cd98:	2030      	movs	r0, #48	; 0x30
 800cd9a:	f000 f931 	bl	800d000 <Write4Bits>
  DelayUS(4500);
 800cd9e:	f241 1094 	movw	r0, #4500	; 0x1194
 800cda2:	f000 f9a1 	bl	800d0e8 <DelayUS>

  Write4Bits(0x03 << 4);
 800cda6:	2030      	movs	r0, #48	; 0x30
 800cda8:	f000 f92a 	bl	800d000 <Write4Bits>
  DelayUS(4500);
 800cdac:	f241 1094 	movw	r0, #4500	; 0x1194
 800cdb0:	f000 f99a 	bl	800d0e8 <DelayUS>

  Write4Bits(0x02 << 4);
 800cdb4:	2020      	movs	r0, #32
 800cdb6:	f000 f923 	bl	800d000 <Write4Bits>
  DelayUS(100);
 800cdba:	2064      	movs	r0, #100	; 0x64
 800cdbc:	f000 f994 	bl	800d0e8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800cdc0:	4b17      	ldr	r3, [pc, #92]	; (800ce20 <HD44780_Init+0xf4>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f043 0320 	orr.w	r3, r3, #32
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 f8db 	bl	800cf86 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800cdd0:	4b14      	ldr	r3, [pc, #80]	; (800ce24 <HD44780_Init+0xf8>)
 800cdd2:	2204      	movs	r2, #4
 800cdd4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800cdd6:	f000 f875 	bl	800cec4 <HD44780_Display>
  HD44780_Clear();
 800cdda:	f000 f82b 	bl	800ce34 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800cdde:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <HD44780_Init+0xfc>)
 800cde0:	2202      	movs	r2, #2
 800cde2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800cde4:	4b10      	ldr	r3, [pc, #64]	; (800ce28 <HD44780_Init+0xfc>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f043 0304 	orr.w	r3, r3, #4
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f8c9 	bl	800cf86 <SendCommand>
  DelayUS(4500);
 800cdf4:	f241 1094 	movw	r0, #4500	; 0x1194
 800cdf8:	f000 f976 	bl	800d0e8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800cdfc:	490b      	ldr	r1, [pc, #44]	; (800ce2c <HD44780_Init+0x100>)
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f000 f876 	bl	800cef0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800ce04:	490a      	ldr	r1, [pc, #40]	; (800ce30 <HD44780_Init+0x104>)
 800ce06:	2001      	movs	r0, #1
 800ce08:	f000 f872 	bl	800cef0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800ce0c:	f000 f81d 	bl	800ce4a <HD44780_Home>
}
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	2000015b 	.word	0x2000015b
 800ce1c:	2000015c 	.word	0x2000015c
 800ce20:	20000158 	.word	0x20000158
 800ce24:	20000159 	.word	0x20000159
 800ce28:	2000015a 	.word	0x2000015a
 800ce2c:	20000088 	.word	0x20000088
 800ce30:	20000090 	.word	0x20000090

0800ce34 <HD44780_Clear>:

void HD44780_Clear()
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800ce38:	2001      	movs	r0, #1
 800ce3a:	f000 f8a4 	bl	800cf86 <SendCommand>
  DelayUS(2000);
 800ce3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ce42:	f000 f951 	bl	800d0e8 <DelayUS>
}
 800ce46:	bf00      	nop
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <HD44780_Home>:

void HD44780_Home()
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800ce4e:	2002      	movs	r0, #2
 800ce50:	f000 f899 	bl	800cf86 <SendCommand>
  DelayUS(2000);
 800ce54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ce58:	f000 f946 	bl	800d0e8 <DelayUS>
}
 800ce5c:	bf00      	nop
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800ce60:	b590      	push	{r4, r7, lr}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	460a      	mov	r2, r1
 800ce6a:	71fb      	strb	r3, [r7, #7]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800ce70:	4b12      	ldr	r3, [pc, #72]	; (800cebc <HD44780_SetCursor+0x5c>)
 800ce72:	f107 0408 	add.w	r4, r7, #8
 800ce76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800ce7c:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <HD44780_SetCursor+0x60>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	79ba      	ldrb	r2, [r7, #6]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d303      	bcc.n	800ce8e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800ce86:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <HD44780_SetCursor+0x60>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800ce8e:	79bb      	ldrb	r3, [r7, #6]
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	3318      	adds	r3, #24
 800ce94:	443b      	add	r3, r7
 800ce96:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	4413      	add	r3, r2
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	b25b      	sxtb	r3, r3
 800cea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cea8:	b25b      	sxtb	r3, r3
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	4618      	mov	r0, r3
 800ceae:	f000 f86a 	bl	800cf86 <SendCommand>
}
 800ceb2:	bf00      	nop
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd90      	pop	{r4, r7, pc}
 800ceba:	bf00      	nop
 800cebc:	08012d54 	.word	0x08012d54
 800cec0:	2000015b 	.word	0x2000015b

0800cec4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800cec8:	4b08      	ldr	r3, [pc, #32]	; (800ceec <HD44780_Display+0x28>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	f043 0304 	orr.w	r3, r3, #4
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	4b06      	ldr	r3, [pc, #24]	; (800ceec <HD44780_Display+0x28>)
 800ced4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800ced6:	4b05      	ldr	r3, [pc, #20]	; (800ceec <HD44780_Display+0x28>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f043 0308 	orr.w	r3, r3, #8
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	4618      	mov	r0, r3
 800cee2:	f000 f850 	bl	800cf86 <SendCommand>
}
 800cee6:	bf00      	nop
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20000159 	.word	0x20000159

0800cef0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	4603      	mov	r3, r0
 800cef8:	6039      	str	r1, [r7, #0]
 800cefa:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	f003 0307 	and.w	r3, r3, #7
 800cf02:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	b25b      	sxtb	r3, r3
 800cf0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf0e:	b25b      	sxtb	r3, r3
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f837 	bl	800cf86 <SendCommand>
  for (int i=0; i<8; i++)
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	e009      	b.n	800cf32 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	4413      	add	r3, r2
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 f83b 	bl	800cfa2 <SendChar>
  for (int i=0; i<8; i++)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	60fb      	str	r3, [r7, #12]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b07      	cmp	r3, #7
 800cf36:	ddf2      	ble.n	800cf1e <HD44780_CreateSpecialChar+0x2e>
  }
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b082      	sub	sp, #8
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	4603      	mov	r3, r0
 800cf4a:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 f827 	bl	800cfa2 <SendChar>
}
 800cf54:	bf00      	nop
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800cf64:	e006      	b.n	800cf74 <HD44780_PrintStr+0x18>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 f817 	bl	800cfa2 <SendChar>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1f4      	bne.n	800cf66 <HD44780_PrintStr+0xa>
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b082      	sub	sp, #8
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	2100      	movs	r1, #0
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 f812 	bl	800cfbe <Send>
}
 800cf9a:	bf00      	nop
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <SendChar>:

static void SendChar(uint8_t ch)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	2101      	movs	r1, #1
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 f804 	bl	800cfbe <Send>
}
 800cfb6:	bf00      	nop
 800cfb8:	3708      	adds	r7, #8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	460a      	mov	r2, r1
 800cfc8:	71fb      	strb	r3, [r7, #7]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	f023 030f 	bic.w	r3, r3, #15
 800cfd4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	011b      	lsls	r3, r3, #4
 800cfda:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800cfdc:	7bfa      	ldrb	r2, [r7, #15]
 800cfde:	79bb      	ldrb	r3, [r7, #6]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 f80b 	bl	800d000 <Write4Bits>
  Write4Bits((lownib)|mode);
 800cfea:	7bba      	ldrb	r2, [r7, #14]
 800cfec:	79bb      	ldrb	r3, [r7, #6]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 f804 	bl	800d000 <Write4Bits>
}
 800cff8:	bf00      	nop
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 f809 	bl	800d024 <ExpanderWrite>
  PulseEnable(value);
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	4618      	mov	r0, r3
 800d016:	f000 f821 	bl	800d05c <PulseEnable>
}
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af02      	add	r7, sp, #8
 800d02a:	4603      	mov	r3, r0
 800d02c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800d02e:	4b09      	ldr	r3, [pc, #36]	; (800d054 <ExpanderWrite+0x30>)
 800d030:	781a      	ldrb	r2, [r3, #0]
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	4313      	orrs	r3, r2
 800d036:	b2db      	uxtb	r3, r3
 800d038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800d03a:	f107 020f 	add.w	r2, r7, #15
 800d03e:	230a      	movs	r3, #10
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	2301      	movs	r3, #1
 800d044:	214e      	movs	r1, #78	; 0x4e
 800d046:	4804      	ldr	r0, [pc, #16]	; (800d058 <ExpanderWrite+0x34>)
 800d048:	f002 fb78 	bl	800f73c <HAL_I2C_Master_Transmit>
}
 800d04c:	bf00      	nop
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	2000015c 	.word	0x2000015c
 800d058:	2000035c 	.word	0x2000035c

0800d05c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	4603      	mov	r3, r0
 800d064:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	f043 0304 	orr.w	r3, r3, #4
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff ffd8 	bl	800d024 <ExpanderWrite>
  DelayUS(20);
 800d074:	2014      	movs	r0, #20
 800d076:	f000 f837 	bl	800d0e8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	f023 0304 	bic.w	r3, r3, #4
 800d080:	b2db      	uxtb	r3, r3
 800d082:	4618      	mov	r0, r3
 800d084:	f7ff ffce 	bl	800d024 <ExpanderWrite>
  DelayUS(20);
 800d088:	2014      	movs	r0, #20
 800d08a:	f000 f82d 	bl	800d0e8 <DelayUS>
}
 800d08e:	bf00      	nop
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <DelayInit>:

static void DelayInit(void)
{
 800d098:	b480      	push	{r7}
 800d09a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800d09c:	4b10      	ldr	r3, [pc, #64]	; (800d0e0 <DelayInit+0x48>)
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	4a0f      	ldr	r2, [pc, #60]	; (800d0e0 <DelayInit+0x48>)
 800d0a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0a6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800d0a8:	4b0d      	ldr	r3, [pc, #52]	; (800d0e0 <DelayInit+0x48>)
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	4a0c      	ldr	r2, [pc, #48]	; (800d0e0 <DelayInit+0x48>)
 800d0ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0b2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800d0b4:	4b0b      	ldr	r3, [pc, #44]	; (800d0e4 <DelayInit+0x4c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a0a      	ldr	r2, [pc, #40]	; (800d0e4 <DelayInit+0x4c>)
 800d0ba:	f023 0301 	bic.w	r3, r3, #1
 800d0be:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800d0c0:	4b08      	ldr	r3, [pc, #32]	; (800d0e4 <DelayInit+0x4c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <DelayInit+0x4c>)
 800d0c6:	f043 0301 	orr.w	r3, r3, #1
 800d0ca:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800d0cc:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <DelayInit+0x4c>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800d0d2:	bf00      	nop
  __ASM volatile ("NOP");
 800d0d4:	bf00      	nop
  __ASM volatile ("NOP");
 800d0d6:	bf00      	nop
}
 800d0d8:	bf00      	nop
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bc80      	pop	{r7}
 800d0de:	4770      	bx	lr
 800d0e0:	e000edf0 	.word	0xe000edf0
 800d0e4:	e0001000 	.word	0xe0001000

0800d0e8 <DelayUS>:

static void DelayUS(uint32_t us) {
 800d0e8:	b480      	push	{r7}
 800d0ea:	b087      	sub	sp, #28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800d0f0:	4b0d      	ldr	r3, [pc, #52]	; (800d128 <DelayUS+0x40>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a0d      	ldr	r2, [pc, #52]	; (800d12c <DelayUS+0x44>)
 800d0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0fa:	0c9a      	lsrs	r2, r3, #18
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <DelayUS+0x48>)
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800d10a:	4b09      	ldr	r3, [pc, #36]	; (800d130 <DelayUS+0x48>)
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d8f6      	bhi.n	800d10a <DelayUS+0x22>
}
 800d11c:	bf00      	nop
 800d11e:	bf00      	nop
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	bc80      	pop	{r7}
 800d126:	4770      	bx	lr
 800d128:	200000cc 	.word	0x200000cc
 800d12c:	431bde83 	.word	0x431bde83
 800d130:	e0001000 	.word	0xe0001000

0800d134 <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]


	if(count >= 124){
 800d13c:	4b11      	ldr	r3, [pc, #68]	; (800d184 <HAL_UART_RxCpltCallback+0x50>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b7b      	cmp	r3, #123	; 0x7b
 800d142:	dd02      	ble.n	800d14a <HAL_UART_RxCpltCallback+0x16>
		count = 0;
 800d144:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <HAL_UART_RxCpltCallback+0x50>)
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]
	}

	if(buffer[count] != '!'){
 800d14a:	4b0e      	ldr	r3, [pc, #56]	; (800d184 <HAL_UART_RxCpltCallback+0x50>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a0e      	ldr	r2, [pc, #56]	; (800d188 <HAL_UART_RxCpltCallback+0x54>)
 800d150:	5cd3      	ldrb	r3, [r2, r3]
 800d152:	2b21      	cmp	r3, #33	; 0x21
 800d154:	d00e      	beq.n	800d174 <HAL_UART_RxCpltCallback+0x40>

		count++;
 800d156:	4b0b      	ldr	r3, [pc, #44]	; (800d184 <HAL_UART_RxCpltCallback+0x50>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	3301      	adds	r3, #1
 800d15c:	4a09      	ldr	r2, [pc, #36]	; (800d184 <HAL_UART_RxCpltCallback+0x50>)
 800d15e:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d160:	4b08      	ldr	r3, [pc, #32]	; (800d184 <HAL_UART_RxCpltCallback+0x50>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a08      	ldr	r2, [pc, #32]	; (800d188 <HAL_UART_RxCpltCallback+0x54>)
 800d166:	4413      	add	r3, r2
 800d168:	2201      	movs	r2, #1
 800d16a:	4619      	mov	r1, r3
 800d16c:	4807      	ldr	r0, [pc, #28]	; (800d18c <HAL_UART_RxCpltCallback+0x58>)
 800d16e:	f004 fac0 	bl	80116f2 <HAL_UART_Receive_IT>
	}
	else{
		readSatus = 1;
	}

}
 800d172:	e002      	b.n	800d17a <HAL_UART_RxCpltCallback+0x46>
		readSatus = 1;
 800d174:	4b06      	ldr	r3, [pc, #24]	; (800d190 <HAL_UART_RxCpltCallback+0x5c>)
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
}
 800d17a:	bf00      	nop
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	20000358 	.word	0x20000358
 800d188:	20000274 	.word	0x20000274
 800d18c:	20000498 	.word	0x20000498
 800d190:	20000171 	.word	0x20000171

0800d194 <convertNumberToCharArray>:

char* convertNumberToCharArray(uint64_t number) {
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af00      	add	r7, sp, #0
 800d19a:	e9c7 0100 	strd	r0, r1, [r7]
    // Count the number of digits in the number
    uint64_t temp = number;
 800d19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int numDigits = 1;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	617b      	str	r3, [r7, #20]
    while (temp /= 10) {
 800d1aa:	e002      	b.n	800d1b2 <convertNumberToCharArray+0x1e>
        numDigits++;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	617b      	str	r3, [r7, #20]
    while (temp /= 10) {
 800d1b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1b6:	f04f 020a 	mov.w	r2, #10
 800d1ba:	f04f 0300 	mov.w	r3, #0
 800d1be:	f7fe ffcd 	bl	800c15c <__aeabi_uldivmod>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d1ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	d1ec      	bne.n	800d1ac <convertNumberToCharArray+0x18>
    }

    // Allocate memory for the character array (+1 for null-terminator)
    char* buffer = (char*)malloc((numDigits + 1) * sizeof(char));
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f005 f85e 	bl	8012298 <malloc>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	60fb      	str	r3, [r7, #12]
    if (buffer == NULL) {
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <convertNumberToCharArray+0x56>
        // Error in memory allocation
        return NULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e02b      	b.n	800d242 <convertNumberToCharArray+0xae>
    }

    // Convert each digit to its corresponding character representation
    int i = numDigits - 1;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]
    while (number != 0) {
 800d1f0:	e01d      	b.n	800d22e <convertNumberToCharArray+0x9a>
        buffer[i--] = '0' + (number % 10);
 800d1f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1f6:	f04f 020a 	mov.w	r2, #10
 800d1fa:	f04f 0300 	mov.w	r3, #0
 800d1fe:	f7fe ffad 	bl	800c15c <__aeabi_uldivmod>
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	1e59      	subs	r1, r3, #1
 800d208:	6139      	str	r1, [r7, #16]
 800d20a:	4619      	mov	r1, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	440b      	add	r3, r1
 800d210:	3230      	adds	r2, #48	; 0x30
 800d212:	b2d2      	uxtb	r2, r2
 800d214:	701a      	strb	r2, [r3, #0]
        number /= 10;
 800d216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d21a:	f04f 020a 	mov.w	r2, #10
 800d21e:	f04f 0300 	mov.w	r3, #0
 800d222:	f7fe ff9b 	bl	800c15c <__aeabi_uldivmod>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	e9c7 2300 	strd	r2, r3, [r7]
    while (number != 0) {
 800d22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d232:	4313      	orrs	r3, r2
 800d234:	d1dd      	bne.n	800d1f2 <convertNumberToCharArray+0x5e>
    }

    buffer[numDigits] = '\0'; // Null-terminate the character array
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	4413      	add	r3, r2
 800d23c:	2200      	movs	r2, #0
 800d23e:	701a      	strb	r2, [r3, #0]

    return buffer;
 800d240:	68fb      	ldr	r3, [r7, #12]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3720      	adds	r7, #32
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a0d      	ldr	r2, [pc, #52]	; (800d290 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d114      	bne.n	800d288 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(TIM_Count>5){
 800d25e:	4b0d      	ldr	r3, [pc, #52]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2b05      	cmp	r3, #5
 800d264:	d906      	bls.n	800d274 <HAL_TIM_PeriodElapsedCallback+0x28>
			TIM_Count = 0;
 800d266:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d268:	2200      	movs	r2, #0
 800d26a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 800d26c:	480a      	ldr	r0, [pc, #40]	; (800d298 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800d26e:	f003 fde3 	bl	8010e38 <HAL_TIM_Base_Stop_IT>
//			TIM_Count1++;
//		}
//
//	}

}
 800d272:	e009      	b.n	800d288 <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800d274:	2101      	movs	r1, #1
 800d276:	4809      	ldr	r0, [pc, #36]	; (800d29c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d278:	f002 f902 	bl	800f480 <HAL_GPIO_TogglePin>
			TIM_Count++;
 800d27c:	4b05      	ldr	r3, [pc, #20]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	3301      	adds	r3, #1
 800d282:	b2da      	uxtb	r2, r3
 800d284:	4b03      	ldr	r3, [pc, #12]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d286:	701a      	strb	r2, [r3, #0]
}
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	40012c00 	.word	0x40012c00
 800d294:	20000170 	.word	0x20000170
 800d298:	20000408 	.word	0x20000408
 800d29c:	40010c00 	.word	0x40010c00

0800d2a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b098      	sub	sp, #96	; 0x60
 800d2a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d2a6:	b672      	cpsid	i
}
 800d2a8:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x800C000;
 800d2aa:	4bc2      	ldr	r3, [pc, #776]	; (800d5b4 <main+0x314>)
 800d2ac:	4ac2      	ldr	r2, [pc, #776]	; (800d5b8 <main+0x318>)
 800d2ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800d2b0:	b662      	cpsie	i
}
 800d2b2:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d2b4:	f001 fce4 	bl	800ec80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d2b8:	f000 fa7a 	bl	800d7b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d2bc:	f000 fc16 	bl	800daec <MX_GPIO_Init>
  MX_I2C1_Init();
 800d2c0:	f000 fabc 	bl	800d83c <MX_I2C1_Init>
  MX_SPI1_Init();
 800d2c4:	f000 fae8 	bl	800d898 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800d2c8:	f000 fbbc 	bl	800da44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d2cc:	f000 fbe4 	bl	800da98 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800d2d0:	f000 fb18 	bl	800d904 <MX_TIM1_Init>
  MX_TIM2_Init();
 800d2d4:	f000 fb68 	bl	800d9a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800d2d8:	2002      	movs	r0, #2
 800d2da:	f7ff fd27 	bl	800cd2c <HD44780_Init>

  MFRC522_Init();
 800d2de:	f000 ffc2 	bl	800e266 <MFRC522_Init>

	uint8_t cardRead = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	int CardTime;


  	uint32_t version = *(__IO uint32_t *)versionAdress; // for version check
 800d2e8:	4bb4      	ldr	r3, [pc, #720]	; (800d5bc <main+0x31c>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  	uint64_t terminalID = *(uint64_t *)currentTerminalADRR;
 800d2ee:	4bb4      	ldr	r3, [pc, #720]	; (800d5c0 <main+0x320>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  	char * terminalStr = convertNumberToCharArray(terminalID);
 800d2f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d2fc:	f7ff ff4a 	bl	800d194 <convertNumberToCharArray>
 800d300:	63f8      	str	r0, [r7, #60]	; 0x3c

    sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"%s\",\"firmwareVersion\":%ld}}",terminalStr, version);
 800d302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d306:	49af      	ldr	r1, [pc, #700]	; (800d5c4 <main+0x324>)
 800d308:	48af      	ldr	r0, [pc, #700]	; (800d5c8 <main+0x328>)
 800d30a:	f005 f8cf 	bl	80124ac <siprintf>


  	HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d30e:	4baf      	ldr	r3, [pc, #700]	; (800d5cc <main+0x32c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4aaf      	ldr	r2, [pc, #700]	; (800d5d0 <main+0x330>)
 800d314:	4413      	add	r3, r2
 800d316:	2201      	movs	r2, #1
 800d318:	4619      	mov	r1, r3
 800d31a:	48ae      	ldr	r0, [pc, #696]	; (800d5d4 <main+0x334>)
 800d31c:	f004 f9e9 	bl	80116f2 <HAL_UART_Receive_IT>
  	T = HAL_GetTick();
 800d320:	f001 fd24 	bl	800ed6c <HAL_GetTick>
 800d324:	4603      	mov	r3, r0
 800d326:	4aac      	ldr	r2, [pc, #688]	; (800d5d8 <main+0x338>)
 800d328:	6013      	str	r3, [r2, #0]
  	 printMiadetBarati(0, 2);
 800d32a:	2102      	movs	r1, #2
 800d32c:	2000      	movs	r0, #0
 800d32e:	f7ff f9ff 	bl	800c730 <printMiadetBarati>
  	 led(1);
 800d332:	2001      	movs	r0, #1
 800d334:	f001 f942 	bl	800e5bc <led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cardRead == 1){
 800d338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d117      	bne.n	800d370 <main+0xd0>
		  if(HAL_GetTick() - CardTime >= 20000){
 800d340:	f001 fd14 	bl	800ed6c <HAL_GetTick>
 800d344:	4602      	mov	r2, r0
 800d346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d34e:	4293      	cmp	r3, r2
 800d350:	d90e      	bls.n	800d370 <main+0xd0>
			  printShecdoma(0, 4);
 800d352:	2104      	movs	r1, #4
 800d354:	2000      	movs	r0, #0
 800d356:	f7ff fb49 	bl	800c9ec <printShecdoma>
			  HAL_Delay(3000);
 800d35a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d35e:	f001 fd0f 	bl	800ed80 <HAL_Delay>
			  printMiadetBarati(0, 2);
 800d362:	2102      	movs	r1, #2
 800d364:	2000      	movs	r0, #0
 800d366:	f7ff f9e3 	bl	800c730 <printMiadetBarati>
			  cardRead = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		  }

	  }
	  if(HAL_GetTick() - counter >= 1000){
 800d370:	f001 fcfc 	bl	800ed6c <HAL_GetTick>
 800d374:	4602      	mov	r2, r0
 800d376:	4b99      	ldr	r3, [pc, #612]	; (800d5dc <main+0x33c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d380:	d304      	bcc.n	800d38c <main+0xec>
		  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 800d382:	2200      	movs	r2, #0
 800d384:	2102      	movs	r1, #2
 800d386:	4896      	ldr	r0, [pc, #600]	; (800d5e0 <main+0x340>)
 800d388:	f002 f862 	bl	800f450 <HAL_GPIO_WritePin>
	  }
	  if(HAL_GetTick() - T >= 2*(60000) && cardRead == 0){
 800d38c:	f001 fcee 	bl	800ed6c <HAL_GetTick>
 800d390:	4602      	mov	r2, r0
 800d392:	4b91      	ldr	r3, [pc, #580]	; (800d5d8 <main+0x338>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	4a92      	ldr	r2, [pc, #584]	; (800d5e4 <main+0x344>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d927      	bls.n	800d3ee <main+0x14e>
 800d39e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d123      	bne.n	800d3ee <main+0x14e>

		  if(temp >= check)jumpToAddress(resetAddress); //restart
 800d3a6:	4b90      	ldr	r3, [pc, #576]	; (800d5e8 <main+0x348>)
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	4b90      	ldr	r3, [pc, #576]	; (800d5ec <main+0x34c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	db03      	blt.n	800d3ba <main+0x11a>
 800d3b2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800d3b6:	f000 fc20 	bl	800dbfa <jumpToAddress>
		  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 800d3ba:	4883      	ldr	r0, [pc, #524]	; (800d5c8 <main+0x328>)
 800d3bc:	f7fe fec6 	bl	800c14c <strlen>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 fc36 	bl	800dc34 <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 800d3c8:	487f      	ldr	r0, [pc, #508]	; (800d5c8 <main+0x328>)
 800d3ca:	f7fe febf 	bl	800c14c <strlen>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	2332      	movs	r3, #50	; 0x32
 800d3d4:	497c      	ldr	r1, [pc, #496]	; (800d5c8 <main+0x328>)
 800d3d6:	487f      	ldr	r0, [pc, #508]	; (800d5d4 <main+0x334>)
 800d3d8:	f004 f908 	bl	80115ec <HAL_UART_Transmit>
		  T = HAL_GetTick();
 800d3dc:	f001 fcc6 	bl	800ed6c <HAL_GetTick>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4a7d      	ldr	r2, [pc, #500]	; (800d5d8 <main+0x338>)
 800d3e4:	6013      	str	r3, [r2, #0]
		  temp = check;
 800d3e6:	4b81      	ldr	r3, [pc, #516]	; (800d5ec <main+0x34c>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a7f      	ldr	r2, [pc, #508]	; (800d5e8 <main+0x348>)
 800d3ec:	6013      	str	r3, [r2, #0]
	  }

	  if(readSatus){
 800d3ee:	4b80      	ldr	r3, [pc, #512]	; (800d5f0 <main+0x350>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 8166 	beq.w	800d6c4 <main+0x424>
		  int Status = takeStatus(buffer, count);
 800d3f8:	4b74      	ldr	r3, [pc, #464]	; (800d5cc <main+0x32c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4874      	ldr	r0, [pc, #464]	; (800d5d0 <main+0x330>)
 800d400:	f001 fb9a 	bl	800eb38 <takeStatus>
 800d404:	63b8      	str	r0, [r7, #56]	; 0x38
		  uint8_t dispData[50];

		  switch(Status){
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d40c:	f280 8128 	bge.w	800d660 <main+0x3c0>
 800d410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d412:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800d416:	dc0d      	bgt.n	800d434 <main+0x194>
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	2bca      	cmp	r3, #202	; 0xca
 800d41c:	d026      	beq.n	800d46c <main+0x1cc>
 800d41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d420:	2bca      	cmp	r3, #202	; 0xca
 800d422:	f300 811d 	bgt.w	800d660 <main+0x3c0>
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	2bc8      	cmp	r3, #200	; 0xc8
 800d42a:	d04b      	beq.n	800d4c4 <main+0x224>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	2bc9      	cmp	r3, #201	; 0xc9
 800d430:	d04e      	beq.n	800d4d0 <main+0x230>
 800d432:	e115      	b.n	800d660 <main+0x3c0>
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800d43a:	2b08      	cmp	r3, #8
 800d43c:	f200 8110 	bhi.w	800d660 <main+0x3c0>
 800d440:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <main+0x1a8>)
 800d442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d446:	bf00      	nop
 800d448:	0800d553 	.word	0x0800d553
 800d44c:	0800d661 	.word	0x0800d661
 800d450:	0800d523 	.word	0x0800d523
 800d454:	0800d661 	.word	0x0800d661
 800d458:	0800d661 	.word	0x0800d661
 800d45c:	0800d583 	.word	0x0800d583
 800d460:	0800d601 	.word	0x0800d601
 800d464:	0800d661 	.word	0x0800d661
 800d468:	0800d631 	.word	0x0800d631
		  	  	case 202:
		  	  		//HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
		  	  		//AppruveSound();
		  	  	    HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 800d46c:	2201      	movs	r2, #1
 800d46e:	2102      	movs	r1, #2
 800d470:	485b      	ldr	r0, [pc, #364]	; (800d5e0 <main+0x340>)
 800d472:	f001 ffed 	bl	800f450 <HAL_GPIO_WritePin>

		  	  	    counter = HAL_GetTick();
 800d476:	f001 fc79 	bl	800ed6c <HAL_GetTick>
 800d47a:	4603      	mov	r3, r0
 800d47c:	4a57      	ldr	r2, [pc, #348]	; (800d5dc <main+0x33c>)
 800d47e:	6013      	str	r3, [r2, #0]

		  	  	    HAL_TIM_Base_Start_IT(&htim1);
 800d480:	485c      	ldr	r0, [pc, #368]	; (800d5f4 <main+0x354>)
 800d482:	f003 fc87 	bl	8010d94 <HAL_TIM_Base_Start_IT>
		  	  	    prinWarmateba(0, 3);
 800d486:	2103      	movs	r1, #3
 800d488:	2000      	movs	r0, #0
 800d48a:	f7ff fa21 	bl	800c8d0 <prinWarmateba>
		  	  		insert(postData);
 800d48e:	485a      	ldr	r0, [pc, #360]	; (800d5f8 <main+0x358>)
 800d490:	f001 fb0c 	bl	800eaac <insert>
		  	  		LENGTH = strlen((char*)postData);
 800d494:	4858      	ldr	r0, [pc, #352]	; (800d5f8 <main+0x358>)
 800d496:	f7fe fe59 	bl	800c14c <strlen>
 800d49a:	4603      	mov	r3, r0
 800d49c:	461a      	mov	r2, r3
 800d49e:	4b57      	ldr	r3, [pc, #348]	; (800d5fc <main+0x35c>)
 800d4a0:	601a      	str	r2, [r3, #0]
					MQTTPubToTopic(LENGTH);
 800d4a2:	4b56      	ldr	r3, [pc, #344]	; (800d5fc <main+0x35c>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fbc4 	bl	800dc34 <MQTTPubToTopic>
					HAL_Delay(50);
 800d4ac:	2032      	movs	r0, #50	; 0x32
 800d4ae:	f001 fc67 	bl	800ed80 <HAL_Delay>
					HAL_UART_Transmit(&huart1, postData, LENGTH, 10);
 800d4b2:	4b52      	ldr	r3, [pc, #328]	; (800d5fc <main+0x35c>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	230a      	movs	r3, #10
 800d4ba:	494f      	ldr	r1, [pc, #316]	; (800d5f8 <main+0x358>)
 800d4bc:	4845      	ldr	r0, [pc, #276]	; (800d5d4 <main+0x334>)
 800d4be:	f004 f895 	bl	80115ec <HAL_UART_Transmit>
		  	  		break;
 800d4c2:	e0e5      	b.n	800d690 <main+0x3f0>
		  	  	case 200:
		  	  		//AppruveSound();
		  	  		check++;
 800d4c4:	4b49      	ldr	r3, [pc, #292]	; (800d5ec <main+0x34c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	4a48      	ldr	r2, [pc, #288]	; (800d5ec <main+0x34c>)
 800d4cc:	6013      	str	r3, [r2, #0]
		  	  		break;
 800d4ce:	e0df      	b.n	800d690 <main+0x3f0>
		  	  	case 201:
		  	  		//HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);

					takeData(buffer, count, dispData);
 800d4d0:	4b3e      	ldr	r3, [pc, #248]	; (800d5cc <main+0x32c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	1d3a      	adds	r2, r7, #4
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	483d      	ldr	r0, [pc, #244]	; (800d5d0 <main+0x330>)
 800d4da:	f001 fa9b 	bl	800ea14 <takeData>
					printBalansi(0, 0);
 800d4de:	2100      	movs	r1, #0
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	f7ff fba1 	bl	800cc28 <printBalansi>
					HD44780_PrintStr((char*) dispData);
 800d4e6:	1d3b      	adds	r3, r7, #4
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff fd37 	bl	800cf5c <HD44780_PrintStr>
					HAL_Delay(1000);
 800d4ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d4f2:	f001 fc45 	bl	800ed80 <HAL_Delay>
					HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	2102      	movs	r1, #2
 800d4fa:	4839      	ldr	r0, [pc, #228]	; (800d5e0 <main+0x340>)
 800d4fc:	f001 ffa8 	bl	800f450 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 800d500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d504:	f001 fc3c 	bl	800ed80 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d508:	2102      	movs	r1, #2
 800d50a:	2000      	movs	r0, #0
 800d50c:	f7ff f910 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					memset(postData, 0, sizeof(postData));
 800d516:	22ff      	movs	r2, #255	; 0xff
 800d518:	2100      	movs	r1, #0
 800d51a:	4837      	ldr	r0, [pc, #220]	; (800d5f8 <main+0x358>)
 800d51c:	f004 fed2 	bl	80122c4 <memset>
					break;
 800d520:	e0b6      	b.n	800d690 <main+0x3f0>
				case 293:

					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d522:	f7ff fc87 	bl	800ce34 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d526:	2100      	movs	r1, #0
 800d528:	2000      	movs	r0, #0
 800d52a:	f7ff fc99 	bl	800ce60 <HD44780_SetCursor>
					printUcxoBaratia(0,0);
 800d52e:	2100      	movs	r1, #0
 800d530:	2000      	movs	r0, #0
 800d532:	f7fe ff97 	bl	800c464 <printUcxoBaratia>
					ErrorSound();
 800d536:	f001 fa39 	bl	800e9ac <ErrorSound>
					HAL_Delay(1000);
 800d53a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d53e:	f001 fc1f 	bl	800ed80 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d542:	2102      	movs	r1, #2
 800d544:	2000      	movs	r0, #0
 800d546:	f7ff f8f3 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800d550:	e09e      	b.n	800d690 <main+0x3f0>
				case 291:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d552:	f7ff fc6f 	bl	800ce34 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d556:	2100      	movs	r1, #0
 800d558:	2000      	movs	r0, #0
 800d55a:	f7ff fc81 	bl	800ce60 <HD44780_SetCursor>
					printBlansiAraa(0, 0);
 800d55e:	2100      	movs	r1, #0
 800d560:	2000      	movs	r0, #0
 800d562:	f7ff f839 	bl	800c5d8 <printBlansiAraa>
					ErrorSound();
 800d566:	f001 fa21 	bl	800e9ac <ErrorSound>
					HAL_Delay(1000);
 800d56a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d56e:	f001 fc07 	bl	800ed80 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d572:	2102      	movs	r1, #2
 800d574:	2000      	movs	r0, #0
 800d576:	f7ff f8db 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800d580:	e086      	b.n	800d690 <main+0x3f0>
				case 296:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d582:	f7ff fc57 	bl	800ce34 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d586:	2100      	movs	r1, #0
 800d588:	2000      	movs	r0, #0
 800d58a:	f7ff fc69 	bl	800ce60 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d58e:	1d3b      	adds	r3, r7, #4
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fce3 	bl	800cf5c <HD44780_PrintStr>
					ErrorSound();
 800d596:	f001 fa09 	bl	800e9ac <ErrorSound>
					HAL_Delay(3000);
 800d59a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d59e:	f001 fbef 	bl	800ed80 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d5a2:	2102      	movs	r1, #2
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f7ff f8c3 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800d5b0:	e06e      	b.n	800d690 <main+0x3f0>
 800d5b2:	bf00      	nop
 800d5b4:	e000ed00 	.word	0xe000ed00
 800d5b8:	0800c000 	.word	0x0800c000
 800d5bc:	0800bff0 	.word	0x0800bff0
 800d5c0:	0800b000 	.word	0x0800b000
 800d5c4:	08012d94 	.word	0x08012d94
 800d5c8:	200002f4 	.word	0x200002f4
 800d5cc:	20000358 	.word	0x20000358
 800d5d0:	20000274 	.word	0x20000274
 800d5d4:	20000498 	.word	0x20000498
 800d5d8:	20000160 	.word	0x20000160
 800d5dc:	20000164 	.word	0x20000164
 800d5e0:	40010c00 	.word	0x40010c00
 800d5e4:	0001d4bf 	.word	0x0001d4bf
 800d5e8:	20000168 	.word	0x20000168
 800d5ec:	20000098 	.word	0x20000098
 800d5f0:	20000171 	.word	0x20000171
 800d5f4:	20000408 	.word	0x20000408
 800d5f8:	20000174 	.word	0x20000174
 800d5fc:	2000016c 	.word	0x2000016c
				case 297:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d600:	f7ff fc18 	bl	800ce34 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d604:	2100      	movs	r1, #0
 800d606:	2000      	movs	r0, #0
 800d608:	f7ff fc2a 	bl	800ce60 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d60c:	1d3b      	adds	r3, r7, #4
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff fca4 	bl	800cf5c <HD44780_PrintStr>
					ErrorSound();
 800d614:	f001 f9ca 	bl	800e9ac <ErrorSound>
					HAL_Delay(3000);
 800d618:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d61c:	f001 fbb0 	bl	800ed80 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d620:	2102      	movs	r1, #2
 800d622:	2000      	movs	r0, #0
 800d624:	f7ff f884 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800d62e:	e02f      	b.n	800d690 <main+0x3f0>
				case 299:
					//takeData(buffer, count, dispData);
					HD44780_Clear();
 800d630:	f7ff fc00 	bl	800ce34 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d634:	2100      	movs	r1, #0
 800d636:	2000      	movs	r0, #0
 800d638:	f7ff fc12 	bl	800ce60 <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d63c:	1d3b      	adds	r3, r7, #4
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff fc8c 	bl	800cf5c <HD44780_PrintStr>
					ErrorSound();
 800d644:	f001 f9b2 	bl	800e9ac <ErrorSound>
					HAL_Delay(3000);
 800d648:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d64c:	f001 fb98 	bl	800ed80 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d650:	2102      	movs	r1, #2
 800d652:	2000      	movs	r0, #0
 800d654:	f7ff f86c 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800d65e:	e017      	b.n	800d690 <main+0x3f0>
				default:
					memset(buffer, 0, sizeof(buffer));
 800d660:	2280      	movs	r2, #128	; 0x80
 800d662:	2100      	movs	r1, #0
 800d664:	484c      	ldr	r0, [pc, #304]	; (800d798 <main+0x4f8>)
 800d666:	f004 fe2d 	bl	80122c4 <memset>
				    memset(dispData, 0, sizeof(dispData));
 800d66a:	1d3b      	adds	r3, r7, #4
 800d66c:	2232      	movs	r2, #50	; 0x32
 800d66e:	2100      	movs	r1, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f004 fe27 	bl	80122c4 <memset>
					readSatus = 0;
 800d676:	4b49      	ldr	r3, [pc, #292]	; (800d79c <main+0x4fc>)
 800d678:	2200      	movs	r2, #0
 800d67a:	701a      	strb	r2, [r3, #0]
					count = 0;
 800d67c:	4b48      	ldr	r3, [pc, #288]	; (800d7a0 <main+0x500>)
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
					printMiadetBarati(0, 2);
 800d682:	2102      	movs	r1, #2
 800d684:	2000      	movs	r0, #0
 800d686:	f7ff f853 	bl	800c730 <printMiadetBarati>
					cardRead = 0;
 800d68a:	2300      	movs	r3, #0
 800d68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		  }
		  memset(buffer, 0, sizeof(buffer));
 800d690:	2280      	movs	r2, #128	; 0x80
 800d692:	2100      	movs	r1, #0
 800d694:	4840      	ldr	r0, [pc, #256]	; (800d798 <main+0x4f8>)
 800d696:	f004 fe15 	bl	80122c4 <memset>
		  memset(dispData, 0, sizeof(dispData));
 800d69a:	1d3b      	adds	r3, r7, #4
 800d69c:	2232      	movs	r2, #50	; 0x32
 800d69e:	2100      	movs	r1, #0
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f004 fe0f 	bl	80122c4 <memset>
		  readSatus = 0;
 800d6a6:	4b3d      	ldr	r3, [pc, #244]	; (800d79c <main+0x4fc>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	701a      	strb	r2, [r3, #0]
		  count = 0;
 800d6ac:	4b3c      	ldr	r3, [pc, #240]	; (800d7a0 <main+0x500>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d6b2:	4b3b      	ldr	r3, [pc, #236]	; (800d7a0 <main+0x500>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a38      	ldr	r2, [pc, #224]	; (800d798 <main+0x4f8>)
 800d6b8:	4413      	add	r3, r2
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	4619      	mov	r1, r3
 800d6be:	4839      	ldr	r0, [pc, #228]	; (800d7a4 <main+0x504>)
 800d6c0:	f004 f817 	bl	80116f2 <HAL_UART_Receive_IT>
		 }

	 uint8_t catStat = cardOperationWithBlockedSector(postData);
 800d6c4:	4838      	ldr	r0, [pc, #224]	; (800d7a8 <main+0x508>)
 800d6c6:	f000 fe0f 	bl	800e2e8 <cardOperationWithBlockedSector>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if(catStat == 1 && cardRead == 0){
 800d6d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	f47f ae2f 	bne.w	800d338 <main+0x98>
 800d6da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f47f ae2a 	bne.w	800d338 <main+0x98>
		 uint8_t bpundCount = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 uint8_t postEnable = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

		 LENGTH = strlen((char*)postData);
 800d6f0:	482d      	ldr	r0, [pc, #180]	; (800d7a8 <main+0x508>)
 800d6f2:	f7fe fd2b 	bl	800c14c <strlen>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4b2c      	ldr	r3, [pc, #176]	; (800d7ac <main+0x50c>)
 800d6fc:	601a      	str	r2, [r3, #0]

		 for(int i = 0; i< LENGTH+5; i++){
 800d6fe:	2300      	movs	r3, #0
 800d700:	653b      	str	r3, [r7, #80]	; 0x50
 800d702:	e013      	b.n	800d72c <main+0x48c>

			 if(postData[i]== '{' || postData[i] == '}'){
 800d704:	4a28      	ldr	r2, [pc, #160]	; (800d7a8 <main+0x508>)
 800d706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d708:	4413      	add	r3, r2
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b7b      	cmp	r3, #123	; 0x7b
 800d70e:	d005      	beq.n	800d71c <main+0x47c>
 800d710:	4a25      	ldr	r2, [pc, #148]	; (800d7a8 <main+0x508>)
 800d712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d714:	4413      	add	r3, r2
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	2b7d      	cmp	r3, #125	; 0x7d
 800d71a:	d104      	bne.n	800d726 <main+0x486>
				 bpundCount++;
 800d71c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d720:	3301      	adds	r3, #1
 800d722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 for(int i = 0; i< LENGTH+5; i++){
 800d726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d728:	3301      	adds	r3, #1
 800d72a:	653b      	str	r3, [r7, #80]	; 0x50
 800d72c:	4b1f      	ldr	r3, [pc, #124]	; (800d7ac <main+0x50c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3304      	adds	r3, #4
 800d732:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d734:	429a      	cmp	r2, r3
 800d736:	dde5      	ble.n	800d704 <main+0x464>
			 }

		 }
		 if(bpundCount != 4){
 800d738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d007      	beq.n	800d750 <main+0x4b0>
		 	postEnable = 1;
 800d740:	2301      	movs	r3, #1
 800d742:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		 	memset(postData, 0, sizeof(postData));
 800d746:	22ff      	movs	r2, #255	; 0xff
 800d748:	2100      	movs	r1, #0
 800d74a:	4817      	ldr	r0, [pc, #92]	; (800d7a8 <main+0x508>)
 800d74c:	f004 fdba 	bl	80122c4 <memset>
		  }

		 if(postEnable == 0){
 800d750:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800d754:	2b00      	cmp	r3, #0
 800d756:	f47f adef 	bne.w	800d338 <main+0x98>
			 CardReadSound();
 800d75a:	f001 f949 	bl	800e9f0 <CardReadSound>
			 printDaicadet(0, 3);
 800d75e:	2103      	movs	r1, #3
 800d760:	2000      	movs	r0, #0
 800d762:	f7ff f9d3 	bl	800cb0c <printDaicadet>
			 MQTTPubToTopic(LENGTH);
 800d766:	4b11      	ldr	r3, [pc, #68]	; (800d7ac <main+0x50c>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fa62 	bl	800dc34 <MQTTPubToTopic>
			 HAL_Delay(50);
 800d770:	2032      	movs	r0, #50	; 0x32
 800d772:	f001 fb05 	bl	800ed80 <HAL_Delay>

			 HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 800d776:	4b0d      	ldr	r3, [pc, #52]	; (800d7ac <main+0x50c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	2364      	movs	r3, #100	; 0x64
 800d77e:	490a      	ldr	r1, [pc, #40]	; (800d7a8 <main+0x508>)
 800d780:	4808      	ldr	r0, [pc, #32]	; (800d7a4 <main+0x504>)
 800d782:	f003 ff33 	bl	80115ec <HAL_UART_Transmit>

			 cardRead = 1;
 800d786:	2301      	movs	r3, #1
 800d788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			 CardTime = HAL_GetTick();
 800d78c:	f001 faee 	bl	800ed6c <HAL_GetTick>
 800d790:	4603      	mov	r3, r0
 800d792:	65bb      	str	r3, [r7, #88]	; 0x58
  {
 800d794:	e5d0      	b.n	800d338 <main+0x98>
 800d796:	bf00      	nop
 800d798:	20000274 	.word	0x20000274
 800d79c:	20000171 	.word	0x20000171
 800d7a0:	20000358 	.word	0x20000358
 800d7a4:	20000498 	.word	0x20000498
 800d7a8:	20000174 	.word	0x20000174
 800d7ac:	2000016c 	.word	0x2000016c

0800d7b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b090      	sub	sp, #64	; 0x40
 800d7b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d7b6:	f107 0318 	add.w	r3, r7, #24
 800d7ba:	2228      	movs	r2, #40	; 0x28
 800d7bc:	2100      	movs	r1, #0
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f004 fd80 	bl	80122c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d7c4:	1d3b      	adds	r3, r7, #4
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	601a      	str	r2, [r3, #0]
 800d7ca:	605a      	str	r2, [r3, #4]
 800d7cc:	609a      	str	r2, [r3, #8]
 800d7ce:	60da      	str	r2, [r3, #12]
 800d7d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d7d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d7e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800d7ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d7f4:	f107 0318 	add.w	r3, r7, #24
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f002 fb91 	bl	800ff20 <HAL_RCC_OscConfig>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800d804:	f000 f9f4 	bl	800dbf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d808:	230f      	movs	r3, #15
 800d80a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d80c:	2302      	movs	r3, #2
 800d80e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d810:	2300      	movs	r3, #0
 800d812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d81a:	2300      	movs	r3, #0
 800d81c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d81e:	1d3b      	adds	r3, r7, #4
 800d820:	2102      	movs	r1, #2
 800d822:	4618      	mov	r0, r3
 800d824:	f002 fdfe 	bl	8010424 <HAL_RCC_ClockConfig>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800d82e:	f000 f9df 	bl	800dbf0 <Error_Handler>
  }
}
 800d832:	bf00      	nop
 800d834:	3740      	adds	r7, #64	; 0x40
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
	...

0800d83c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d840:	4b12      	ldr	r3, [pc, #72]	; (800d88c <MX_I2C1_Init+0x50>)
 800d842:	4a13      	ldr	r2, [pc, #76]	; (800d890 <MX_I2C1_Init+0x54>)
 800d844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d846:	4b11      	ldr	r3, [pc, #68]	; (800d88c <MX_I2C1_Init+0x50>)
 800d848:	4a12      	ldr	r2, [pc, #72]	; (800d894 <MX_I2C1_Init+0x58>)
 800d84a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d84c:	4b0f      	ldr	r3, [pc, #60]	; (800d88c <MX_I2C1_Init+0x50>)
 800d84e:	2200      	movs	r2, #0
 800d850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d852:	4b0e      	ldr	r3, [pc, #56]	; (800d88c <MX_I2C1_Init+0x50>)
 800d854:	2200      	movs	r2, #0
 800d856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d858:	4b0c      	ldr	r3, [pc, #48]	; (800d88c <MX_I2C1_Init+0x50>)
 800d85a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d85e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d860:	4b0a      	ldr	r3, [pc, #40]	; (800d88c <MX_I2C1_Init+0x50>)
 800d862:	2200      	movs	r2, #0
 800d864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d866:	4b09      	ldr	r3, [pc, #36]	; (800d88c <MX_I2C1_Init+0x50>)
 800d868:	2200      	movs	r2, #0
 800d86a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d86c:	4b07      	ldr	r3, [pc, #28]	; (800d88c <MX_I2C1_Init+0x50>)
 800d86e:	2200      	movs	r2, #0
 800d870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d872:	4b06      	ldr	r3, [pc, #24]	; (800d88c <MX_I2C1_Init+0x50>)
 800d874:	2200      	movs	r2, #0
 800d876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d878:	4804      	ldr	r0, [pc, #16]	; (800d88c <MX_I2C1_Init+0x50>)
 800d87a:	f001 fe1b 	bl	800f4b4 <HAL_I2C_Init>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d884:	f000 f9b4 	bl	800dbf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d888:	bf00      	nop
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	2000035c 	.word	0x2000035c
 800d890:	40005400 	.word	0x40005400
 800d894:	000186a0 	.word	0x000186a0

0800d898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d89c:	4b17      	ldr	r3, [pc, #92]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d89e:	4a18      	ldr	r2, [pc, #96]	; (800d900 <MX_SPI1_Init+0x68>)
 800d8a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d8a2:	4b16      	ldr	r3, [pc, #88]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d8a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d8aa:	4b14      	ldr	r3, [pc, #80]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d8b0:	4b12      	ldr	r3, [pc, #72]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d8b6:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d8bc:	4b0f      	ldr	r3, [pc, #60]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d8c2:	4b0e      	ldr	r3, [pc, #56]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d8ca:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8cc:	2218      	movs	r2, #24
 800d8ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d8d6:	4b09      	ldr	r3, [pc, #36]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8dc:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d8e2:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8e4:	220a      	movs	r2, #10
 800d8e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d8e8:	4804      	ldr	r0, [pc, #16]	; (800d8fc <MX_SPI1_Init+0x64>)
 800d8ea:	f002 ff29 	bl	8010740 <HAL_SPI_Init>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d8f4:	f000 f97c 	bl	800dbf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d8f8:	bf00      	nop
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	200003b0 	.word	0x200003b0
 800d900:	40013000 	.word	0x40013000

0800d904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d90a:	f107 0308 	add.w	r3, r7, #8
 800d90e:	2200      	movs	r2, #0
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	605a      	str	r2, [r3, #4]
 800d914:	609a      	str	r2, [r3, #8]
 800d916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d918:	463b      	mov	r3, r7
 800d91a:	2200      	movs	r2, #0
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d920:	4b1f      	ldr	r3, [pc, #124]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d922:	4a20      	ldr	r2, [pc, #128]	; (800d9a4 <MX_TIM1_Init+0xa0>)
 800d924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 800d926:	4b1e      	ldr	r3, [pc, #120]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d928:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d92c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d92e:	4b1c      	ldr	r3, [pc, #112]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d930:	2200      	movs	r2, #0
 800d932:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800d934:	4b1a      	ldr	r3, [pc, #104]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d936:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800d93a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d93c:	4b18      	ldr	r3, [pc, #96]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d93e:	2200      	movs	r2, #0
 800d940:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d942:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d944:	2200      	movs	r2, #0
 800d946:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d948:	4b15      	ldr	r3, [pc, #84]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d94e:	4814      	ldr	r0, [pc, #80]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d950:	f003 f9d0 	bl	8010cf4 <HAL_TIM_Base_Init>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800d95a:	f000 f949 	bl	800dbf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d964:	f107 0308 	add.w	r3, r7, #8
 800d968:	4619      	mov	r1, r3
 800d96a:	480d      	ldr	r0, [pc, #52]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d96c:	f003 fb9a 	bl	80110a4 <HAL_TIM_ConfigClockSource>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800d976:	f000 f93b 	bl	800dbf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d97a:	2300      	movs	r3, #0
 800d97c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d97e:	2300      	movs	r3, #0
 800d980:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d982:	463b      	mov	r3, r7
 800d984:	4619      	mov	r1, r3
 800d986:	4806      	ldr	r0, [pc, #24]	; (800d9a0 <MX_TIM1_Init+0x9c>)
 800d988:	f003 fd70 	bl	801146c <HAL_TIMEx_MasterConfigSynchronization>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800d992:	f000 f92d 	bl	800dbf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800d996:	bf00      	nop
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	20000408 	.word	0x20000408
 800d9a4:	40012c00 	.word	0x40012c00

0800d9a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d9ae:	f107 0308 	add.w	r3, r7, #8
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	605a      	str	r2, [r3, #4]
 800d9b8:	609a      	str	r2, [r3, #8]
 800d9ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d9bc:	463b      	mov	r3, r7
 800d9be:	2200      	movs	r2, #0
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d9c4:	4b1e      	ldr	r3, [pc, #120]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d9ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800d9cc:	4b1c      	ldr	r3, [pc, #112]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9ce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800d9d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d9d4:	4b1a      	ldr	r3, [pc, #104]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 800d9da:	4b19      	ldr	r3, [pc, #100]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9dc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800d9e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d9e2:	4b17      	ldr	r3, [pc, #92]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d9e8:	4b15      	ldr	r3, [pc, #84]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d9ee:	4814      	ldr	r0, [pc, #80]	; (800da40 <MX_TIM2_Init+0x98>)
 800d9f0:	f003 f980 	bl	8010cf4 <HAL_TIM_Base_Init>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800d9fa:	f000 f8f9 	bl	800dbf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d9fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800da04:	f107 0308 	add.w	r3, r7, #8
 800da08:	4619      	mov	r1, r3
 800da0a:	480d      	ldr	r0, [pc, #52]	; (800da40 <MX_TIM2_Init+0x98>)
 800da0c:	f003 fb4a 	bl	80110a4 <HAL_TIM_ConfigClockSource>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800da16:	f000 f8eb 	bl	800dbf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da1a:	2300      	movs	r3, #0
 800da1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da1e:	2300      	movs	r3, #0
 800da20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800da22:	463b      	mov	r3, r7
 800da24:	4619      	mov	r1, r3
 800da26:	4806      	ldr	r0, [pc, #24]	; (800da40 <MX_TIM2_Init+0x98>)
 800da28:	f003 fd20 	bl	801146c <HAL_TIMEx_MasterConfigSynchronization>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800da32:	f000 f8dd 	bl	800dbf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800da36:	bf00      	nop
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20000450 	.word	0x20000450

0800da44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800da48:	4b11      	ldr	r3, [pc, #68]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da4a:	4a12      	ldr	r2, [pc, #72]	; (800da94 <MX_USART1_UART_Init+0x50>)
 800da4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800da54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800da56:	4b0e      	ldr	r3, [pc, #56]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da58:	2200      	movs	r2, #0
 800da5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800da5c:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da5e:	2200      	movs	r2, #0
 800da60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800da62:	4b0b      	ldr	r3, [pc, #44]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da64:	2200      	movs	r2, #0
 800da66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800da68:	4b09      	ldr	r3, [pc, #36]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da6a:	220c      	movs	r2, #12
 800da6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da6e:	4b08      	ldr	r3, [pc, #32]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da70:	2200      	movs	r2, #0
 800da72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800da74:	4b06      	ldr	r3, [pc, #24]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da76:	2200      	movs	r2, #0
 800da78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800da7a:	4805      	ldr	r0, [pc, #20]	; (800da90 <MX_USART1_UART_Init+0x4c>)
 800da7c:	f003 fd66 	bl	801154c <HAL_UART_Init>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800da86:	f000 f8b3 	bl	800dbf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800da8a:	bf00      	nop
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	20000498 	.word	0x20000498
 800da94:	40013800 	.word	0x40013800

0800da98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800da9c:	4b11      	ldr	r3, [pc, #68]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800da9e:	4a12      	ldr	r2, [pc, #72]	; (800dae8 <MX_USART2_UART_Init+0x50>)
 800daa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800daa2:	4b10      	ldr	r3, [pc, #64]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800daa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800daa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800daaa:	4b0e      	ldr	r3, [pc, #56]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800daac:	2200      	movs	r2, #0
 800daae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dab0:	4b0c      	ldr	r3, [pc, #48]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dab6:	4b0b      	ldr	r3, [pc, #44]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800dab8:	2200      	movs	r2, #0
 800daba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dabc:	4b09      	ldr	r3, [pc, #36]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800dabe:	220c      	movs	r2, #12
 800dac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dac2:	4b08      	ldr	r3, [pc, #32]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dac8:	4b06      	ldr	r3, [pc, #24]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800daca:	2200      	movs	r2, #0
 800dacc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800dace:	4805      	ldr	r0, [pc, #20]	; (800dae4 <MX_USART2_UART_Init+0x4c>)
 800dad0:	f003 fd3c 	bl	801154c <HAL_UART_Init>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800dada:	f000 f889 	bl	800dbf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800dade:	bf00      	nop
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	200004e0 	.word	0x200004e0
 800dae8:	40004400 	.word	0x40004400

0800daec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daf2:	f107 0310 	add.w	r3, r7, #16
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	605a      	str	r2, [r3, #4]
 800dafc:	609a      	str	r2, [r3, #8]
 800dafe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800db00:	4b37      	ldr	r3, [pc, #220]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	4a36      	ldr	r2, [pc, #216]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db06:	f043 0310 	orr.w	r3, r3, #16
 800db0a:	6193      	str	r3, [r2, #24]
 800db0c:	4b34      	ldr	r3, [pc, #208]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800db18:	4b31      	ldr	r3, [pc, #196]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db1a:	699b      	ldr	r3, [r3, #24]
 800db1c:	4a30      	ldr	r2, [pc, #192]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db1e:	f043 0320 	orr.w	r3, r3, #32
 800db22:	6193      	str	r3, [r2, #24]
 800db24:	4b2e      	ldr	r3, [pc, #184]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	f003 0320 	and.w	r3, r3, #32
 800db2c:	60bb      	str	r3, [r7, #8]
 800db2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800db30:	4b2b      	ldr	r3, [pc, #172]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	4a2a      	ldr	r2, [pc, #168]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db36:	f043 0304 	orr.w	r3, r3, #4
 800db3a:	6193      	str	r3, [r2, #24]
 800db3c:	4b28      	ldr	r3, [pc, #160]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	f003 0304 	and.w	r3, r3, #4
 800db44:	607b      	str	r3, [r7, #4]
 800db46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800db48:	4b25      	ldr	r3, [pc, #148]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	4a24      	ldr	r2, [pc, #144]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db4e:	f043 0308 	orr.w	r3, r3, #8
 800db52:	6193      	str	r3, [r2, #24]
 800db54:	4b22      	ldr	r3, [pc, #136]	; (800dbe0 <MX_GPIO_Init+0xf4>)
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	f003 0308 	and.w	r3, r3, #8
 800db5c:	603b      	str	r3, [r7, #0]
 800db5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800db60:	2200      	movs	r2, #0
 800db62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800db66:	481f      	ldr	r0, [pc, #124]	; (800dbe4 <MX_GPIO_Init+0xf8>)
 800db68:	f001 fc72 	bl	800f450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800db6c:	2200      	movs	r2, #0
 800db6e:	2110      	movs	r1, #16
 800db70:	481d      	ldr	r0, [pc, #116]	; (800dbe8 <MX_GPIO_Init+0xfc>)
 800db72:	f001 fc6d 	bl	800f450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800db76:	2200      	movs	r2, #0
 800db78:	2103      	movs	r1, #3
 800db7a:	481c      	ldr	r0, [pc, #112]	; (800dbec <MX_GPIO_Init+0x100>)
 800db7c:	f001 fc68 	bl	800f450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800db80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800db86:	2301      	movs	r3, #1
 800db88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800db8e:	2302      	movs	r3, #2
 800db90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800db92:	f107 0310 	add.w	r3, r7, #16
 800db96:	4619      	mov	r1, r3
 800db98:	4812      	ldr	r0, [pc, #72]	; (800dbe4 <MX_GPIO_Init+0xf8>)
 800db9a:	f001 fad5 	bl	800f148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800db9e:	2310      	movs	r3, #16
 800dba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dba2:	2301      	movs	r3, #1
 800dba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbaa:	2302      	movs	r3, #2
 800dbac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbae:	f107 0310 	add.w	r3, r7, #16
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	480c      	ldr	r0, [pc, #48]	; (800dbe8 <MX_GPIO_Init+0xfc>)
 800dbb6:	f001 fac7 	bl	800f148 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dbca:	f107 0310 	add.w	r3, r7, #16
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4806      	ldr	r0, [pc, #24]	; (800dbec <MX_GPIO_Init+0x100>)
 800dbd2:	f001 fab9 	bl	800f148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800dbd6:	bf00      	nop
 800dbd8:	3720      	adds	r7, #32
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	40021000 	.word	0x40021000
 800dbe4:	40011000 	.word	0x40011000
 800dbe8:	40010800 	.word	0x40010800
 800dbec:	40010c00 	.word	0x40010c00

0800dbf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800dbf4:	b672      	cpsid	i
}
 800dbf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800dbf8:	e7fe      	b.n	800dbf8 <Error_Handler+0x8>

0800dbfa <jumpToAddress>:

	int Status = atoi((char*) statusString);
	return Status;

}
void jumpToAddress(uint32_t ADDRESSTOGO){
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b086      	sub	sp, #24
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
	  uint32_t addresstojump;

	  addresstojump = *((volatile uint32_t*)(ADDRESSTOGO + 4));
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3304      	adds	r3, #4
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	617b      	str	r3, [r7, #20]
	  HAL_DeInit();
 800dc0a:	f001 f84f 	bl	800ecac <HAL_DeInit>
	  HAL_RCC_DeInit();
 800dc0e:	f002 f8ed 	bl	800fdec <HAL_RCC_DeInit>
	  void (*GoToApp)(void);
	  GoToApp = (void (*) (void))addresstojump;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc16:	b672      	cpsid	i
}
 800dc18:	bf00      	nop
	  __disable_irq();
	  __set_MSP(*((volatile uint32_t*)ADDRESSTOGO));
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f383 8808 	msr	MSP, r3
}
 800dc26:	bf00      	nop
	  GoToApp();
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	4798      	blx	r3
}
 800dc2c:	bf00      	nop
 800dc2e:	3718      	adds	r7, #24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <MQTTPubToTopic>:
//			break;
//		}
//	}
}

void MQTTPubToTopic(int length){
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\""STR(backServer)"\",%d\r\n", (length));
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	4908      	ldr	r1, [pc, #32]	; (800dc60 <MQTTPubToTopic+0x2c>)
 800dc40:	4808      	ldr	r0, [pc, #32]	; (800dc64 <MQTTPubToTopic+0x30>)
 800dc42:	f004 fc33 	bl	80124ac <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800dc46:	2364      	movs	r3, #100	; 0x64
 800dc48:	222e      	movs	r2, #46	; 0x2e
 800dc4a:	4906      	ldr	r1, [pc, #24]	; (800dc64 <MQTTPubToTopic+0x30>)
 800dc4c:	4806      	ldr	r0, [pc, #24]	; (800dc68 <MQTTPubToTopic+0x34>)
 800dc4e:	f003 fccd 	bl	80115ec <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800dc52:	201e      	movs	r0, #30
 800dc54:	f001 f894 	bl	800ed80 <HAL_Delay>

}
 800dc58:	bf00      	nop
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	08012e38 	.word	0x08012e38
 800dc64:	2000009c 	.word	0x2000009c
 800dc68:	20000498 	.word	0x20000498

0800dc6c <SPI1SendByte>:
extern void MFRC522_Halt(void);
extern void cardOperation(uint8_t* finalData, uint8_t* p);
extern void led(uint8_t n);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

uint8_t SPI1SendByte(uint8_t data) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af02      	add	r7, sp, #8
 800dc72:	4603      	mov	r3, r0
 800dc74:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800dc7a:	f107 0208 	add.w	r2, r7, #8
 800dc7e:	f107 010c 	add.w	r1, r7, #12
 800dc82:	230a      	movs	r3, #10
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	2301      	movs	r3, #1
 800dc88:	4803      	ldr	r0, [pc, #12]	; (800dc98 <SPI1SendByte+0x2c>)
 800dc8a:	f002 fddd 	bl	8010848 <HAL_SPI_TransmitReceive>
	return readValue[0];
 800dc8e:	7a3b      	ldrb	r3, [r7, #8]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	200003b0 	.word	0x200003b0

0800dc9c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	4603      	mov	r3, r0
 800dca4:	460a      	mov	r2, r1
 800dca6:	71fb      	strb	r3, [r7, #7]
 800dca8:	4613      	mov	r3, r2
 800dcaa:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800dcac:	2200      	movs	r2, #0
 800dcae:	2110      	movs	r1, #16
 800dcb0:	4809      	ldr	r0, [pc, #36]	; (800dcd8 <SPI1_WriteReg+0x3c>)
 800dcb2:	f001 fbcd 	bl	800f450 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff ffd7 	bl	800dc6c <SPI1SendByte>
	SPI1SendByte(value);
 800dcbe:	79bb      	ldrb	r3, [r7, #6]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff ffd3 	bl	800dc6c <SPI1SendByte>
	cs_set();
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	2110      	movs	r1, #16
 800dcca:	4803      	ldr	r0, [pc, #12]	; (800dcd8 <SPI1_WriteReg+0x3c>)
 800dccc:	f001 fbc0 	bl	800f450 <HAL_GPIO_WritePin>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	40010800 	.word	0x40010800

0800dcdc <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	4603      	mov	r3, r0
 800dce4:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800dce6:	2200      	movs	r2, #0
 800dce8:	2110      	movs	r1, #16
 800dcea:	480b      	ldr	r0, [pc, #44]	; (800dd18 <SPI1_ReadReg+0x3c>)
 800dcec:	f001 fbb0 	bl	800f450 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff ffba 	bl	800dc6c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	f7ff ffb7 	bl	800dc6c <SPI1SendByte>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800dd02:	2201      	movs	r2, #1
 800dd04:	2110      	movs	r1, #16
 800dd06:	4804      	ldr	r0, [pc, #16]	; (800dd18 <SPI1_ReadReg+0x3c>)
 800dd08:	f001 fba2 	bl	800f450 <HAL_GPIO_WritePin>
	return val;
 800dd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	40010800 	.word	0x40010800

0800dd1c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	460a      	mov	r2, r1
 800dd26:	71fb      	strb	r3, [r7, #7]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800dd2c:	79fb      	ldrb	r3, [r7, #7]
 800dd2e:	005b      	lsls	r3, r3, #1
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800dd36:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800dd38:	79ba      	ldrb	r2, [r7, #6]
 800dd3a:	79fb      	ldrb	r3, [r7, #7]
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff ffac 	bl	800dc9c <SPI1_WriteReg>
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800dd56:	79fb      	ldrb	r3, [r7, #7]
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	b25b      	sxtb	r3, r3
 800dd5c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800dd60:	b25b      	sxtb	r3, r3
 800dd62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff ffb5 	bl	800dcdc <SPI1_ReadReg>
 800dd72:	4603      	mov	r3, r0
 800dd74:	73fb      	strb	r3, [r7, #15]
	return val;	
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	460a      	mov	r2, r1
 800dd8a:	71fb      	strb	r3, [r7, #7]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800dd90:	79fb      	ldrb	r3, [r7, #7]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7ff ffda 	bl	800dd4c <MFRC522_ReadRegister>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	79bb      	ldrb	r3, [r7, #6]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	4611      	mov	r1, r2
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7ff ffb8 	bl	800dd1c <MFRC522_WriteRegister>
}
 800ddac:	bf00      	nop
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	460a      	mov	r2, r1
 800ddbe:	71fb      	strb	r3, [r7, #7]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7ff ffc0 	bl	800dd4c <MFRC522_ReadRegister>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	b25a      	sxtb	r2, r3
 800ddd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ddd4:	43db      	mvns	r3, r3
 800ddd6:	b25b      	sxtb	r3, r3
 800ddd8:	4013      	ands	r3, r2
 800ddda:	b25b      	sxtb	r3, r3
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	4611      	mov	r1, r2
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7ff ff9a 	bl	800dd1c <MFRC522_WriteRegister>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	6039      	str	r1, [r7, #0]
 800ddfa:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800ddfc:	2107      	movs	r1, #7
 800ddfe:	200d      	movs	r0, #13
 800de00:	f7ff ff8c 	bl	800dd1c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	79fa      	ldrb	r2, [r7, #7]
 800de08:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800de0a:	f107 030c 	add.w	r3, r7, #12
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	2201      	movs	r2, #1
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	200c      	movs	r0, #12
 800de18:	f000 f80f 	bl	800de3a <MFRC522_ToCard>
 800de1c:	4603      	mov	r3, r0
 800de1e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800de20:	7bfb      	ldrb	r3, [r7, #15]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <MFRC522_Request+0x3c>
 800de26:	89bb      	ldrh	r3, [r7, #12]
 800de28:	2b10      	cmp	r3, #16
 800de2a:	d001      	beq.n	800de30 <MFRC522_Request+0x40>
 800de2c:	2302      	movs	r3, #2
 800de2e:	73fb      	strb	r3, [r7, #15]
	return status;
 800de30:	7bfb      	ldrb	r3, [r7, #15]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800de3a:	b590      	push	{r4, r7, lr}
 800de3c:	b087      	sub	sp, #28
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607b      	str	r3, [r7, #4]
 800de44:	4603      	mov	r3, r0
 800de46:	73fb      	strb	r3, [r7, #15]
 800de48:	4613      	mov	r3, r2
 800de4a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800de4c:	2302      	movs	r3, #2
 800de4e:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800de50:	2300      	movs	r3, #0
 800de52:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800de54:	2300      	movs	r3, #0
 800de56:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800de58:	7bfb      	ldrb	r3, [r7, #15]
 800de5a:	2b0c      	cmp	r3, #12
 800de5c:	d006      	beq.n	800de6c <MFRC522_ToCard+0x32>
 800de5e:	2b0e      	cmp	r3, #14
 800de60:	d109      	bne.n	800de76 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800de62:	2312      	movs	r3, #18
 800de64:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800de66:	2310      	movs	r3, #16
 800de68:	757b      	strb	r3, [r7, #21]
			break;
 800de6a:	e005      	b.n	800de78 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800de6c:	2377      	movs	r3, #119	; 0x77
 800de6e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800de70:	2330      	movs	r3, #48	; 0x30
 800de72:	757b      	strb	r3, [r7, #21]
			break;
 800de74:	e000      	b.n	800de78 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800de76:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800de78:	7dbb      	ldrb	r3, [r7, #22]
 800de7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	4619      	mov	r1, r3
 800de82:	2002      	movs	r0, #2
 800de84:	f7ff ff4a 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800de88:	2180      	movs	r1, #128	; 0x80
 800de8a:	2004      	movs	r0, #4
 800de8c:	f7ff ff92 	bl	800ddb4 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800de90:	2180      	movs	r1, #128	; 0x80
 800de92:	200a      	movs	r0, #10
 800de94:	f7ff ff74 	bl	800dd80 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800de98:	2100      	movs	r1, #0
 800de9a:	2001      	movs	r0, #1
 800de9c:	f7ff ff3e 	bl	800dd1c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800dea0:	2300      	movs	r3, #0
 800dea2:	827b      	strh	r3, [r7, #18]
 800dea4:	e00a      	b.n	800debc <MFRC522_ToCard+0x82>
 800dea6:	8a7b      	ldrh	r3, [r7, #18]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	4413      	add	r3, r2
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	4619      	mov	r1, r3
 800deb0:	2009      	movs	r0, #9
 800deb2:	f7ff ff33 	bl	800dd1c <MFRC522_WriteRegister>
 800deb6:	8a7b      	ldrh	r3, [r7, #18]
 800deb8:	3301      	adds	r3, #1
 800deba:	827b      	strh	r3, [r7, #18]
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	b29b      	uxth	r3, r3
 800dec0:	8a7a      	ldrh	r2, [r7, #18]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d3ef      	bcc.n	800dea6 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	4619      	mov	r1, r3
 800deca:	2001      	movs	r0, #1
 800decc:	f7ff ff26 	bl	800dd1c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	2b0c      	cmp	r3, #12
 800ded4:	d103      	bne.n	800dede <MFRC522_ToCard+0xa4>
 800ded6:	2180      	movs	r1, #128	; 0x80
 800ded8:	200d      	movs	r0, #13
 800deda:	f7ff ff51 	bl	800dd80 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800dede:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dee2:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800dee4:	2004      	movs	r0, #4
 800dee6:	f7ff ff31 	bl	800dd4c <MFRC522_ReadRegister>
 800deea:	4603      	mov	r3, r0
 800deec:	753b      	strb	r3, [r7, #20]
		i--;
 800deee:	8a7b      	ldrh	r3, [r7, #18]
 800def0:	3b01      	subs	r3, #1
 800def2:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800def4:	8a7b      	ldrh	r3, [r7, #18]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <MFRC522_ToCard+0xd6>
 800defa:	7d3b      	ldrb	r3, [r7, #20]
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d105      	bne.n	800df10 <MFRC522_ToCard+0xd6>
 800df04:	7d3a      	ldrb	r2, [r7, #20]
 800df06:	7d7b      	ldrb	r3, [r7, #21]
 800df08:	4013      	ands	r3, r2
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0e9      	beq.n	800dee4 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800df10:	2180      	movs	r1, #128	; 0x80
 800df12:	200d      	movs	r0, #13
 800df14:	f7ff ff4e 	bl	800ddb4 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800df18:	8a7b      	ldrh	r3, [r7, #18]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d057      	beq.n	800dfce <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800df1e:	2006      	movs	r0, #6
 800df20:	f7ff ff14 	bl	800dd4c <MFRC522_ReadRegister>
 800df24:	4603      	mov	r3, r0
 800df26:	f003 031b 	and.w	r3, r3, #27
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d14d      	bne.n	800dfca <MFRC522_ToCard+0x190>
			status = MI_OK;
 800df2e:	2300      	movs	r3, #0
 800df30:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800df32:	7d3a      	ldrb	r2, [r7, #20]
 800df34:	7dbb      	ldrb	r3, [r7, #22]
 800df36:	4013      	ands	r3, r2
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <MFRC522_ToCard+0x10c>
 800df42:	2301      	movs	r3, #1
 800df44:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800df46:	7bfb      	ldrb	r3, [r7, #15]
 800df48:	2b0c      	cmp	r3, #12
 800df4a:	d140      	bne.n	800dfce <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800df4c:	200a      	movs	r0, #10
 800df4e:	f7ff fefd 	bl	800dd4c <MFRC522_ReadRegister>
 800df52:	4603      	mov	r3, r0
 800df54:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800df56:	200c      	movs	r0, #12
 800df58:	f7ff fef8 	bl	800dd4c <MFRC522_ReadRegister>
 800df5c:	4603      	mov	r3, r0
 800df5e:	f003 0307 	and.w	r3, r3, #7
 800df62:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800df64:	7c7b      	ldrb	r3, [r7, #17]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00b      	beq.n	800df82 <MFRC522_ToCard+0x148>
 800df6a:	7d3b      	ldrb	r3, [r7, #20]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	b29b      	uxth	r3, r3
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	b29a      	uxth	r2, r3
 800df74:	7c7b      	ldrb	r3, [r7, #17]
 800df76:	b29b      	uxth	r3, r3
 800df78:	4413      	add	r3, r2
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	801a      	strh	r2, [r3, #0]
 800df80:	e005      	b.n	800df8e <MFRC522_ToCard+0x154>
 800df82:	7d3b      	ldrb	r3, [r7, #20]
 800df84:	b29b      	uxth	r3, r3
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	b29a      	uxth	r2, r3
 800df8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8c:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800df8e:	7d3b      	ldrb	r3, [r7, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d101      	bne.n	800df98 <MFRC522_ToCard+0x15e>
 800df94:	2301      	movs	r3, #1
 800df96:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800df98:	7d3b      	ldrb	r3, [r7, #20]
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d901      	bls.n	800dfa2 <MFRC522_ToCard+0x168>
 800df9e:	2310      	movs	r3, #16
 800dfa0:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	827b      	strh	r3, [r7, #18]
 800dfa6:	e00a      	b.n	800dfbe <MFRC522_ToCard+0x184>
 800dfa8:	8a7b      	ldrh	r3, [r7, #18]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	18d4      	adds	r4, r2, r3
 800dfae:	2009      	movs	r0, #9
 800dfb0:	f7ff fecc 	bl	800dd4c <MFRC522_ReadRegister>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	7023      	strb	r3, [r4, #0]
 800dfb8:	8a7b      	ldrh	r3, [r7, #18]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	827b      	strh	r3, [r7, #18]
 800dfbe:	7d3b      	ldrb	r3, [r7, #20]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	8a7a      	ldrh	r2, [r7, #18]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d3ef      	bcc.n	800dfa8 <MFRC522_ToCard+0x16e>
 800dfc8:	e001      	b.n	800dfce <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800dfca:	2302      	movs	r3, #2
 800dfcc:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800dfce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	371c      	adds	r7, #28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd90      	pop	{r4, r7, pc}

0800dfd8 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af02      	add	r7, sp, #8
 800dfde:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	200d      	movs	r0, #13
 800dfe8:	f7ff fe98 	bl	800dd1c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2293      	movs	r2, #147	; 0x93
 800dff0:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3301      	adds	r3, #1
 800dff6:	2220      	movs	r2, #32
 800dff8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800dffa:	f107 030a 	add.w	r3, r7, #10
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2202      	movs	r2, #2
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	200c      	movs	r0, #12
 800e008:	f7ff ff17 	bl	800de3a <MFRC522_ToCard>
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d118      	bne.n	800e048 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800e016:	2300      	movs	r3, #0
 800e018:	73bb      	strb	r3, [r7, #14]
 800e01a:	e009      	b.n	800e030 <MFRC522_Anticoll+0x58>
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	4413      	add	r3, r2
 800e022:	781a      	ldrb	r2, [r3, #0]
 800e024:	7b7b      	ldrb	r3, [r7, #13]
 800e026:	4053      	eors	r3, r2
 800e028:	737b      	strb	r3, [r7, #13]
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
 800e02c:	3301      	adds	r3, #1
 800e02e:	73bb      	strb	r3, [r7, #14]
 800e030:	7bbb      	ldrb	r3, [r7, #14]
 800e032:	2b03      	cmp	r3, #3
 800e034:	d9f2      	bls.n	800e01c <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800e036:	7bbb      	ldrb	r3, [r7, #14]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	4413      	add	r3, r2
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	7b7a      	ldrb	r2, [r7, #13]
 800e040:	429a      	cmp	r2, r3
 800e042:	d001      	beq.n	800e048 <MFRC522_Anticoll+0x70>
 800e044:	2302      	movs	r3, #2
 800e046:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800e048:	7bfb      	ldrb	r3, [r7, #15]
} 
 800e04a:	4618      	mov	r0, r3
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800e052:	b590      	push	{r4, r7, lr}
 800e054:	b087      	sub	sp, #28
 800e056:	af00      	add	r7, sp, #0
 800e058:	60f8      	str	r0, [r7, #12]
 800e05a:	460b      	mov	r3, r1
 800e05c:	607a      	str	r2, [r7, #4]
 800e05e:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800e060:	2104      	movs	r1, #4
 800e062:	2005      	movs	r0, #5
 800e064:	f7ff fea6 	bl	800ddb4 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800e068:	2180      	movs	r1, #128	; 0x80
 800e06a:	200a      	movs	r0, #10
 800e06c:	f7ff fe88 	bl	800dd80 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800e070:	2300      	movs	r3, #0
 800e072:	75fb      	strb	r3, [r7, #23]
 800e074:	e00a      	b.n	800e08c <MFRC522_CalculateCRC+0x3a>
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	4619      	mov	r1, r3
 800e080:	2009      	movs	r0, #9
 800e082:	f7ff fe4b 	bl	800dd1c <MFRC522_WriteRegister>
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	3301      	adds	r3, #1
 800e08a:	75fb      	strb	r3, [r7, #23]
 800e08c:	7dfa      	ldrb	r2, [r7, #23]
 800e08e:	7afb      	ldrb	r3, [r7, #11]
 800e090:	429a      	cmp	r2, r3
 800e092:	d3f0      	bcc.n	800e076 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800e094:	2103      	movs	r1, #3
 800e096:	2001      	movs	r0, #1
 800e098:	f7ff fe40 	bl	800dd1c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800e09c:	23ff      	movs	r3, #255	; 0xff
 800e09e:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800e0a0:	2005      	movs	r0, #5
 800e0a2:	f7ff fe53 	bl	800dd4c <MFRC522_ReadRegister>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	75bb      	strb	r3, [r7, #22]
		i--;
 800e0aa:	7dfb      	ldrb	r3, [r7, #23]
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 800e0b0:	7dfb      	ldrb	r3, [r7, #23]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d004      	beq.n	800e0c0 <MFRC522_CalculateCRC+0x6e>
 800e0b6:	7dbb      	ldrb	r3, [r7, #22]
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d0ef      	beq.n	800e0a0 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800e0c0:	2022      	movs	r0, #34	; 0x22
 800e0c2:	f7ff fe43 	bl	800dd4c <MFRC522_ReadRegister>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	1c5c      	adds	r4, r3, #1
 800e0d2:	2021      	movs	r0, #33	; 0x21
 800e0d4:	f7ff fe3a 	bl	800dd4c <MFRC522_ReadRegister>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	7023      	strb	r3, [r4, #0]
}
 800e0dc:	bf00      	nop
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd90      	pop	{r4, r7, pc}

0800e0e4 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 800e0ec:	2393      	movs	r3, #147	; 0x93
 800e0ee:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 800e0f0:	2370      	movs	r3, #112	; 0x70
 800e0f2:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	75fb      	strb	r3, [r7, #23]
 800e0f8:	e00c      	b.n	800e114 <MFRC522_SelectTag+0x30>
 800e0fa:	7dfb      	ldrb	r3, [r7, #23]
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	441a      	add	r2, r3
 800e100:	7dfb      	ldrb	r3, [r7, #23]
 800e102:	3302      	adds	r3, #2
 800e104:	7812      	ldrb	r2, [r2, #0]
 800e106:	3318      	adds	r3, #24
 800e108:	443b      	add	r3, r7
 800e10a:	f803 2c10 	strb.w	r2, [r3, #-16]
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	3301      	adds	r3, #1
 800e112:	75fb      	strb	r3, [r7, #23]
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	2b04      	cmp	r3, #4
 800e118:	d9ef      	bls.n	800e0fa <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800e11a:	f107 0308 	add.w	r3, r7, #8
 800e11e:	1dda      	adds	r2, r3, #7
 800e120:	f107 0308 	add.w	r3, r7, #8
 800e124:	2107      	movs	r1, #7
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff ff93 	bl	800e052 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800e12c:	f107 0208 	add.w	r2, r7, #8
 800e130:	f107 0108 	add.w	r1, r7, #8
 800e134:	f107 0312 	add.w	r3, r7, #18
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	4613      	mov	r3, r2
 800e13c:	2209      	movs	r2, #9
 800e13e:	200c      	movs	r0, #12
 800e140:	f7ff fe7b 	bl	800de3a <MFRC522_ToCard>
 800e144:	4603      	mov	r3, r0
 800e146:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 800e148:	7d7b      	ldrb	r3, [r7, #21]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d105      	bne.n	800e15a <MFRC522_SelectTag+0x76>
 800e14e:	8a7b      	ldrh	r3, [r7, #18]
 800e150:	2b18      	cmp	r3, #24
 800e152:	d102      	bne.n	800e15a <MFRC522_SelectTag+0x76>
 800e154:	7a3b      	ldrb	r3, [r7, #8]
 800e156:	75bb      	strb	r3, [r7, #22]
 800e158:	e001      	b.n	800e15e <MFRC522_SelectTag+0x7a>
 800e15a:	2300      	movs	r3, #0
 800e15c:	75bb      	strb	r3, [r7, #22]
	return size;
 800e15e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	; 0x28
 800e16c:	af02      	add	r7, sp, #8
 800e16e:	60ba      	str	r2, [r7, #8]
 800e170:	607b      	str	r3, [r7, #4]
 800e172:	4603      	mov	r3, r0
 800e174:	73fb      	strb	r3, [r7, #15]
 800e176:	460b      	mov	r3, r1
 800e178:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
 800e17c:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 800e182:	2300      	movs	r3, #0
 800e184:	77bb      	strb	r3, [r7, #30]
 800e186:	e00c      	b.n	800e1a2 <MFRC522_Auth+0x3a>
 800e188:	7fbb      	ldrb	r3, [r7, #30]
 800e18a:	68ba      	ldr	r2, [r7, #8]
 800e18c:	441a      	add	r2, r3
 800e18e:	7fbb      	ldrb	r3, [r7, #30]
 800e190:	3302      	adds	r3, #2
 800e192:	7812      	ldrb	r2, [r2, #0]
 800e194:	3320      	adds	r3, #32
 800e196:	443b      	add	r3, r7
 800e198:	f803 2c10 	strb.w	r2, [r3, #-16]
 800e19c:	7fbb      	ldrb	r3, [r7, #30]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	77bb      	strb	r3, [r7, #30]
 800e1a2:	7fbb      	ldrb	r3, [r7, #30]
 800e1a4:	2b05      	cmp	r3, #5
 800e1a6:	d9ef      	bls.n	800e188 <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	77bb      	strb	r3, [r7, #30]
 800e1ac:	e00c      	b.n	800e1c8 <MFRC522_Auth+0x60>
 800e1ae:	7fbb      	ldrb	r3, [r7, #30]
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	441a      	add	r2, r3
 800e1b4:	7fbb      	ldrb	r3, [r7, #30]
 800e1b6:	3308      	adds	r3, #8
 800e1b8:	7812      	ldrb	r2, [r2, #0]
 800e1ba:	3320      	adds	r3, #32
 800e1bc:	443b      	add	r3, r7
 800e1be:	f803 2c10 	strb.w	r2, [r3, #-16]
 800e1c2:	7fbb      	ldrb	r3, [r7, #30]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	77bb      	strb	r3, [r7, #30]
 800e1c8:	7fbb      	ldrb	r3, [r7, #30]
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d9ef      	bls.n	800e1ae <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800e1ce:	f107 0210 	add.w	r2, r7, #16
 800e1d2:	f107 0110 	add.w	r1, r7, #16
 800e1d6:	f107 031c 	add.w	r3, r7, #28
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	220c      	movs	r2, #12
 800e1e0:	200e      	movs	r0, #14
 800e1e2:	f7ff fe2a 	bl	800de3a <MFRC522_ToCard>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 800e1ea:	7ffb      	ldrb	r3, [r7, #31]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d107      	bne.n	800e200 <MFRC522_Auth+0x98>
 800e1f0:	2008      	movs	r0, #8
 800e1f2:	f7ff fdab 	bl	800dd4c <MFRC522_ReadRegister>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <MFRC522_Auth+0x9c>
 800e200:	2302      	movs	r3, #2
 800e202:	77fb      	strb	r3, [r7, #31]
	return status;
 800e204:	7ffb      	ldrb	r3, [r7, #31]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3720      	adds	r7, #32
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 800e20e:	b580      	push	{r7, lr}
 800e210:	b086      	sub	sp, #24
 800e212:	af02      	add	r7, sp, #8
 800e214:	4603      	mov	r3, r0
 800e216:	6039      	str	r1, [r7, #0]
 800e218:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	2230      	movs	r2, #48	; 0x30
 800e21e:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	3301      	adds	r3, #1
 800e224:	79fa      	ldrb	r2, [r7, #7]
 800e226:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	3302      	adds	r3, #2
 800e22c:	461a      	mov	r2, r3
 800e22e:	2102      	movs	r1, #2
 800e230:	6838      	ldr	r0, [r7, #0]
 800e232:	f7ff ff0e 	bl	800e052 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800e236:	f107 030c 	add.w	r3, r7, #12
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2204      	movs	r2, #4
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	200c      	movs	r0, #12
 800e244:	f7ff fdf9 	bl	800de3a <MFRC522_ToCard>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <MFRC522_Read+0x4a>
 800e252:	89bb      	ldrh	r3, [r7, #12]
 800e254:	2b90      	cmp	r3, #144	; 0x90
 800e256:	d001      	beq.n	800e25c <MFRC522_Read+0x4e>
 800e258:	2302      	movs	r3, #2
 800e25a:	73fb      	strb	r3, [r7, #15]
	return status;
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800e266:	b580      	push	{r7, lr}
 800e268:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800e26a:	f000 f820 	bl	800e2ae <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800e26e:	218d      	movs	r1, #141	; 0x8d
 800e270:	202a      	movs	r0, #42	; 0x2a
 800e272:	f7ff fd53 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800e276:	213e      	movs	r1, #62	; 0x3e
 800e278:	202b      	movs	r0, #43	; 0x2b
 800e27a:	f7ff fd4f 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800e27e:	211e      	movs	r1, #30
 800e280:	202d      	movs	r0, #45	; 0x2d
 800e282:	f7ff fd4b 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800e286:	2100      	movs	r1, #0
 800e288:	202c      	movs	r0, #44	; 0x2c
 800e28a:	f7ff fd47 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800e28e:	2170      	movs	r1, #112	; 0x70
 800e290:	2026      	movs	r0, #38	; 0x26
 800e292:	f7ff fd43 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800e296:	2140      	movs	r1, #64	; 0x40
 800e298:	2015      	movs	r0, #21
 800e29a:	f7ff fd3f 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800e29e:	213d      	movs	r1, #61	; 0x3d
 800e2a0:	2011      	movs	r0, #17
 800e2a2:	f7ff fd3b 	bl	800dd1c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800e2a6:	f000 f80a 	bl	800e2be <MFRC522_AntennaOn>
}
 800e2aa:	bf00      	nop
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800e2b2:	210f      	movs	r1, #15
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	f7ff fd31 	bl	800dd1c <MFRC522_WriteRegister>
}
 800e2ba:	bf00      	nop
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800e2c4:	2014      	movs	r0, #20
 800e2c6:	f7ff fd41 	bl	800dd4c <MFRC522_ReadRegister>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	f003 0303 	and.w	r3, r3, #3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d103      	bne.n	800e2e0 <MFRC522_AntennaOn+0x22>
 800e2d8:	2103      	movs	r1, #3
 800e2da:	2014      	movs	r0, #20
 800e2dc:	f7ff fd50 	bl	800dd80 <MFRC522_SetBitMask>
}
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 800e2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ea:	b0f1      	sub	sp, #452	; 0x1c4
 800e2ec:	af0e      	add	r7, sp, #56	; 0x38
 800e2ee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e2f2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e2f6:	6018      	str	r0, [r3, #0]
	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 800e2f8:	4aad      	ldr	r2, [pc, #692]	; (800e5b0 <cardOperationWithBlockedSector+0x2c8>)
 800e2fa:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800e2fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e302:	6018      	str	r0, [r3, #0]
 800e304:	3304      	adds	r3, #4
 800e306:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 800e308:	2300      	movs	r3, #0
 800e30a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 800e314:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d13b      	bne.n	800e394 <cardOperationWithBlockedSector+0xac>
	     MFRC522_Init();
 800e31c:	f7ff ffa3 	bl	800e266 <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 800e320:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e324:	4619      	mov	r1, r3
 800e326:	2026      	movs	r0, #38	; 0x26
 800e328:	f7ff fd62 	bl	800ddf0 <MFRC522_Request>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d130      	bne.n	800e394 <cardOperationWithBlockedSector+0xac>
	       if (!MFRC522_Anticoll(str)) {
 800e332:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff fe4e 	bl	800dfd8 <MFRC522_Anticoll>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d128      	bne.n	800e394 <cardOperationWithBlockedSector+0xac>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\""STR(currentTerminal)"\",\"cardID\":\"%x%x%x%x\",", str[0],str[1], str[2], str[3]);
 800e342:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800e346:	4619      	mov	r1, r3
 800e348:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800e34c:	461c      	mov	r4, r3
 800e34e:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800e352:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 800e356:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e35a:	9201      	str	r2, [sp, #4]
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	4623      	mov	r3, r4
 800e360:	460a      	mov	r2, r1
 800e362:	4994      	ldr	r1, [pc, #592]	; (800e5b4 <cardOperationWithBlockedSector+0x2cc>)
 800e364:	f004 f8a2 	bl	80124ac <siprintf>

	         l = strlen((char*)IDBuff);
 800e368:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fd feed 	bl	800c14c <strlen>
 800e372:	4603      	mov	r3, r0
 800e374:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 800e378:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800e37c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800e380:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e384:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e388:	6818      	ldr	r0, [r3, #0]
 800e38a:	f003 ff8d 	bl	80122a8 <memcpy>

	         cardIDStatus = 1;
 800e38e:	2301      	movs	r3, #1
 800e390:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 800e394:	2014      	movs	r0, #20
 800e396:	f000 fcf3 	bl	800ed80 <HAL_Delay>
	  MFRC522_Init();
 800e39a:	f7ff ff64 	bl	800e266 <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 800e39e:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	f040 80ed 	bne.w	800e582 <cardOperationWithBlockedSector+0x29a>
 800e3a8:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f040 80e8 	bne.w	800e582 <cardOperationWithBlockedSector+0x29a>
	    MFRC522_Init();
 800e3b2:	f7ff ff58 	bl	800e266 <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 800e3b6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	2026      	movs	r0, #38	; 0x26
 800e3be:	f7ff fd17 	bl	800ddf0 <MFRC522_Request>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 800e3c8:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f040 80ce 	bne.w	800e56e <cardOperationWithBlockedSector+0x286>
	      status = MFRC522_Anticoll(str);
 800e3d2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fdfe 	bl	800dfd8 <MFRC522_Anticoll>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 800e3e2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f040 80b7 	bne.w	800e55a <cardOperationWithBlockedSector+0x272>
	        status = MFRC522_SelectTag(str);
 800e3ec:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff fe77 	bl	800e0e4 <MFRC522_SelectTag>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 800e3fc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 80a0 	beq.w	800e546 <cardOperationWithBlockedSector+0x25e>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 800e406:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e40a:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800e40e:	2102      	movs	r1, #2
 800e410:	2061      	movs	r0, #97	; 0x61
 800e412:	f7ff fea9 	bl	800e168 <MFRC522_Auth>
 800e416:	4603      	mov	r3, r0
 800e418:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 800e41c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e420:	2b00      	cmp	r3, #0
 800e422:	f040 8086 	bne.w	800e532 <cardOperationWithBlockedSector+0x24a>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 800e426:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e42a:	4619      	mov	r1, r3
 800e42c:	2002      	movs	r0, #2
 800e42e:	f7ff feee 	bl	800e20e <MFRC522_Read>
 800e432:	4603      	mov	r3, r0
 800e434:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 800e438:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d16e      	bne.n	800e51e <cardOperationWithBlockedSector+0x236>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 800e440:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800e444:	469c      	mov	ip, r3
 800e446:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800e44a:	469e      	mov	lr, r3
 800e44c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800e450:	461c      	mov	r4, r3
 800e452:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800e456:	461d      	mov	r5, r3
 800e458:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800e45c:	461e      	mov	r6, r3
 800e45e:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800e462:	623b      	str	r3, [r7, #32]
 800e464:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800e468:	61fb      	str	r3, [r7, #28]
 800e46a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800e46e:	61bb      	str	r3, [r7, #24]
 800e470:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800e474:	617b      	str	r3, [r7, #20]
 800e476:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800e47a:	613b      	str	r3, [r7, #16]
 800e47c:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800e480:	60fb      	str	r3, [r7, #12]
 800e482:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800e486:	60bb      	str	r3, [r7, #8]
 800e488:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800e48c:	607b      	str	r3, [r7, #4]
 800e48e:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800e492:	4619      	mov	r1, r3
 800e494:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800e498:	461a      	mov	r2, r3
 800e49a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800e49e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e4a2:	930d      	str	r3, [sp, #52]	; 0x34
 800e4a4:	920c      	str	r2, [sp, #48]	; 0x30
 800e4a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	920a      	str	r2, [sp, #40]	; 0x28
 800e4ac:	68ba      	ldr	r2, [r7, #8]
 800e4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	9208      	str	r2, [sp, #32]
 800e4b4:	693a      	ldr	r2, [r7, #16]
 800e4b6:	9207      	str	r2, [sp, #28]
 800e4b8:	697a      	ldr	r2, [r7, #20]
 800e4ba:	9206      	str	r2, [sp, #24]
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	9205      	str	r2, [sp, #20]
 800e4c0:	69fa      	ldr	r2, [r7, #28]
 800e4c2:	9204      	str	r2, [sp, #16]
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	9303      	str	r3, [sp, #12]
 800e4c8:	9602      	str	r6, [sp, #8]
 800e4ca:	9501      	str	r5, [sp, #4]
 800e4cc:	9400      	str	r4, [sp, #0]
 800e4ce:	4673      	mov	r3, lr
 800e4d0:	4662      	mov	r2, ip
 800e4d2:	4939      	ldr	r1, [pc, #228]	; (800e5b8 <cardOperationWithBlockedSector+0x2d0>)
 800e4d4:	f003 ffea 	bl	80124ac <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800e4d8:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e4dc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800e4e0:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800e4e4:	6812      	ldr	r2, [r2, #0]
 800e4e6:	18d4      	adds	r4, r2, r3
 800e4e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fd fe2d 	bl	800c14c <strlen>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f003 fed4 	bl	80122a8 <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 800e500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e504:	4618      	mov	r0, r3
 800e506:	f7fd fe21 	bl	800c14c <strlen>
 800e50a:	4603      	mov	r3, r0
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e512:	4413      	add	r3, r2
 800e514:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 800e518:	2301      	movs	r3, #1
 800e51a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 800e51e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e522:	2b02      	cmp	r3, #2
 800e524:	d105      	bne.n	800e532 <cardOperationWithBlockedSector+0x24a>
	              led(READ_ERR);
 800e526:	2005      	movs	r0, #5
 800e528:	f000 f848 	bl	800e5bc <led>
	              cardIDStatus = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800e532:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <cardOperationWithBlockedSector+0x25e>
	            led(AUTH_ERR);
 800e53a:	2004      	movs	r0, #4
 800e53c:	f000 f83e 	bl	800e5bc <led>
	            cardIDStatus = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800e546:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d005      	beq.n	800e55a <cardOperationWithBlockedSector+0x272>
	          led(TAG_SELECT_ERR);
 800e54e:	2003      	movs	r0, #3
 800e550:	f000 f834 	bl	800e5bc <led>
	          cardIDStatus = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 800e55a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d005      	beq.n	800e56e <cardOperationWithBlockedSector+0x286>
	        led(ANTICOL_ERR);
 800e562:	2002      	movs	r0, #2
 800e564:	f000 f82a 	bl	800e5bc <led>
	        cardIDStatus = 0;
 800e568:	2300      	movs	r3, #0
 800e56a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 800e56e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e572:	2b00      	cmp	r3, #0
 800e574:	d005      	beq.n	800e582 <cardOperationWithBlockedSector+0x29a>
	      led(REQUEST_ERR);
 800e576:	2001      	movs	r0, #1
 800e578:	f000 f820 	bl	800e5bc <led>
	      cardIDStatus = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800e582:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e586:	2b01      	cmp	r3, #1
 800e588:	d10b      	bne.n	800e5a2 <cardOperationWithBlockedSector+0x2ba>
 800e58a:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d107      	bne.n	800e5a2 <cardOperationWithBlockedSector+0x2ba>

	      cardIDStatus = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e000      	b.n	800e5a4 <cardOperationWithBlockedSector+0x2bc>
	    }
	  return 0;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	08012f04 	.word	0x08012f04
 800e5b4:	08012e78 	.word	0x08012e78
 800e5b8:	08012ed4 	.word	0x08012ed4

0800e5bc <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
 800e5ca:	e014      	b.n	800e5f6 <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e5d2:	480d      	ldr	r0, [pc, #52]	; (800e608 <led+0x4c>)
 800e5d4:	f000 ff3c 	bl	800f450 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e5d8:	2064      	movs	r0, #100	; 0x64
 800e5da:	f000 fbd1 	bl	800ed80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e5e4:	4808      	ldr	r0, [pc, #32]	; (800e608 <led+0x4c>)
 800e5e6:	f000 ff33 	bl	800f450 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e5ea:	2064      	movs	r0, #100	; 0x64
 800e5ec:	f000 fbc8 	bl	800ed80 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 800e5f0:	7bfb      	ldrb	r3, [r7, #15]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	73fb      	strb	r3, [r7, #15]
 800e5f6:	7bfa      	ldrb	r2, [r7, #15]
 800e5f8:	79fb      	ldrb	r3, [r7, #7]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d3e6      	bcc.n	800e5cc <led+0x10>
	}
}
 800e5fe:	bf00      	nop
 800e600:	bf00      	nop
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	40011000 	.word	0x40011000

0800e60c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b085      	sub	sp, #20
 800e610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800e612:	4b15      	ldr	r3, [pc, #84]	; (800e668 <HAL_MspInit+0x5c>)
 800e614:	699b      	ldr	r3, [r3, #24]
 800e616:	4a14      	ldr	r2, [pc, #80]	; (800e668 <HAL_MspInit+0x5c>)
 800e618:	f043 0301 	orr.w	r3, r3, #1
 800e61c:	6193      	str	r3, [r2, #24]
 800e61e:	4b12      	ldr	r3, [pc, #72]	; (800e668 <HAL_MspInit+0x5c>)
 800e620:	699b      	ldr	r3, [r3, #24]
 800e622:	f003 0301 	and.w	r3, r3, #1
 800e626:	60bb      	str	r3, [r7, #8]
 800e628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e62a:	4b0f      	ldr	r3, [pc, #60]	; (800e668 <HAL_MspInit+0x5c>)
 800e62c:	69db      	ldr	r3, [r3, #28]
 800e62e:	4a0e      	ldr	r2, [pc, #56]	; (800e668 <HAL_MspInit+0x5c>)
 800e630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e634:	61d3      	str	r3, [r2, #28]
 800e636:	4b0c      	ldr	r3, [pc, #48]	; (800e668 <HAL_MspInit+0x5c>)
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e63e:	607b      	str	r3, [r7, #4]
 800e640:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800e642:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <HAL_MspInit+0x60>)
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	4a04      	ldr	r2, [pc, #16]	; (800e66c <HAL_MspInit+0x60>)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e65e:	bf00      	nop
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	bc80      	pop	{r7}
 800e666:	4770      	bx	lr
 800e668:	40021000 	.word	0x40021000
 800e66c:	40010000 	.word	0x40010000

0800e670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e678:	f107 0310 	add.w	r3, r7, #16
 800e67c:	2200      	movs	r2, #0
 800e67e:	601a      	str	r2, [r3, #0]
 800e680:	605a      	str	r2, [r3, #4]
 800e682:	609a      	str	r2, [r3, #8]
 800e684:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a15      	ldr	r2, [pc, #84]	; (800e6e0 <HAL_I2C_MspInit+0x70>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d123      	bne.n	800e6d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e690:	4b14      	ldr	r3, [pc, #80]	; (800e6e4 <HAL_I2C_MspInit+0x74>)
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	4a13      	ldr	r2, [pc, #76]	; (800e6e4 <HAL_I2C_MspInit+0x74>)
 800e696:	f043 0308 	orr.w	r3, r3, #8
 800e69a:	6193      	str	r3, [r2, #24]
 800e69c:	4b11      	ldr	r3, [pc, #68]	; (800e6e4 <HAL_I2C_MspInit+0x74>)
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	f003 0308 	and.w	r3, r3, #8
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e6a8:	23c0      	movs	r3, #192	; 0xc0
 800e6aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e6ac:	2312      	movs	r3, #18
 800e6ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6b4:	f107 0310 	add.w	r3, r7, #16
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	480b      	ldr	r0, [pc, #44]	; (800e6e8 <HAL_I2C_MspInit+0x78>)
 800e6bc:	f000 fd44 	bl	800f148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e6c0:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <HAL_I2C_MspInit+0x74>)
 800e6c2:	69db      	ldr	r3, [r3, #28]
 800e6c4:	4a07      	ldr	r2, [pc, #28]	; (800e6e4 <HAL_I2C_MspInit+0x74>)
 800e6c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e6ca:	61d3      	str	r3, [r2, #28]
 800e6cc:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <HAL_I2C_MspInit+0x74>)
 800e6ce:	69db      	ldr	r3, [r3, #28]
 800e6d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e6d4:	60bb      	str	r3, [r7, #8]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e6d8:	bf00      	nop
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	40005400 	.word	0x40005400
 800e6e4:	40021000 	.word	0x40021000
 800e6e8:	40010c00 	.word	0x40010c00

0800e6ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b088      	sub	sp, #32
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6f4:	f107 0310 	add.w	r3, r7, #16
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	605a      	str	r2, [r3, #4]
 800e6fe:	609a      	str	r2, [r3, #8]
 800e700:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a1b      	ldr	r2, [pc, #108]	; (800e774 <HAL_SPI_MspInit+0x88>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d12f      	bne.n	800e76c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e70c:	4b1a      	ldr	r3, [pc, #104]	; (800e778 <HAL_SPI_MspInit+0x8c>)
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	4a19      	ldr	r2, [pc, #100]	; (800e778 <HAL_SPI_MspInit+0x8c>)
 800e712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e716:	6193      	str	r3, [r2, #24]
 800e718:	4b17      	ldr	r3, [pc, #92]	; (800e778 <HAL_SPI_MspInit+0x8c>)
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e720:	60fb      	str	r3, [r7, #12]
 800e722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e724:	4b14      	ldr	r3, [pc, #80]	; (800e778 <HAL_SPI_MspInit+0x8c>)
 800e726:	699b      	ldr	r3, [r3, #24]
 800e728:	4a13      	ldr	r2, [pc, #76]	; (800e778 <HAL_SPI_MspInit+0x8c>)
 800e72a:	f043 0304 	orr.w	r3, r3, #4
 800e72e:	6193      	str	r3, [r2, #24]
 800e730:	4b11      	ldr	r3, [pc, #68]	; (800e778 <HAL_SPI_MspInit+0x8c>)
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	f003 0304 	and.w	r3, r3, #4
 800e738:	60bb      	str	r3, [r7, #8]
 800e73a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800e73c:	23a0      	movs	r3, #160	; 0xa0
 800e73e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e740:	2302      	movs	r3, #2
 800e742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e744:	2303      	movs	r3, #3
 800e746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e748:	f107 0310 	add.w	r3, r7, #16
 800e74c:	4619      	mov	r1, r3
 800e74e:	480b      	ldr	r0, [pc, #44]	; (800e77c <HAL_SPI_MspInit+0x90>)
 800e750:	f000 fcfa 	bl	800f148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e754:	2340      	movs	r3, #64	; 0x40
 800e756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e758:	2300      	movs	r3, #0
 800e75a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e75c:	2300      	movs	r3, #0
 800e75e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e760:	f107 0310 	add.w	r3, r7, #16
 800e764:	4619      	mov	r1, r3
 800e766:	4805      	ldr	r0, [pc, #20]	; (800e77c <HAL_SPI_MspInit+0x90>)
 800e768:	f000 fcee 	bl	800f148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e76c:	bf00      	nop
 800e76e:	3720      	adds	r7, #32
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	40013000 	.word	0x40013000
 800e778:	40021000 	.word	0x40021000
 800e77c:	40010800 	.word	0x40010800

0800e780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a1a      	ldr	r2, [pc, #104]	; (800e7f8 <HAL_TIM_Base_MspInit+0x78>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d114      	bne.n	800e7bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e792:	4b1a      	ldr	r3, [pc, #104]	; (800e7fc <HAL_TIM_Base_MspInit+0x7c>)
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	4a19      	ldr	r2, [pc, #100]	; (800e7fc <HAL_TIM_Base_MspInit+0x7c>)
 800e798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e79c:	6193      	str	r3, [r2, #24]
 800e79e:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <HAL_TIM_Base_MspInit+0x7c>)
 800e7a0:	699b      	ldr	r3, [r3, #24]
 800e7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	2019      	movs	r0, #25
 800e7b0:	f000 fbe1 	bl	800ef76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800e7b4:	2019      	movs	r0, #25
 800e7b6:	f000 fbfa 	bl	800efae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800e7ba:	e018      	b.n	800e7ee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7c4:	d113      	bne.n	800e7ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e7c6:	4b0d      	ldr	r3, [pc, #52]	; (800e7fc <HAL_TIM_Base_MspInit+0x7c>)
 800e7c8:	69db      	ldr	r3, [r3, #28]
 800e7ca:	4a0c      	ldr	r2, [pc, #48]	; (800e7fc <HAL_TIM_Base_MspInit+0x7c>)
 800e7cc:	f043 0301 	orr.w	r3, r3, #1
 800e7d0:	61d3      	str	r3, [r2, #28]
 800e7d2:	4b0a      	ldr	r3, [pc, #40]	; (800e7fc <HAL_TIM_Base_MspInit+0x7c>)
 800e7d4:	69db      	ldr	r3, [r3, #28]
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	60bb      	str	r3, [r7, #8]
 800e7dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	201c      	movs	r0, #28
 800e7e4:	f000 fbc7 	bl	800ef76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e7e8:	201c      	movs	r0, #28
 800e7ea:	f000 fbe0 	bl	800efae <HAL_NVIC_EnableIRQ>
}
 800e7ee:	bf00      	nop
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	40012c00 	.word	0x40012c00
 800e7fc:	40021000 	.word	0x40021000

0800e800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b08a      	sub	sp, #40	; 0x28
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e808:	f107 0318 	add.w	r3, r7, #24
 800e80c:	2200      	movs	r2, #0
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	605a      	str	r2, [r3, #4]
 800e812:	609a      	str	r2, [r3, #8]
 800e814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a3b      	ldr	r2, [pc, #236]	; (800e908 <HAL_UART_MspInit+0x108>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d13a      	bne.n	800e896 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e820:	4b3a      	ldr	r3, [pc, #232]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	4a39      	ldr	r2, [pc, #228]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e82a:	6193      	str	r3, [r2, #24]
 800e82c:	4b37      	ldr	r3, [pc, #220]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e834:	617b      	str	r3, [r7, #20]
 800e836:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e838:	4b34      	ldr	r3, [pc, #208]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e83a:	699b      	ldr	r3, [r3, #24]
 800e83c:	4a33      	ldr	r2, [pc, #204]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e83e:	f043 0304 	orr.w	r3, r3, #4
 800e842:	6193      	str	r3, [r2, #24]
 800e844:	4b31      	ldr	r3, [pc, #196]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	613b      	str	r3, [r7, #16]
 800e84e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e850:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e856:	2302      	movs	r3, #2
 800e858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e85a:	2303      	movs	r3, #3
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e85e:	f107 0318 	add.w	r3, r7, #24
 800e862:	4619      	mov	r1, r3
 800e864:	482a      	ldr	r0, [pc, #168]	; (800e910 <HAL_UART_MspInit+0x110>)
 800e866:	f000 fc6f 	bl	800f148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e86a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e86e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e870:	2300      	movs	r3, #0
 800e872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e874:	2300      	movs	r3, #0
 800e876:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e878:	f107 0318 	add.w	r3, r7, #24
 800e87c:	4619      	mov	r1, r3
 800e87e:	4824      	ldr	r0, [pc, #144]	; (800e910 <HAL_UART_MspInit+0x110>)
 800e880:	f000 fc62 	bl	800f148 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e884:	2200      	movs	r2, #0
 800e886:	2100      	movs	r1, #0
 800e888:	2025      	movs	r0, #37	; 0x25
 800e88a:	f000 fb74 	bl	800ef76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e88e:	2025      	movs	r0, #37	; 0x25
 800e890:	f000 fb8d 	bl	800efae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e894:	e034      	b.n	800e900 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a1e      	ldr	r2, [pc, #120]	; (800e914 <HAL_UART_MspInit+0x114>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d12f      	bne.n	800e900 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e8a0:	4b1a      	ldr	r3, [pc, #104]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e8a2:	69db      	ldr	r3, [r3, #28]
 800e8a4:	4a19      	ldr	r2, [pc, #100]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e8a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8aa:	61d3      	str	r3, [r2, #28]
 800e8ac:	4b17      	ldr	r3, [pc, #92]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e8ae:	69db      	ldr	r3, [r3, #28]
 800e8b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8b4:	60fb      	str	r3, [r7, #12]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8b8:	4b14      	ldr	r3, [pc, #80]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e8ba:	699b      	ldr	r3, [r3, #24]
 800e8bc:	4a13      	ldr	r2, [pc, #76]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e8be:	f043 0304 	orr.w	r3, r3, #4
 800e8c2:	6193      	str	r3, [r2, #24]
 800e8c4:	4b11      	ldr	r3, [pc, #68]	; (800e90c <HAL_UART_MspInit+0x10c>)
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	f003 0304 	and.w	r3, r3, #4
 800e8cc:	60bb      	str	r3, [r7, #8]
 800e8ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e8d0:	2304      	movs	r3, #4
 800e8d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e8d8:	2303      	movs	r3, #3
 800e8da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8dc:	f107 0318 	add.w	r3, r7, #24
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	480b      	ldr	r0, [pc, #44]	; (800e910 <HAL_UART_MspInit+0x110>)
 800e8e4:	f000 fc30 	bl	800f148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8f4:	f107 0318 	add.w	r3, r7, #24
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4805      	ldr	r0, [pc, #20]	; (800e910 <HAL_UART_MspInit+0x110>)
 800e8fc:	f000 fc24 	bl	800f148 <HAL_GPIO_Init>
}
 800e900:	bf00      	nop
 800e902:	3728      	adds	r7, #40	; 0x28
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	40013800 	.word	0x40013800
 800e90c:	40021000 	.word	0x40021000
 800e910:	40010800 	.word	0x40010800
 800e914:	40004400 	.word	0x40004400

0800e918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e918:	b480      	push	{r7}
 800e91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e91c:	e7fe      	b.n	800e91c <NMI_Handler+0x4>

0800e91e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e91e:	b580      	push	{r7, lr}
 800e920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	jumpToAddress(0x08000000);
 800e922:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800e926:	f7ff f968 	bl	800dbfa <jumpToAddress>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e92a:	e7fe      	b.n	800e92a <HardFault_Handler+0xc>

0800e92c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e92c:	b480      	push	{r7}
 800e92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e930:	e7fe      	b.n	800e930 <MemManage_Handler+0x4>

0800e932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e932:	b480      	push	{r7}
 800e934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e936:	e7fe      	b.n	800e936 <BusFault_Handler+0x4>

0800e938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e938:	b480      	push	{r7}
 800e93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e93c:	e7fe      	b.n	800e93c <UsageFault_Handler+0x4>

0800e93e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e93e:	b480      	push	{r7}
 800e940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e942:	bf00      	nop
 800e944:	46bd      	mov	sp, r7
 800e946:	bc80      	pop	{r7}
 800e948:	4770      	bx	lr

0800e94a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e94a:	b480      	push	{r7}
 800e94c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e94e:	bf00      	nop
 800e950:	46bd      	mov	sp, r7
 800e952:	bc80      	pop	{r7}
 800e954:	4770      	bx	lr

0800e956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e956:	b480      	push	{r7}
 800e958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e95a:	bf00      	nop
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bc80      	pop	{r7}
 800e960:	4770      	bx	lr

0800e962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e966:	f000 f9ef 	bl	800ed48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e96a:	bf00      	nop
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e974:	4802      	ldr	r0, [pc, #8]	; (800e980 <TIM1_UP_IRQHandler+0x10>)
 800e976:	f002 fa8d 	bl	8010e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800e97a:	bf00      	nop
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	20000408 	.word	0x20000408

0800e984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e988:	4802      	ldr	r0, [pc, #8]	; (800e994 <TIM2_IRQHandler+0x10>)
 800e98a:	f002 fa83 	bl	8010e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800e98e:	bf00      	nop
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20000450 	.word	0x20000450

0800e998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e99c:	4802      	ldr	r0, [pc, #8]	; (800e9a8 <USART1_IRQHandler+0x10>)
 800e99e:	f002 fecd 	bl	801173c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e9a2:	bf00      	nop
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	20000498 	.word	0x20000498

0800e9ac <ErrorSound>:
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);

}
void ErrorSound() {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	480e      	ldr	r0, [pc, #56]	; (800e9ec <ErrorSound+0x40>)
 800e9b4:	f000 fd64 	bl	800f480 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e9b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e9bc:	f000 f9e0 	bl	800ed80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	480a      	ldr	r0, [pc, #40]	; (800e9ec <ErrorSound+0x40>)
 800e9c4:	f000 fd5c 	bl	800f480 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800e9c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e9cc:	f000 f9d8 	bl	800ed80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	4806      	ldr	r0, [pc, #24]	; (800e9ec <ErrorSound+0x40>)
 800e9d4:	f000 fd54 	bl	800f480 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e9d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e9dc:	f000 f9d0 	bl	800ed80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	4802      	ldr	r0, [pc, #8]	; (800e9ec <ErrorSound+0x40>)
 800e9e4:	f000 fd4c 	bl	800f480 <HAL_GPIO_TogglePin>

}
 800e9e8:	bf00      	nop
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	40010c00 	.word	0x40010c00

0800e9f0 <CardReadSound>:
void CardReadSound() {
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	4806      	ldr	r0, [pc, #24]	; (800ea10 <CardReadSound+0x20>)
 800e9f8:	f000 fd42 	bl	800f480 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800e9fc:	2032      	movs	r0, #50	; 0x32
 800e9fe:	f000 f9bf 	bl	800ed80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800ea02:	2101      	movs	r1, #1
 800ea04:	4802      	ldr	r0, [pc, #8]	; (800ea10 <CardReadSound+0x20>)
 800ea06:	f000 fd3b 	bl	800f480 <HAL_GPIO_TogglePin>

}
 800ea0a:	bf00      	nop
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	40010c00 	.word	0x40010c00

0800ea14 <takeData>:

void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
	int i,j,l;
	for(i =5; i< length; i++){
 800ea20:	2305      	movs	r3, #5
 800ea22:	61fb      	str	r3, [r7, #28]
 800ea24:	e008      	b.n	800ea38 <takeData+0x24>
	  if(data[i] == '<')
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	2b3c      	cmp	r3, #60	; 0x3c
 800ea30:	d007      	beq.n	800ea42 <takeData+0x2e>
	for(i =5; i< length; i++){
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	3301      	adds	r3, #1
 800ea36:	61fb      	str	r3, [r7, #28]
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	dbf2      	blt.n	800ea26 <takeData+0x12>
 800ea40:	e000      	b.n	800ea44 <takeData+0x30>
	  {
		  break;
 800ea42:	bf00      	nop
	  }
	}
	for(j = i; j< length; j++){
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	61bb      	str	r3, [r7, #24]
 800ea48:	e008      	b.n	800ea5c <takeData+0x48>
	  if(data[j] == ',')
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	2b2c      	cmp	r3, #44	; 0x2c
 800ea54:	d007      	beq.n	800ea66 <takeData+0x52>
	for(j = i; j< length; j++){
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	61bb      	str	r3, [r7, #24]
 800ea5c:	69ba      	ldr	r2, [r7, #24]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	dbf2      	blt.n	800ea4a <takeData+0x36>
 800ea64:	e000      	b.n	800ea68 <takeData+0x54>
		 {
			  break;
 800ea66:	bf00      	nop
		 }
	}

	for(l = j; l< length; l++){
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	617b      	str	r3, [r7, #20]
 800ea6c:	e008      	b.n	800ea80 <takeData+0x6c>
	  if(data[l] == '!')
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	4413      	add	r3, r2
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b21      	cmp	r3, #33	; 0x21
 800ea78:	d007      	beq.n	800ea8a <takeData+0x76>
	for(l = j; l< length; l++){
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	617b      	str	r3, [r7, #20]
 800ea80:	697a      	ldr	r2, [r7, #20]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	dbf2      	blt.n	800ea6e <takeData+0x5a>
 800ea88:	e000      	b.n	800ea8c <takeData+0x78>
		 {
			  break;
 800ea8a:	bf00      	nop
		 }
	}

	strncpy((char *)dataToDisplay, (char *)data + j + 1, l - j - 1);
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	18d1      	adds	r1, r2, r3
 800ea94:	697a      	ldr	r2, [r7, #20]
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f003 fd31 	bl	8012506 <strncpy>


}
 800eaa4:	bf00      	nop
 800eaa6:	3720      	adds	r7, #32
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <insert>:

void insert(uint8_t* main){
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b088      	sub	sp, #32
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]

    int lenght = strlen((char*)main);
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7fd fb49 	bl	800c14c <strlen>
 800eaba:	4603      	mov	r3, r0
 800eabc:	61bb      	str	r3, [r7, #24]
    char* operationTypePtr = strstr((char*)main, "\"payment");
 800eabe:	491c      	ldr	r1, [pc, #112]	; (800eb30 <insert+0x84>)
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f003 fd33 	bl	801252c <strstr>
 800eac6:	6178      	str	r0, [r7, #20]
    char* value = strchr((char*)operationTypePtr, 'p');
 800eac8:	2170      	movs	r1, #112	; 0x70
 800eaca:	6978      	ldr	r0, [r7, #20]
 800eacc:	f003 fd0e 	bl	80124ec <strchr>
 800ead0:	6138      	str	r0, [r7, #16]
    int index = value - (char*)main;
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	60fb      	str	r3, [r7, #12]


    for(int i = lenght+4; i>index; i--){
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	3304      	adds	r3, #4
 800eade:	61fb      	str	r3, [r7, #28]
 800eae0:	e00b      	b.n	800eafa <insert+0x4e>
        main[i] = main[i - 4];
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	3b04      	subs	r3, #4
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	441a      	add	r2, r3
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	6879      	ldr	r1, [r7, #4]
 800eaee:	440b      	add	r3, r1
 800eaf0:	7812      	ldrb	r2, [r2, #0]
 800eaf2:	701a      	strb	r2, [r3, #0]
    for(int i = lenght+4; i>index; i--){
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	61fb      	str	r3, [r7, #28]
 800eafa:	69fa      	ldr	r2, [r7, #28]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	dcef      	bgt.n	800eae2 <insert+0x36>
    }
    char* valueStart = strchr((char*)operationTypePtr, '\"') + 1;
 800eb02:	2122      	movs	r1, #34	; 0x22
 800eb04:	6978      	ldr	r0, [r7, #20]
 800eb06:	f003 fcf1 	bl	80124ec <strchr>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	60bb      	str	r3, [r7, #8]
    strncpy((char*)valueStart, "makepayment", 11);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	4908      	ldr	r1, [pc, #32]	; (800eb34 <insert+0x88>)
 800eb14:	461a      	mov	r2, r3
 800eb16:	460b      	mov	r3, r1
 800eb18:	cb03      	ldmia	r3!, {r0, r1}
 800eb1a:	6010      	str	r0, [r2, #0]
 800eb1c:	6051      	str	r1, [r2, #4]
 800eb1e:	8819      	ldrh	r1, [r3, #0]
 800eb20:	789b      	ldrb	r3, [r3, #2]
 800eb22:	8111      	strh	r1, [r2, #8]
 800eb24:	7293      	strb	r3, [r2, #10]

}
 800eb26:	bf00      	nop
 800eb28:	3720      	adds	r7, #32
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	08012fc4 	.word	0x08012fc4
 800eb34:	08012fd0 	.word	0x08012fd0

0800eb38 <takeStatus>:

int takeStatus(uint8_t* data, int length){
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =5; i< length; i++){
 800eb42:	2305      	movs	r3, #5
 800eb44:	617b      	str	r3, [r7, #20]
 800eb46:	e008      	b.n	800eb5a <takeStatus+0x22>
	  if(data[i] == '<')
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b3c      	cmp	r3, #60	; 0x3c
 800eb52:	d007      	beq.n	800eb64 <takeStatus+0x2c>
	for(i =5; i< length; i++){
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	3301      	adds	r3, #1
 800eb58:	617b      	str	r3, [r7, #20]
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	dbf2      	blt.n	800eb48 <takeStatus+0x10>
 800eb62:	e000      	b.n	800eb66 <takeStatus+0x2e>
	  {
		  break;
 800eb64:	bf00      	nop
	  }
	}
	STATUSSTR[0] = data[i+1];
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	3302      	adds	r3, #2
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	4413      	add	r3, r2
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	3303      	adds	r3, #3
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	4413      	add	r3, r2
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	73bb      	strb	r3, [r7, #14]
	if(STATUSSTR[0] == 'E' && STATUSSTR[1] == 'R' && STATUSSTR[2] == 'A'){
 800eb8a:	7b3b      	ldrb	r3, [r7, #12]
 800eb8c:	2b45      	cmp	r3, #69	; 0x45
 800eb8e:	d109      	bne.n	800eba4 <takeStatus+0x6c>
 800eb90:	7b7b      	ldrb	r3, [r7, #13]
 800eb92:	2b52      	cmp	r3, #82	; 0x52
 800eb94:	d106      	bne.n	800eba4 <takeStatus+0x6c>
 800eb96:	7bbb      	ldrb	r3, [r7, #14]
 800eb98:	2b41      	cmp	r3, #65	; 0x41
 800eb9a:	d103      	bne.n	800eba4 <takeStatus+0x6c>
		jumpToAddress(resetAddress);
 800eb9c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800eba0:	f7ff f82b 	bl	800dbfa <jumpToAddress>
	}
	int Status = atoi((char*)STATUSSTR);
 800eba4:	f107 030c 	add.w	r3, r7, #12
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f003 fb47 	bl	801223c <atoi>
 800ebae:	6138      	str	r0, [r7, #16]
	return Status;
 800ebb0:	693b      	ldr	r3, [r7, #16]

}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
	...

0800ebbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ebc4:	4a14      	ldr	r2, [pc, #80]	; (800ec18 <_sbrk+0x5c>)
 800ebc6:	4b15      	ldr	r3, [pc, #84]	; (800ec1c <_sbrk+0x60>)
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ebd0:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <_sbrk+0x64>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d102      	bne.n	800ebde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ebd8:	4b11      	ldr	r3, [pc, #68]	; (800ec20 <_sbrk+0x64>)
 800ebda:	4a12      	ldr	r2, [pc, #72]	; (800ec24 <_sbrk+0x68>)
 800ebdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ebde:	4b10      	ldr	r3, [pc, #64]	; (800ec20 <_sbrk+0x64>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d207      	bcs.n	800ebfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ebec:	f003 fb2a 	bl	8012244 <__errno>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	220c      	movs	r2, #12
 800ebf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ebf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebfa:	e009      	b.n	800ec10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ebfc:	4b08      	ldr	r3, [pc, #32]	; (800ec20 <_sbrk+0x64>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ec02:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <_sbrk+0x64>)
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4413      	add	r3, r2
 800ec0a:	4a05      	ldr	r2, [pc, #20]	; (800ec20 <_sbrk+0x64>)
 800ec0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3718      	adds	r7, #24
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	20005000 	.word	0x20005000
 800ec1c:	00000400 	.word	0x00000400
 800ec20:	20000528 	.word	0x20000528
 800ec24:	20000540 	.word	0x20000540

0800ec28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ec2c:	bf00      	nop
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bc80      	pop	{r7}
 800ec32:	4770      	bx	lr

0800ec34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ec34:	480c      	ldr	r0, [pc, #48]	; (800ec68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ec36:	490d      	ldr	r1, [pc, #52]	; (800ec6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ec38:	4a0d      	ldr	r2, [pc, #52]	; (800ec70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ec3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec3c:	e002      	b.n	800ec44 <LoopCopyDataInit>

0800ec3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec42:	3304      	adds	r3, #4

0800ec44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec48:	d3f9      	bcc.n	800ec3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec4a:	4a0a      	ldr	r2, [pc, #40]	; (800ec74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ec4c:	4c0a      	ldr	r4, [pc, #40]	; (800ec78 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ec4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec50:	e001      	b.n	800ec56 <LoopFillZerobss>

0800ec52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec54:	3204      	adds	r2, #4

0800ec56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec58:	d3fb      	bcc.n	800ec52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ec5a:	f7ff ffe5 	bl	800ec28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ec5e:	f003 faf7 	bl	8012250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ec62:	f7fe fb1d 	bl	800d2a0 <main>
  bx lr
 800ec66:	4770      	bx	lr
  ldr r0, =_sdata
 800ec68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ec6c:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 800ec70:	0801314c 	.word	0x0801314c
  ldr r2, =_sbss
 800ec74:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 800ec78:	20000540 	.word	0x20000540

0800ec7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ec7c:	e7fe      	b.n	800ec7c <ADC1_2_IRQHandler>
	...

0800ec80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec84:	4b08      	ldr	r3, [pc, #32]	; (800eca8 <HAL_Init+0x28>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a07      	ldr	r2, [pc, #28]	; (800eca8 <HAL_Init+0x28>)
 800ec8a:	f043 0310 	orr.w	r3, r3, #16
 800ec8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ec90:	2003      	movs	r0, #3
 800ec92:	f000 f965 	bl	800ef60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ec96:	200f      	movs	r0, #15
 800ec98:	f000 f826 	bl	800ece8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ec9c:	f7ff fcb6 	bl	800e60c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	40022000 	.word	0x40022000

0800ecac <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800ecb0:	4b09      	ldr	r3, [pc, #36]	; (800ecd8 <HAL_DeInit+0x2c>)
 800ecb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800ecb8:	4b07      	ldr	r3, [pc, #28]	; (800ecd8 <HAL_DeInit+0x2c>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800ecbe:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <HAL_DeInit+0x2c>)
 800ecc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc4:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800ecc6:	4b04      	ldr	r3, [pc, #16]	; (800ecd8 <HAL_DeInit+0x2c>)
 800ecc8:	2200      	movs	r2, #0
 800ecca:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800eccc:	f000 f806 	bl	800ecdc <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	40021000 	.word	0x40021000

0800ecdc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800ece0:	bf00      	nop
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bc80      	pop	{r7}
 800ece6:	4770      	bx	lr

0800ece8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ecf0:	4b12      	ldr	r3, [pc, #72]	; (800ed3c <HAL_InitTick+0x54>)
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	4b12      	ldr	r3, [pc, #72]	; (800ed40 <HAL_InitTick+0x58>)
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ecfe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed06:	4618      	mov	r0, r3
 800ed08:	f000 f95f 	bl	800efca <HAL_SYSTICK_Config>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e00e      	b.n	800ed34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b0f      	cmp	r3, #15
 800ed1a:	d80a      	bhi.n	800ed32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	6879      	ldr	r1, [r7, #4]
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	f000 f927 	bl	800ef76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed28:	4a06      	ldr	r2, [pc, #24]	; (800ed44 <HAL_InitTick+0x5c>)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e000      	b.n	800ed34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	200000cc 	.word	0x200000cc
 800ed40:	200000d4 	.word	0x200000d4
 800ed44:	200000d0 	.word	0x200000d0

0800ed48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed4c:	4b05      	ldr	r3, [pc, #20]	; (800ed64 <HAL_IncTick+0x1c>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	461a      	mov	r2, r3
 800ed52:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <HAL_IncTick+0x20>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4413      	add	r3, r2
 800ed58:	4a03      	ldr	r2, [pc, #12]	; (800ed68 <HAL_IncTick+0x20>)
 800ed5a:	6013      	str	r3, [r2, #0]
}
 800ed5c:	bf00      	nop
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bc80      	pop	{r7}
 800ed62:	4770      	bx	lr
 800ed64:	200000d4 	.word	0x200000d4
 800ed68:	2000052c 	.word	0x2000052c

0800ed6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	af00      	add	r7, sp, #0
  return uwTick;
 800ed70:	4b02      	ldr	r3, [pc, #8]	; (800ed7c <HAL_GetTick+0x10>)
 800ed72:	681b      	ldr	r3, [r3, #0]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bc80      	pop	{r7}
 800ed7a:	4770      	bx	lr
 800ed7c:	2000052c 	.word	0x2000052c

0800ed80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ed88:	f7ff fff0 	bl	800ed6c <HAL_GetTick>
 800ed8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed98:	d005      	beq.n	800eda6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed9a:	4b0a      	ldr	r3, [pc, #40]	; (800edc4 <HAL_Delay+0x44>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	4413      	add	r3, r2
 800eda4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800eda6:	bf00      	nop
 800eda8:	f7ff ffe0 	bl	800ed6c <HAL_GetTick>
 800edac:	4602      	mov	r2, r0
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d8f7      	bhi.n	800eda8 <HAL_Delay+0x28>
  {
  }
}
 800edb8:	bf00      	nop
 800edba:	bf00      	nop
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	200000d4 	.word	0x200000d4

0800edc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f003 0307 	and.w	r3, r3, #7
 800edd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800edd8:	4b0c      	ldr	r3, [pc, #48]	; (800ee0c <__NVIC_SetPriorityGrouping+0x44>)
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ede4:	4013      	ands	r3, r2
 800ede6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800edf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800edf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800edfa:	4a04      	ldr	r2, [pc, #16]	; (800ee0c <__NVIC_SetPriorityGrouping+0x44>)
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	60d3      	str	r3, [r2, #12]
}
 800ee00:	bf00      	nop
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bc80      	pop	{r7}
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	e000ed00 	.word	0xe000ed00

0800ee10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ee14:	4b04      	ldr	r3, [pc, #16]	; (800ee28 <__NVIC_GetPriorityGrouping+0x18>)
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	0a1b      	lsrs	r3, r3, #8
 800ee1a:	f003 0307 	and.w	r3, r3, #7
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bc80      	pop	{r7}
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	e000ed00 	.word	0xe000ed00

0800ee2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	4603      	mov	r3, r0
 800ee34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	db0b      	blt.n	800ee56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	f003 021f 	and.w	r2, r3, #31
 800ee44:	4906      	ldr	r1, [pc, #24]	; (800ee60 <__NVIC_EnableIRQ+0x34>)
 800ee46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee4a:	095b      	lsrs	r3, r3, #5
 800ee4c:	2001      	movs	r0, #1
 800ee4e:	fa00 f202 	lsl.w	r2, r0, r2
 800ee52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bc80      	pop	{r7}
 800ee5e:	4770      	bx	lr
 800ee60:	e000e100 	.word	0xe000e100

0800ee64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6039      	str	r1, [r7, #0]
 800ee6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	db0a      	blt.n	800ee8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	490c      	ldr	r1, [pc, #48]	; (800eeb0 <__NVIC_SetPriority+0x4c>)
 800ee7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee82:	0112      	lsls	r2, r2, #4
 800ee84:	b2d2      	uxtb	r2, r2
 800ee86:	440b      	add	r3, r1
 800ee88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ee8c:	e00a      	b.n	800eea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	4908      	ldr	r1, [pc, #32]	; (800eeb4 <__NVIC_SetPriority+0x50>)
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	f003 030f 	and.w	r3, r3, #15
 800ee9a:	3b04      	subs	r3, #4
 800ee9c:	0112      	lsls	r2, r2, #4
 800ee9e:	b2d2      	uxtb	r2, r2
 800eea0:	440b      	add	r3, r1
 800eea2:	761a      	strb	r2, [r3, #24]
}
 800eea4:	bf00      	nop
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bc80      	pop	{r7}
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	e000e100 	.word	0xe000e100
 800eeb4:	e000ed00 	.word	0xe000ed00

0800eeb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b089      	sub	sp, #36	; 0x24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f003 0307 	and.w	r3, r3, #7
 800eeca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	f1c3 0307 	rsb	r3, r3, #7
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	bf28      	it	cs
 800eed6:	2304      	movcs	r3, #4
 800eed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	3304      	adds	r3, #4
 800eede:	2b06      	cmp	r3, #6
 800eee0:	d902      	bls.n	800eee8 <NVIC_EncodePriority+0x30>
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	3b03      	subs	r3, #3
 800eee6:	e000      	b.n	800eeea <NVIC_EncodePriority+0x32>
 800eee8:	2300      	movs	r3, #0
 800eeea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800eeec:	f04f 32ff 	mov.w	r2, #4294967295
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	fa02 f303 	lsl.w	r3, r2, r3
 800eef6:	43da      	mvns	r2, r3
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	401a      	ands	r2, r3
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ef00:	f04f 31ff 	mov.w	r1, #4294967295
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	fa01 f303 	lsl.w	r3, r1, r3
 800ef0a:	43d9      	mvns	r1, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef10:	4313      	orrs	r3, r2
         );
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3724      	adds	r7, #36	; 0x24
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bc80      	pop	{r7}
 800ef1a:	4770      	bx	lr

0800ef1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef2c:	d301      	bcc.n	800ef32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e00f      	b.n	800ef52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ef32:	4a0a      	ldr	r2, [pc, #40]	; (800ef5c <SysTick_Config+0x40>)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ef3a:	210f      	movs	r1, #15
 800ef3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef40:	f7ff ff90 	bl	800ee64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <SysTick_Config+0x40>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ef4a:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <SysTick_Config+0x40>)
 800ef4c:	2207      	movs	r2, #7
 800ef4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	e000e010 	.word	0xe000e010

0800ef60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff ff2d 	bl	800edc8 <__NVIC_SetPriorityGrouping>
}
 800ef6e:	bf00      	nop
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b086      	sub	sp, #24
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	60b9      	str	r1, [r7, #8]
 800ef80:	607a      	str	r2, [r7, #4]
 800ef82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ef84:	2300      	movs	r3, #0
 800ef86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ef88:	f7ff ff42 	bl	800ee10 <__NVIC_GetPriorityGrouping>
 800ef8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	68b9      	ldr	r1, [r7, #8]
 800ef92:	6978      	ldr	r0, [r7, #20]
 800ef94:	f7ff ff90 	bl	800eeb8 <NVIC_EncodePriority>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef9e:	4611      	mov	r1, r2
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff ff5f 	bl	800ee64 <__NVIC_SetPriority>
}
 800efa6:	bf00      	nop
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	4603      	mov	r3, r0
 800efb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800efb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff ff35 	bl	800ee2c <__NVIC_EnableIRQ>
}
 800efc2:	bf00      	nop
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b082      	sub	sp, #8
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff ffa2 	bl	800ef1c <SysTick_Config>
 800efd8:	4603      	mov	r3, r0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800efe2:	b480      	push	{r7}
 800efe4:	b085      	sub	sp, #20
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d008      	beq.n	800f00c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2204      	movs	r2, #4
 800effe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	e020      	b.n	800f04e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f022 020e 	bic.w	r2, r2, #14
 800f01a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f022 0201 	bic.w	r2, r2, #1
 800f02a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f034:	2101      	movs	r1, #1
 800f036:	fa01 f202 	lsl.w	r2, r1, r2
 800f03a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3714      	adds	r7, #20
 800f052:	46bd      	mov	sp, r7
 800f054:	bc80      	pop	{r7}
 800f056:	4770      	bx	lr

0800f058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d005      	beq.n	800f07c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2204      	movs	r2, #4
 800f074:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	73fb      	strb	r3, [r7, #15]
 800f07a:	e051      	b.n	800f120 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f022 020e 	bic.w	r2, r2, #14
 800f08a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f022 0201 	bic.w	r2, r2, #1
 800f09a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a22      	ldr	r2, [pc, #136]	; (800f12c <HAL_DMA_Abort_IT+0xd4>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d029      	beq.n	800f0fa <HAL_DMA_Abort_IT+0xa2>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a21      	ldr	r2, [pc, #132]	; (800f130 <HAL_DMA_Abort_IT+0xd8>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d022      	beq.n	800f0f6 <HAL_DMA_Abort_IT+0x9e>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a1f      	ldr	r2, [pc, #124]	; (800f134 <HAL_DMA_Abort_IT+0xdc>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d01a      	beq.n	800f0f0 <HAL_DMA_Abort_IT+0x98>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4a1e      	ldr	r2, [pc, #120]	; (800f138 <HAL_DMA_Abort_IT+0xe0>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d012      	beq.n	800f0ea <HAL_DMA_Abort_IT+0x92>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a1c      	ldr	r2, [pc, #112]	; (800f13c <HAL_DMA_Abort_IT+0xe4>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00a      	beq.n	800f0e4 <HAL_DMA_Abort_IT+0x8c>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a1b      	ldr	r2, [pc, #108]	; (800f140 <HAL_DMA_Abort_IT+0xe8>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d102      	bne.n	800f0de <HAL_DMA_Abort_IT+0x86>
 800f0d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f0dc:	e00e      	b.n	800f0fc <HAL_DMA_Abort_IT+0xa4>
 800f0de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f0e2:	e00b      	b.n	800f0fc <HAL_DMA_Abort_IT+0xa4>
 800f0e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f0e8:	e008      	b.n	800f0fc <HAL_DMA_Abort_IT+0xa4>
 800f0ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0ee:	e005      	b.n	800f0fc <HAL_DMA_Abort_IT+0xa4>
 800f0f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0f4:	e002      	b.n	800f0fc <HAL_DMA_Abort_IT+0xa4>
 800f0f6:	2310      	movs	r3, #16
 800f0f8:	e000      	b.n	800f0fc <HAL_DMA_Abort_IT+0xa4>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4a11      	ldr	r2, [pc, #68]	; (800f144 <HAL_DMA_Abort_IT+0xec>)
 800f0fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f114:	2b00      	cmp	r3, #0
 800f116:	d003      	beq.n	800f120 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	4798      	blx	r3
    } 
  }
  return status;
 800f120:	7bfb      	ldrb	r3, [r7, #15]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	40020008 	.word	0x40020008
 800f130:	4002001c 	.word	0x4002001c
 800f134:	40020030 	.word	0x40020030
 800f138:	40020044 	.word	0x40020044
 800f13c:	40020058 	.word	0x40020058
 800f140:	4002006c 	.word	0x4002006c
 800f144:	40020000 	.word	0x40020000

0800f148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f148:	b480      	push	{r7}
 800f14a:	b08b      	sub	sp, #44	; 0x2c
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f152:	2300      	movs	r3, #0
 800f154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800f156:	2300      	movs	r3, #0
 800f158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f15a:	e169      	b.n	800f430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800f15c:	2201      	movs	r2, #1
 800f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f160:	fa02 f303 	lsl.w	r3, r2, r3
 800f164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	69fa      	ldr	r2, [r7, #28]
 800f16c:	4013      	ands	r3, r2
 800f16e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800f170:	69ba      	ldr	r2, [r7, #24]
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	429a      	cmp	r2, r3
 800f176:	f040 8158 	bne.w	800f42a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	4a9a      	ldr	r2, [pc, #616]	; (800f3e8 <HAL_GPIO_Init+0x2a0>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d05e      	beq.n	800f242 <HAL_GPIO_Init+0xfa>
 800f184:	4a98      	ldr	r2, [pc, #608]	; (800f3e8 <HAL_GPIO_Init+0x2a0>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d875      	bhi.n	800f276 <HAL_GPIO_Init+0x12e>
 800f18a:	4a98      	ldr	r2, [pc, #608]	; (800f3ec <HAL_GPIO_Init+0x2a4>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d058      	beq.n	800f242 <HAL_GPIO_Init+0xfa>
 800f190:	4a96      	ldr	r2, [pc, #600]	; (800f3ec <HAL_GPIO_Init+0x2a4>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d86f      	bhi.n	800f276 <HAL_GPIO_Init+0x12e>
 800f196:	4a96      	ldr	r2, [pc, #600]	; (800f3f0 <HAL_GPIO_Init+0x2a8>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d052      	beq.n	800f242 <HAL_GPIO_Init+0xfa>
 800f19c:	4a94      	ldr	r2, [pc, #592]	; (800f3f0 <HAL_GPIO_Init+0x2a8>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d869      	bhi.n	800f276 <HAL_GPIO_Init+0x12e>
 800f1a2:	4a94      	ldr	r2, [pc, #592]	; (800f3f4 <HAL_GPIO_Init+0x2ac>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d04c      	beq.n	800f242 <HAL_GPIO_Init+0xfa>
 800f1a8:	4a92      	ldr	r2, [pc, #584]	; (800f3f4 <HAL_GPIO_Init+0x2ac>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d863      	bhi.n	800f276 <HAL_GPIO_Init+0x12e>
 800f1ae:	4a92      	ldr	r2, [pc, #584]	; (800f3f8 <HAL_GPIO_Init+0x2b0>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d046      	beq.n	800f242 <HAL_GPIO_Init+0xfa>
 800f1b4:	4a90      	ldr	r2, [pc, #576]	; (800f3f8 <HAL_GPIO_Init+0x2b0>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d85d      	bhi.n	800f276 <HAL_GPIO_Init+0x12e>
 800f1ba:	2b12      	cmp	r3, #18
 800f1bc:	d82a      	bhi.n	800f214 <HAL_GPIO_Init+0xcc>
 800f1be:	2b12      	cmp	r3, #18
 800f1c0:	d859      	bhi.n	800f276 <HAL_GPIO_Init+0x12e>
 800f1c2:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <HAL_GPIO_Init+0x80>)
 800f1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c8:	0800f243 	.word	0x0800f243
 800f1cc:	0800f21d 	.word	0x0800f21d
 800f1d0:	0800f22f 	.word	0x0800f22f
 800f1d4:	0800f271 	.word	0x0800f271
 800f1d8:	0800f277 	.word	0x0800f277
 800f1dc:	0800f277 	.word	0x0800f277
 800f1e0:	0800f277 	.word	0x0800f277
 800f1e4:	0800f277 	.word	0x0800f277
 800f1e8:	0800f277 	.word	0x0800f277
 800f1ec:	0800f277 	.word	0x0800f277
 800f1f0:	0800f277 	.word	0x0800f277
 800f1f4:	0800f277 	.word	0x0800f277
 800f1f8:	0800f277 	.word	0x0800f277
 800f1fc:	0800f277 	.word	0x0800f277
 800f200:	0800f277 	.word	0x0800f277
 800f204:	0800f277 	.word	0x0800f277
 800f208:	0800f277 	.word	0x0800f277
 800f20c:	0800f225 	.word	0x0800f225
 800f210:	0800f239 	.word	0x0800f239
 800f214:	4a79      	ldr	r2, [pc, #484]	; (800f3fc <HAL_GPIO_Init+0x2b4>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d013      	beq.n	800f242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800f21a:	e02c      	b.n	800f276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	623b      	str	r3, [r7, #32]
          break;
 800f222:	e029      	b.n	800f278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	3304      	adds	r3, #4
 800f22a:	623b      	str	r3, [r7, #32]
          break;
 800f22c:	e024      	b.n	800f278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	3308      	adds	r3, #8
 800f234:	623b      	str	r3, [r7, #32]
          break;
 800f236:	e01f      	b.n	800f278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	330c      	adds	r3, #12
 800f23e:	623b      	str	r3, [r7, #32]
          break;
 800f240:	e01a      	b.n	800f278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d102      	bne.n	800f250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800f24a:	2304      	movs	r3, #4
 800f24c:	623b      	str	r3, [r7, #32]
          break;
 800f24e:	e013      	b.n	800f278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d105      	bne.n	800f264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800f258:	2308      	movs	r3, #8
 800f25a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	69fa      	ldr	r2, [r7, #28]
 800f260:	611a      	str	r2, [r3, #16]
          break;
 800f262:	e009      	b.n	800f278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800f264:	2308      	movs	r3, #8
 800f266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	69fa      	ldr	r2, [r7, #28]
 800f26c:	615a      	str	r2, [r3, #20]
          break;
 800f26e:	e003      	b.n	800f278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800f270:	2300      	movs	r3, #0
 800f272:	623b      	str	r3, [r7, #32]
          break;
 800f274:	e000      	b.n	800f278 <HAL_GPIO_Init+0x130>
          break;
 800f276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	2bff      	cmp	r3, #255	; 0xff
 800f27c:	d801      	bhi.n	800f282 <HAL_GPIO_Init+0x13a>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	e001      	b.n	800f286 <HAL_GPIO_Init+0x13e>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3304      	adds	r3, #4
 800f286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	2bff      	cmp	r3, #255	; 0xff
 800f28c:	d802      	bhi.n	800f294 <HAL_GPIO_Init+0x14c>
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	e002      	b.n	800f29a <HAL_GPIO_Init+0x152>
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	3b08      	subs	r3, #8
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	210f      	movs	r1, #15
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800f2a8:	43db      	mvns	r3, r3
 800f2aa:	401a      	ands	r2, r3
 800f2ac:	6a39      	ldr	r1, [r7, #32]
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80b1 	beq.w	800f42a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800f2c8:	4b4d      	ldr	r3, [pc, #308]	; (800f400 <HAL_GPIO_Init+0x2b8>)
 800f2ca:	699b      	ldr	r3, [r3, #24]
 800f2cc:	4a4c      	ldr	r2, [pc, #304]	; (800f400 <HAL_GPIO_Init+0x2b8>)
 800f2ce:	f043 0301 	orr.w	r3, r3, #1
 800f2d2:	6193      	str	r3, [r2, #24]
 800f2d4:	4b4a      	ldr	r3, [pc, #296]	; (800f400 <HAL_GPIO_Init+0x2b8>)
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	60bb      	str	r3, [r7, #8]
 800f2de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800f2e0:	4a48      	ldr	r2, [pc, #288]	; (800f404 <HAL_GPIO_Init+0x2bc>)
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	089b      	lsrs	r3, r3, #2
 800f2e6:	3302      	adds	r3, #2
 800f2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f0:	f003 0303 	and.w	r3, r3, #3
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	220f      	movs	r2, #15
 800f2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f2fc:	43db      	mvns	r3, r3
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	4013      	ands	r3, r2
 800f302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a40      	ldr	r2, [pc, #256]	; (800f408 <HAL_GPIO_Init+0x2c0>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d013      	beq.n	800f334 <HAL_GPIO_Init+0x1ec>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a3f      	ldr	r2, [pc, #252]	; (800f40c <HAL_GPIO_Init+0x2c4>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d00d      	beq.n	800f330 <HAL_GPIO_Init+0x1e8>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a3e      	ldr	r2, [pc, #248]	; (800f410 <HAL_GPIO_Init+0x2c8>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d007      	beq.n	800f32c <HAL_GPIO_Init+0x1e4>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a3d      	ldr	r2, [pc, #244]	; (800f414 <HAL_GPIO_Init+0x2cc>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d101      	bne.n	800f328 <HAL_GPIO_Init+0x1e0>
 800f324:	2303      	movs	r3, #3
 800f326:	e006      	b.n	800f336 <HAL_GPIO_Init+0x1ee>
 800f328:	2304      	movs	r3, #4
 800f32a:	e004      	b.n	800f336 <HAL_GPIO_Init+0x1ee>
 800f32c:	2302      	movs	r3, #2
 800f32e:	e002      	b.n	800f336 <HAL_GPIO_Init+0x1ee>
 800f330:	2301      	movs	r3, #1
 800f332:	e000      	b.n	800f336 <HAL_GPIO_Init+0x1ee>
 800f334:	2300      	movs	r3, #0
 800f336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f338:	f002 0203 	and.w	r2, r2, #3
 800f33c:	0092      	lsls	r2, r2, #2
 800f33e:	4093      	lsls	r3, r2
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	4313      	orrs	r3, r2
 800f344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800f346:	492f      	ldr	r1, [pc, #188]	; (800f404 <HAL_GPIO_Init+0x2bc>)
 800f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34a:	089b      	lsrs	r3, r3, #2
 800f34c:	3302      	adds	r3, #2
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d006      	beq.n	800f36e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800f360:	4b2d      	ldr	r3, [pc, #180]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f362:	689a      	ldr	r2, [r3, #8]
 800f364:	492c      	ldr	r1, [pc, #176]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	4313      	orrs	r3, r2
 800f36a:	608b      	str	r3, [r1, #8]
 800f36c:	e006      	b.n	800f37c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800f36e:	4b2a      	ldr	r3, [pc, #168]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f370:	689a      	ldr	r2, [r3, #8]
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	43db      	mvns	r3, r3
 800f376:	4928      	ldr	r1, [pc, #160]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f378:	4013      	ands	r3, r2
 800f37a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f384:	2b00      	cmp	r3, #0
 800f386:	d006      	beq.n	800f396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800f388:	4b23      	ldr	r3, [pc, #140]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f38a:	68da      	ldr	r2, [r3, #12]
 800f38c:	4922      	ldr	r1, [pc, #136]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	4313      	orrs	r3, r2
 800f392:	60cb      	str	r3, [r1, #12]
 800f394:	e006      	b.n	800f3a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800f396:	4b20      	ldr	r3, [pc, #128]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f398:	68da      	ldr	r2, [r3, #12]
 800f39a:	69bb      	ldr	r3, [r7, #24]
 800f39c:	43db      	mvns	r3, r3
 800f39e:	491e      	ldr	r1, [pc, #120]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d006      	beq.n	800f3be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800f3b0:	4b19      	ldr	r3, [pc, #100]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3b2:	685a      	ldr	r2, [r3, #4]
 800f3b4:	4918      	ldr	r1, [pc, #96]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	604b      	str	r3, [r1, #4]
 800f3bc:	e006      	b.n	800f3cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800f3be:	4b16      	ldr	r3, [pc, #88]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	43db      	mvns	r3, r3
 800f3c6:	4914      	ldr	r1, [pc, #80]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d021      	beq.n	800f41c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800f3d8:	4b0f      	ldr	r3, [pc, #60]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	490e      	ldr	r1, [pc, #56]	; (800f418 <HAL_GPIO_Init+0x2d0>)
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	600b      	str	r3, [r1, #0]
 800f3e4:	e021      	b.n	800f42a <HAL_GPIO_Init+0x2e2>
 800f3e6:	bf00      	nop
 800f3e8:	10320000 	.word	0x10320000
 800f3ec:	10310000 	.word	0x10310000
 800f3f0:	10220000 	.word	0x10220000
 800f3f4:	10210000 	.word	0x10210000
 800f3f8:	10120000 	.word	0x10120000
 800f3fc:	10110000 	.word	0x10110000
 800f400:	40021000 	.word	0x40021000
 800f404:	40010000 	.word	0x40010000
 800f408:	40010800 	.word	0x40010800
 800f40c:	40010c00 	.word	0x40010c00
 800f410:	40011000 	.word	0x40011000
 800f414:	40011400 	.word	0x40011400
 800f418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800f41c:	4b0b      	ldr	r3, [pc, #44]	; (800f44c <HAL_GPIO_Init+0x304>)
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	43db      	mvns	r3, r3
 800f424:	4909      	ldr	r1, [pc, #36]	; (800f44c <HAL_GPIO_Init+0x304>)
 800f426:	4013      	ands	r3, r2
 800f428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	3301      	adds	r3, #1
 800f42e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	fa22 f303 	lsr.w	r3, r2, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f47f ae8e 	bne.w	800f15c <HAL_GPIO_Init+0x14>
  }
}
 800f440:	bf00      	nop
 800f442:	bf00      	nop
 800f444:	372c      	adds	r7, #44	; 0x2c
 800f446:	46bd      	mov	sp, r7
 800f448:	bc80      	pop	{r7}
 800f44a:	4770      	bx	lr
 800f44c:	40010400 	.word	0x40010400

0800f450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	460b      	mov	r3, r1
 800f45a:	807b      	strh	r3, [r7, #2]
 800f45c:	4613      	mov	r3, r2
 800f45e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f460:	787b      	ldrb	r3, [r7, #1]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d003      	beq.n	800f46e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f466:	887a      	ldrh	r2, [r7, #2]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800f46c:	e003      	b.n	800f476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800f46e:	887b      	ldrh	r3, [r7, #2]
 800f470:	041a      	lsls	r2, r3, #16
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	611a      	str	r2, [r3, #16]
}
 800f476:	bf00      	nop
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bc80      	pop	{r7}
 800f47e:	4770      	bx	lr

0800f480 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f492:	887a      	ldrh	r2, [r7, #2]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	4013      	ands	r3, r2
 800f498:	041a      	lsls	r2, r3, #16
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	43d9      	mvns	r1, r3
 800f49e:	887b      	ldrh	r3, [r7, #2]
 800f4a0:	400b      	ands	r3, r1
 800f4a2:	431a      	orrs	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	611a      	str	r2, [r3, #16]
}
 800f4a8:	bf00      	nop
 800f4aa:	3714      	adds	r7, #20
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bc80      	pop	{r7}
 800f4b0:	4770      	bx	lr
	...

0800f4b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d101      	bne.n	800f4c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	e12b      	b.n	800f71e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7ff f8c8 	bl	800e670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2224      	movs	r2, #36	; 0x24
 800f4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f022 0201 	bic.w	r2, r2, #1
 800f4f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800f518:	f001 f8cc 	bl	80106b4 <HAL_RCC_GetPCLK1Freq>
 800f51c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	4a81      	ldr	r2, [pc, #516]	; (800f728 <HAL_I2C_Init+0x274>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d807      	bhi.n	800f538 <HAL_I2C_Init+0x84>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	4a80      	ldr	r2, [pc, #512]	; (800f72c <HAL_I2C_Init+0x278>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	bf94      	ite	ls
 800f530:	2301      	movls	r3, #1
 800f532:	2300      	movhi	r3, #0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	e006      	b.n	800f546 <HAL_I2C_Init+0x92>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	4a7d      	ldr	r2, [pc, #500]	; (800f730 <HAL_I2C_Init+0x27c>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	bf94      	ite	ls
 800f540:	2301      	movls	r3, #1
 800f542:	2300      	movhi	r3, #0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	e0e7      	b.n	800f71e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	4a78      	ldr	r2, [pc, #480]	; (800f734 <HAL_I2C_Init+0x280>)
 800f552:	fba2 2303 	umull	r2, r3, r2, r3
 800f556:	0c9b      	lsrs	r3, r3, #18
 800f558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	430a      	orrs	r2, r1
 800f56c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	6a1b      	ldr	r3, [r3, #32]
 800f574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	4a6a      	ldr	r2, [pc, #424]	; (800f728 <HAL_I2C_Init+0x274>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d802      	bhi.n	800f588 <HAL_I2C_Init+0xd4>
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	3301      	adds	r3, #1
 800f586:	e009      	b.n	800f59c <HAL_I2C_Init+0xe8>
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f58e:	fb02 f303 	mul.w	r3, r2, r3
 800f592:	4a69      	ldr	r2, [pc, #420]	; (800f738 <HAL_I2C_Init+0x284>)
 800f594:	fba2 2303 	umull	r2, r3, r2, r3
 800f598:	099b      	lsrs	r3, r3, #6
 800f59a:	3301      	adds	r3, #1
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	430b      	orrs	r3, r1
 800f5a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	69db      	ldr	r3, [r3, #28]
 800f5aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800f5ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	495c      	ldr	r1, [pc, #368]	; (800f728 <HAL_I2C_Init+0x274>)
 800f5b8:	428b      	cmp	r3, r1
 800f5ba:	d819      	bhi.n	800f5f0 <HAL_I2C_Init+0x13c>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	1e59      	subs	r1, r3, #1
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800f5ca:	1c59      	adds	r1, r3, #1
 800f5cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f5d0:	400b      	ands	r3, r1
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00a      	beq.n	800f5ec <HAL_I2C_Init+0x138>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	1e59      	subs	r1, r3, #1
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	fbb1 f3f3 	udiv	r3, r1, r3
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5ea:	e051      	b.n	800f690 <HAL_I2C_Init+0x1dc>
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	e04f      	b.n	800f690 <HAL_I2C_Init+0x1dc>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d111      	bne.n	800f61c <HAL_I2C_Init+0x168>
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	1e58      	subs	r0, r3, #1
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6859      	ldr	r1, [r3, #4]
 800f600:	460b      	mov	r3, r1
 800f602:	005b      	lsls	r3, r3, #1
 800f604:	440b      	add	r3, r1
 800f606:	fbb0 f3f3 	udiv	r3, r0, r3
 800f60a:	3301      	adds	r3, #1
 800f60c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f610:	2b00      	cmp	r3, #0
 800f612:	bf0c      	ite	eq
 800f614:	2301      	moveq	r3, #1
 800f616:	2300      	movne	r3, #0
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	e012      	b.n	800f642 <HAL_I2C_Init+0x18e>
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	1e58      	subs	r0, r3, #1
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6859      	ldr	r1, [r3, #4]
 800f624:	460b      	mov	r3, r1
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	440b      	add	r3, r1
 800f62a:	0099      	lsls	r1, r3, #2
 800f62c:	440b      	add	r3, r1
 800f62e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f632:	3301      	adds	r3, #1
 800f634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f638:	2b00      	cmp	r3, #0
 800f63a:	bf0c      	ite	eq
 800f63c:	2301      	moveq	r3, #1
 800f63e:	2300      	movne	r3, #0
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <HAL_I2C_Init+0x196>
 800f646:	2301      	movs	r3, #1
 800f648:	e022      	b.n	800f690 <HAL_I2C_Init+0x1dc>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10e      	bne.n	800f670 <HAL_I2C_Init+0x1bc>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	1e58      	subs	r0, r3, #1
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6859      	ldr	r1, [r3, #4]
 800f65a:	460b      	mov	r3, r1
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	440b      	add	r3, r1
 800f660:	fbb0 f3f3 	udiv	r3, r0, r3
 800f664:	3301      	adds	r3, #1
 800f666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f66a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f66e:	e00f      	b.n	800f690 <HAL_I2C_Init+0x1dc>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	1e58      	subs	r0, r3, #1
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6859      	ldr	r1, [r3, #4]
 800f678:	460b      	mov	r3, r1
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	440b      	add	r3, r1
 800f67e:	0099      	lsls	r1, r3, #2
 800f680:	440b      	add	r3, r1
 800f682:	fbb0 f3f3 	udiv	r3, r0, r3
 800f686:	3301      	adds	r3, #1
 800f688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f68c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	6809      	ldr	r1, [r1, #0]
 800f694:	4313      	orrs	r3, r2
 800f696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	69da      	ldr	r2, [r3, #28]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6a1b      	ldr	r3, [r3, #32]
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	430a      	orrs	r2, r1
 800f6b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800f6be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	6911      	ldr	r1, [r2, #16]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	68d2      	ldr	r2, [r2, #12]
 800f6ca:	4311      	orrs	r1, r2
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6812      	ldr	r2, [r2, #0]
 800f6d0:	430b      	orrs	r3, r1
 800f6d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	695a      	ldr	r2, [r3, #20]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	431a      	orrs	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f042 0201 	orr.w	r2, r2, #1
 800f6fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2220      	movs	r2, #32
 800f70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	000186a0 	.word	0x000186a0
 800f72c:	001e847f 	.word	0x001e847f
 800f730:	003d08ff 	.word	0x003d08ff
 800f734:	431bde83 	.word	0x431bde83
 800f738:	10624dd3 	.word	0x10624dd3

0800f73c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b088      	sub	sp, #32
 800f740:	af02      	add	r7, sp, #8
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	607a      	str	r2, [r7, #4]
 800f746:	461a      	mov	r2, r3
 800f748:	460b      	mov	r3, r1
 800f74a:	817b      	strh	r3, [r7, #10]
 800f74c:	4613      	mov	r3, r2
 800f74e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f750:	f7ff fb0c 	bl	800ed6c <HAL_GetTick>
 800f754:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	2b20      	cmp	r3, #32
 800f760:	f040 80e0 	bne.w	800f924 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	2319      	movs	r3, #25
 800f76a:	2201      	movs	r2, #1
 800f76c:	4970      	ldr	r1, [pc, #448]	; (800f930 <HAL_I2C_Master_Transmit+0x1f4>)
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 f964 	bl	800fa3c <I2C_WaitOnFlagUntilTimeout>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d001      	beq.n	800f77e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800f77a:	2302      	movs	r3, #2
 800f77c:	e0d3      	b.n	800f926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f784:	2b01      	cmp	r3, #1
 800f786:	d101      	bne.n	800f78c <HAL_I2C_Master_Transmit+0x50>
 800f788:	2302      	movs	r3, #2
 800f78a:	e0cc      	b.n	800f926 <HAL_I2C_Master_Transmit+0x1ea>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2201      	movs	r2, #1
 800f790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 0301 	and.w	r3, r3, #1
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d007      	beq.n	800f7b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f042 0201 	orr.w	r2, r2, #1
 800f7b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f7c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2221      	movs	r2, #33	; 0x21
 800f7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2210      	movs	r2, #16
 800f7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	893a      	ldrh	r2, [r7, #8]
 800f7e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	4a50      	ldr	r2, [pc, #320]	; (800f934 <HAL_I2C_Master_Transmit+0x1f8>)
 800f7f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f7f4:	8979      	ldrh	r1, [r7, #10]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	6a3a      	ldr	r2, [r7, #32]
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f000 f89c 	bl	800f938 <I2C_MasterRequestWrite>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	e08d      	b.n	800f926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f80a:	2300      	movs	r3, #0
 800f80c:	613b      	str	r3, [r7, #16]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	695b      	ldr	r3, [r3, #20]
 800f814:	613b      	str	r3, [r7, #16]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	613b      	str	r3, [r7, #16]
 800f81e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f820:	e066      	b.n	800f8f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	6a39      	ldr	r1, [r7, #32]
 800f826:	68f8      	ldr	r0, [r7, #12]
 800f828:	f000 fa22 	bl	800fc70 <I2C_WaitOnTXEFlagUntilTimeout>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00d      	beq.n	800f84e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f836:	2b04      	cmp	r3, #4
 800f838:	d107      	bne.n	800f84a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f84a:	2301      	movs	r3, #1
 800f84c:	e06b      	b.n	800f926 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f852:	781a      	ldrb	r2, [r3, #0]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85e:	1c5a      	adds	r2, r3, #1
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f868:	b29b      	uxth	r3, r3
 800f86a:	3b01      	subs	r3, #1
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f876:	3b01      	subs	r3, #1
 800f878:	b29a      	uxth	r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	695b      	ldr	r3, [r3, #20]
 800f884:	f003 0304 	and.w	r3, r3, #4
 800f888:	2b04      	cmp	r3, #4
 800f88a:	d11b      	bne.n	800f8c4 <HAL_I2C_Master_Transmit+0x188>
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f890:	2b00      	cmp	r3, #0
 800f892:	d017      	beq.n	800f8c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f898:	781a      	ldrb	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	6a39      	ldr	r1, [r7, #32]
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f000 fa19 	bl	800fd00 <I2C_WaitOnBTFFlagUntilTimeout>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00d      	beq.n	800f8f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d8:	2b04      	cmp	r3, #4
 800f8da:	d107      	bne.n	800f8ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f8ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	e01a      	b.n	800f926 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d194      	bne.n	800f822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2220      	movs	r2, #32
 800f90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2200      	movs	r2, #0
 800f914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2200      	movs	r2, #0
 800f91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	e000      	b.n	800f926 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f924:	2302      	movs	r3, #2
  }
}
 800f926:	4618      	mov	r0, r3
 800f928:	3718      	adds	r7, #24
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	00100002 	.word	0x00100002
 800f934:	ffff0000 	.word	0xffff0000

0800f938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b088      	sub	sp, #32
 800f93c:	af02      	add	r7, sp, #8
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	607a      	str	r2, [r7, #4]
 800f942:	603b      	str	r3, [r7, #0]
 800f944:	460b      	mov	r3, r1
 800f946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	2b08      	cmp	r3, #8
 800f952:	d006      	beq.n	800f962 <I2C_MasterRequestWrite+0x2a>
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d003      	beq.n	800f962 <I2C_MasterRequestWrite+0x2a>
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f960:	d108      	bne.n	800f974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	e00b      	b.n	800f98c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f978:	2b12      	cmp	r3, #18
 800f97a:	d107      	bne.n	800f98c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f98a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 f84f 	bl	800fa3c <I2C_WaitOnFlagUntilTimeout>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00d      	beq.n	800f9c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9b2:	d103      	bne.n	800f9bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e035      	b.n	800fa2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9c8:	d108      	bne.n	800f9dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f9ca:	897b      	ldrh	r3, [r7, #10]
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f9d8:	611a      	str	r2, [r3, #16]
 800f9da:	e01b      	b.n	800fa14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f9dc:	897b      	ldrh	r3, [r7, #10]
 800f9de:	11db      	asrs	r3, r3, #7
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	f003 0306 	and.w	r3, r3, #6
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	f063 030f 	orn	r3, r3, #15
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	490e      	ldr	r1, [pc, #56]	; (800fa34 <I2C_MasterRequestWrite+0xfc>)
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	f000 f898 	bl	800fb30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800fa06:	2301      	movs	r3, #1
 800fa08:	e010      	b.n	800fa2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800fa0a:	897b      	ldrh	r3, [r7, #10]
 800fa0c:	b2da      	uxtb	r2, r3
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	4907      	ldr	r1, [pc, #28]	; (800fa38 <I2C_MasterRequestWrite+0x100>)
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 f888 	bl	800fb30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	e000      	b.n	800fa2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3718      	adds	r7, #24
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	00010008 	.word	0x00010008
 800fa38:	00010002 	.word	0x00010002

0800fa3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	603b      	str	r3, [r7, #0]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fa4c:	e048      	b.n	800fae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa54:	d044      	beq.n	800fae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa56:	f7ff f989 	bl	800ed6c <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	683a      	ldr	r2, [r7, #0]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d302      	bcc.n	800fa6c <I2C_WaitOnFlagUntilTimeout+0x30>
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d139      	bne.n	800fae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	0c1b      	lsrs	r3, r3, #16
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d10d      	bne.n	800fa92 <I2C_WaitOnFlagUntilTimeout+0x56>
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	695b      	ldr	r3, [r3, #20]
 800fa7c:	43da      	mvns	r2, r3
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	4013      	ands	r3, r2
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	bf0c      	ite	eq
 800fa88:	2301      	moveq	r3, #1
 800fa8a:	2300      	movne	r3, #0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	461a      	mov	r2, r3
 800fa90:	e00c      	b.n	800faac <I2C_WaitOnFlagUntilTimeout+0x70>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	43da      	mvns	r2, r3
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	4013      	ands	r3, r2
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	bf0c      	ite	eq
 800faa4:	2301      	moveq	r3, #1
 800faa6:	2300      	movne	r3, #0
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	461a      	mov	r2, r3
 800faac:	79fb      	ldrb	r3, [r7, #7]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d116      	bne.n	800fae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2220      	movs	r2, #32
 800fabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800facc:	f043 0220 	orr.w	r2, r3, #32
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	e023      	b.n	800fb28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	0c1b      	lsrs	r3, r3, #16
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d10d      	bne.n	800fb06 <I2C_WaitOnFlagUntilTimeout+0xca>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	695b      	ldr	r3, [r3, #20]
 800faf0:	43da      	mvns	r2, r3
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	4013      	ands	r3, r2
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	bf0c      	ite	eq
 800fafc:	2301      	moveq	r3, #1
 800fafe:	2300      	movne	r3, #0
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	461a      	mov	r2, r3
 800fb04:	e00c      	b.n	800fb20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	699b      	ldr	r3, [r3, #24]
 800fb0c:	43da      	mvns	r2, r3
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	4013      	ands	r3, r2
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	bf0c      	ite	eq
 800fb18:	2301      	moveq	r3, #1
 800fb1a:	2300      	movne	r3, #0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	461a      	mov	r2, r3
 800fb20:	79fb      	ldrb	r3, [r7, #7]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d093      	beq.n	800fa4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800fb3e:	e071      	b.n	800fc24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb4e:	d123      	bne.n	800fb98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fb68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2220      	movs	r2, #32
 800fb74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb84:	f043 0204 	orr.w	r2, r3, #4
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800fb94:	2301      	movs	r3, #1
 800fb96:	e067      	b.n	800fc68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9e:	d041      	beq.n	800fc24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fba0:	f7ff f8e4 	bl	800ed6c <HAL_GetTick>
 800fba4:	4602      	mov	r2, r0
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d302      	bcc.n	800fbb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d136      	bne.n	800fc24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	0c1b      	lsrs	r3, r3, #16
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d10c      	bne.n	800fbda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	43da      	mvns	r2, r3
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	4013      	ands	r3, r2
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	bf14      	ite	ne
 800fbd2:	2301      	movne	r3, #1
 800fbd4:	2300      	moveq	r3, #0
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	e00b      	b.n	800fbf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	699b      	ldr	r3, [r3, #24]
 800fbe0:	43da      	mvns	r2, r3
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	4013      	ands	r3, r2
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	bf14      	ite	ne
 800fbec:	2301      	movne	r3, #1
 800fbee:	2300      	moveq	r3, #0
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d016      	beq.n	800fc24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc10:	f043 0220 	orr.w	r2, r3, #32
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800fc20:	2301      	movs	r3, #1
 800fc22:	e021      	b.n	800fc68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	0c1b      	lsrs	r3, r3, #16
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d10c      	bne.n	800fc48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	43da      	mvns	r2, r3
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	4013      	ands	r3, r2
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	bf14      	ite	ne
 800fc40:	2301      	movne	r3, #1
 800fc42:	2300      	moveq	r3, #0
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	e00b      	b.n	800fc60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	43da      	mvns	r2, r3
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	4013      	ands	r3, r2
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	bf14      	ite	ne
 800fc5a:	2301      	movne	r3, #1
 800fc5c:	2300      	moveq	r3, #0
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f47f af6d 	bne.w	800fb40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fc7c:	e034      	b.n	800fce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f000 f886 	bl	800fd90 <I2C_IsAcknowledgeFailed>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e034      	b.n	800fcf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc94:	d028      	beq.n	800fce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc96:	f7ff f869 	bl	800ed6c <HAL_GetTick>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	1ad3      	subs	r3, r2, r3
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d302      	bcc.n	800fcac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d11d      	bne.n	800fce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	695b      	ldr	r3, [r3, #20]
 800fcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcb6:	2b80      	cmp	r3, #128	; 0x80
 800fcb8:	d016      	beq.n	800fce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2220      	movs	r2, #32
 800fcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcd4:	f043 0220 	orr.w	r2, r3, #32
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2200      	movs	r2, #0
 800fce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800fce4:	2301      	movs	r3, #1
 800fce6:	e007      	b.n	800fcf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcf2:	2b80      	cmp	r3, #128	; 0x80
 800fcf4:	d1c3      	bne.n	800fc7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800fd0c:	e034      	b.n	800fd78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f000 f83e 	bl	800fd90 <I2C_IsAcknowledgeFailed>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d001      	beq.n	800fd1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e034      	b.n	800fd88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd24:	d028      	beq.n	800fd78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd26:	f7ff f821 	bl	800ed6c <HAL_GetTick>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d302      	bcc.n	800fd3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d11d      	bne.n	800fd78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	695b      	ldr	r3, [r3, #20]
 800fd42:	f003 0304 	and.w	r3, r3, #4
 800fd46:	2b04      	cmp	r3, #4
 800fd48:	d016      	beq.n	800fd78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2220      	movs	r2, #32
 800fd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd64:	f043 0220 	orr.w	r2, r3, #32
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800fd74:	2301      	movs	r3, #1
 800fd76:	e007      	b.n	800fd88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	695b      	ldr	r3, [r3, #20]
 800fd7e:	f003 0304 	and.w	r3, r3, #4
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d1c3      	bne.n	800fd0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fda2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fda6:	d11b      	bne.n	800fde0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fdb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2220      	movs	r2, #32
 800fdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdcc:	f043 0204 	orr.w	r2, r3, #4
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800fddc:	2301      	movs	r3, #1
 800fdde:	e000      	b.n	800fde2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800fde0:	2300      	movs	r3, #0
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	370c      	adds	r7, #12
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bc80      	pop	{r7}
 800fdea:	4770      	bx	lr

0800fdec <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fdf2:	f7fe ffbb 	bl	800ed6c <HAL_GetTick>
 800fdf6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800fdf8:	4b45      	ldr	r3, [pc, #276]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a44      	ldr	r2, [pc, #272]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fdfe:	f043 0301 	orr.w	r3, r3, #1
 800fe02:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800fe04:	e008      	b.n	800fe18 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fe06:	f7fe ffb1 	bl	800ed6c <HAL_GetTick>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d901      	bls.n	800fe18 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800fe14:	2303      	movs	r3, #3
 800fe16:	e077      	b.n	800ff08 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800fe18:	4b3d      	ldr	r3, [pc, #244]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f003 0302 	and.w	r3, r3, #2
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d0f0      	beq.n	800fe06 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800fe24:	4b3a      	ldr	r3, [pc, #232]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fe2c:	4a38      	ldr	r2, [pc, #224]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fe34:	f7fe ff9a 	bl	800ed6c <HAL_GetTick>
 800fe38:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800fe3a:	4b35      	ldr	r3, [pc, #212]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800fe40:	e00a      	b.n	800fe58 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fe42:	f7fe ff93 	bl	800ed6c <HAL_GetTick>
 800fe46:	4602      	mov	r2, r0
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d901      	bls.n	800fe58 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800fe54:	2303      	movs	r3, #3
 800fe56:	e057      	b.n	800ff08 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800fe58:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	f003 030c 	and.w	r3, r3, #12
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1ee      	bne.n	800fe42 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800fe64:	4b2b      	ldr	r3, [pc, #172]	; (800ff14 <HAL_RCC_DeInit+0x128>)
 800fe66:	4a2c      	ldr	r2, [pc, #176]	; (800ff18 <HAL_RCC_DeInit+0x12c>)
 800fe68:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800fe6a:	4b2c      	ldr	r3, [pc, #176]	; (800ff1c <HAL_RCC_DeInit+0x130>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe ff3a 	bl	800ece8 <HAL_InitTick>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d001      	beq.n	800fe7e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e044      	b.n	800ff08 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fe7e:	f7fe ff75 	bl	800ed6c <HAL_GetTick>
 800fe82:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800fe84:	4b22      	ldr	r3, [pc, #136]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4a21      	ldr	r2, [pc, #132]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fe8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fe8e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800fe90:	e008      	b.n	800fea4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fe92:	f7fe ff6b 	bl	800ed6c <HAL_GetTick>
 800fe96:	4602      	mov	r2, r0
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	d901      	bls.n	800fea4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800fea0:	2303      	movs	r3, #3
 800fea2:	e031      	b.n	800ff08 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800fea4:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1f0      	bne.n	800fe92 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800feb0:	4b17      	ldr	r3, [pc, #92]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800feb6:	f7fe ff59 	bl	800ed6c <HAL_GetTick>
 800feba:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800febc:	4b14      	ldr	r3, [pc, #80]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a13      	ldr	r2, [pc, #76]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fec2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800fec6:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800fec8:	e008      	b.n	800fedc <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800feca:	f7fe ff4f 	bl	800ed6c <HAL_GetTick>
 800fece:	4602      	mov	r2, r0
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	2b64      	cmp	r3, #100	; 0x64
 800fed6:	d901      	bls.n	800fedc <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800fed8:	2303      	movs	r3, #3
 800feda:	e015      	b.n	800ff08 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800fedc:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1f0      	bne.n	800feca <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800fee8:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4a08      	ldr	r2, [pc, #32]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800feee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fef2:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800fef4:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef8:	4a05      	ldr	r2, [pc, #20]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800fefa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fefe:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800ff00:	4b03      	ldr	r3, [pc, #12]	; (800ff10 <HAL_RCC_DeInit+0x124>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3708      	adds	r7, #8
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	40021000 	.word	0x40021000
 800ff14:	200000cc 	.word	0x200000cc
 800ff18:	007a1200 	.word	0x007a1200
 800ff1c:	200000d0 	.word	0x200000d0

0800ff20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e272      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f003 0301 	and.w	r3, r3, #1
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f000 8087 	beq.w	801004e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ff40:	4b92      	ldr	r3, [pc, #584]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	f003 030c 	and.w	r3, r3, #12
 800ff48:	2b04      	cmp	r3, #4
 800ff4a:	d00c      	beq.n	800ff66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ff4c:	4b8f      	ldr	r3, [pc, #572]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	f003 030c 	and.w	r3, r3, #12
 800ff54:	2b08      	cmp	r3, #8
 800ff56:	d112      	bne.n	800ff7e <HAL_RCC_OscConfig+0x5e>
 800ff58:	4b8c      	ldr	r3, [pc, #560]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff64:	d10b      	bne.n	800ff7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff66:	4b89      	ldr	r3, [pc, #548]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d06c      	beq.n	801004c <HAL_RCC_OscConfig+0x12c>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d168      	bne.n	801004c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e24c      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff86:	d106      	bne.n	800ff96 <HAL_RCC_OscConfig+0x76>
 800ff88:	4b80      	ldr	r3, [pc, #512]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4a7f      	ldr	r2, [pc, #508]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ff8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	e02e      	b.n	800fff4 <HAL_RCC_OscConfig+0xd4>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10c      	bne.n	800ffb8 <HAL_RCC_OscConfig+0x98>
 800ff9e:	4b7b      	ldr	r3, [pc, #492]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4a7a      	ldr	r2, [pc, #488]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	4b78      	ldr	r3, [pc, #480]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a77      	ldr	r2, [pc, #476]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ffb4:	6013      	str	r3, [r2, #0]
 800ffb6:	e01d      	b.n	800fff4 <HAL_RCC_OscConfig+0xd4>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ffc0:	d10c      	bne.n	800ffdc <HAL_RCC_OscConfig+0xbc>
 800ffc2:	4b72      	ldr	r3, [pc, #456]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a71      	ldr	r2, [pc, #452]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ffcc:	6013      	str	r3, [r2, #0]
 800ffce:	4b6f      	ldr	r3, [pc, #444]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4a6e      	ldr	r2, [pc, #440]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffd8:	6013      	str	r3, [r2, #0]
 800ffda:	e00b      	b.n	800fff4 <HAL_RCC_OscConfig+0xd4>
 800ffdc:	4b6b      	ldr	r3, [pc, #428]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a6a      	ldr	r2, [pc, #424]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ffe6:	6013      	str	r3, [r2, #0]
 800ffe8:	4b68      	ldr	r3, [pc, #416]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a67      	ldr	r2, [pc, #412]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 800ffee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d013      	beq.n	8010024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fffc:	f7fe feb6 	bl	800ed6c <HAL_GetTick>
 8010000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010002:	e008      	b.n	8010016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010004:	f7fe feb2 	bl	800ed6c <HAL_GetTick>
 8010008:	4602      	mov	r2, r0
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	2b64      	cmp	r3, #100	; 0x64
 8010010:	d901      	bls.n	8010016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010012:	2303      	movs	r3, #3
 8010014:	e200      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010016:	4b5d      	ldr	r3, [pc, #372]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801001e:	2b00      	cmp	r3, #0
 8010020:	d0f0      	beq.n	8010004 <HAL_RCC_OscConfig+0xe4>
 8010022:	e014      	b.n	801004e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010024:	f7fe fea2 	bl	800ed6c <HAL_GetTick>
 8010028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801002a:	e008      	b.n	801003e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801002c:	f7fe fe9e 	bl	800ed6c <HAL_GetTick>
 8010030:	4602      	mov	r2, r0
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	2b64      	cmp	r3, #100	; 0x64
 8010038:	d901      	bls.n	801003e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801003a:	2303      	movs	r3, #3
 801003c:	e1ec      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801003e:	4b53      	ldr	r3, [pc, #332]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1f0      	bne.n	801002c <HAL_RCC_OscConfig+0x10c>
 801004a:	e000      	b.n	801004e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801004c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f003 0302 	and.w	r3, r3, #2
 8010056:	2b00      	cmp	r3, #0
 8010058:	d063      	beq.n	8010122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801005a:	4b4c      	ldr	r3, [pc, #304]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	f003 030c 	and.w	r3, r3, #12
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00b      	beq.n	801007e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8010066:	4b49      	ldr	r3, [pc, #292]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	f003 030c 	and.w	r3, r3, #12
 801006e:	2b08      	cmp	r3, #8
 8010070:	d11c      	bne.n	80100ac <HAL_RCC_OscConfig+0x18c>
 8010072:	4b46      	ldr	r3, [pc, #280]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801007a:	2b00      	cmp	r3, #0
 801007c:	d116      	bne.n	80100ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801007e:	4b43      	ldr	r3, [pc, #268]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f003 0302 	and.w	r3, r3, #2
 8010086:	2b00      	cmp	r3, #0
 8010088:	d005      	beq.n	8010096 <HAL_RCC_OscConfig+0x176>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d001      	beq.n	8010096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8010092:	2301      	movs	r3, #1
 8010094:	e1c0      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010096:	4b3d      	ldr	r3, [pc, #244]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	00db      	lsls	r3, r3, #3
 80100a4:	4939      	ldr	r1, [pc, #228]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 80100a6:	4313      	orrs	r3, r2
 80100a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100aa:	e03a      	b.n	8010122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d020      	beq.n	80100f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80100b4:	4b36      	ldr	r3, [pc, #216]	; (8010190 <HAL_RCC_OscConfig+0x270>)
 80100b6:	2201      	movs	r2, #1
 80100b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100ba:	f7fe fe57 	bl	800ed6c <HAL_GetTick>
 80100be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80100c0:	e008      	b.n	80100d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80100c2:	f7fe fe53 	bl	800ed6c <HAL_GetTick>
 80100c6:	4602      	mov	r2, r0
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	2b02      	cmp	r3, #2
 80100ce:	d901      	bls.n	80100d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80100d0:	2303      	movs	r3, #3
 80100d2:	e1a1      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80100d4:	4b2d      	ldr	r3, [pc, #180]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f003 0302 	and.w	r3, r3, #2
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d0f0      	beq.n	80100c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80100e0:	4b2a      	ldr	r3, [pc, #168]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	695b      	ldr	r3, [r3, #20]
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	4927      	ldr	r1, [pc, #156]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 80100f0:	4313      	orrs	r3, r2
 80100f2:	600b      	str	r3, [r1, #0]
 80100f4:	e015      	b.n	8010122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80100f6:	4b26      	ldr	r3, [pc, #152]	; (8010190 <HAL_RCC_OscConfig+0x270>)
 80100f8:	2200      	movs	r2, #0
 80100fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100fc:	f7fe fe36 	bl	800ed6c <HAL_GetTick>
 8010100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010102:	e008      	b.n	8010116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010104:	f7fe fe32 	bl	800ed6c <HAL_GetTick>
 8010108:	4602      	mov	r2, r0
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	2b02      	cmp	r3, #2
 8010110:	d901      	bls.n	8010116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8010112:	2303      	movs	r3, #3
 8010114:	e180      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010116:	4b1d      	ldr	r3, [pc, #116]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f003 0302 	and.w	r3, r3, #2
 801011e:	2b00      	cmp	r3, #0
 8010120:	d1f0      	bne.n	8010104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f003 0308 	and.w	r3, r3, #8
 801012a:	2b00      	cmp	r3, #0
 801012c:	d03a      	beq.n	80101a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	699b      	ldr	r3, [r3, #24]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d019      	beq.n	801016a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010136:	4b17      	ldr	r3, [pc, #92]	; (8010194 <HAL_RCC_OscConfig+0x274>)
 8010138:	2201      	movs	r2, #1
 801013a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801013c:	f7fe fe16 	bl	800ed6c <HAL_GetTick>
 8010140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010142:	e008      	b.n	8010156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010144:	f7fe fe12 	bl	800ed6c <HAL_GetTick>
 8010148:	4602      	mov	r2, r0
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	2b02      	cmp	r3, #2
 8010150:	d901      	bls.n	8010156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8010152:	2303      	movs	r3, #3
 8010154:	e160      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010156:	4b0d      	ldr	r3, [pc, #52]	; (801018c <HAL_RCC_OscConfig+0x26c>)
 8010158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015a:	f003 0302 	and.w	r3, r3, #2
 801015e:	2b00      	cmp	r3, #0
 8010160:	d0f0      	beq.n	8010144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8010162:	2001      	movs	r0, #1
 8010164:	f000 face 	bl	8010704 <RCC_Delay>
 8010168:	e01c      	b.n	80101a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801016a:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <HAL_RCC_OscConfig+0x274>)
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010170:	f7fe fdfc 	bl	800ed6c <HAL_GetTick>
 8010174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010176:	e00f      	b.n	8010198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010178:	f7fe fdf8 	bl	800ed6c <HAL_GetTick>
 801017c:	4602      	mov	r2, r0
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	2b02      	cmp	r3, #2
 8010184:	d908      	bls.n	8010198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e146      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
 801018a:	bf00      	nop
 801018c:	40021000 	.word	0x40021000
 8010190:	42420000 	.word	0x42420000
 8010194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010198:	4b92      	ldr	r3, [pc, #584]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801019a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801019c:	f003 0302 	and.w	r3, r3, #2
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1e9      	bne.n	8010178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f000 80a6 	beq.w	80102fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80101b2:	2300      	movs	r3, #0
 80101b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80101b6:	4b8b      	ldr	r3, [pc, #556]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80101b8:	69db      	ldr	r3, [r3, #28]
 80101ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10d      	bne.n	80101de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80101c2:	4b88      	ldr	r3, [pc, #544]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80101c4:	69db      	ldr	r3, [r3, #28]
 80101c6:	4a87      	ldr	r2, [pc, #540]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80101c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101cc:	61d3      	str	r3, [r2, #28]
 80101ce:	4b85      	ldr	r3, [pc, #532]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80101d0:	69db      	ldr	r3, [r3, #28]
 80101d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101d6:	60bb      	str	r3, [r7, #8]
 80101d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80101da:	2301      	movs	r3, #1
 80101dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80101de:	4b82      	ldr	r3, [pc, #520]	; (80103e8 <HAL_RCC_OscConfig+0x4c8>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d118      	bne.n	801021c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80101ea:	4b7f      	ldr	r3, [pc, #508]	; (80103e8 <HAL_RCC_OscConfig+0x4c8>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a7e      	ldr	r2, [pc, #504]	; (80103e8 <HAL_RCC_OscConfig+0x4c8>)
 80101f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80101f6:	f7fe fdb9 	bl	800ed6c <HAL_GetTick>
 80101fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80101fc:	e008      	b.n	8010210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80101fe:	f7fe fdb5 	bl	800ed6c <HAL_GetTick>
 8010202:	4602      	mov	r2, r0
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	2b64      	cmp	r3, #100	; 0x64
 801020a:	d901      	bls.n	8010210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 801020c:	2303      	movs	r3, #3
 801020e:	e103      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010210:	4b75      	ldr	r3, [pc, #468]	; (80103e8 <HAL_RCC_OscConfig+0x4c8>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010218:	2b00      	cmp	r3, #0
 801021a:	d0f0      	beq.n	80101fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d106      	bne.n	8010232 <HAL_RCC_OscConfig+0x312>
 8010224:	4b6f      	ldr	r3, [pc, #444]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010226:	6a1b      	ldr	r3, [r3, #32]
 8010228:	4a6e      	ldr	r2, [pc, #440]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801022a:	f043 0301 	orr.w	r3, r3, #1
 801022e:	6213      	str	r3, [r2, #32]
 8010230:	e02d      	b.n	801028e <HAL_RCC_OscConfig+0x36e>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10c      	bne.n	8010254 <HAL_RCC_OscConfig+0x334>
 801023a:	4b6a      	ldr	r3, [pc, #424]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801023c:	6a1b      	ldr	r3, [r3, #32]
 801023e:	4a69      	ldr	r2, [pc, #420]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010240:	f023 0301 	bic.w	r3, r3, #1
 8010244:	6213      	str	r3, [r2, #32]
 8010246:	4b67      	ldr	r3, [pc, #412]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010248:	6a1b      	ldr	r3, [r3, #32]
 801024a:	4a66      	ldr	r2, [pc, #408]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801024c:	f023 0304 	bic.w	r3, r3, #4
 8010250:	6213      	str	r3, [r2, #32]
 8010252:	e01c      	b.n	801028e <HAL_RCC_OscConfig+0x36e>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	2b05      	cmp	r3, #5
 801025a:	d10c      	bne.n	8010276 <HAL_RCC_OscConfig+0x356>
 801025c:	4b61      	ldr	r3, [pc, #388]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801025e:	6a1b      	ldr	r3, [r3, #32]
 8010260:	4a60      	ldr	r2, [pc, #384]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010262:	f043 0304 	orr.w	r3, r3, #4
 8010266:	6213      	str	r3, [r2, #32]
 8010268:	4b5e      	ldr	r3, [pc, #376]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801026a:	6a1b      	ldr	r3, [r3, #32]
 801026c:	4a5d      	ldr	r2, [pc, #372]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801026e:	f043 0301 	orr.w	r3, r3, #1
 8010272:	6213      	str	r3, [r2, #32]
 8010274:	e00b      	b.n	801028e <HAL_RCC_OscConfig+0x36e>
 8010276:	4b5b      	ldr	r3, [pc, #364]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	4a5a      	ldr	r2, [pc, #360]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801027c:	f023 0301 	bic.w	r3, r3, #1
 8010280:	6213      	str	r3, [r2, #32]
 8010282:	4b58      	ldr	r3, [pc, #352]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010284:	6a1b      	ldr	r3, [r3, #32]
 8010286:	4a57      	ldr	r2, [pc, #348]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010288:	f023 0304 	bic.w	r3, r3, #4
 801028c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d015      	beq.n	80102c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010296:	f7fe fd69 	bl	800ed6c <HAL_GetTick>
 801029a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801029c:	e00a      	b.n	80102b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801029e:	f7fe fd65 	bl	800ed6c <HAL_GetTick>
 80102a2:	4602      	mov	r2, r0
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	1ad3      	subs	r3, r2, r3
 80102a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d901      	bls.n	80102b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80102b0:	2303      	movs	r3, #3
 80102b2:	e0b1      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102b4:	4b4b      	ldr	r3, [pc, #300]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80102b6:	6a1b      	ldr	r3, [r3, #32]
 80102b8:	f003 0302 	and.w	r3, r3, #2
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d0ee      	beq.n	801029e <HAL_RCC_OscConfig+0x37e>
 80102c0:	e014      	b.n	80102ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80102c2:	f7fe fd53 	bl	800ed6c <HAL_GetTick>
 80102c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102c8:	e00a      	b.n	80102e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80102ca:	f7fe fd4f 	bl	800ed6c <HAL_GetTick>
 80102ce:	4602      	mov	r2, r0
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80102d8:	4293      	cmp	r3, r2
 80102da:	d901      	bls.n	80102e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80102dc:	2303      	movs	r3, #3
 80102de:	e09b      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102e0:	4b40      	ldr	r3, [pc, #256]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80102e2:	6a1b      	ldr	r3, [r3, #32]
 80102e4:	f003 0302 	and.w	r3, r3, #2
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1ee      	bne.n	80102ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80102ec:	7dfb      	ldrb	r3, [r7, #23]
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d105      	bne.n	80102fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80102f2:	4b3c      	ldr	r3, [pc, #240]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80102f4:	69db      	ldr	r3, [r3, #28]
 80102f6:	4a3b      	ldr	r2, [pc, #236]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80102f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80102fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	69db      	ldr	r3, [r3, #28]
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 8087 	beq.w	8010416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010308:	4b36      	ldr	r3, [pc, #216]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	f003 030c 	and.w	r3, r3, #12
 8010310:	2b08      	cmp	r3, #8
 8010312:	d061      	beq.n	80103d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	69db      	ldr	r3, [r3, #28]
 8010318:	2b02      	cmp	r3, #2
 801031a:	d146      	bne.n	80103aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801031c:	4b33      	ldr	r3, [pc, #204]	; (80103ec <HAL_RCC_OscConfig+0x4cc>)
 801031e:	2200      	movs	r2, #0
 8010320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010322:	f7fe fd23 	bl	800ed6c <HAL_GetTick>
 8010326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010328:	e008      	b.n	801033c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801032a:	f7fe fd1f 	bl	800ed6c <HAL_GetTick>
 801032e:	4602      	mov	r2, r0
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	2b02      	cmp	r3, #2
 8010336:	d901      	bls.n	801033c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8010338:	2303      	movs	r3, #3
 801033a:	e06d      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801033c:	4b29      	ldr	r3, [pc, #164]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1f0      	bne.n	801032a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6a1b      	ldr	r3, [r3, #32]
 801034c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010350:	d108      	bne.n	8010364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8010352:	4b24      	ldr	r3, [pc, #144]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	4921      	ldr	r1, [pc, #132]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010360:	4313      	orrs	r3, r2
 8010362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010364:	4b1f      	ldr	r3, [pc, #124]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6a19      	ldr	r1, [r3, #32]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	430b      	orrs	r3, r1
 8010376:	491b      	ldr	r1, [pc, #108]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 8010378:	4313      	orrs	r3, r2
 801037a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801037c:	4b1b      	ldr	r3, [pc, #108]	; (80103ec <HAL_RCC_OscConfig+0x4cc>)
 801037e:	2201      	movs	r2, #1
 8010380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010382:	f7fe fcf3 	bl	800ed6c <HAL_GetTick>
 8010386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010388:	e008      	b.n	801039c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801038a:	f7fe fcef 	bl	800ed6c <HAL_GetTick>
 801038e:	4602      	mov	r2, r0
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	2b02      	cmp	r3, #2
 8010396:	d901      	bls.n	801039c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8010398:	2303      	movs	r3, #3
 801039a:	e03d      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801039c:	4b11      	ldr	r3, [pc, #68]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0f0      	beq.n	801038a <HAL_RCC_OscConfig+0x46a>
 80103a8:	e035      	b.n	8010416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103aa:	4b10      	ldr	r3, [pc, #64]	; (80103ec <HAL_RCC_OscConfig+0x4cc>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103b0:	f7fe fcdc 	bl	800ed6c <HAL_GetTick>
 80103b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80103b6:	e008      	b.n	80103ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80103b8:	f7fe fcd8 	bl	800ed6c <HAL_GetTick>
 80103bc:	4602      	mov	r2, r0
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d901      	bls.n	80103ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80103c6:	2303      	movs	r3, #3
 80103c8:	e026      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80103ca:	4b06      	ldr	r3, [pc, #24]	; (80103e4 <HAL_RCC_OscConfig+0x4c4>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d1f0      	bne.n	80103b8 <HAL_RCC_OscConfig+0x498>
 80103d6:	e01e      	b.n	8010416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	69db      	ldr	r3, [r3, #28]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d107      	bne.n	80103f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80103e0:	2301      	movs	r3, #1
 80103e2:	e019      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
 80103e4:	40021000 	.word	0x40021000
 80103e8:	40007000 	.word	0x40007000
 80103ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80103f0:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <HAL_RCC_OscConfig+0x500>)
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6a1b      	ldr	r3, [r3, #32]
 8010400:	429a      	cmp	r2, r3
 8010402:	d106      	bne.n	8010412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801040e:	429a      	cmp	r2, r3
 8010410:	d001      	beq.n	8010416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8010412:	2301      	movs	r3, #1
 8010414:	e000      	b.n	8010418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	40021000 	.word	0x40021000

08010424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d101      	bne.n	8010438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010434:	2301      	movs	r3, #1
 8010436:	e0d0      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010438:	4b6a      	ldr	r3, [pc, #424]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f003 0307 	and.w	r3, r3, #7
 8010440:	683a      	ldr	r2, [r7, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d910      	bls.n	8010468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010446:	4b67      	ldr	r3, [pc, #412]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f023 0207 	bic.w	r2, r3, #7
 801044e:	4965      	ldr	r1, [pc, #404]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	4313      	orrs	r3, r2
 8010454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010456:	4b63      	ldr	r3, [pc, #396]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f003 0307 	and.w	r3, r3, #7
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	429a      	cmp	r2, r3
 8010462:	d001      	beq.n	8010468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e0b8      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f003 0302 	and.w	r3, r3, #2
 8010470:	2b00      	cmp	r3, #0
 8010472:	d020      	beq.n	80104b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f003 0304 	and.w	r3, r3, #4
 801047c:	2b00      	cmp	r3, #0
 801047e:	d005      	beq.n	801048c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010480:	4b59      	ldr	r3, [pc, #356]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	4a58      	ldr	r2, [pc, #352]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 8010486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801048a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f003 0308 	and.w	r3, r3, #8
 8010494:	2b00      	cmp	r3, #0
 8010496:	d005      	beq.n	80104a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010498:	4b53      	ldr	r3, [pc, #332]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 801049a:	685b      	ldr	r3, [r3, #4]
 801049c:	4a52      	ldr	r2, [pc, #328]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 801049e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80104a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80104a4:	4b50      	ldr	r3, [pc, #320]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	494d      	ldr	r1, [pc, #308]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80104b2:	4313      	orrs	r3, r2
 80104b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d040      	beq.n	8010544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d107      	bne.n	80104da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80104ca:	4b47      	ldr	r3, [pc, #284]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d115      	bne.n	8010502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80104d6:	2301      	movs	r3, #1
 80104d8:	e07f      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d107      	bne.n	80104f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104e2:	4b41      	ldr	r3, [pc, #260]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d109      	bne.n	8010502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80104ee:	2301      	movs	r3, #1
 80104f0:	e073      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80104f2:	4b3d      	ldr	r3, [pc, #244]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f003 0302 	and.w	r3, r3, #2
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80104fe:	2301      	movs	r3, #1
 8010500:	e06b      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010502:	4b39      	ldr	r3, [pc, #228]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	f023 0203 	bic.w	r2, r3, #3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	4936      	ldr	r1, [pc, #216]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 8010510:	4313      	orrs	r3, r2
 8010512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010514:	f7fe fc2a 	bl	800ed6c <HAL_GetTick>
 8010518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801051a:	e00a      	b.n	8010532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801051c:	f7fe fc26 	bl	800ed6c <HAL_GetTick>
 8010520:	4602      	mov	r2, r0
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	1ad3      	subs	r3, r2, r3
 8010526:	f241 3288 	movw	r2, #5000	; 0x1388
 801052a:	4293      	cmp	r3, r2
 801052c:	d901      	bls.n	8010532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801052e:	2303      	movs	r3, #3
 8010530:	e053      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010532:	4b2d      	ldr	r3, [pc, #180]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	f003 020c 	and.w	r2, r3, #12
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	429a      	cmp	r2, r3
 8010542:	d1eb      	bne.n	801051c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010544:	4b27      	ldr	r3, [pc, #156]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f003 0307 	and.w	r3, r3, #7
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	429a      	cmp	r2, r3
 8010550:	d210      	bcs.n	8010574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010552:	4b24      	ldr	r3, [pc, #144]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f023 0207 	bic.w	r2, r3, #7
 801055a:	4922      	ldr	r1, [pc, #136]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	4313      	orrs	r3, r2
 8010560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010562:	4b20      	ldr	r3, [pc, #128]	; (80105e4 <HAL_RCC_ClockConfig+0x1c0>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f003 0307 	and.w	r3, r3, #7
 801056a:	683a      	ldr	r2, [r7, #0]
 801056c:	429a      	cmp	r2, r3
 801056e:	d001      	beq.n	8010574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8010570:	2301      	movs	r3, #1
 8010572:	e032      	b.n	80105da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f003 0304 	and.w	r3, r3, #4
 801057c:	2b00      	cmp	r3, #0
 801057e:	d008      	beq.n	8010592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010580:	4b19      	ldr	r3, [pc, #100]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	4916      	ldr	r1, [pc, #88]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 801058e:	4313      	orrs	r3, r2
 8010590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f003 0308 	and.w	r3, r3, #8
 801059a:	2b00      	cmp	r3, #0
 801059c:	d009      	beq.n	80105b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801059e:	4b12      	ldr	r3, [pc, #72]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	490e      	ldr	r1, [pc, #56]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80105ae:	4313      	orrs	r3, r2
 80105b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80105b2:	f000 f821 	bl	80105f8 <HAL_RCC_GetSysClockFreq>
 80105b6:	4602      	mov	r2, r0
 80105b8:	4b0b      	ldr	r3, [pc, #44]	; (80105e8 <HAL_RCC_ClockConfig+0x1c4>)
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	091b      	lsrs	r3, r3, #4
 80105be:	f003 030f 	and.w	r3, r3, #15
 80105c2:	490a      	ldr	r1, [pc, #40]	; (80105ec <HAL_RCC_ClockConfig+0x1c8>)
 80105c4:	5ccb      	ldrb	r3, [r1, r3]
 80105c6:	fa22 f303 	lsr.w	r3, r2, r3
 80105ca:	4a09      	ldr	r2, [pc, #36]	; (80105f0 <HAL_RCC_ClockConfig+0x1cc>)
 80105cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80105ce:	4b09      	ldr	r3, [pc, #36]	; (80105f4 <HAL_RCC_ClockConfig+0x1d0>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fe fb88 	bl	800ece8 <HAL_InitTick>

  return HAL_OK;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	40022000 	.word	0x40022000
 80105e8:	40021000 	.word	0x40021000
 80105ec:	08012fdc 	.word	0x08012fdc
 80105f0:	200000cc 	.word	0x200000cc
 80105f4:	200000d0 	.word	0x200000d0

080105f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b087      	sub	sp, #28
 80105fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80105fe:	2300      	movs	r3, #0
 8010600:	60fb      	str	r3, [r7, #12]
 8010602:	2300      	movs	r3, #0
 8010604:	60bb      	str	r3, [r7, #8]
 8010606:	2300      	movs	r3, #0
 8010608:	617b      	str	r3, [r7, #20]
 801060a:	2300      	movs	r3, #0
 801060c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801060e:	2300      	movs	r3, #0
 8010610:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8010612:	4b1e      	ldr	r3, [pc, #120]	; (801068c <HAL_RCC_GetSysClockFreq+0x94>)
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f003 030c 	and.w	r3, r3, #12
 801061e:	2b04      	cmp	r3, #4
 8010620:	d002      	beq.n	8010628 <HAL_RCC_GetSysClockFreq+0x30>
 8010622:	2b08      	cmp	r3, #8
 8010624:	d003      	beq.n	801062e <HAL_RCC_GetSysClockFreq+0x36>
 8010626:	e027      	b.n	8010678 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010628:	4b19      	ldr	r3, [pc, #100]	; (8010690 <HAL_RCC_GetSysClockFreq+0x98>)
 801062a:	613b      	str	r3, [r7, #16]
      break;
 801062c:	e027      	b.n	801067e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	0c9b      	lsrs	r3, r3, #18
 8010632:	f003 030f 	and.w	r3, r3, #15
 8010636:	4a17      	ldr	r2, [pc, #92]	; (8010694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8010638:	5cd3      	ldrb	r3, [r2, r3]
 801063a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010642:	2b00      	cmp	r3, #0
 8010644:	d010      	beq.n	8010668 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8010646:	4b11      	ldr	r3, [pc, #68]	; (801068c <HAL_RCC_GetSysClockFreq+0x94>)
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	0c5b      	lsrs	r3, r3, #17
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	4a11      	ldr	r2, [pc, #68]	; (8010698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8010652:	5cd3      	ldrb	r3, [r2, r3]
 8010654:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a0d      	ldr	r2, [pc, #52]	; (8010690 <HAL_RCC_GetSysClockFreq+0x98>)
 801065a:	fb03 f202 	mul.w	r2, r3, r2
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	fbb2 f3f3 	udiv	r3, r2, r3
 8010664:	617b      	str	r3, [r7, #20]
 8010666:	e004      	b.n	8010672 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4a0c      	ldr	r2, [pc, #48]	; (801069c <HAL_RCC_GetSysClockFreq+0xa4>)
 801066c:	fb02 f303 	mul.w	r3, r2, r3
 8010670:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	613b      	str	r3, [r7, #16]
      break;
 8010676:	e002      	b.n	801067e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8010678:	4b05      	ldr	r3, [pc, #20]	; (8010690 <HAL_RCC_GetSysClockFreq+0x98>)
 801067a:	613b      	str	r3, [r7, #16]
      break;
 801067c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801067e:	693b      	ldr	r3, [r7, #16]
}
 8010680:	4618      	mov	r0, r3
 8010682:	371c      	adds	r7, #28
 8010684:	46bd      	mov	sp, r7
 8010686:	bc80      	pop	{r7}
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop
 801068c:	40021000 	.word	0x40021000
 8010690:	007a1200 	.word	0x007a1200
 8010694:	08012ff4 	.word	0x08012ff4
 8010698:	08013004 	.word	0x08013004
 801069c:	003d0900 	.word	0x003d0900

080106a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80106a0:	b480      	push	{r7}
 80106a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80106a4:	4b02      	ldr	r3, [pc, #8]	; (80106b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80106a6:	681b      	ldr	r3, [r3, #0]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bc80      	pop	{r7}
 80106ae:	4770      	bx	lr
 80106b0:	200000cc 	.word	0x200000cc

080106b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80106b8:	f7ff fff2 	bl	80106a0 <HAL_RCC_GetHCLKFreq>
 80106bc:	4602      	mov	r2, r0
 80106be:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	0a1b      	lsrs	r3, r3, #8
 80106c4:	f003 0307 	and.w	r3, r3, #7
 80106c8:	4903      	ldr	r1, [pc, #12]	; (80106d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80106ca:	5ccb      	ldrb	r3, [r1, r3]
 80106cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	40021000 	.word	0x40021000
 80106d8:	08012fec 	.word	0x08012fec

080106dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80106e0:	f7ff ffde 	bl	80106a0 <HAL_RCC_GetHCLKFreq>
 80106e4:	4602      	mov	r2, r0
 80106e6:	4b05      	ldr	r3, [pc, #20]	; (80106fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	0adb      	lsrs	r3, r3, #11
 80106ec:	f003 0307 	and.w	r3, r3, #7
 80106f0:	4903      	ldr	r1, [pc, #12]	; (8010700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80106f2:	5ccb      	ldrb	r3, [r1, r3]
 80106f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	40021000 	.word	0x40021000
 8010700:	08012fec 	.word	0x08012fec

08010704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 801070c:	4b0a      	ldr	r3, [pc, #40]	; (8010738 <RCC_Delay+0x34>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a0a      	ldr	r2, [pc, #40]	; (801073c <RCC_Delay+0x38>)
 8010712:	fba2 2303 	umull	r2, r3, r2, r3
 8010716:	0a5b      	lsrs	r3, r3, #9
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	fb02 f303 	mul.w	r3, r2, r3
 801071e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8010720:	bf00      	nop
  }
  while (Delay --);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	1e5a      	subs	r2, r3, #1
 8010726:	60fa      	str	r2, [r7, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1f9      	bne.n	8010720 <RCC_Delay+0x1c>
}
 801072c:	bf00      	nop
 801072e:	bf00      	nop
 8010730:	3714      	adds	r7, #20
 8010732:	46bd      	mov	sp, r7
 8010734:	bc80      	pop	{r7}
 8010736:	4770      	bx	lr
 8010738:	200000cc 	.word	0x200000cc
 801073c:	10624dd3 	.word	0x10624dd3

08010740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d101      	bne.n	8010752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	e076      	b.n	8010840 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010756:	2b00      	cmp	r3, #0
 8010758:	d108      	bne.n	801076c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010762:	d009      	beq.n	8010778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	61da      	str	r2, [r3, #28]
 801076a:	e005      	b.n	8010778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2200      	movs	r2, #0
 8010770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010784:	b2db      	uxtb	r3, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	d106      	bne.n	8010798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2200      	movs	r2, #0
 801078e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7fd ffaa 	bl	800e6ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2202      	movs	r2, #2
 801079c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80107c0:	431a      	orrs	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80107ca:	431a      	orrs	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	f003 0302 	and.w	r3, r3, #2
 80107d4:	431a      	orrs	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	f003 0301 	and.w	r3, r3, #1
 80107de:	431a      	orrs	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	699b      	ldr	r3, [r3, #24]
 80107e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80107e8:	431a      	orrs	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107f2:	431a      	orrs	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6a1b      	ldr	r3, [r3, #32]
 80107f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107fc:	ea42 0103 	orr.w	r1, r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	430a      	orrs	r2, r1
 801080e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	699b      	ldr	r3, [r3, #24]
 8010814:	0c1a      	lsrs	r2, r3, #16
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f002 0204 	and.w	r2, r2, #4
 801081e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	69da      	ldr	r2, [r3, #28]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801082e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2201      	movs	r2, #1
 801083a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801083e:	2300      	movs	r3, #0
}
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b08c      	sub	sp, #48	; 0x30
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010856:	2301      	movs	r3, #1
 8010858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801085a:	2300      	movs	r3, #0
 801085c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010866:	2b01      	cmp	r3, #1
 8010868:	d101      	bne.n	801086e <HAL_SPI_TransmitReceive+0x26>
 801086a:	2302      	movs	r3, #2
 801086c:	e198      	b.n	8010ba0 <HAL_SPI_TransmitReceive+0x358>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2201      	movs	r2, #1
 8010872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010876:	f7fe fa79 	bl	800ed6c <HAL_GetTick>
 801087a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801088c:	887b      	ldrh	r3, [r7, #2]
 801088e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010894:	2b01      	cmp	r3, #1
 8010896:	d00f      	beq.n	80108b8 <HAL_SPI_TransmitReceive+0x70>
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801089e:	d107      	bne.n	80108b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d103      	bne.n	80108b0 <HAL_SPI_TransmitReceive+0x68>
 80108a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80108ac:	2b04      	cmp	r3, #4
 80108ae:	d003      	beq.n	80108b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80108b0:	2302      	movs	r3, #2
 80108b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80108b6:	e16d      	b.n	8010b94 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d005      	beq.n	80108ca <HAL_SPI_TransmitReceive+0x82>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <HAL_SPI_TransmitReceive+0x82>
 80108c4:	887b      	ldrh	r3, [r7, #2]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d103      	bne.n	80108d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80108ca:	2301      	movs	r3, #1
 80108cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80108d0:	e160      	b.n	8010b94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	2b04      	cmp	r3, #4
 80108dc:	d003      	beq.n	80108e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2205      	movs	r2, #5
 80108e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2200      	movs	r2, #0
 80108ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	887a      	ldrh	r2, [r7, #2]
 80108f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	887a      	ldrh	r2, [r7, #2]
 80108fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	887a      	ldrh	r2, [r7, #2]
 8010908:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	887a      	ldrh	r2, [r7, #2]
 801090e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2200      	movs	r2, #0
 8010914:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	2200      	movs	r2, #0
 801091a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010926:	2b40      	cmp	r3, #64	; 0x40
 8010928:	d007      	beq.n	801093a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010938:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010942:	d17c      	bne.n	8010a3e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <HAL_SPI_TransmitReceive+0x10a>
 801094c:	8b7b      	ldrh	r3, [r7, #26]
 801094e:	2b01      	cmp	r3, #1
 8010950:	d16a      	bne.n	8010a28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010956:	881a      	ldrh	r2, [r3, #0]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010962:	1c9a      	adds	r2, r3, #2
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801096c:	b29b      	uxth	r3, r3
 801096e:	3b01      	subs	r3, #1
 8010970:	b29a      	uxth	r2, r3
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010976:	e057      	b.n	8010a28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	f003 0302 	and.w	r3, r3, #2
 8010982:	2b02      	cmp	r3, #2
 8010984:	d11b      	bne.n	80109be <HAL_SPI_TransmitReceive+0x176>
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801098a:	b29b      	uxth	r3, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d016      	beq.n	80109be <HAL_SPI_TransmitReceive+0x176>
 8010990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010992:	2b01      	cmp	r3, #1
 8010994:	d113      	bne.n	80109be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801099a:	881a      	ldrh	r2, [r3, #0]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a6:	1c9a      	adds	r2, r3, #2
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	3b01      	subs	r3, #1
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80109ba:	2300      	movs	r3, #0
 80109bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	f003 0301 	and.w	r3, r3, #1
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d119      	bne.n	8010a00 <HAL_SPI_TransmitReceive+0x1b8>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d014      	beq.n	8010a00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68da      	ldr	r2, [r3, #12]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e0:	b292      	uxth	r2, r2
 80109e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e8:	1c9a      	adds	r2, r3, #2
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	3b01      	subs	r3, #1
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80109fc:	2301      	movs	r3, #1
 80109fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010a00:	f7fe f9b4 	bl	800ed6c <HAL_GetTick>
 8010a04:	4602      	mov	r2, r0
 8010a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d80b      	bhi.n	8010a28 <HAL_SPI_TransmitReceive+0x1e0>
 8010a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a16:	d007      	beq.n	8010a28 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8010a18:	2303      	movs	r3, #3
 8010a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2201      	movs	r2, #1
 8010a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8010a26:	e0b5      	b.n	8010b94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d1a2      	bne.n	8010978 <HAL_SPI_TransmitReceive+0x130>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d19d      	bne.n	8010978 <HAL_SPI_TransmitReceive+0x130>
 8010a3c:	e080      	b.n	8010b40 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <HAL_SPI_TransmitReceive+0x204>
 8010a46:	8b7b      	ldrh	r3, [r7, #26]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d16f      	bne.n	8010b2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	330c      	adds	r3, #12
 8010a56:	7812      	ldrb	r2, [r2, #0]
 8010a58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a5e:	1c5a      	adds	r2, r3, #1
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010a72:	e05b      	b.n	8010b2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	f003 0302 	and.w	r3, r3, #2
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d11c      	bne.n	8010abc <HAL_SPI_TransmitReceive+0x274>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d017      	beq.n	8010abc <HAL_SPI_TransmitReceive+0x274>
 8010a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d114      	bne.n	8010abc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	330c      	adds	r3, #12
 8010a9c:	7812      	ldrb	r2, [r2, #0]
 8010a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa4:	1c5a      	adds	r2, r3, #1
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d119      	bne.n	8010afe <HAL_SPI_TransmitReceive+0x2b6>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d014      	beq.n	8010afe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68da      	ldr	r2, [r3, #12]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ade:	b2d2      	uxtb	r2, r2
 8010ae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae6:	1c5a      	adds	r2, r3, #1
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	3b01      	subs	r3, #1
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010afa:	2301      	movs	r3, #1
 8010afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010afe:	f7fe f935 	bl	800ed6c <HAL_GetTick>
 8010b02:	4602      	mov	r2, r0
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d803      	bhi.n	8010b16 <HAL_SPI_TransmitReceive+0x2ce>
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b14:	d102      	bne.n	8010b1c <HAL_SPI_TransmitReceive+0x2d4>
 8010b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d107      	bne.n	8010b2c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	2201      	movs	r2, #1
 8010b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8010b2a:	e033      	b.n	8010b94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d19e      	bne.n	8010a74 <HAL_SPI_TransmitReceive+0x22c>
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d199      	bne.n	8010a74 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b44:	68f8      	ldr	r0, [r7, #12]
 8010b46:	f000 f8b7 	bl	8010cb8 <SPI_EndRxTxTransaction>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d006      	beq.n	8010b5e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8010b50:	2301      	movs	r3, #1
 8010b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2220      	movs	r2, #32
 8010b5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010b5c:	e01a      	b.n	8010b94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d10a      	bne.n	8010b7c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010b66:	2300      	movs	r3, #0
 8010b68:	617b      	str	r3, [r7, #20]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	617b      	str	r3, [r7, #20]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	617b      	str	r3, [r7, #20]
 8010b7a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d003      	beq.n	8010b8c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8010b84:	2301      	movs	r3, #1
 8010b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b8a:	e003      	b.n	8010b94 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2201      	movs	r2, #1
 8010b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2200      	movs	r2, #0
 8010b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3730      	adds	r7, #48	; 0x30
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b088      	sub	sp, #32
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	603b      	str	r3, [r7, #0]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010bb8:	f7fe f8d8 	bl	800ed6c <HAL_GetTick>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	1a9b      	subs	r3, r3, r2
 8010bc2:	683a      	ldr	r2, [r7, #0]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010bc8:	f7fe f8d0 	bl	800ed6c <HAL_GetTick>
 8010bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010bce:	4b39      	ldr	r3, [pc, #228]	; (8010cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	015b      	lsls	r3, r3, #5
 8010bd4:	0d1b      	lsrs	r3, r3, #20
 8010bd6:	69fa      	ldr	r2, [r7, #28]
 8010bd8:	fb02 f303 	mul.w	r3, r2, r3
 8010bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010bde:	e054      	b.n	8010c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010be6:	d050      	beq.n	8010c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010be8:	f7fe f8c0 	bl	800ed6c <HAL_GetTick>
 8010bec:	4602      	mov	r2, r0
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	1ad3      	subs	r3, r2, r3
 8010bf2:	69fa      	ldr	r2, [r7, #28]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d902      	bls.n	8010bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d13d      	bne.n	8010c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	685a      	ldr	r2, [r3, #4]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010c16:	d111      	bne.n	8010c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	689b      	ldr	r3, [r3, #8]
 8010c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c20:	d004      	beq.n	8010c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	689b      	ldr	r3, [r3, #8]
 8010c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c2a:	d107      	bne.n	8010c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c44:	d10f      	bne.n	8010c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2201      	movs	r2, #1
 8010c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010c76:	2303      	movs	r3, #3
 8010c78:	e017      	b.n	8010caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d101      	bne.n	8010c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010c80:	2300      	movs	r3, #0
 8010c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	689a      	ldr	r2, [r3, #8]
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	4013      	ands	r3, r2
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	bf0c      	ite	eq
 8010c9a:	2301      	moveq	r3, #1
 8010c9c:	2300      	movne	r3, #0
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	79fb      	ldrb	r3, [r7, #7]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d19b      	bne.n	8010be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3720      	adds	r7, #32
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	200000cc 	.word	0x200000cc

08010cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af02      	add	r7, sp, #8
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	2180      	movs	r1, #128	; 0x80
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f7ff ff6a 	bl	8010ba8 <SPI_WaitFlagStateUntilTimeout>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d007      	beq.n	8010cea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cde:	f043 0220 	orr.w	r2, r3, #32
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8010ce6:	2303      	movs	r3, #3
 8010ce8:	e000      	b.n	8010cec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d101      	bne.n	8010d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e041      	b.n	8010d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d106      	bne.n	8010d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f7fd fd30 	bl	800e780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2202      	movs	r2, #2
 8010d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3304      	adds	r3, #4
 8010d30:	4619      	mov	r1, r3
 8010d32:	4610      	mov	r0, r2
 8010d34:	f000 faa2 	bl	801127c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2201      	movs	r2, #1
 8010d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2201      	movs	r2, #1
 8010d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2201      	movs	r2, #1
 8010d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2201      	movs	r2, #1
 8010d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2201      	movs	r2, #1
 8010d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010d88:	2300      	movs	r3, #0
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
	...

08010d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b085      	sub	sp, #20
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d001      	beq.n	8010dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010da8:	2301      	movs	r3, #1
 8010daa:	e03a      	b.n	8010e22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2202      	movs	r2, #2
 8010db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	68da      	ldr	r2, [r3, #12]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f042 0201 	orr.w	r2, r2, #1
 8010dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a18      	ldr	r2, [pc, #96]	; (8010e2c <HAL_TIM_Base_Start_IT+0x98>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d00e      	beq.n	8010dec <HAL_TIM_Base_Start_IT+0x58>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dd6:	d009      	beq.n	8010dec <HAL_TIM_Base_Start_IT+0x58>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a14      	ldr	r2, [pc, #80]	; (8010e30 <HAL_TIM_Base_Start_IT+0x9c>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d004      	beq.n	8010dec <HAL_TIM_Base_Start_IT+0x58>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a13      	ldr	r2, [pc, #76]	; (8010e34 <HAL_TIM_Base_Start_IT+0xa0>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d111      	bne.n	8010e10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	f003 0307 	and.w	r3, r3, #7
 8010df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2b06      	cmp	r3, #6
 8010dfc:	d010      	beq.n	8010e20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f042 0201 	orr.w	r2, r2, #1
 8010e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e0e:	e007      	b.n	8010e20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f042 0201 	orr.w	r2, r2, #1
 8010e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3714      	adds	r7, #20
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bc80      	pop	{r7}
 8010e2a:	4770      	bx	lr
 8010e2c:	40012c00 	.word	0x40012c00
 8010e30:	40000400 	.word	0x40000400
 8010e34:	40000800 	.word	0x40000800

08010e38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	68da      	ldr	r2, [r3, #12]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f022 0201 	bic.w	r2, r2, #1
 8010e4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	6a1a      	ldr	r2, [r3, #32]
 8010e56:	f241 1311 	movw	r3, #4369	; 0x1111
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d10f      	bne.n	8010e80 <HAL_TIM_Base_Stop_IT+0x48>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6a1a      	ldr	r2, [r3, #32]
 8010e66:	f240 4344 	movw	r3, #1092	; 0x444
 8010e6a:	4013      	ands	r3, r2
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d107      	bne.n	8010e80 <HAL_TIM_Base_Stop_IT+0x48>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f022 0201 	bic.w	r2, r2, #1
 8010e7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2201      	movs	r2, #1
 8010e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bc80      	pop	{r7}
 8010e92:	4770      	bx	lr

08010e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	691b      	ldr	r3, [r3, #16]
 8010ea2:	f003 0302 	and.w	r3, r3, #2
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d122      	bne.n	8010ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	f003 0302 	and.w	r3, r3, #2
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d11b      	bne.n	8010ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f06f 0202 	mvn.w	r2, #2
 8010ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	699b      	ldr	r3, [r3, #24]
 8010ece:	f003 0303 	and.w	r3, r3, #3
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f000 f9b4 	bl	8011244 <HAL_TIM_IC_CaptureCallback>
 8010edc:	e005      	b.n	8010eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 f9a7 	bl	8011232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 f9b6 	bl	8011256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	691b      	ldr	r3, [r3, #16]
 8010ef6:	f003 0304 	and.w	r3, r3, #4
 8010efa:	2b04      	cmp	r3, #4
 8010efc:	d122      	bne.n	8010f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	f003 0304 	and.w	r3, r3, #4
 8010f08:	2b04      	cmp	r3, #4
 8010f0a:	d11b      	bne.n	8010f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f06f 0204 	mvn.w	r2, #4
 8010f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2202      	movs	r2, #2
 8010f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	699b      	ldr	r3, [r3, #24]
 8010f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d003      	beq.n	8010f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 f98a 	bl	8011244 <HAL_TIM_IC_CaptureCallback>
 8010f30:	e005      	b.n	8010f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f97d 	bl	8011232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f98c 	bl	8011256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	691b      	ldr	r3, [r3, #16]
 8010f4a:	f003 0308 	and.w	r3, r3, #8
 8010f4e:	2b08      	cmp	r3, #8
 8010f50:	d122      	bne.n	8010f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	f003 0308 	and.w	r3, r3, #8
 8010f5c:	2b08      	cmp	r3, #8
 8010f5e:	d11b      	bne.n	8010f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f06f 0208 	mvn.w	r2, #8
 8010f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2204      	movs	r2, #4
 8010f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	69db      	ldr	r3, [r3, #28]
 8010f76:	f003 0303 	and.w	r3, r3, #3
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d003      	beq.n	8010f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f960 	bl	8011244 <HAL_TIM_IC_CaptureCallback>
 8010f84:	e005      	b.n	8010f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f000 f953 	bl	8011232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f962 	bl	8011256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	691b      	ldr	r3, [r3, #16]
 8010f9e:	f003 0310 	and.w	r3, r3, #16
 8010fa2:	2b10      	cmp	r3, #16
 8010fa4:	d122      	bne.n	8010fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	f003 0310 	and.w	r3, r3, #16
 8010fb0:	2b10      	cmp	r3, #16
 8010fb2:	d11b      	bne.n	8010fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f06f 0210 	mvn.w	r2, #16
 8010fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2208      	movs	r2, #8
 8010fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	69db      	ldr	r3, [r3, #28]
 8010fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d003      	beq.n	8010fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f936 	bl	8011244 <HAL_TIM_IC_CaptureCallback>
 8010fd8:	e005      	b.n	8010fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 f929 	bl	8011232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 f938 	bl	8011256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	691b      	ldr	r3, [r3, #16]
 8010ff2:	f003 0301 	and.w	r3, r3, #1
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d10e      	bne.n	8011018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	f003 0301 	and.w	r3, r3, #1
 8011004:	2b01      	cmp	r3, #1
 8011006:	d107      	bne.n	8011018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f06f 0201 	mvn.w	r2, #1
 8011010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7fc f91a 	bl	800d24c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	691b      	ldr	r3, [r3, #16]
 801101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011022:	2b80      	cmp	r3, #128	; 0x80
 8011024:	d10e      	bne.n	8011044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011030:	2b80      	cmp	r3, #128	; 0x80
 8011032:	d107      	bne.n	8011044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801103c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fa7b 	bl	801153a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	691b      	ldr	r3, [r3, #16]
 801104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801104e:	2b40      	cmp	r3, #64	; 0x40
 8011050:	d10e      	bne.n	8011070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801105c:	2b40      	cmp	r3, #64	; 0x40
 801105e:	d107      	bne.n	8011070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 f8fc 	bl	8011268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	691b      	ldr	r3, [r3, #16]
 8011076:	f003 0320 	and.w	r3, r3, #32
 801107a:	2b20      	cmp	r3, #32
 801107c:	d10e      	bne.n	801109c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	f003 0320 	and.w	r3, r3, #32
 8011088:	2b20      	cmp	r3, #32
 801108a:	d107      	bne.n	801109c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f06f 0220 	mvn.w	r2, #32
 8011094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 fa46 	bl	8011528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80110ae:	2300      	movs	r3, #0
 80110b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d101      	bne.n	80110c0 <HAL_TIM_ConfigClockSource+0x1c>
 80110bc:	2302      	movs	r3, #2
 80110be:	e0b4      	b.n	801122a <HAL_TIM_ConfigClockSource+0x186>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2201      	movs	r2, #1
 80110c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2202      	movs	r2, #2
 80110cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80110de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80110e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80110f8:	d03e      	beq.n	8011178 <HAL_TIM_ConfigClockSource+0xd4>
 80110fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80110fe:	f200 8087 	bhi.w	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011106:	f000 8086 	beq.w	8011216 <HAL_TIM_ConfigClockSource+0x172>
 801110a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801110e:	d87f      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011110:	2b70      	cmp	r3, #112	; 0x70
 8011112:	d01a      	beq.n	801114a <HAL_TIM_ConfigClockSource+0xa6>
 8011114:	2b70      	cmp	r3, #112	; 0x70
 8011116:	d87b      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011118:	2b60      	cmp	r3, #96	; 0x60
 801111a:	d050      	beq.n	80111be <HAL_TIM_ConfigClockSource+0x11a>
 801111c:	2b60      	cmp	r3, #96	; 0x60
 801111e:	d877      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011120:	2b50      	cmp	r3, #80	; 0x50
 8011122:	d03c      	beq.n	801119e <HAL_TIM_ConfigClockSource+0xfa>
 8011124:	2b50      	cmp	r3, #80	; 0x50
 8011126:	d873      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011128:	2b40      	cmp	r3, #64	; 0x40
 801112a:	d058      	beq.n	80111de <HAL_TIM_ConfigClockSource+0x13a>
 801112c:	2b40      	cmp	r3, #64	; 0x40
 801112e:	d86f      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011130:	2b30      	cmp	r3, #48	; 0x30
 8011132:	d064      	beq.n	80111fe <HAL_TIM_ConfigClockSource+0x15a>
 8011134:	2b30      	cmp	r3, #48	; 0x30
 8011136:	d86b      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011138:	2b20      	cmp	r3, #32
 801113a:	d060      	beq.n	80111fe <HAL_TIM_ConfigClockSource+0x15a>
 801113c:	2b20      	cmp	r3, #32
 801113e:	d867      	bhi.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
 8011140:	2b00      	cmp	r3, #0
 8011142:	d05c      	beq.n	80111fe <HAL_TIM_ConfigClockSource+0x15a>
 8011144:	2b10      	cmp	r3, #16
 8011146:	d05a      	beq.n	80111fe <HAL_TIM_ConfigClockSource+0x15a>
 8011148:	e062      	b.n	8011210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6818      	ldr	r0, [r3, #0]
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	6899      	ldr	r1, [r3, #8]
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	685a      	ldr	r2, [r3, #4]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	f000 f968 	bl	801142e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801116c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	609a      	str	r2, [r3, #8]
      break;
 8011176:	e04f      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6818      	ldr	r0, [r3, #0]
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	6899      	ldr	r1, [r3, #8]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	685a      	ldr	r2, [r3, #4]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	f000 f951 	bl	801142e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801119a:	609a      	str	r2, [r3, #8]
      break;
 801119c:	e03c      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6818      	ldr	r0, [r3, #0]
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	6859      	ldr	r1, [r3, #4]
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	461a      	mov	r2, r3
 80111ac:	f000 f8c8 	bl	8011340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2150      	movs	r1, #80	; 0x50
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 f91f 	bl	80113fa <TIM_ITRx_SetConfig>
      break;
 80111bc:	e02c      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6818      	ldr	r0, [r3, #0]
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	6859      	ldr	r1, [r3, #4]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	461a      	mov	r2, r3
 80111cc:	f000 f8e6 	bl	801139c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2160      	movs	r1, #96	; 0x60
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 f90f 	bl	80113fa <TIM_ITRx_SetConfig>
      break;
 80111dc:	e01c      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6818      	ldr	r0, [r3, #0]
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	6859      	ldr	r1, [r3, #4]
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	461a      	mov	r2, r3
 80111ec:	f000 f8a8 	bl	8011340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2140      	movs	r1, #64	; 0x40
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 f8ff 	bl	80113fa <TIM_ITRx_SetConfig>
      break;
 80111fc:	e00c      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4619      	mov	r1, r3
 8011208:	4610      	mov	r0, r2
 801120a:	f000 f8f6 	bl	80113fa <TIM_ITRx_SetConfig>
      break;
 801120e:	e003      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011210:	2301      	movs	r3, #1
 8011212:	73fb      	strb	r3, [r7, #15]
      break;
 8011214:	e000      	b.n	8011218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2201      	movs	r2, #1
 801121c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011228:	7bfb      	ldrb	r3, [r7, #15]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011232:	b480      	push	{r7}
 8011234:	b083      	sub	sp, #12
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801123a:	bf00      	nop
 801123c:	370c      	adds	r7, #12
 801123e:	46bd      	mov	sp, r7
 8011240:	bc80      	pop	{r7}
 8011242:	4770      	bx	lr

08011244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801124c:	bf00      	nop
 801124e:	370c      	adds	r7, #12
 8011250:	46bd      	mov	sp, r7
 8011252:	bc80      	pop	{r7}
 8011254:	4770      	bx	lr

08011256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011256:	b480      	push	{r7}
 8011258:	b083      	sub	sp, #12
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801125e:	bf00      	nop
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	bc80      	pop	{r7}
 8011266:	4770      	bx	lr

08011268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	bc80      	pop	{r7}
 8011278:	4770      	bx	lr
	...

0801127c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a29      	ldr	r2, [pc, #164]	; (8011334 <TIM_Base_SetConfig+0xb8>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d00b      	beq.n	80112ac <TIM_Base_SetConfig+0x30>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801129a:	d007      	beq.n	80112ac <TIM_Base_SetConfig+0x30>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a26      	ldr	r2, [pc, #152]	; (8011338 <TIM_Base_SetConfig+0xbc>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d003      	beq.n	80112ac <TIM_Base_SetConfig+0x30>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4a25      	ldr	r2, [pc, #148]	; (801133c <TIM_Base_SetConfig+0xc0>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d108      	bne.n	80112be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	4313      	orrs	r3, r2
 80112bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4a1c      	ldr	r2, [pc, #112]	; (8011334 <TIM_Base_SetConfig+0xb8>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d00b      	beq.n	80112de <TIM_Base_SetConfig+0x62>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112cc:	d007      	beq.n	80112de <TIM_Base_SetConfig+0x62>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a19      	ldr	r2, [pc, #100]	; (8011338 <TIM_Base_SetConfig+0xbc>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d003      	beq.n	80112de <TIM_Base_SetConfig+0x62>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a18      	ldr	r2, [pc, #96]	; (801133c <TIM_Base_SetConfig+0xc0>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d108      	bne.n	80112f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	68db      	ldr	r3, [r3, #12]
 80112ea:	68fa      	ldr	r2, [r7, #12]
 80112ec:	4313      	orrs	r3, r2
 80112ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	695b      	ldr	r3, [r3, #20]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	689a      	ldr	r2, [r3, #8]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4a07      	ldr	r2, [pc, #28]	; (8011334 <TIM_Base_SetConfig+0xb8>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d103      	bne.n	8011324 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	691a      	ldr	r2, [r3, #16]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2201      	movs	r2, #1
 8011328:	615a      	str	r2, [r3, #20]
}
 801132a:	bf00      	nop
 801132c:	3714      	adds	r7, #20
 801132e:	46bd      	mov	sp, r7
 8011330:	bc80      	pop	{r7}
 8011332:	4770      	bx	lr
 8011334:	40012c00 	.word	0x40012c00
 8011338:	40000400 	.word	0x40000400
 801133c:	40000800 	.word	0x40000800

08011340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011340:	b480      	push	{r7}
 8011342:	b087      	sub	sp, #28
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6a1b      	ldr	r3, [r3, #32]
 8011350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6a1b      	ldr	r3, [r3, #32]
 8011356:	f023 0201 	bic.w	r2, r3, #1
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	699b      	ldr	r3, [r3, #24]
 8011362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801136a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	011b      	lsls	r3, r3, #4
 8011370:	693a      	ldr	r2, [r7, #16]
 8011372:	4313      	orrs	r3, r2
 8011374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	f023 030a 	bic.w	r3, r3, #10
 801137c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	4313      	orrs	r3, r2
 8011384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	693a      	ldr	r2, [r7, #16]
 801138a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	697a      	ldr	r2, [r7, #20]
 8011390:	621a      	str	r2, [r3, #32]
}
 8011392:	bf00      	nop
 8011394:	371c      	adds	r7, #28
 8011396:	46bd      	mov	sp, r7
 8011398:	bc80      	pop	{r7}
 801139a:	4770      	bx	lr

0801139c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801139c:	b480      	push	{r7}
 801139e:	b087      	sub	sp, #28
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	60b9      	str	r1, [r7, #8]
 80113a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	6a1b      	ldr	r3, [r3, #32]
 80113ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6a1b      	ldr	r3, [r3, #32]
 80113b2:	f023 0210 	bic.w	r2, r3, #16
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	699b      	ldr	r3, [r3, #24]
 80113be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80113c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	031b      	lsls	r3, r3, #12
 80113cc:	693a      	ldr	r2, [r7, #16]
 80113ce:	4313      	orrs	r3, r2
 80113d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80113d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	011b      	lsls	r3, r3, #4
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	4313      	orrs	r3, r2
 80113e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	693a      	ldr	r2, [r7, #16]
 80113e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	697a      	ldr	r2, [r7, #20]
 80113ee:	621a      	str	r2, [r3, #32]
}
 80113f0:	bf00      	nop
 80113f2:	371c      	adds	r7, #28
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bc80      	pop	{r7}
 80113f8:	4770      	bx	lr

080113fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80113fa:	b480      	push	{r7}
 80113fc:	b085      	sub	sp, #20
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011412:	683a      	ldr	r2, [r7, #0]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	4313      	orrs	r3, r2
 8011418:	f043 0307 	orr.w	r3, r3, #7
 801141c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	609a      	str	r2, [r3, #8]
}
 8011424:	bf00      	nop
 8011426:	3714      	adds	r7, #20
 8011428:	46bd      	mov	sp, r7
 801142a:	bc80      	pop	{r7}
 801142c:	4770      	bx	lr

0801142e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801142e:	b480      	push	{r7}
 8011430:	b087      	sub	sp, #28
 8011432:	af00      	add	r7, sp, #0
 8011434:	60f8      	str	r0, [r7, #12]
 8011436:	60b9      	str	r1, [r7, #8]
 8011438:	607a      	str	r2, [r7, #4]
 801143a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011448:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	021a      	lsls	r2, r3, #8
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	431a      	orrs	r2, r3
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	4313      	orrs	r3, r2
 8011456:	697a      	ldr	r2, [r7, #20]
 8011458:	4313      	orrs	r3, r2
 801145a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	697a      	ldr	r2, [r7, #20]
 8011460:	609a      	str	r2, [r3, #8]
}
 8011462:	bf00      	nop
 8011464:	371c      	adds	r7, #28
 8011466:	46bd      	mov	sp, r7
 8011468:	bc80      	pop	{r7}
 801146a:	4770      	bx	lr

0801146c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801146c:	b480      	push	{r7}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801147c:	2b01      	cmp	r3, #1
 801147e:	d101      	bne.n	8011484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011480:	2302      	movs	r3, #2
 8011482:	e046      	b.n	8011512 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2201      	movs	r2, #1
 8011488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2202      	movs	r2, #2
 8011490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	68fa      	ldr	r2, [r7, #12]
 80114b2:	4313      	orrs	r3, r2
 80114b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	4a16      	ldr	r2, [pc, #88]	; (801151c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d00e      	beq.n	80114e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114d0:	d009      	beq.n	80114e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4a12      	ldr	r2, [pc, #72]	; (8011520 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80114d8:	4293      	cmp	r3, r2
 80114da:	d004      	beq.n	80114e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4a10      	ldr	r2, [pc, #64]	; (8011524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d10c      	bne.n	8011500 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	4313      	orrs	r3, r2
 80114f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	68ba      	ldr	r2, [r7, #8]
 80114fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2201      	movs	r2, #1
 8011504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3714      	adds	r7, #20
 8011516:	46bd      	mov	sp, r7
 8011518:	bc80      	pop	{r7}
 801151a:	4770      	bx	lr
 801151c:	40012c00 	.word	0x40012c00
 8011520:	40000400 	.word	0x40000400
 8011524:	40000800 	.word	0x40000800

08011528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011530:	bf00      	nop
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	bc80      	pop	{r7}
 8011538:	4770      	bx	lr

0801153a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801153a:	b480      	push	{r7}
 801153c:	b083      	sub	sp, #12
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011542:	bf00      	nop
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	bc80      	pop	{r7}
 801154a:	4770      	bx	lr

0801154c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801155a:	2301      	movs	r3, #1
 801155c:	e042      	b.n	80115e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011564:	b2db      	uxtb	r3, r3
 8011566:	2b00      	cmp	r3, #0
 8011568:	d106      	bne.n	8011578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2200      	movs	r2, #0
 801156e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7fd f944 	bl	800e800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2224      	movs	r2, #36	; 0x24
 801157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	68da      	ldr	r2, [r3, #12]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801158e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 fdc5 	bl	8012120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	691a      	ldr	r2, [r3, #16]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80115a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	695a      	ldr	r2, [r3, #20]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80115b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	68da      	ldr	r2, [r3, #12]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80115c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2220      	movs	r2, #32
 80115d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2220      	movs	r2, #32
 80115d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b08a      	sub	sp, #40	; 0x28
 80115f0:	af02      	add	r7, sp, #8
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	603b      	str	r3, [r7, #0]
 80115f8:	4613      	mov	r3, r2
 80115fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80115fc:	2300      	movs	r3, #0
 80115fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011606:	b2db      	uxtb	r3, r3
 8011608:	2b20      	cmp	r3, #32
 801160a:	d16d      	bne.n	80116e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <HAL_UART_Transmit+0x2c>
 8011612:	88fb      	ldrh	r3, [r7, #6]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d101      	bne.n	801161c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011618:	2301      	movs	r3, #1
 801161a:	e066      	b.n	80116ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2200      	movs	r2, #0
 8011620:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2221      	movs	r2, #33	; 0x21
 8011626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801162a:	f7fd fb9f 	bl	800ed6c <HAL_GetTick>
 801162e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	88fa      	ldrh	r2, [r7, #6]
 8011634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	88fa      	ldrh	r2, [r7, #6]
 801163a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011644:	d108      	bne.n	8011658 <HAL_UART_Transmit+0x6c>
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d104      	bne.n	8011658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801164e:	2300      	movs	r3, #0
 8011650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	61bb      	str	r3, [r7, #24]
 8011656:	e003      	b.n	8011660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801165c:	2300      	movs	r3, #0
 801165e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011660:	e02a      	b.n	80116b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	2200      	movs	r2, #0
 801166a:	2180      	movs	r1, #128	; 0x80
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	f000 fb14 	bl	8011c9a <UART_WaitOnFlagUntilTimeout>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d001      	beq.n	801167c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8011678:	2303      	movs	r3, #3
 801167a:	e036      	b.n	80116ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10b      	bne.n	801169a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	881b      	ldrh	r3, [r3, #0]
 8011686:	461a      	mov	r2, r3
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	3302      	adds	r3, #2
 8011696:	61bb      	str	r3, [r7, #24]
 8011698:	e007      	b.n	80116aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	781a      	ldrb	r2, [r3, #0]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	3301      	adds	r3, #1
 80116a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	3b01      	subs	r3, #1
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80116bc:	b29b      	uxth	r3, r3
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1cf      	bne.n	8011662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	2200      	movs	r2, #0
 80116ca:	2140      	movs	r1, #64	; 0x40
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f000 fae4 	bl	8011c9a <UART_WaitOnFlagUntilTimeout>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d001      	beq.n	80116dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80116d8:	2303      	movs	r3, #3
 80116da:	e006      	b.n	80116ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2220      	movs	r2, #32
 80116e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80116e4:	2300      	movs	r3, #0
 80116e6:	e000      	b.n	80116ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80116e8:	2302      	movs	r3, #2
  }
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3720      	adds	r7, #32
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b084      	sub	sp, #16
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	60f8      	str	r0, [r7, #12]
 80116fa:	60b9      	str	r1, [r7, #8]
 80116fc:	4613      	mov	r3, r2
 80116fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011706:	b2db      	uxtb	r3, r3
 8011708:	2b20      	cmp	r3, #32
 801170a:	d112      	bne.n	8011732 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <HAL_UART_Receive_IT+0x26>
 8011712:	88fb      	ldrh	r3, [r7, #6]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d101      	bne.n	801171c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8011718:	2301      	movs	r3, #1
 801171a:	e00b      	b.n	8011734 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2200      	movs	r2, #0
 8011720:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011722:	88fb      	ldrh	r3, [r7, #6]
 8011724:	461a      	mov	r2, r3
 8011726:	68b9      	ldr	r1, [r7, #8]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 fb24 	bl	8011d76 <UART_Start_Receive_IT>
 801172e:	4603      	mov	r3, r0
 8011730:	e000      	b.n	8011734 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8011732:	2302      	movs	r3, #2
  }
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b0ba      	sub	sp, #232	; 0xe8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	695b      	ldr	r3, [r3, #20]
 801175e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8011762:	2300      	movs	r3, #0
 8011764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011768:	2300      	movs	r3, #0
 801176a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801176e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011772:	f003 030f 	and.w	r3, r3, #15
 8011776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801177a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801177e:	2b00      	cmp	r3, #0
 8011780:	d10f      	bne.n	80117a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011786:	f003 0320 	and.w	r3, r3, #32
 801178a:	2b00      	cmp	r3, #0
 801178c:	d009      	beq.n	80117a2 <HAL_UART_IRQHandler+0x66>
 801178e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011792:	f003 0320 	and.w	r3, r3, #32
 8011796:	2b00      	cmp	r3, #0
 8011798:	d003      	beq.n	80117a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 fc01 	bl	8011fa2 <UART_Receive_IT>
      return;
 80117a0:	e25b      	b.n	8011c5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80117a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	f000 80de 	beq.w	8011968 <HAL_UART_IRQHandler+0x22c>
 80117ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80117b0:	f003 0301 	and.w	r3, r3, #1
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80117b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 80d1 	beq.w	8011968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80117c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00b      	beq.n	80117ea <HAL_UART_IRQHandler+0xae>
 80117d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d005      	beq.n	80117ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117e2:	f043 0201 	orr.w	r2, r3, #1
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80117ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117ee:	f003 0304 	and.w	r3, r3, #4
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00b      	beq.n	801180e <HAL_UART_IRQHandler+0xd2>
 80117f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80117fa:	f003 0301 	and.w	r3, r3, #1
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011806:	f043 0202 	orr.w	r2, r3, #2
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801180e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011812:	f003 0302 	and.w	r3, r3, #2
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00b      	beq.n	8011832 <HAL_UART_IRQHandler+0xf6>
 801181a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801181e:	f003 0301 	and.w	r3, r3, #1
 8011822:	2b00      	cmp	r3, #0
 8011824:	d005      	beq.n	8011832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801182a:	f043 0204 	orr.w	r2, r3, #4
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011836:	f003 0308 	and.w	r3, r3, #8
 801183a:	2b00      	cmp	r3, #0
 801183c:	d011      	beq.n	8011862 <HAL_UART_IRQHandler+0x126>
 801183e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011842:	f003 0320 	and.w	r3, r3, #32
 8011846:	2b00      	cmp	r3, #0
 8011848:	d105      	bne.n	8011856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801184e:	f003 0301 	and.w	r3, r3, #1
 8011852:	2b00      	cmp	r3, #0
 8011854:	d005      	beq.n	8011862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801185a:	f043 0208 	orr.w	r2, r3, #8
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011866:	2b00      	cmp	r3, #0
 8011868:	f000 81f2 	beq.w	8011c50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801186c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011870:	f003 0320 	and.w	r3, r3, #32
 8011874:	2b00      	cmp	r3, #0
 8011876:	d008      	beq.n	801188a <HAL_UART_IRQHandler+0x14e>
 8011878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801187c:	f003 0320 	and.w	r3, r3, #32
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 fb8c 	bl	8011fa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	695b      	ldr	r3, [r3, #20]
 8011890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011894:	2b00      	cmp	r3, #0
 8011896:	bf14      	ite	ne
 8011898:	2301      	movne	r3, #1
 801189a:	2300      	moveq	r3, #0
 801189c:	b2db      	uxtb	r3, r3
 801189e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118a6:	f003 0308 	and.w	r3, r3, #8
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d103      	bne.n	80118b6 <HAL_UART_IRQHandler+0x17a>
 80118ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d04f      	beq.n	8011956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 fa96 	bl	8011de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	695b      	ldr	r3, [r3, #20]
 80118c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d041      	beq.n	801194e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	3314      	adds	r3, #20
 80118d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80118d8:	e853 3f00 	ldrex	r3, [r3]
 80118dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80118e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80118e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	3314      	adds	r3, #20
 80118f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80118f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80118fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011906:	e841 2300 	strex	r3, r2, [r1]
 801190a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801190e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1d9      	bne.n	80118ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801191a:	2b00      	cmp	r3, #0
 801191c:	d013      	beq.n	8011946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011922:	4a7e      	ldr	r2, [pc, #504]	; (8011b1c <HAL_UART_IRQHandler+0x3e0>)
 8011924:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801192a:	4618      	mov	r0, r3
 801192c:	f7fd fb94 	bl	800f058 <HAL_DMA_Abort_IT>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d016      	beq.n	8011964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011940:	4610      	mov	r0, r2
 8011942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011944:	e00e      	b.n	8011964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 f993 	bl	8011c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801194c:	e00a      	b.n	8011964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 f98f 	bl	8011c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011954:	e006      	b.n	8011964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 f98b 	bl	8011c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8011962:	e175      	b.n	8011c50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011964:	bf00      	nop
    return;
 8011966:	e173      	b.n	8011c50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801196c:	2b01      	cmp	r3, #1
 801196e:	f040 814f 	bne.w	8011c10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011976:	f003 0310 	and.w	r3, r3, #16
 801197a:	2b00      	cmp	r3, #0
 801197c:	f000 8148 	beq.w	8011c10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011984:	f003 0310 	and.w	r3, r3, #16
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 8141 	beq.w	8011c10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801198e:	2300      	movs	r3, #0
 8011990:	60bb      	str	r3, [r7, #8]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	60bb      	str	r3, [r7, #8]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	60bb      	str	r3, [r7, #8]
 80119a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	695b      	ldr	r3, [r3, #20]
 80119aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f000 80b6 	beq.w	8011b20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80119c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f000 8145 	beq.w	8011c54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80119ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80119d2:	429a      	cmp	r2, r3
 80119d4:	f080 813e 	bcs.w	8011c54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80119de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119e4:	699b      	ldr	r3, [r3, #24]
 80119e6:	2b20      	cmp	r3, #32
 80119e8:	f000 8088 	beq.w	8011afc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	330c      	adds	r3, #12
 80119f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80119fa:	e853 3f00 	ldrex	r3, [r3]
 80119fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	330c      	adds	r3, #12
 8011a14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011a18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a28:	e841 2300 	strex	r3, r2, [r1]
 8011a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d1d9      	bne.n	80119ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	3314      	adds	r3, #20
 8011a3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a42:	e853 3f00 	ldrex	r3, [r3]
 8011a46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a4a:	f023 0301 	bic.w	r3, r3, #1
 8011a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	3314      	adds	r3, #20
 8011a58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011a5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011a60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011a68:	e841 2300 	strex	r3, r2, [r1]
 8011a6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1e1      	bne.n	8011a38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	3314      	adds	r3, #20
 8011a7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a7e:	e853 3f00 	ldrex	r3, [r3]
 8011a82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3314      	adds	r3, #20
 8011a94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011a98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011a9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011a9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011aa0:	e841 2300 	strex	r3, r2, [r1]
 8011aa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d1e3      	bne.n	8011a74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2220      	movs	r2, #32
 8011ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	330c      	adds	r3, #12
 8011ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ac4:	e853 3f00 	ldrex	r3, [r3]
 8011ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011acc:	f023 0310 	bic.w	r3, r3, #16
 8011ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	330c      	adds	r3, #12
 8011ada:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8011ae0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ae6:	e841 2300 	strex	r3, r2, [r1]
 8011aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1e3      	bne.n	8011aba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fd fa73 	bl	800efe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2202      	movs	r2, #2
 8011b00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	4619      	mov	r1, r3
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 f8b6 	bl	8011c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011b18:	e09c      	b.n	8011c54 <HAL_UART_IRQHandler+0x518>
 8011b1a:	bf00      	nop
 8011b1c:	08011ead 	.word	0x08011ead
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f000 808e 	beq.w	8011c58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8011b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f000 8089 	beq.w	8011c58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	330c      	adds	r3, #12
 8011b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b50:	e853 3f00 	ldrex	r3, [r3]
 8011b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	330c      	adds	r3, #12
 8011b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8011b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b72:	e841 2300 	strex	r3, r2, [r1]
 8011b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d1e3      	bne.n	8011b46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	3314      	adds	r3, #20
 8011b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b88:	e853 3f00 	ldrex	r3, [r3]
 8011b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8011b8e:	6a3b      	ldr	r3, [r7, #32]
 8011b90:	f023 0301 	bic.w	r3, r3, #1
 8011b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	3314      	adds	r3, #20
 8011b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8011ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011baa:	e841 2300 	strex	r3, r2, [r1]
 8011bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1e3      	bne.n	8011b7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2220      	movs	r2, #32
 8011bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	330c      	adds	r3, #12
 8011bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	e853 3f00 	ldrex	r3, [r3]
 8011bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f023 0310 	bic.w	r3, r3, #16
 8011bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	330c      	adds	r3, #12
 8011be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011be8:	61fa      	str	r2, [r7, #28]
 8011bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bec:	69b9      	ldr	r1, [r7, #24]
 8011bee:	69fa      	ldr	r2, [r7, #28]
 8011bf0:	e841 2300 	strex	r3, r2, [r1]
 8011bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d1e3      	bne.n	8011bc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2202      	movs	r2, #2
 8011c00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f000 f83b 	bl	8011c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011c0e:	e023      	b.n	8011c58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d009      	beq.n	8011c30 <HAL_UART_IRQHandler+0x4f4>
 8011c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d003      	beq.n	8011c30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 f953 	bl	8011ed4 <UART_Transmit_IT>
    return;
 8011c2e:	e014      	b.n	8011c5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d00e      	beq.n	8011c5a <HAL_UART_IRQHandler+0x51e>
 8011c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d008      	beq.n	8011c5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 f992 	bl	8011f72 <UART_EndTransmit_IT>
    return;
 8011c4e:	e004      	b.n	8011c5a <HAL_UART_IRQHandler+0x51e>
    return;
 8011c50:	bf00      	nop
 8011c52:	e002      	b.n	8011c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8011c54:	bf00      	nop
 8011c56:	e000      	b.n	8011c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8011c58:	bf00      	nop
  }
}
 8011c5a:	37e8      	adds	r7, #232	; 0xe8
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011c68:	bf00      	nop
 8011c6a:	370c      	adds	r7, #12
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bc80      	pop	{r7}
 8011c70:	4770      	bx	lr

08011c72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011c72:	b480      	push	{r7}
 8011c74:	b083      	sub	sp, #12
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011c7a:	bf00      	nop
 8011c7c:	370c      	adds	r7, #12
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bc80      	pop	{r7}
 8011c82:	4770      	bx	lr

08011c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011c90:	bf00      	nop
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bc80      	pop	{r7}
 8011c98:	4770      	bx	lr

08011c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b090      	sub	sp, #64	; 0x40
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	60f8      	str	r0, [r7, #12]
 8011ca2:	60b9      	str	r1, [r7, #8]
 8011ca4:	603b      	str	r3, [r7, #0]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011caa:	e050      	b.n	8011d4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cb2:	d04c      	beq.n	8011d4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d007      	beq.n	8011cca <UART_WaitOnFlagUntilTimeout+0x30>
 8011cba:	f7fd f857 	bl	800ed6c <HAL_GetTick>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d241      	bcs.n	8011d4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	330c      	adds	r3, #12
 8011cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd4:	e853 3f00 	ldrex	r3, [r3]
 8011cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	330c      	adds	r3, #12
 8011ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cea:	637a      	str	r2, [r7, #52]	; 0x34
 8011cec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cf2:	e841 2300 	strex	r3, r2, [r1]
 8011cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1e5      	bne.n	8011cca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3314      	adds	r3, #20
 8011d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	e853 3f00 	ldrex	r3, [r3]
 8011d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	f023 0301 	bic.w	r3, r3, #1
 8011d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	3314      	adds	r3, #20
 8011d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d1e:	623a      	str	r2, [r7, #32]
 8011d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d22:	69f9      	ldr	r1, [r7, #28]
 8011d24:	6a3a      	ldr	r2, [r7, #32]
 8011d26:	e841 2300 	strex	r3, r2, [r1]
 8011d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1e5      	bne.n	8011cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2220      	movs	r2, #32
 8011d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2220      	movs	r2, #32
 8011d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2200      	movs	r2, #0
 8011d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8011d4a:	2303      	movs	r3, #3
 8011d4c:	e00f      	b.n	8011d6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	4013      	ands	r3, r2
 8011d58:	68ba      	ldr	r2, [r7, #8]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	bf0c      	ite	eq
 8011d5e:	2301      	moveq	r3, #1
 8011d60:	2300      	movne	r3, #0
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	461a      	mov	r2, r3
 8011d66:	79fb      	ldrb	r3, [r7, #7]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d09f      	beq.n	8011cac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3740      	adds	r7, #64	; 0x40
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d76:	b480      	push	{r7}
 8011d78:	b085      	sub	sp, #20
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	60f8      	str	r0, [r7, #12]
 8011d7e:	60b9      	str	r1, [r7, #8]
 8011d80:	4613      	mov	r3, r2
 8011d82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	88fa      	ldrh	r2, [r7, #6]
 8011d8e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	88fa      	ldrh	r2, [r7, #6]
 8011d94:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2222      	movs	r2, #34	; 0x22
 8011da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	691b      	ldr	r3, [r3, #16]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d007      	beq.n	8011dbc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68da      	ldr	r2, [r3, #12]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011dba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	695a      	ldr	r2, [r3, #20]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f042 0201 	orr.w	r2, r2, #1
 8011dca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	68da      	ldr	r2, [r3, #12]
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f042 0220 	orr.w	r2, r2, #32
 8011dda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011ddc:	2300      	movs	r3, #0
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3714      	adds	r7, #20
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bc80      	pop	{r7}
 8011de6:	4770      	bx	lr

08011de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b095      	sub	sp, #84	; 0x54
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	330c      	adds	r3, #12
 8011df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfa:	e853 3f00 	ldrex	r3, [r3]
 8011dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	330c      	adds	r3, #12
 8011e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e10:	643a      	str	r2, [r7, #64]	; 0x40
 8011e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e18:	e841 2300 	strex	r3, r2, [r1]
 8011e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1e5      	bne.n	8011df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	3314      	adds	r3, #20
 8011e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
 8011e2e:	e853 3f00 	ldrex	r3, [r3]
 8011e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	f023 0301 	bic.w	r3, r3, #1
 8011e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	3314      	adds	r3, #20
 8011e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e4c:	e841 2300 	strex	r3, r2, [r1]
 8011e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1e5      	bne.n	8011e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d119      	bne.n	8011e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	330c      	adds	r3, #12
 8011e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	e853 3f00 	ldrex	r3, [r3]
 8011e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	f023 0310 	bic.w	r3, r3, #16
 8011e76:	647b      	str	r3, [r7, #68]	; 0x44
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	330c      	adds	r3, #12
 8011e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e80:	61ba      	str	r2, [r7, #24]
 8011e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e84:	6979      	ldr	r1, [r7, #20]
 8011e86:	69ba      	ldr	r2, [r7, #24]
 8011e88:	e841 2300 	strex	r3, r2, [r1]
 8011e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1e5      	bne.n	8011e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2220      	movs	r2, #32
 8011e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011ea2:	bf00      	nop
 8011ea4:	3754      	adds	r7, #84	; 0x54
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bc80      	pop	{r7}
 8011eaa:	4770      	bx	lr

08011eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	f7ff fed3 	bl	8011c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ecc:	bf00      	nop
 8011ece:	3710      	adds	r7, #16
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	2b21      	cmp	r3, #33	; 0x21
 8011ee6:	d13e      	bne.n	8011f66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	689b      	ldr	r3, [r3, #8]
 8011eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ef0:	d114      	bne.n	8011f1c <UART_Transmit_IT+0x48>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d110      	bne.n	8011f1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6a1b      	ldr	r3, [r3, #32]
 8011efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	881b      	ldrh	r3, [r3, #0]
 8011f04:	461a      	mov	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011f0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a1b      	ldr	r3, [r3, #32]
 8011f14:	1c9a      	adds	r2, r3, #2
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	621a      	str	r2, [r3, #32]
 8011f1a:	e008      	b.n	8011f2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6a1b      	ldr	r3, [r3, #32]
 8011f20:	1c59      	adds	r1, r3, #1
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	6211      	str	r1, [r2, #32]
 8011f26:	781a      	ldrb	r2, [r3, #0]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	3b01      	subs	r3, #1
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d10f      	bne.n	8011f62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	68da      	ldr	r2, [r3, #12]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	68da      	ldr	r2, [r3, #12]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011f62:	2300      	movs	r3, #0
 8011f64:	e000      	b.n	8011f68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011f66:	2302      	movs	r3, #2
  }
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3714      	adds	r7, #20
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bc80      	pop	{r7}
 8011f70:	4770      	bx	lr

08011f72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b082      	sub	sp, #8
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	68da      	ldr	r2, [r3, #12]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011f88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2220      	movs	r2, #32
 8011f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff fe64 	bl	8011c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b08c      	sub	sp, #48	; 0x30
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b22      	cmp	r3, #34	; 0x22
 8011fb4:	f040 80ae 	bne.w	8012114 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fc0:	d117      	bne.n	8011ff2 <UART_Receive_IT+0x50>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	691b      	ldr	r3, [r3, #16]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d113      	bne.n	8011ff2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fe0:	b29a      	uxth	r2, r3
 8011fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fea:	1c9a      	adds	r2, r3, #2
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	629a      	str	r2, [r3, #40]	; 0x28
 8011ff0:	e026      	b.n	8012040 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	689b      	ldr	r3, [r3, #8]
 8012000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012004:	d007      	beq.n	8012016 <UART_Receive_IT+0x74>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	689b      	ldr	r3, [r3, #8]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10a      	bne.n	8012024 <UART_Receive_IT+0x82>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	691b      	ldr	r3, [r3, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d106      	bne.n	8012024 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	b2da      	uxtb	r2, r3
 801201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012020:	701a      	strb	r2, [r3, #0]
 8012022:	e008      	b.n	8012036 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	b2db      	uxtb	r3, r3
 801202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012030:	b2da      	uxtb	r2, r3
 8012032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012034:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801203a:	1c5a      	adds	r2, r3, #1
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012044:	b29b      	uxth	r3, r3
 8012046:	3b01      	subs	r3, #1
 8012048:	b29b      	uxth	r3, r3
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	4619      	mov	r1, r3
 801204e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012050:	2b00      	cmp	r3, #0
 8012052:	d15d      	bne.n	8012110 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68da      	ldr	r2, [r3, #12]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f022 0220 	bic.w	r2, r2, #32
 8012062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	68da      	ldr	r2, [r3, #12]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	695a      	ldr	r2, [r3, #20]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f022 0201 	bic.w	r2, r2, #1
 8012082:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2220      	movs	r2, #32
 8012088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012096:	2b01      	cmp	r3, #1
 8012098:	d135      	bne.n	8012106 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	330c      	adds	r3, #12
 80120a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	e853 3f00 	ldrex	r3, [r3]
 80120ae:	613b      	str	r3, [r7, #16]
   return(result);
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	f023 0310 	bic.w	r3, r3, #16
 80120b6:	627b      	str	r3, [r7, #36]	; 0x24
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	330c      	adds	r3, #12
 80120be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c0:	623a      	str	r2, [r7, #32]
 80120c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c4:	69f9      	ldr	r1, [r7, #28]
 80120c6:	6a3a      	ldr	r2, [r7, #32]
 80120c8:	e841 2300 	strex	r3, r2, [r1]
 80120cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d1e5      	bne.n	80120a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	f003 0310 	and.w	r3, r3, #16
 80120de:	2b10      	cmp	r3, #16
 80120e0:	d10a      	bne.n	80120f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80120e2:	2300      	movs	r3, #0
 80120e4:	60fb      	str	r3, [r7, #12]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	60fb      	str	r3, [r7, #12]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	60fb      	str	r3, [r7, #12]
 80120f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80120fc:	4619      	mov	r1, r3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f7ff fdc0 	bl	8011c84 <HAL_UARTEx_RxEventCallback>
 8012104:	e002      	b.n	801210c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f7fb f814 	bl	800d134 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801210c:	2300      	movs	r3, #0
 801210e:	e002      	b.n	8012116 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8012110:	2300      	movs	r3, #0
 8012112:	e000      	b.n	8012116 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8012114:	2302      	movs	r3, #2
  }
}
 8012116:	4618      	mov	r0, r3
 8012118:	3730      	adds	r7, #48	; 0x30
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	691b      	ldr	r3, [r3, #16]
 801212e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	68da      	ldr	r2, [r3, #12]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	430a      	orrs	r2, r1
 801213c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	689a      	ldr	r2, [r3, #8]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	431a      	orrs	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	695b      	ldr	r3, [r3, #20]
 801214c:	4313      	orrs	r3, r2
 801214e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801215a:	f023 030c 	bic.w	r3, r3, #12
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	6812      	ldr	r2, [r2, #0]
 8012162:	68b9      	ldr	r1, [r7, #8]
 8012164:	430b      	orrs	r3, r1
 8012166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	699a      	ldr	r2, [r3, #24]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	430a      	orrs	r2, r1
 801217c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	4a2c      	ldr	r2, [pc, #176]	; (8012234 <UART_SetConfig+0x114>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d103      	bne.n	8012190 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8012188:	f7fe faa8 	bl	80106dc <HAL_RCC_GetPCLK2Freq>
 801218c:	60f8      	str	r0, [r7, #12]
 801218e:	e002      	b.n	8012196 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8012190:	f7fe fa90 	bl	80106b4 <HAL_RCC_GetPCLK1Freq>
 8012194:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	4613      	mov	r3, r2
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	4413      	add	r3, r2
 801219e:	009a      	lsls	r2, r3, #2
 80121a0:	441a      	add	r2, r3
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	009b      	lsls	r3, r3, #2
 80121a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80121ac:	4a22      	ldr	r2, [pc, #136]	; (8012238 <UART_SetConfig+0x118>)
 80121ae:	fba2 2303 	umull	r2, r3, r2, r3
 80121b2:	095b      	lsrs	r3, r3, #5
 80121b4:	0119      	lsls	r1, r3, #4
 80121b6:	68fa      	ldr	r2, [r7, #12]
 80121b8:	4613      	mov	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4413      	add	r3, r2
 80121be:	009a      	lsls	r2, r3, #2
 80121c0:	441a      	add	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	009b      	lsls	r3, r3, #2
 80121c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80121cc:	4b1a      	ldr	r3, [pc, #104]	; (8012238 <UART_SetConfig+0x118>)
 80121ce:	fba3 0302 	umull	r0, r3, r3, r2
 80121d2:	095b      	lsrs	r3, r3, #5
 80121d4:	2064      	movs	r0, #100	; 0x64
 80121d6:	fb00 f303 	mul.w	r3, r0, r3
 80121da:	1ad3      	subs	r3, r2, r3
 80121dc:	011b      	lsls	r3, r3, #4
 80121de:	3332      	adds	r3, #50	; 0x32
 80121e0:	4a15      	ldr	r2, [pc, #84]	; (8012238 <UART_SetConfig+0x118>)
 80121e2:	fba2 2303 	umull	r2, r3, r2, r3
 80121e6:	095b      	lsrs	r3, r3, #5
 80121e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121ec:	4419      	add	r1, r3
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	4613      	mov	r3, r2
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	4413      	add	r3, r2
 80121f6:	009a      	lsls	r2, r3, #2
 80121f8:	441a      	add	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	fbb2 f2f3 	udiv	r2, r2, r3
 8012204:	4b0c      	ldr	r3, [pc, #48]	; (8012238 <UART_SetConfig+0x118>)
 8012206:	fba3 0302 	umull	r0, r3, r3, r2
 801220a:	095b      	lsrs	r3, r3, #5
 801220c:	2064      	movs	r0, #100	; 0x64
 801220e:	fb00 f303 	mul.w	r3, r0, r3
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	011b      	lsls	r3, r3, #4
 8012216:	3332      	adds	r3, #50	; 0x32
 8012218:	4a07      	ldr	r2, [pc, #28]	; (8012238 <UART_SetConfig+0x118>)
 801221a:	fba2 2303 	umull	r2, r3, r2, r3
 801221e:	095b      	lsrs	r3, r3, #5
 8012220:	f003 020f 	and.w	r2, r3, #15
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	440a      	add	r2, r1
 801222a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 801222c:	bf00      	nop
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	40013800 	.word	0x40013800
 8012238:	51eb851f 	.word	0x51eb851f

0801223c <atoi>:
 801223c:	220a      	movs	r2, #10
 801223e:	2100      	movs	r1, #0
 8012240:	f000 ba06 	b.w	8012650 <strtol>

08012244 <__errno>:
 8012244:	4b01      	ldr	r3, [pc, #4]	; (801224c <__errno+0x8>)
 8012246:	6818      	ldr	r0, [r3, #0]
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	200000d8 	.word	0x200000d8

08012250 <__libc_init_array>:
 8012250:	b570      	push	{r4, r5, r6, lr}
 8012252:	2600      	movs	r6, #0
 8012254:	4d0c      	ldr	r5, [pc, #48]	; (8012288 <__libc_init_array+0x38>)
 8012256:	4c0d      	ldr	r4, [pc, #52]	; (801228c <__libc_init_array+0x3c>)
 8012258:	1b64      	subs	r4, r4, r5
 801225a:	10a4      	asrs	r4, r4, #2
 801225c:	42a6      	cmp	r6, r4
 801225e:	d109      	bne.n	8012274 <__libc_init_array+0x24>
 8012260:	f000 fd60 	bl	8012d24 <_init>
 8012264:	2600      	movs	r6, #0
 8012266:	4d0a      	ldr	r5, [pc, #40]	; (8012290 <__libc_init_array+0x40>)
 8012268:	4c0a      	ldr	r4, [pc, #40]	; (8012294 <__libc_init_array+0x44>)
 801226a:	1b64      	subs	r4, r4, r5
 801226c:	10a4      	asrs	r4, r4, #2
 801226e:	42a6      	cmp	r6, r4
 8012270:	d105      	bne.n	801227e <__libc_init_array+0x2e>
 8012272:	bd70      	pop	{r4, r5, r6, pc}
 8012274:	f855 3b04 	ldr.w	r3, [r5], #4
 8012278:	4798      	blx	r3
 801227a:	3601      	adds	r6, #1
 801227c:	e7ee      	b.n	801225c <__libc_init_array+0xc>
 801227e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012282:	4798      	blx	r3
 8012284:	3601      	adds	r6, #1
 8012286:	e7f2      	b.n	801226e <__libc_init_array+0x1e>
 8012288:	08013144 	.word	0x08013144
 801228c:	08013144 	.word	0x08013144
 8012290:	08013144 	.word	0x08013144
 8012294:	08013148 	.word	0x08013148

08012298 <malloc>:
 8012298:	4b02      	ldr	r3, [pc, #8]	; (80122a4 <malloc+0xc>)
 801229a:	4601      	mov	r1, r0
 801229c:	6818      	ldr	r0, [r3, #0]
 801229e:	f000 b881 	b.w	80123a4 <_malloc_r>
 80122a2:	bf00      	nop
 80122a4:	200000d8 	.word	0x200000d8

080122a8 <memcpy>:
 80122a8:	440a      	add	r2, r1
 80122aa:	4291      	cmp	r1, r2
 80122ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80122b0:	d100      	bne.n	80122b4 <memcpy+0xc>
 80122b2:	4770      	bx	lr
 80122b4:	b510      	push	{r4, lr}
 80122b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122ba:	4291      	cmp	r1, r2
 80122bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122c0:	d1f9      	bne.n	80122b6 <memcpy+0xe>
 80122c2:	bd10      	pop	{r4, pc}

080122c4 <memset>:
 80122c4:	4603      	mov	r3, r0
 80122c6:	4402      	add	r2, r0
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d100      	bne.n	80122ce <memset+0xa>
 80122cc:	4770      	bx	lr
 80122ce:	f803 1b01 	strb.w	r1, [r3], #1
 80122d2:	e7f9      	b.n	80122c8 <memset+0x4>

080122d4 <_free_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	4605      	mov	r5, r0
 80122d8:	2900      	cmp	r1, #0
 80122da:	d040      	beq.n	801235e <_free_r+0x8a>
 80122dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122e0:	1f0c      	subs	r4, r1, #4
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	bfb8      	it	lt
 80122e6:	18e4      	addlt	r4, r4, r3
 80122e8:	f000 f9bc 	bl	8012664 <__malloc_lock>
 80122ec:	4a1c      	ldr	r2, [pc, #112]	; (8012360 <_free_r+0x8c>)
 80122ee:	6813      	ldr	r3, [r2, #0]
 80122f0:	b933      	cbnz	r3, 8012300 <_free_r+0x2c>
 80122f2:	6063      	str	r3, [r4, #4]
 80122f4:	6014      	str	r4, [r2, #0]
 80122f6:	4628      	mov	r0, r5
 80122f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122fc:	f000 b9b8 	b.w	8012670 <__malloc_unlock>
 8012300:	42a3      	cmp	r3, r4
 8012302:	d908      	bls.n	8012316 <_free_r+0x42>
 8012304:	6820      	ldr	r0, [r4, #0]
 8012306:	1821      	adds	r1, r4, r0
 8012308:	428b      	cmp	r3, r1
 801230a:	bf01      	itttt	eq
 801230c:	6819      	ldreq	r1, [r3, #0]
 801230e:	685b      	ldreq	r3, [r3, #4]
 8012310:	1809      	addeq	r1, r1, r0
 8012312:	6021      	streq	r1, [r4, #0]
 8012314:	e7ed      	b.n	80122f2 <_free_r+0x1e>
 8012316:	461a      	mov	r2, r3
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	b10b      	cbz	r3, 8012320 <_free_r+0x4c>
 801231c:	42a3      	cmp	r3, r4
 801231e:	d9fa      	bls.n	8012316 <_free_r+0x42>
 8012320:	6811      	ldr	r1, [r2, #0]
 8012322:	1850      	adds	r0, r2, r1
 8012324:	42a0      	cmp	r0, r4
 8012326:	d10b      	bne.n	8012340 <_free_r+0x6c>
 8012328:	6820      	ldr	r0, [r4, #0]
 801232a:	4401      	add	r1, r0
 801232c:	1850      	adds	r0, r2, r1
 801232e:	4283      	cmp	r3, r0
 8012330:	6011      	str	r1, [r2, #0]
 8012332:	d1e0      	bne.n	80122f6 <_free_r+0x22>
 8012334:	6818      	ldr	r0, [r3, #0]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	4401      	add	r1, r0
 801233a:	6011      	str	r1, [r2, #0]
 801233c:	6053      	str	r3, [r2, #4]
 801233e:	e7da      	b.n	80122f6 <_free_r+0x22>
 8012340:	d902      	bls.n	8012348 <_free_r+0x74>
 8012342:	230c      	movs	r3, #12
 8012344:	602b      	str	r3, [r5, #0]
 8012346:	e7d6      	b.n	80122f6 <_free_r+0x22>
 8012348:	6820      	ldr	r0, [r4, #0]
 801234a:	1821      	adds	r1, r4, r0
 801234c:	428b      	cmp	r3, r1
 801234e:	bf01      	itttt	eq
 8012350:	6819      	ldreq	r1, [r3, #0]
 8012352:	685b      	ldreq	r3, [r3, #4]
 8012354:	1809      	addeq	r1, r1, r0
 8012356:	6021      	streq	r1, [r4, #0]
 8012358:	6063      	str	r3, [r4, #4]
 801235a:	6054      	str	r4, [r2, #4]
 801235c:	e7cb      	b.n	80122f6 <_free_r+0x22>
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	20000530 	.word	0x20000530

08012364 <sbrk_aligned>:
 8012364:	b570      	push	{r4, r5, r6, lr}
 8012366:	4e0e      	ldr	r6, [pc, #56]	; (80123a0 <sbrk_aligned+0x3c>)
 8012368:	460c      	mov	r4, r1
 801236a:	6831      	ldr	r1, [r6, #0]
 801236c:	4605      	mov	r5, r0
 801236e:	b911      	cbnz	r1, 8012376 <sbrk_aligned+0x12>
 8012370:	f000 f88c 	bl	801248c <_sbrk_r>
 8012374:	6030      	str	r0, [r6, #0]
 8012376:	4621      	mov	r1, r4
 8012378:	4628      	mov	r0, r5
 801237a:	f000 f887 	bl	801248c <_sbrk_r>
 801237e:	1c43      	adds	r3, r0, #1
 8012380:	d00a      	beq.n	8012398 <sbrk_aligned+0x34>
 8012382:	1cc4      	adds	r4, r0, #3
 8012384:	f024 0403 	bic.w	r4, r4, #3
 8012388:	42a0      	cmp	r0, r4
 801238a:	d007      	beq.n	801239c <sbrk_aligned+0x38>
 801238c:	1a21      	subs	r1, r4, r0
 801238e:	4628      	mov	r0, r5
 8012390:	f000 f87c 	bl	801248c <_sbrk_r>
 8012394:	3001      	adds	r0, #1
 8012396:	d101      	bne.n	801239c <sbrk_aligned+0x38>
 8012398:	f04f 34ff 	mov.w	r4, #4294967295
 801239c:	4620      	mov	r0, r4
 801239e:	bd70      	pop	{r4, r5, r6, pc}
 80123a0:	20000534 	.word	0x20000534

080123a4 <_malloc_r>:
 80123a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a8:	1ccd      	adds	r5, r1, #3
 80123aa:	f025 0503 	bic.w	r5, r5, #3
 80123ae:	3508      	adds	r5, #8
 80123b0:	2d0c      	cmp	r5, #12
 80123b2:	bf38      	it	cc
 80123b4:	250c      	movcc	r5, #12
 80123b6:	2d00      	cmp	r5, #0
 80123b8:	4607      	mov	r7, r0
 80123ba:	db01      	blt.n	80123c0 <_malloc_r+0x1c>
 80123bc:	42a9      	cmp	r1, r5
 80123be:	d905      	bls.n	80123cc <_malloc_r+0x28>
 80123c0:	230c      	movs	r3, #12
 80123c2:	2600      	movs	r6, #0
 80123c4:	603b      	str	r3, [r7, #0]
 80123c6:	4630      	mov	r0, r6
 80123c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123cc:	4e2e      	ldr	r6, [pc, #184]	; (8012488 <_malloc_r+0xe4>)
 80123ce:	f000 f949 	bl	8012664 <__malloc_lock>
 80123d2:	6833      	ldr	r3, [r6, #0]
 80123d4:	461c      	mov	r4, r3
 80123d6:	bb34      	cbnz	r4, 8012426 <_malloc_r+0x82>
 80123d8:	4629      	mov	r1, r5
 80123da:	4638      	mov	r0, r7
 80123dc:	f7ff ffc2 	bl	8012364 <sbrk_aligned>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	4604      	mov	r4, r0
 80123e4:	d14d      	bne.n	8012482 <_malloc_r+0xde>
 80123e6:	6834      	ldr	r4, [r6, #0]
 80123e8:	4626      	mov	r6, r4
 80123ea:	2e00      	cmp	r6, #0
 80123ec:	d140      	bne.n	8012470 <_malloc_r+0xcc>
 80123ee:	6823      	ldr	r3, [r4, #0]
 80123f0:	4631      	mov	r1, r6
 80123f2:	4638      	mov	r0, r7
 80123f4:	eb04 0803 	add.w	r8, r4, r3
 80123f8:	f000 f848 	bl	801248c <_sbrk_r>
 80123fc:	4580      	cmp	r8, r0
 80123fe:	d13a      	bne.n	8012476 <_malloc_r+0xd2>
 8012400:	6821      	ldr	r1, [r4, #0]
 8012402:	3503      	adds	r5, #3
 8012404:	1a6d      	subs	r5, r5, r1
 8012406:	f025 0503 	bic.w	r5, r5, #3
 801240a:	3508      	adds	r5, #8
 801240c:	2d0c      	cmp	r5, #12
 801240e:	bf38      	it	cc
 8012410:	250c      	movcc	r5, #12
 8012412:	4638      	mov	r0, r7
 8012414:	4629      	mov	r1, r5
 8012416:	f7ff ffa5 	bl	8012364 <sbrk_aligned>
 801241a:	3001      	adds	r0, #1
 801241c:	d02b      	beq.n	8012476 <_malloc_r+0xd2>
 801241e:	6823      	ldr	r3, [r4, #0]
 8012420:	442b      	add	r3, r5
 8012422:	6023      	str	r3, [r4, #0]
 8012424:	e00e      	b.n	8012444 <_malloc_r+0xa0>
 8012426:	6822      	ldr	r2, [r4, #0]
 8012428:	1b52      	subs	r2, r2, r5
 801242a:	d41e      	bmi.n	801246a <_malloc_r+0xc6>
 801242c:	2a0b      	cmp	r2, #11
 801242e:	d916      	bls.n	801245e <_malloc_r+0xba>
 8012430:	1961      	adds	r1, r4, r5
 8012432:	42a3      	cmp	r3, r4
 8012434:	6025      	str	r5, [r4, #0]
 8012436:	bf18      	it	ne
 8012438:	6059      	strne	r1, [r3, #4]
 801243a:	6863      	ldr	r3, [r4, #4]
 801243c:	bf08      	it	eq
 801243e:	6031      	streq	r1, [r6, #0]
 8012440:	5162      	str	r2, [r4, r5]
 8012442:	604b      	str	r3, [r1, #4]
 8012444:	4638      	mov	r0, r7
 8012446:	f104 060b 	add.w	r6, r4, #11
 801244a:	f000 f911 	bl	8012670 <__malloc_unlock>
 801244e:	f026 0607 	bic.w	r6, r6, #7
 8012452:	1d23      	adds	r3, r4, #4
 8012454:	1af2      	subs	r2, r6, r3
 8012456:	d0b6      	beq.n	80123c6 <_malloc_r+0x22>
 8012458:	1b9b      	subs	r3, r3, r6
 801245a:	50a3      	str	r3, [r4, r2]
 801245c:	e7b3      	b.n	80123c6 <_malloc_r+0x22>
 801245e:	6862      	ldr	r2, [r4, #4]
 8012460:	42a3      	cmp	r3, r4
 8012462:	bf0c      	ite	eq
 8012464:	6032      	streq	r2, [r6, #0]
 8012466:	605a      	strne	r2, [r3, #4]
 8012468:	e7ec      	b.n	8012444 <_malloc_r+0xa0>
 801246a:	4623      	mov	r3, r4
 801246c:	6864      	ldr	r4, [r4, #4]
 801246e:	e7b2      	b.n	80123d6 <_malloc_r+0x32>
 8012470:	4634      	mov	r4, r6
 8012472:	6876      	ldr	r6, [r6, #4]
 8012474:	e7b9      	b.n	80123ea <_malloc_r+0x46>
 8012476:	230c      	movs	r3, #12
 8012478:	4638      	mov	r0, r7
 801247a:	603b      	str	r3, [r7, #0]
 801247c:	f000 f8f8 	bl	8012670 <__malloc_unlock>
 8012480:	e7a1      	b.n	80123c6 <_malloc_r+0x22>
 8012482:	6025      	str	r5, [r4, #0]
 8012484:	e7de      	b.n	8012444 <_malloc_r+0xa0>
 8012486:	bf00      	nop
 8012488:	20000530 	.word	0x20000530

0801248c <_sbrk_r>:
 801248c:	b538      	push	{r3, r4, r5, lr}
 801248e:	2300      	movs	r3, #0
 8012490:	4d05      	ldr	r5, [pc, #20]	; (80124a8 <_sbrk_r+0x1c>)
 8012492:	4604      	mov	r4, r0
 8012494:	4608      	mov	r0, r1
 8012496:	602b      	str	r3, [r5, #0]
 8012498:	f7fc fb90 	bl	800ebbc <_sbrk>
 801249c:	1c43      	adds	r3, r0, #1
 801249e:	d102      	bne.n	80124a6 <_sbrk_r+0x1a>
 80124a0:	682b      	ldr	r3, [r5, #0]
 80124a2:	b103      	cbz	r3, 80124a6 <_sbrk_r+0x1a>
 80124a4:	6023      	str	r3, [r4, #0]
 80124a6:	bd38      	pop	{r3, r4, r5, pc}
 80124a8:	20000538 	.word	0x20000538

080124ac <siprintf>:
 80124ac:	b40e      	push	{r1, r2, r3}
 80124ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80124b2:	b500      	push	{lr}
 80124b4:	b09c      	sub	sp, #112	; 0x70
 80124b6:	ab1d      	add	r3, sp, #116	; 0x74
 80124b8:	9002      	str	r0, [sp, #8]
 80124ba:	9006      	str	r0, [sp, #24]
 80124bc:	9107      	str	r1, [sp, #28]
 80124be:	9104      	str	r1, [sp, #16]
 80124c0:	4808      	ldr	r0, [pc, #32]	; (80124e4 <siprintf+0x38>)
 80124c2:	4909      	ldr	r1, [pc, #36]	; (80124e8 <siprintf+0x3c>)
 80124c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80124c8:	9105      	str	r1, [sp, #20]
 80124ca:	6800      	ldr	r0, [r0, #0]
 80124cc:	a902      	add	r1, sp, #8
 80124ce:	9301      	str	r3, [sp, #4]
 80124d0:	f000 f930 	bl	8012734 <_svfiprintf_r>
 80124d4:	2200      	movs	r2, #0
 80124d6:	9b02      	ldr	r3, [sp, #8]
 80124d8:	701a      	strb	r2, [r3, #0]
 80124da:	b01c      	add	sp, #112	; 0x70
 80124dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124e0:	b003      	add	sp, #12
 80124e2:	4770      	bx	lr
 80124e4:	200000d8 	.word	0x200000d8
 80124e8:	ffff0208 	.word	0xffff0208

080124ec <strchr>:
 80124ec:	4603      	mov	r3, r0
 80124ee:	b2c9      	uxtb	r1, r1
 80124f0:	4618      	mov	r0, r3
 80124f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124f6:	b112      	cbz	r2, 80124fe <strchr+0x12>
 80124f8:	428a      	cmp	r2, r1
 80124fa:	d1f9      	bne.n	80124f0 <strchr+0x4>
 80124fc:	4770      	bx	lr
 80124fe:	2900      	cmp	r1, #0
 8012500:	bf18      	it	ne
 8012502:	2000      	movne	r0, #0
 8012504:	4770      	bx	lr

08012506 <strncpy>:
 8012506:	4603      	mov	r3, r0
 8012508:	b510      	push	{r4, lr}
 801250a:	3901      	subs	r1, #1
 801250c:	b132      	cbz	r2, 801251c <strncpy+0x16>
 801250e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012512:	3a01      	subs	r2, #1
 8012514:	f803 4b01 	strb.w	r4, [r3], #1
 8012518:	2c00      	cmp	r4, #0
 801251a:	d1f7      	bne.n	801250c <strncpy+0x6>
 801251c:	2100      	movs	r1, #0
 801251e:	441a      	add	r2, r3
 8012520:	4293      	cmp	r3, r2
 8012522:	d100      	bne.n	8012526 <strncpy+0x20>
 8012524:	bd10      	pop	{r4, pc}
 8012526:	f803 1b01 	strb.w	r1, [r3], #1
 801252a:	e7f9      	b.n	8012520 <strncpy+0x1a>

0801252c <strstr>:
 801252c:	780a      	ldrb	r2, [r1, #0]
 801252e:	b570      	push	{r4, r5, r6, lr}
 8012530:	b96a      	cbnz	r2, 801254e <strstr+0x22>
 8012532:	bd70      	pop	{r4, r5, r6, pc}
 8012534:	429a      	cmp	r2, r3
 8012536:	d109      	bne.n	801254c <strstr+0x20>
 8012538:	460c      	mov	r4, r1
 801253a:	4605      	mov	r5, r0
 801253c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012540:	2b00      	cmp	r3, #0
 8012542:	d0f6      	beq.n	8012532 <strstr+0x6>
 8012544:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012548:	429e      	cmp	r6, r3
 801254a:	d0f7      	beq.n	801253c <strstr+0x10>
 801254c:	3001      	adds	r0, #1
 801254e:	7803      	ldrb	r3, [r0, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1ef      	bne.n	8012534 <strstr+0x8>
 8012554:	4618      	mov	r0, r3
 8012556:	e7ec      	b.n	8012532 <strstr+0x6>

08012558 <_strtol_l.constprop.0>:
 8012558:	2b01      	cmp	r3, #1
 801255a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801255e:	4680      	mov	r8, r0
 8012560:	d001      	beq.n	8012566 <_strtol_l.constprop.0+0xe>
 8012562:	2b24      	cmp	r3, #36	; 0x24
 8012564:	d906      	bls.n	8012574 <_strtol_l.constprop.0+0x1c>
 8012566:	f7ff fe6d 	bl	8012244 <__errno>
 801256a:	2316      	movs	r3, #22
 801256c:	6003      	str	r3, [r0, #0]
 801256e:	2000      	movs	r0, #0
 8012570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012574:	460d      	mov	r5, r1
 8012576:	4f35      	ldr	r7, [pc, #212]	; (801264c <_strtol_l.constprop.0+0xf4>)
 8012578:	4628      	mov	r0, r5
 801257a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801257e:	5de6      	ldrb	r6, [r4, r7]
 8012580:	f016 0608 	ands.w	r6, r6, #8
 8012584:	d1f8      	bne.n	8012578 <_strtol_l.constprop.0+0x20>
 8012586:	2c2d      	cmp	r4, #45	; 0x2d
 8012588:	d12f      	bne.n	80125ea <_strtol_l.constprop.0+0x92>
 801258a:	2601      	movs	r6, #1
 801258c:	782c      	ldrb	r4, [r5, #0]
 801258e:	1c85      	adds	r5, r0, #2
 8012590:	2b00      	cmp	r3, #0
 8012592:	d057      	beq.n	8012644 <_strtol_l.constprop.0+0xec>
 8012594:	2b10      	cmp	r3, #16
 8012596:	d109      	bne.n	80125ac <_strtol_l.constprop.0+0x54>
 8012598:	2c30      	cmp	r4, #48	; 0x30
 801259a:	d107      	bne.n	80125ac <_strtol_l.constprop.0+0x54>
 801259c:	7828      	ldrb	r0, [r5, #0]
 801259e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80125a2:	2858      	cmp	r0, #88	; 0x58
 80125a4:	d149      	bne.n	801263a <_strtol_l.constprop.0+0xe2>
 80125a6:	2310      	movs	r3, #16
 80125a8:	786c      	ldrb	r4, [r5, #1]
 80125aa:	3502      	adds	r5, #2
 80125ac:	2700      	movs	r7, #0
 80125ae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80125b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80125b6:	fbbe f9f3 	udiv	r9, lr, r3
 80125ba:	4638      	mov	r0, r7
 80125bc:	fb03 ea19 	mls	sl, r3, r9, lr
 80125c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80125c4:	f1bc 0f09 	cmp.w	ip, #9
 80125c8:	d814      	bhi.n	80125f4 <_strtol_l.constprop.0+0x9c>
 80125ca:	4664      	mov	r4, ip
 80125cc:	42a3      	cmp	r3, r4
 80125ce:	dd22      	ble.n	8012616 <_strtol_l.constprop.0+0xbe>
 80125d0:	2f00      	cmp	r7, #0
 80125d2:	db1d      	blt.n	8012610 <_strtol_l.constprop.0+0xb8>
 80125d4:	4581      	cmp	r9, r0
 80125d6:	d31b      	bcc.n	8012610 <_strtol_l.constprop.0+0xb8>
 80125d8:	d101      	bne.n	80125de <_strtol_l.constprop.0+0x86>
 80125da:	45a2      	cmp	sl, r4
 80125dc:	db18      	blt.n	8012610 <_strtol_l.constprop.0+0xb8>
 80125de:	2701      	movs	r7, #1
 80125e0:	fb00 4003 	mla	r0, r0, r3, r4
 80125e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125e8:	e7ea      	b.n	80125c0 <_strtol_l.constprop.0+0x68>
 80125ea:	2c2b      	cmp	r4, #43	; 0x2b
 80125ec:	bf04      	itt	eq
 80125ee:	782c      	ldrbeq	r4, [r5, #0]
 80125f0:	1c85      	addeq	r5, r0, #2
 80125f2:	e7cd      	b.n	8012590 <_strtol_l.constprop.0+0x38>
 80125f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80125f8:	f1bc 0f19 	cmp.w	ip, #25
 80125fc:	d801      	bhi.n	8012602 <_strtol_l.constprop.0+0xaa>
 80125fe:	3c37      	subs	r4, #55	; 0x37
 8012600:	e7e4      	b.n	80125cc <_strtol_l.constprop.0+0x74>
 8012602:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012606:	f1bc 0f19 	cmp.w	ip, #25
 801260a:	d804      	bhi.n	8012616 <_strtol_l.constprop.0+0xbe>
 801260c:	3c57      	subs	r4, #87	; 0x57
 801260e:	e7dd      	b.n	80125cc <_strtol_l.constprop.0+0x74>
 8012610:	f04f 37ff 	mov.w	r7, #4294967295
 8012614:	e7e6      	b.n	80125e4 <_strtol_l.constprop.0+0x8c>
 8012616:	2f00      	cmp	r7, #0
 8012618:	da07      	bge.n	801262a <_strtol_l.constprop.0+0xd2>
 801261a:	2322      	movs	r3, #34	; 0x22
 801261c:	4670      	mov	r0, lr
 801261e:	f8c8 3000 	str.w	r3, [r8]
 8012622:	2a00      	cmp	r2, #0
 8012624:	d0a4      	beq.n	8012570 <_strtol_l.constprop.0+0x18>
 8012626:	1e69      	subs	r1, r5, #1
 8012628:	e005      	b.n	8012636 <_strtol_l.constprop.0+0xde>
 801262a:	b106      	cbz	r6, 801262e <_strtol_l.constprop.0+0xd6>
 801262c:	4240      	negs	r0, r0
 801262e:	2a00      	cmp	r2, #0
 8012630:	d09e      	beq.n	8012570 <_strtol_l.constprop.0+0x18>
 8012632:	2f00      	cmp	r7, #0
 8012634:	d1f7      	bne.n	8012626 <_strtol_l.constprop.0+0xce>
 8012636:	6011      	str	r1, [r2, #0]
 8012638:	e79a      	b.n	8012570 <_strtol_l.constprop.0+0x18>
 801263a:	2430      	movs	r4, #48	; 0x30
 801263c:	2b00      	cmp	r3, #0
 801263e:	d1b5      	bne.n	80125ac <_strtol_l.constprop.0+0x54>
 8012640:	2308      	movs	r3, #8
 8012642:	e7b3      	b.n	80125ac <_strtol_l.constprop.0+0x54>
 8012644:	2c30      	cmp	r4, #48	; 0x30
 8012646:	d0a9      	beq.n	801259c <_strtol_l.constprop.0+0x44>
 8012648:	230a      	movs	r3, #10
 801264a:	e7af      	b.n	80125ac <_strtol_l.constprop.0+0x54>
 801264c:	08013007 	.word	0x08013007

08012650 <strtol>:
 8012650:	4613      	mov	r3, r2
 8012652:	460a      	mov	r2, r1
 8012654:	4601      	mov	r1, r0
 8012656:	4802      	ldr	r0, [pc, #8]	; (8012660 <strtol+0x10>)
 8012658:	6800      	ldr	r0, [r0, #0]
 801265a:	f7ff bf7d 	b.w	8012558 <_strtol_l.constprop.0>
 801265e:	bf00      	nop
 8012660:	200000d8 	.word	0x200000d8

08012664 <__malloc_lock>:
 8012664:	4801      	ldr	r0, [pc, #4]	; (801266c <__malloc_lock+0x8>)
 8012666:	f000 bafb 	b.w	8012c60 <__retarget_lock_acquire_recursive>
 801266a:	bf00      	nop
 801266c:	2000053c 	.word	0x2000053c

08012670 <__malloc_unlock>:
 8012670:	4801      	ldr	r0, [pc, #4]	; (8012678 <__malloc_unlock+0x8>)
 8012672:	f000 baf6 	b.w	8012c62 <__retarget_lock_release_recursive>
 8012676:	bf00      	nop
 8012678:	2000053c 	.word	0x2000053c

0801267c <__ssputs_r>:
 801267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012680:	688e      	ldr	r6, [r1, #8]
 8012682:	4682      	mov	sl, r0
 8012684:	429e      	cmp	r6, r3
 8012686:	460c      	mov	r4, r1
 8012688:	4690      	mov	r8, r2
 801268a:	461f      	mov	r7, r3
 801268c:	d838      	bhi.n	8012700 <__ssputs_r+0x84>
 801268e:	898a      	ldrh	r2, [r1, #12]
 8012690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012694:	d032      	beq.n	80126fc <__ssputs_r+0x80>
 8012696:	6825      	ldr	r5, [r4, #0]
 8012698:	6909      	ldr	r1, [r1, #16]
 801269a:	3301      	adds	r3, #1
 801269c:	eba5 0901 	sub.w	r9, r5, r1
 80126a0:	6965      	ldr	r5, [r4, #20]
 80126a2:	444b      	add	r3, r9
 80126a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80126ac:	106d      	asrs	r5, r5, #1
 80126ae:	429d      	cmp	r5, r3
 80126b0:	bf38      	it	cc
 80126b2:	461d      	movcc	r5, r3
 80126b4:	0553      	lsls	r3, r2, #21
 80126b6:	d531      	bpl.n	801271c <__ssputs_r+0xa0>
 80126b8:	4629      	mov	r1, r5
 80126ba:	f7ff fe73 	bl	80123a4 <_malloc_r>
 80126be:	4606      	mov	r6, r0
 80126c0:	b950      	cbnz	r0, 80126d8 <__ssputs_r+0x5c>
 80126c2:	230c      	movs	r3, #12
 80126c4:	f04f 30ff 	mov.w	r0, #4294967295
 80126c8:	f8ca 3000 	str.w	r3, [sl]
 80126cc:	89a3      	ldrh	r3, [r4, #12]
 80126ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126d2:	81a3      	strh	r3, [r4, #12]
 80126d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126d8:	464a      	mov	r2, r9
 80126da:	6921      	ldr	r1, [r4, #16]
 80126dc:	f7ff fde4 	bl	80122a8 <memcpy>
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80126e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	6126      	str	r6, [r4, #16]
 80126ee:	444e      	add	r6, r9
 80126f0:	6026      	str	r6, [r4, #0]
 80126f2:	463e      	mov	r6, r7
 80126f4:	6165      	str	r5, [r4, #20]
 80126f6:	eba5 0509 	sub.w	r5, r5, r9
 80126fa:	60a5      	str	r5, [r4, #8]
 80126fc:	42be      	cmp	r6, r7
 80126fe:	d900      	bls.n	8012702 <__ssputs_r+0x86>
 8012700:	463e      	mov	r6, r7
 8012702:	4632      	mov	r2, r6
 8012704:	4641      	mov	r1, r8
 8012706:	6820      	ldr	r0, [r4, #0]
 8012708:	f000 faba 	bl	8012c80 <memmove>
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	2000      	movs	r0, #0
 8012710:	1b9b      	subs	r3, r3, r6
 8012712:	60a3      	str	r3, [r4, #8]
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	4433      	add	r3, r6
 8012718:	6023      	str	r3, [r4, #0]
 801271a:	e7db      	b.n	80126d4 <__ssputs_r+0x58>
 801271c:	462a      	mov	r2, r5
 801271e:	f000 fac9 	bl	8012cb4 <_realloc_r>
 8012722:	4606      	mov	r6, r0
 8012724:	2800      	cmp	r0, #0
 8012726:	d1e1      	bne.n	80126ec <__ssputs_r+0x70>
 8012728:	4650      	mov	r0, sl
 801272a:	6921      	ldr	r1, [r4, #16]
 801272c:	f7ff fdd2 	bl	80122d4 <_free_r>
 8012730:	e7c7      	b.n	80126c2 <__ssputs_r+0x46>
	...

08012734 <_svfiprintf_r>:
 8012734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012738:	4698      	mov	r8, r3
 801273a:	898b      	ldrh	r3, [r1, #12]
 801273c:	4607      	mov	r7, r0
 801273e:	061b      	lsls	r3, r3, #24
 8012740:	460d      	mov	r5, r1
 8012742:	4614      	mov	r4, r2
 8012744:	b09d      	sub	sp, #116	; 0x74
 8012746:	d50e      	bpl.n	8012766 <_svfiprintf_r+0x32>
 8012748:	690b      	ldr	r3, [r1, #16]
 801274a:	b963      	cbnz	r3, 8012766 <_svfiprintf_r+0x32>
 801274c:	2140      	movs	r1, #64	; 0x40
 801274e:	f7ff fe29 	bl	80123a4 <_malloc_r>
 8012752:	6028      	str	r0, [r5, #0]
 8012754:	6128      	str	r0, [r5, #16]
 8012756:	b920      	cbnz	r0, 8012762 <_svfiprintf_r+0x2e>
 8012758:	230c      	movs	r3, #12
 801275a:	603b      	str	r3, [r7, #0]
 801275c:	f04f 30ff 	mov.w	r0, #4294967295
 8012760:	e0d1      	b.n	8012906 <_svfiprintf_r+0x1d2>
 8012762:	2340      	movs	r3, #64	; 0x40
 8012764:	616b      	str	r3, [r5, #20]
 8012766:	2300      	movs	r3, #0
 8012768:	9309      	str	r3, [sp, #36]	; 0x24
 801276a:	2320      	movs	r3, #32
 801276c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012770:	2330      	movs	r3, #48	; 0x30
 8012772:	f04f 0901 	mov.w	r9, #1
 8012776:	f8cd 800c 	str.w	r8, [sp, #12]
 801277a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012920 <_svfiprintf_r+0x1ec>
 801277e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012782:	4623      	mov	r3, r4
 8012784:	469a      	mov	sl, r3
 8012786:	f813 2b01 	ldrb.w	r2, [r3], #1
 801278a:	b10a      	cbz	r2, 8012790 <_svfiprintf_r+0x5c>
 801278c:	2a25      	cmp	r2, #37	; 0x25
 801278e:	d1f9      	bne.n	8012784 <_svfiprintf_r+0x50>
 8012790:	ebba 0b04 	subs.w	fp, sl, r4
 8012794:	d00b      	beq.n	80127ae <_svfiprintf_r+0x7a>
 8012796:	465b      	mov	r3, fp
 8012798:	4622      	mov	r2, r4
 801279a:	4629      	mov	r1, r5
 801279c:	4638      	mov	r0, r7
 801279e:	f7ff ff6d 	bl	801267c <__ssputs_r>
 80127a2:	3001      	adds	r0, #1
 80127a4:	f000 80aa 	beq.w	80128fc <_svfiprintf_r+0x1c8>
 80127a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127aa:	445a      	add	r2, fp
 80127ac:	9209      	str	r2, [sp, #36]	; 0x24
 80127ae:	f89a 3000 	ldrb.w	r3, [sl]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f000 80a2 	beq.w	80128fc <_svfiprintf_r+0x1c8>
 80127b8:	2300      	movs	r3, #0
 80127ba:	f04f 32ff 	mov.w	r2, #4294967295
 80127be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127c2:	f10a 0a01 	add.w	sl, sl, #1
 80127c6:	9304      	str	r3, [sp, #16]
 80127c8:	9307      	str	r3, [sp, #28]
 80127ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127ce:	931a      	str	r3, [sp, #104]	; 0x68
 80127d0:	4654      	mov	r4, sl
 80127d2:	2205      	movs	r2, #5
 80127d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127d8:	4851      	ldr	r0, [pc, #324]	; (8012920 <_svfiprintf_r+0x1ec>)
 80127da:	f000 fa43 	bl	8012c64 <memchr>
 80127de:	9a04      	ldr	r2, [sp, #16]
 80127e0:	b9d8      	cbnz	r0, 801281a <_svfiprintf_r+0xe6>
 80127e2:	06d0      	lsls	r0, r2, #27
 80127e4:	bf44      	itt	mi
 80127e6:	2320      	movmi	r3, #32
 80127e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127ec:	0711      	lsls	r1, r2, #28
 80127ee:	bf44      	itt	mi
 80127f0:	232b      	movmi	r3, #43	; 0x2b
 80127f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127f6:	f89a 3000 	ldrb.w	r3, [sl]
 80127fa:	2b2a      	cmp	r3, #42	; 0x2a
 80127fc:	d015      	beq.n	801282a <_svfiprintf_r+0xf6>
 80127fe:	4654      	mov	r4, sl
 8012800:	2000      	movs	r0, #0
 8012802:	f04f 0c0a 	mov.w	ip, #10
 8012806:	9a07      	ldr	r2, [sp, #28]
 8012808:	4621      	mov	r1, r4
 801280a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801280e:	3b30      	subs	r3, #48	; 0x30
 8012810:	2b09      	cmp	r3, #9
 8012812:	d94e      	bls.n	80128b2 <_svfiprintf_r+0x17e>
 8012814:	b1b0      	cbz	r0, 8012844 <_svfiprintf_r+0x110>
 8012816:	9207      	str	r2, [sp, #28]
 8012818:	e014      	b.n	8012844 <_svfiprintf_r+0x110>
 801281a:	eba0 0308 	sub.w	r3, r0, r8
 801281e:	fa09 f303 	lsl.w	r3, r9, r3
 8012822:	4313      	orrs	r3, r2
 8012824:	46a2      	mov	sl, r4
 8012826:	9304      	str	r3, [sp, #16]
 8012828:	e7d2      	b.n	80127d0 <_svfiprintf_r+0x9c>
 801282a:	9b03      	ldr	r3, [sp, #12]
 801282c:	1d19      	adds	r1, r3, #4
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	9103      	str	r1, [sp, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	bfbb      	ittet	lt
 8012836:	425b      	neglt	r3, r3
 8012838:	f042 0202 	orrlt.w	r2, r2, #2
 801283c:	9307      	strge	r3, [sp, #28]
 801283e:	9307      	strlt	r3, [sp, #28]
 8012840:	bfb8      	it	lt
 8012842:	9204      	strlt	r2, [sp, #16]
 8012844:	7823      	ldrb	r3, [r4, #0]
 8012846:	2b2e      	cmp	r3, #46	; 0x2e
 8012848:	d10c      	bne.n	8012864 <_svfiprintf_r+0x130>
 801284a:	7863      	ldrb	r3, [r4, #1]
 801284c:	2b2a      	cmp	r3, #42	; 0x2a
 801284e:	d135      	bne.n	80128bc <_svfiprintf_r+0x188>
 8012850:	9b03      	ldr	r3, [sp, #12]
 8012852:	3402      	adds	r4, #2
 8012854:	1d1a      	adds	r2, r3, #4
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	9203      	str	r2, [sp, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	bfb8      	it	lt
 801285e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012862:	9305      	str	r3, [sp, #20]
 8012864:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8012924 <_svfiprintf_r+0x1f0>
 8012868:	2203      	movs	r2, #3
 801286a:	4650      	mov	r0, sl
 801286c:	7821      	ldrb	r1, [r4, #0]
 801286e:	f000 f9f9 	bl	8012c64 <memchr>
 8012872:	b140      	cbz	r0, 8012886 <_svfiprintf_r+0x152>
 8012874:	2340      	movs	r3, #64	; 0x40
 8012876:	eba0 000a 	sub.w	r0, r0, sl
 801287a:	fa03 f000 	lsl.w	r0, r3, r0
 801287e:	9b04      	ldr	r3, [sp, #16]
 8012880:	3401      	adds	r4, #1
 8012882:	4303      	orrs	r3, r0
 8012884:	9304      	str	r3, [sp, #16]
 8012886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801288a:	2206      	movs	r2, #6
 801288c:	4826      	ldr	r0, [pc, #152]	; (8012928 <_svfiprintf_r+0x1f4>)
 801288e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012892:	f000 f9e7 	bl	8012c64 <memchr>
 8012896:	2800      	cmp	r0, #0
 8012898:	d038      	beq.n	801290c <_svfiprintf_r+0x1d8>
 801289a:	4b24      	ldr	r3, [pc, #144]	; (801292c <_svfiprintf_r+0x1f8>)
 801289c:	bb1b      	cbnz	r3, 80128e6 <_svfiprintf_r+0x1b2>
 801289e:	9b03      	ldr	r3, [sp, #12]
 80128a0:	3307      	adds	r3, #7
 80128a2:	f023 0307 	bic.w	r3, r3, #7
 80128a6:	3308      	adds	r3, #8
 80128a8:	9303      	str	r3, [sp, #12]
 80128aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ac:	4433      	add	r3, r6
 80128ae:	9309      	str	r3, [sp, #36]	; 0x24
 80128b0:	e767      	b.n	8012782 <_svfiprintf_r+0x4e>
 80128b2:	460c      	mov	r4, r1
 80128b4:	2001      	movs	r0, #1
 80128b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80128ba:	e7a5      	b.n	8012808 <_svfiprintf_r+0xd4>
 80128bc:	2300      	movs	r3, #0
 80128be:	f04f 0c0a 	mov.w	ip, #10
 80128c2:	4619      	mov	r1, r3
 80128c4:	3401      	adds	r4, #1
 80128c6:	9305      	str	r3, [sp, #20]
 80128c8:	4620      	mov	r0, r4
 80128ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128ce:	3a30      	subs	r2, #48	; 0x30
 80128d0:	2a09      	cmp	r2, #9
 80128d2:	d903      	bls.n	80128dc <_svfiprintf_r+0x1a8>
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d0c5      	beq.n	8012864 <_svfiprintf_r+0x130>
 80128d8:	9105      	str	r1, [sp, #20]
 80128da:	e7c3      	b.n	8012864 <_svfiprintf_r+0x130>
 80128dc:	4604      	mov	r4, r0
 80128de:	2301      	movs	r3, #1
 80128e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80128e4:	e7f0      	b.n	80128c8 <_svfiprintf_r+0x194>
 80128e6:	ab03      	add	r3, sp, #12
 80128e8:	9300      	str	r3, [sp, #0]
 80128ea:	462a      	mov	r2, r5
 80128ec:	4638      	mov	r0, r7
 80128ee:	4b10      	ldr	r3, [pc, #64]	; (8012930 <_svfiprintf_r+0x1fc>)
 80128f0:	a904      	add	r1, sp, #16
 80128f2:	f3af 8000 	nop.w
 80128f6:	1c42      	adds	r2, r0, #1
 80128f8:	4606      	mov	r6, r0
 80128fa:	d1d6      	bne.n	80128aa <_svfiprintf_r+0x176>
 80128fc:	89ab      	ldrh	r3, [r5, #12]
 80128fe:	065b      	lsls	r3, r3, #25
 8012900:	f53f af2c 	bmi.w	801275c <_svfiprintf_r+0x28>
 8012904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012906:	b01d      	add	sp, #116	; 0x74
 8012908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290c:	ab03      	add	r3, sp, #12
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	462a      	mov	r2, r5
 8012912:	4638      	mov	r0, r7
 8012914:	4b06      	ldr	r3, [pc, #24]	; (8012930 <_svfiprintf_r+0x1fc>)
 8012916:	a904      	add	r1, sp, #16
 8012918:	f000 f87c 	bl	8012a14 <_printf_i>
 801291c:	e7eb      	b.n	80128f6 <_svfiprintf_r+0x1c2>
 801291e:	bf00      	nop
 8012920:	08013107 	.word	0x08013107
 8012924:	0801310d 	.word	0x0801310d
 8012928:	08013111 	.word	0x08013111
 801292c:	00000000 	.word	0x00000000
 8012930:	0801267d 	.word	0x0801267d

08012934 <_printf_common>:
 8012934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012938:	4616      	mov	r6, r2
 801293a:	4699      	mov	r9, r3
 801293c:	688a      	ldr	r2, [r1, #8]
 801293e:	690b      	ldr	r3, [r1, #16]
 8012940:	4607      	mov	r7, r0
 8012942:	4293      	cmp	r3, r2
 8012944:	bfb8      	it	lt
 8012946:	4613      	movlt	r3, r2
 8012948:	6033      	str	r3, [r6, #0]
 801294a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801294e:	460c      	mov	r4, r1
 8012950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012954:	b10a      	cbz	r2, 801295a <_printf_common+0x26>
 8012956:	3301      	adds	r3, #1
 8012958:	6033      	str	r3, [r6, #0]
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	0699      	lsls	r1, r3, #26
 801295e:	bf42      	ittt	mi
 8012960:	6833      	ldrmi	r3, [r6, #0]
 8012962:	3302      	addmi	r3, #2
 8012964:	6033      	strmi	r3, [r6, #0]
 8012966:	6825      	ldr	r5, [r4, #0]
 8012968:	f015 0506 	ands.w	r5, r5, #6
 801296c:	d106      	bne.n	801297c <_printf_common+0x48>
 801296e:	f104 0a19 	add.w	sl, r4, #25
 8012972:	68e3      	ldr	r3, [r4, #12]
 8012974:	6832      	ldr	r2, [r6, #0]
 8012976:	1a9b      	subs	r3, r3, r2
 8012978:	42ab      	cmp	r3, r5
 801297a:	dc28      	bgt.n	80129ce <_printf_common+0x9a>
 801297c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012980:	1e13      	subs	r3, r2, #0
 8012982:	6822      	ldr	r2, [r4, #0]
 8012984:	bf18      	it	ne
 8012986:	2301      	movne	r3, #1
 8012988:	0692      	lsls	r2, r2, #26
 801298a:	d42d      	bmi.n	80129e8 <_printf_common+0xb4>
 801298c:	4649      	mov	r1, r9
 801298e:	4638      	mov	r0, r7
 8012990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012994:	47c0      	blx	r8
 8012996:	3001      	adds	r0, #1
 8012998:	d020      	beq.n	80129dc <_printf_common+0xa8>
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	68e5      	ldr	r5, [r4, #12]
 801299e:	f003 0306 	and.w	r3, r3, #6
 80129a2:	2b04      	cmp	r3, #4
 80129a4:	bf18      	it	ne
 80129a6:	2500      	movne	r5, #0
 80129a8:	6832      	ldr	r2, [r6, #0]
 80129aa:	f04f 0600 	mov.w	r6, #0
 80129ae:	68a3      	ldr	r3, [r4, #8]
 80129b0:	bf08      	it	eq
 80129b2:	1aad      	subeq	r5, r5, r2
 80129b4:	6922      	ldr	r2, [r4, #16]
 80129b6:	bf08      	it	eq
 80129b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129bc:	4293      	cmp	r3, r2
 80129be:	bfc4      	itt	gt
 80129c0:	1a9b      	subgt	r3, r3, r2
 80129c2:	18ed      	addgt	r5, r5, r3
 80129c4:	341a      	adds	r4, #26
 80129c6:	42b5      	cmp	r5, r6
 80129c8:	d11a      	bne.n	8012a00 <_printf_common+0xcc>
 80129ca:	2000      	movs	r0, #0
 80129cc:	e008      	b.n	80129e0 <_printf_common+0xac>
 80129ce:	2301      	movs	r3, #1
 80129d0:	4652      	mov	r2, sl
 80129d2:	4649      	mov	r1, r9
 80129d4:	4638      	mov	r0, r7
 80129d6:	47c0      	blx	r8
 80129d8:	3001      	adds	r0, #1
 80129da:	d103      	bne.n	80129e4 <_printf_common+0xb0>
 80129dc:	f04f 30ff 	mov.w	r0, #4294967295
 80129e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129e4:	3501      	adds	r5, #1
 80129e6:	e7c4      	b.n	8012972 <_printf_common+0x3e>
 80129e8:	2030      	movs	r0, #48	; 0x30
 80129ea:	18e1      	adds	r1, r4, r3
 80129ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129f0:	1c5a      	adds	r2, r3, #1
 80129f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129f6:	4422      	add	r2, r4
 80129f8:	3302      	adds	r3, #2
 80129fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129fe:	e7c5      	b.n	801298c <_printf_common+0x58>
 8012a00:	2301      	movs	r3, #1
 8012a02:	4622      	mov	r2, r4
 8012a04:	4649      	mov	r1, r9
 8012a06:	4638      	mov	r0, r7
 8012a08:	47c0      	blx	r8
 8012a0a:	3001      	adds	r0, #1
 8012a0c:	d0e6      	beq.n	80129dc <_printf_common+0xa8>
 8012a0e:	3601      	adds	r6, #1
 8012a10:	e7d9      	b.n	80129c6 <_printf_common+0x92>
	...

08012a14 <_printf_i>:
 8012a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a18:	7e0f      	ldrb	r7, [r1, #24]
 8012a1a:	4691      	mov	r9, r2
 8012a1c:	2f78      	cmp	r7, #120	; 0x78
 8012a1e:	4680      	mov	r8, r0
 8012a20:	460c      	mov	r4, r1
 8012a22:	469a      	mov	sl, r3
 8012a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a2a:	d807      	bhi.n	8012a3c <_printf_i+0x28>
 8012a2c:	2f62      	cmp	r7, #98	; 0x62
 8012a2e:	d80a      	bhi.n	8012a46 <_printf_i+0x32>
 8012a30:	2f00      	cmp	r7, #0
 8012a32:	f000 80d9 	beq.w	8012be8 <_printf_i+0x1d4>
 8012a36:	2f58      	cmp	r7, #88	; 0x58
 8012a38:	f000 80a4 	beq.w	8012b84 <_printf_i+0x170>
 8012a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a44:	e03a      	b.n	8012abc <_printf_i+0xa8>
 8012a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a4a:	2b15      	cmp	r3, #21
 8012a4c:	d8f6      	bhi.n	8012a3c <_printf_i+0x28>
 8012a4e:	a101      	add	r1, pc, #4	; (adr r1, 8012a54 <_printf_i+0x40>)
 8012a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a54:	08012aad 	.word	0x08012aad
 8012a58:	08012ac1 	.word	0x08012ac1
 8012a5c:	08012a3d 	.word	0x08012a3d
 8012a60:	08012a3d 	.word	0x08012a3d
 8012a64:	08012a3d 	.word	0x08012a3d
 8012a68:	08012a3d 	.word	0x08012a3d
 8012a6c:	08012ac1 	.word	0x08012ac1
 8012a70:	08012a3d 	.word	0x08012a3d
 8012a74:	08012a3d 	.word	0x08012a3d
 8012a78:	08012a3d 	.word	0x08012a3d
 8012a7c:	08012a3d 	.word	0x08012a3d
 8012a80:	08012bcf 	.word	0x08012bcf
 8012a84:	08012af1 	.word	0x08012af1
 8012a88:	08012bb1 	.word	0x08012bb1
 8012a8c:	08012a3d 	.word	0x08012a3d
 8012a90:	08012a3d 	.word	0x08012a3d
 8012a94:	08012bf1 	.word	0x08012bf1
 8012a98:	08012a3d 	.word	0x08012a3d
 8012a9c:	08012af1 	.word	0x08012af1
 8012aa0:	08012a3d 	.word	0x08012a3d
 8012aa4:	08012a3d 	.word	0x08012a3d
 8012aa8:	08012bb9 	.word	0x08012bb9
 8012aac:	682b      	ldr	r3, [r5, #0]
 8012aae:	1d1a      	adds	r2, r3, #4
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	602a      	str	r2, [r5, #0]
 8012ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012abc:	2301      	movs	r3, #1
 8012abe:	e0a4      	b.n	8012c0a <_printf_i+0x1f6>
 8012ac0:	6820      	ldr	r0, [r4, #0]
 8012ac2:	6829      	ldr	r1, [r5, #0]
 8012ac4:	0606      	lsls	r6, r0, #24
 8012ac6:	f101 0304 	add.w	r3, r1, #4
 8012aca:	d50a      	bpl.n	8012ae2 <_printf_i+0xce>
 8012acc:	680e      	ldr	r6, [r1, #0]
 8012ace:	602b      	str	r3, [r5, #0]
 8012ad0:	2e00      	cmp	r6, #0
 8012ad2:	da03      	bge.n	8012adc <_printf_i+0xc8>
 8012ad4:	232d      	movs	r3, #45	; 0x2d
 8012ad6:	4276      	negs	r6, r6
 8012ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012adc:	230a      	movs	r3, #10
 8012ade:	485e      	ldr	r0, [pc, #376]	; (8012c58 <_printf_i+0x244>)
 8012ae0:	e019      	b.n	8012b16 <_printf_i+0x102>
 8012ae2:	680e      	ldr	r6, [r1, #0]
 8012ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ae8:	602b      	str	r3, [r5, #0]
 8012aea:	bf18      	it	ne
 8012aec:	b236      	sxthne	r6, r6
 8012aee:	e7ef      	b.n	8012ad0 <_printf_i+0xbc>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	6820      	ldr	r0, [r4, #0]
 8012af4:	1d19      	adds	r1, r3, #4
 8012af6:	6029      	str	r1, [r5, #0]
 8012af8:	0601      	lsls	r1, r0, #24
 8012afa:	d501      	bpl.n	8012b00 <_printf_i+0xec>
 8012afc:	681e      	ldr	r6, [r3, #0]
 8012afe:	e002      	b.n	8012b06 <_printf_i+0xf2>
 8012b00:	0646      	lsls	r6, r0, #25
 8012b02:	d5fb      	bpl.n	8012afc <_printf_i+0xe8>
 8012b04:	881e      	ldrh	r6, [r3, #0]
 8012b06:	2f6f      	cmp	r7, #111	; 0x6f
 8012b08:	bf0c      	ite	eq
 8012b0a:	2308      	moveq	r3, #8
 8012b0c:	230a      	movne	r3, #10
 8012b0e:	4852      	ldr	r0, [pc, #328]	; (8012c58 <_printf_i+0x244>)
 8012b10:	2100      	movs	r1, #0
 8012b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b16:	6865      	ldr	r5, [r4, #4]
 8012b18:	2d00      	cmp	r5, #0
 8012b1a:	bfa8      	it	ge
 8012b1c:	6821      	ldrge	r1, [r4, #0]
 8012b1e:	60a5      	str	r5, [r4, #8]
 8012b20:	bfa4      	itt	ge
 8012b22:	f021 0104 	bicge.w	r1, r1, #4
 8012b26:	6021      	strge	r1, [r4, #0]
 8012b28:	b90e      	cbnz	r6, 8012b2e <_printf_i+0x11a>
 8012b2a:	2d00      	cmp	r5, #0
 8012b2c:	d04d      	beq.n	8012bca <_printf_i+0x1b6>
 8012b2e:	4615      	mov	r5, r2
 8012b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b34:	fb03 6711 	mls	r7, r3, r1, r6
 8012b38:	5dc7      	ldrb	r7, [r0, r7]
 8012b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b3e:	4637      	mov	r7, r6
 8012b40:	42bb      	cmp	r3, r7
 8012b42:	460e      	mov	r6, r1
 8012b44:	d9f4      	bls.n	8012b30 <_printf_i+0x11c>
 8012b46:	2b08      	cmp	r3, #8
 8012b48:	d10b      	bne.n	8012b62 <_printf_i+0x14e>
 8012b4a:	6823      	ldr	r3, [r4, #0]
 8012b4c:	07de      	lsls	r6, r3, #31
 8012b4e:	d508      	bpl.n	8012b62 <_printf_i+0x14e>
 8012b50:	6923      	ldr	r3, [r4, #16]
 8012b52:	6861      	ldr	r1, [r4, #4]
 8012b54:	4299      	cmp	r1, r3
 8012b56:	bfde      	ittt	le
 8012b58:	2330      	movle	r3, #48	; 0x30
 8012b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b62:	1b52      	subs	r2, r2, r5
 8012b64:	6122      	str	r2, [r4, #16]
 8012b66:	464b      	mov	r3, r9
 8012b68:	4621      	mov	r1, r4
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	f8cd a000 	str.w	sl, [sp]
 8012b70:	aa03      	add	r2, sp, #12
 8012b72:	f7ff fedf 	bl	8012934 <_printf_common>
 8012b76:	3001      	adds	r0, #1
 8012b78:	d14c      	bne.n	8012c14 <_printf_i+0x200>
 8012b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b7e:	b004      	add	sp, #16
 8012b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b84:	4834      	ldr	r0, [pc, #208]	; (8012c58 <_printf_i+0x244>)
 8012b86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b8a:	6829      	ldr	r1, [r5, #0]
 8012b8c:	6823      	ldr	r3, [r4, #0]
 8012b8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b92:	6029      	str	r1, [r5, #0]
 8012b94:	061d      	lsls	r5, r3, #24
 8012b96:	d514      	bpl.n	8012bc2 <_printf_i+0x1ae>
 8012b98:	07df      	lsls	r7, r3, #31
 8012b9a:	bf44      	itt	mi
 8012b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8012ba0:	6023      	strmi	r3, [r4, #0]
 8012ba2:	b91e      	cbnz	r6, 8012bac <_printf_i+0x198>
 8012ba4:	6823      	ldr	r3, [r4, #0]
 8012ba6:	f023 0320 	bic.w	r3, r3, #32
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	2310      	movs	r3, #16
 8012bae:	e7af      	b.n	8012b10 <_printf_i+0xfc>
 8012bb0:	6823      	ldr	r3, [r4, #0]
 8012bb2:	f043 0320 	orr.w	r3, r3, #32
 8012bb6:	6023      	str	r3, [r4, #0]
 8012bb8:	2378      	movs	r3, #120	; 0x78
 8012bba:	4828      	ldr	r0, [pc, #160]	; (8012c5c <_printf_i+0x248>)
 8012bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012bc0:	e7e3      	b.n	8012b8a <_printf_i+0x176>
 8012bc2:	0659      	lsls	r1, r3, #25
 8012bc4:	bf48      	it	mi
 8012bc6:	b2b6      	uxthmi	r6, r6
 8012bc8:	e7e6      	b.n	8012b98 <_printf_i+0x184>
 8012bca:	4615      	mov	r5, r2
 8012bcc:	e7bb      	b.n	8012b46 <_printf_i+0x132>
 8012bce:	682b      	ldr	r3, [r5, #0]
 8012bd0:	6826      	ldr	r6, [r4, #0]
 8012bd2:	1d18      	adds	r0, r3, #4
 8012bd4:	6961      	ldr	r1, [r4, #20]
 8012bd6:	6028      	str	r0, [r5, #0]
 8012bd8:	0635      	lsls	r5, r6, #24
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	d501      	bpl.n	8012be2 <_printf_i+0x1ce>
 8012bde:	6019      	str	r1, [r3, #0]
 8012be0:	e002      	b.n	8012be8 <_printf_i+0x1d4>
 8012be2:	0670      	lsls	r0, r6, #25
 8012be4:	d5fb      	bpl.n	8012bde <_printf_i+0x1ca>
 8012be6:	8019      	strh	r1, [r3, #0]
 8012be8:	2300      	movs	r3, #0
 8012bea:	4615      	mov	r5, r2
 8012bec:	6123      	str	r3, [r4, #16]
 8012bee:	e7ba      	b.n	8012b66 <_printf_i+0x152>
 8012bf0:	682b      	ldr	r3, [r5, #0]
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	1d1a      	adds	r2, r3, #4
 8012bf6:	602a      	str	r2, [r5, #0]
 8012bf8:	681d      	ldr	r5, [r3, #0]
 8012bfa:	6862      	ldr	r2, [r4, #4]
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	f000 f831 	bl	8012c64 <memchr>
 8012c02:	b108      	cbz	r0, 8012c08 <_printf_i+0x1f4>
 8012c04:	1b40      	subs	r0, r0, r5
 8012c06:	6060      	str	r0, [r4, #4]
 8012c08:	6863      	ldr	r3, [r4, #4]
 8012c0a:	6123      	str	r3, [r4, #16]
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c12:	e7a8      	b.n	8012b66 <_printf_i+0x152>
 8012c14:	462a      	mov	r2, r5
 8012c16:	4649      	mov	r1, r9
 8012c18:	4640      	mov	r0, r8
 8012c1a:	6923      	ldr	r3, [r4, #16]
 8012c1c:	47d0      	blx	sl
 8012c1e:	3001      	adds	r0, #1
 8012c20:	d0ab      	beq.n	8012b7a <_printf_i+0x166>
 8012c22:	6823      	ldr	r3, [r4, #0]
 8012c24:	079b      	lsls	r3, r3, #30
 8012c26:	d413      	bmi.n	8012c50 <_printf_i+0x23c>
 8012c28:	68e0      	ldr	r0, [r4, #12]
 8012c2a:	9b03      	ldr	r3, [sp, #12]
 8012c2c:	4298      	cmp	r0, r3
 8012c2e:	bfb8      	it	lt
 8012c30:	4618      	movlt	r0, r3
 8012c32:	e7a4      	b.n	8012b7e <_printf_i+0x16a>
 8012c34:	2301      	movs	r3, #1
 8012c36:	4632      	mov	r2, r6
 8012c38:	4649      	mov	r1, r9
 8012c3a:	4640      	mov	r0, r8
 8012c3c:	47d0      	blx	sl
 8012c3e:	3001      	adds	r0, #1
 8012c40:	d09b      	beq.n	8012b7a <_printf_i+0x166>
 8012c42:	3501      	adds	r5, #1
 8012c44:	68e3      	ldr	r3, [r4, #12]
 8012c46:	9903      	ldr	r1, [sp, #12]
 8012c48:	1a5b      	subs	r3, r3, r1
 8012c4a:	42ab      	cmp	r3, r5
 8012c4c:	dcf2      	bgt.n	8012c34 <_printf_i+0x220>
 8012c4e:	e7eb      	b.n	8012c28 <_printf_i+0x214>
 8012c50:	2500      	movs	r5, #0
 8012c52:	f104 0619 	add.w	r6, r4, #25
 8012c56:	e7f5      	b.n	8012c44 <_printf_i+0x230>
 8012c58:	08013118 	.word	0x08013118
 8012c5c:	08013129 	.word	0x08013129

08012c60 <__retarget_lock_acquire_recursive>:
 8012c60:	4770      	bx	lr

08012c62 <__retarget_lock_release_recursive>:
 8012c62:	4770      	bx	lr

08012c64 <memchr>:
 8012c64:	4603      	mov	r3, r0
 8012c66:	b510      	push	{r4, lr}
 8012c68:	b2c9      	uxtb	r1, r1
 8012c6a:	4402      	add	r2, r0
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	d101      	bne.n	8012c76 <memchr+0x12>
 8012c72:	2000      	movs	r0, #0
 8012c74:	e003      	b.n	8012c7e <memchr+0x1a>
 8012c76:	7804      	ldrb	r4, [r0, #0]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	428c      	cmp	r4, r1
 8012c7c:	d1f6      	bne.n	8012c6c <memchr+0x8>
 8012c7e:	bd10      	pop	{r4, pc}

08012c80 <memmove>:
 8012c80:	4288      	cmp	r0, r1
 8012c82:	b510      	push	{r4, lr}
 8012c84:	eb01 0402 	add.w	r4, r1, r2
 8012c88:	d902      	bls.n	8012c90 <memmove+0x10>
 8012c8a:	4284      	cmp	r4, r0
 8012c8c:	4623      	mov	r3, r4
 8012c8e:	d807      	bhi.n	8012ca0 <memmove+0x20>
 8012c90:	1e43      	subs	r3, r0, #1
 8012c92:	42a1      	cmp	r1, r4
 8012c94:	d008      	beq.n	8012ca8 <memmove+0x28>
 8012c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c9e:	e7f8      	b.n	8012c92 <memmove+0x12>
 8012ca0:	4601      	mov	r1, r0
 8012ca2:	4402      	add	r2, r0
 8012ca4:	428a      	cmp	r2, r1
 8012ca6:	d100      	bne.n	8012caa <memmove+0x2a>
 8012ca8:	bd10      	pop	{r4, pc}
 8012caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012cb2:	e7f7      	b.n	8012ca4 <memmove+0x24>

08012cb4 <_realloc_r>:
 8012cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb8:	4680      	mov	r8, r0
 8012cba:	4614      	mov	r4, r2
 8012cbc:	460e      	mov	r6, r1
 8012cbe:	b921      	cbnz	r1, 8012cca <_realloc_r+0x16>
 8012cc0:	4611      	mov	r1, r2
 8012cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc6:	f7ff bb6d 	b.w	80123a4 <_malloc_r>
 8012cca:	b92a      	cbnz	r2, 8012cd8 <_realloc_r+0x24>
 8012ccc:	f7ff fb02 	bl	80122d4 <_free_r>
 8012cd0:	4625      	mov	r5, r4
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd8:	f000 f81b 	bl	8012d12 <_malloc_usable_size_r>
 8012cdc:	4284      	cmp	r4, r0
 8012cde:	4607      	mov	r7, r0
 8012ce0:	d802      	bhi.n	8012ce8 <_realloc_r+0x34>
 8012ce2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012ce6:	d812      	bhi.n	8012d0e <_realloc_r+0x5a>
 8012ce8:	4621      	mov	r1, r4
 8012cea:	4640      	mov	r0, r8
 8012cec:	f7ff fb5a 	bl	80123a4 <_malloc_r>
 8012cf0:	4605      	mov	r5, r0
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	d0ed      	beq.n	8012cd2 <_realloc_r+0x1e>
 8012cf6:	42bc      	cmp	r4, r7
 8012cf8:	4622      	mov	r2, r4
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	bf28      	it	cs
 8012cfe:	463a      	movcs	r2, r7
 8012d00:	f7ff fad2 	bl	80122a8 <memcpy>
 8012d04:	4631      	mov	r1, r6
 8012d06:	4640      	mov	r0, r8
 8012d08:	f7ff fae4 	bl	80122d4 <_free_r>
 8012d0c:	e7e1      	b.n	8012cd2 <_realloc_r+0x1e>
 8012d0e:	4635      	mov	r5, r6
 8012d10:	e7df      	b.n	8012cd2 <_realloc_r+0x1e>

08012d12 <_malloc_usable_size_r>:
 8012d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d16:	1f18      	subs	r0, r3, #4
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	bfbc      	itt	lt
 8012d1c:	580b      	ldrlt	r3, [r1, r0]
 8012d1e:	18c0      	addlt	r0, r0, r3
 8012d20:	4770      	bx	lr
	...

08012d24 <_init>:
 8012d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d26:	bf00      	nop
 8012d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d2a:	bc08      	pop	{r3}
 8012d2c:	469e      	mov	lr, r3
 8012d2e:	4770      	bx	lr

08012d30 <_fini>:
 8012d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d32:	bf00      	nop
 8012d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d36:	bc08      	pop	{r3}
 8012d38:	469e      	mov	lr, r3
 8012d3a:	4770      	bx	lr
