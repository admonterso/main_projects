
lifOSMQTT_MOVE_LINKER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  0800c10c  0800c10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080119c8  080119c8  000119c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011db8  08011db8  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08011db8  08011db8  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011db8  08011db8  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011db8  08011db8  00011db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dbc  08011dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08011dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000134  08011ef4  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08011ef4  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dca4  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002679  00000000  00000000  0002de01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00030480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  000312f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a5d  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c07  00000000  00000000  0004aaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e10  00000000  00000000  0005b6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  000e3554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c10c <__do_global_dtors_aux>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4c05      	ldr	r4, [pc, #20]	; (800c124 <__do_global_dtors_aux+0x18>)
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	b933      	cbnz	r3, 800c122 <__do_global_dtors_aux+0x16>
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__do_global_dtors_aux+0x1c>)
 800c116:	b113      	cbz	r3, 800c11e <__do_global_dtors_aux+0x12>
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <__do_global_dtors_aux+0x20>)
 800c11a:	f3af 8000 	nop.w
 800c11e:	2301      	movs	r3, #1
 800c120:	7023      	strb	r3, [r4, #0]
 800c122:	bd10      	pop	{r4, pc}
 800c124:	20000134 	.word	0x20000134
 800c128:	00000000 	.word	0x00000000
 800c12c:	080119b0 	.word	0x080119b0

0800c130 <frame_dummy>:
 800c130:	b508      	push	{r3, lr}
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <frame_dummy+0x10>)
 800c134:	b11b      	cbz	r3, 800c13e <frame_dummy+0xe>
 800c136:	4903      	ldr	r1, [pc, #12]	; (800c144 <frame_dummy+0x14>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <frame_dummy+0x18>)
 800c13a:	f3af 8000 	nop.w
 800c13e:	bd08      	pop	{r3, pc}
 800c140:	00000000 	.word	0x00000000
 800c144:	20000138 	.word	0x20000138
 800c148:	080119b0 	.word	0x080119b0

0800c14c <strlen>:
 800c14c:	4603      	mov	r3, r0
 800c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c152:	2a00      	cmp	r2, #0
 800c154:	d1fb      	bne.n	800c14e <strlen+0x2>
 800c156:	1a18      	subs	r0, r3, r0
 800c158:	3801      	subs	r0, #1
 800c15a:	4770      	bx	lr

0800c15c <printUcxoBaratia>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintStr("!");
	HD44780_SetCursor(6, 1);
	HD44780_PrintStr("-_-");
}
void printUcxoBaratia(uint8_t row, uint8_t column){
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	460a      	mov	r2, r1
 800c166:	71fb      	strb	r3, [r7, #7]
 800c168:	4613      	mov	r3, r2
 800c16a:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c16c:	f000 fc50 	bl	800ca10 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 800c170:	494e      	ldr	r1, [pc, #312]	; (800c2ac <printUcxoBaratia+0x150>)
 800c172:	2001      	movs	r0, #1
 800c174:	f000 fcaa 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	79bb      	ldrb	r3, [r7, #6]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fc5c 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c184:	2001      	movs	r0, #1
 800c186:	f000 fcca 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 800c18a:	4949      	ldr	r1, [pc, #292]	; (800c2b0 <printUcxoBaratia+0x154>)
 800c18c:	2002      	movs	r0, #2
 800c18e:	f000 fc9d 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c192:	79bb      	ldrb	r3, [r7, #6]
 800c194:	3301      	adds	r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fc4d 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c1a2:	2002      	movs	r0, #2
 800c1a4:	f000 fcbb 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 800c1a8:	4942      	ldr	r1, [pc, #264]	; (800c2b4 <printUcxoBaratia+0x158>)
 800c1aa:	2003      	movs	r0, #3
 800c1ac:	f000 fc8e 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c1b0:	79bb      	ldrb	r3, [r7, #6]
 800c1b2:	3302      	adds	r3, #2
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	79fa      	ldrb	r2, [r7, #7]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fc3e 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	f000 fcac 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 800c1c6:	493c      	ldr	r1, [pc, #240]	; (800c2b8 <printUcxoBaratia+0x15c>)
 800c1c8:	2004      	movs	r0, #4
 800c1ca:	f000 fc7f 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c1ce:	79bb      	ldrb	r3, [r7, #6]
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fc2f 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c1de:	2004      	movs	r0, #4
 800c1e0:	f000 fc9d 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800c1e4:	4935      	ldr	r1, [pc, #212]	; (800c2bc <printUcxoBaratia+0x160>)
 800c1e6:	2005      	movs	r0, #5
 800c1e8:	f000 fc70 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c1ec:	79bb      	ldrb	r3, [r7, #6]
 800c1ee:	3305      	adds	r3, #5
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	79fa      	ldrb	r2, [r7, #7]
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fc20 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c1fc:	2005      	movs	r0, #5
 800c1fe:	f000 fc8e 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800c202:	79bb      	ldrb	r3, [r7, #6]
 800c204:	3306      	adds	r3, #6
 800c206:	b2db      	uxtb	r3, r3
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fc15 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c212:	2004      	movs	r0, #4
 800c214:	f000 fc83 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 800c218:	4929      	ldr	r1, [pc, #164]	; (800c2c0 <printUcxoBaratia+0x164>)
 800c21a:	2006      	movs	r0, #6
 800c21c:	f000 fc56 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c220:	79bb      	ldrb	r3, [r7, #6]
 800c222:	3307      	adds	r3, #7
 800c224:	b2db      	uxtb	r3, r3
 800c226:	79fa      	ldrb	r2, [r7, #7]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fc06 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c230:	2006      	movs	r0, #6
 800c232:	f000 fc74 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800c236:	79bb      	ldrb	r3, [r7, #6]
 800c238:	3308      	adds	r3, #8
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	79fa      	ldrb	r2, [r7, #7]
 800c23e:	4611      	mov	r1, r2
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fbfb 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c246:	2004      	movs	r0, #4
 800c248:	f000 fc69 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 800c24c:	491d      	ldr	r1, [pc, #116]	; (800c2c4 <printUcxoBaratia+0x168>)
 800c24e:	2007      	movs	r0, #7
 800c250:	f000 fc3c 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c254:	79bb      	ldrb	r3, [r7, #6]
 800c256:	3309      	adds	r3, #9
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	79fa      	ldrb	r2, [r7, #7]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fbec 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c264:	2007      	movs	r0, #7
 800c266:	f000 fc5a 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 800c26a:	4917      	ldr	r1, [pc, #92]	; (800c2c8 <printUcxoBaratia+0x16c>)
 800c26c:	2008      	movs	r0, #8
 800c26e:	f000 fc2d 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c272:	79bb      	ldrb	r3, [r7, #6]
 800c274:	330a      	adds	r3, #10
 800c276:	b2db      	uxtb	r3, r3
 800c278:	79fa      	ldrb	r2, [r7, #7]
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 fbdd 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c282:	2008      	movs	r0, #8
 800c284:	f000 fc4b 	bl	800cb1e <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 800c288:	79bb      	ldrb	r3, [r7, #6]
 800c28a:	330b      	adds	r3, #11
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	79fa      	ldrb	r2, [r7, #7]
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fbd2 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c298:	2004      	movs	r0, #4
 800c29a:	f000 fc40 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c29e:	480b      	ldr	r0, [pc, #44]	; (800c2cc <printUcxoBaratia+0x170>)
 800c2a0:	f000 fc4a 	bl	800cb38 <HD44780_PrintStr>

}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20000008 	.word	0x20000008
 800c2b0:	20000010 	.word	0x20000010
 800c2b4:	20000068 	.word	0x20000068
 800c2b8:	20000020 	.word	0x20000020
 800c2bc:	20000030 	.word	0x20000030
 800c2c0:	20000070 	.word	0x20000070
 800c2c4:	20000058 	.word	0x20000058
 800c2c8:	20000038 	.word	0x20000038
 800c2cc:	080119c8 	.word	0x080119c8

0800c2d0 <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	460a      	mov	r2, r1
 800c2da:	71fb      	strb	r3, [r7, #7]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 800c2e0:	f000 fb96 	bl	800ca10 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800c2e4:	4948      	ldr	r1, [pc, #288]	; (800c408 <printBlansiAraa+0x138>)
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	f000 fbf0 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c2ec:	79fa      	ldrb	r2, [r7, #7]
 800c2ee:	79bb      	ldrb	r3, [r7, #6]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fba2 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	f000 fc10 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 800c2fe:	4943      	ldr	r1, [pc, #268]	; (800c40c <printBlansiAraa+0x13c>)
 800c300:	2002      	movs	r0, #2
 800c302:	f000 fbe3 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c306:	79bb      	ldrb	r3, [r7, #6]
 800c308:	3301      	adds	r3, #1
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	79fa      	ldrb	r2, [r7, #7]
 800c30e:	4611      	mov	r1, r2
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fb93 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c316:	2002      	movs	r0, #2
 800c318:	f000 fc01 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 800c31c:	493c      	ldr	r1, [pc, #240]	; (800c410 <printBlansiAraa+0x140>)
 800c31e:	2003      	movs	r0, #3
 800c320:	f000 fbd4 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c324:	79bb      	ldrb	r3, [r7, #6]
 800c326:	3302      	adds	r3, #2
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	79fa      	ldrb	r2, [r7, #7]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fb84 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c334:	2003      	movs	r0, #3
 800c336:	f000 fbf2 	bl	800cb1e <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 800c33a:	79bb      	ldrb	r3, [r7, #6]
 800c33c:	3303      	adds	r3, #3
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	79fa      	ldrb	r2, [r7, #7]
 800c342:	4611      	mov	r1, r2
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fb79 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c34a:	2002      	movs	r0, #2
 800c34c:	f000 fbe7 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 800c350:	4930      	ldr	r1, [pc, #192]	; (800c414 <printBlansiAraa+0x144>)
 800c352:	2004      	movs	r0, #4
 800c354:	f000 fbba 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c358:	79bb      	ldrb	r3, [r7, #6]
 800c35a:	3304      	adds	r3, #4
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	79fa      	ldrb	r2, [r7, #7]
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fb6a 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c368:	2004      	movs	r0, #4
 800c36a:	f000 fbd8 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 800c36e:	492a      	ldr	r1, [pc, #168]	; (800c418 <printBlansiAraa+0x148>)
 800c370:	2005      	movs	r0, #5
 800c372:	f000 fbab 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c376:	79bb      	ldrb	r3, [r7, #6]
 800c378:	3305      	adds	r3, #5
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	79fa      	ldrb	r2, [r7, #7]
 800c37e:	4611      	mov	r1, r2
 800c380:	4618      	mov	r0, r3
 800c382:	f000 fb5b 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c386:	2005      	movs	r0, #5
 800c388:	f000 fbc9 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 800c38c:	4923      	ldr	r1, [pc, #140]	; (800c41c <printBlansiAraa+0x14c>)
 800c38e:	2006      	movs	r0, #6
 800c390:	f000 fb9c 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c394:	79bb      	ldrb	r3, [r7, #6]
 800c396:	3306      	adds	r3, #6
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	79fa      	ldrb	r2, [r7, #7]
 800c39c:	4611      	mov	r1, r2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fb4c 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c3a4:	2006      	movs	r0, #6
 800c3a6:	f000 fbba 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 800c3aa:	79bb      	ldrb	r3, [r7, #6]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	79fa      	ldrb	r2, [r7, #7]
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fb41 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c3ba:	2002      	movs	r0, #2
 800c3bc:	f000 fbaf 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 800c3c0:	4917      	ldr	r1, [pc, #92]	; (800c420 <printBlansiAraa+0x150>)
 800c3c2:	2007      	movs	r0, #7
 800c3c4:	f000 fb82 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 800c3c8:	79bb      	ldrb	r3, [r7, #6]
 800c3ca:	3309      	adds	r3, #9
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	79fa      	ldrb	r2, [r7, #7]
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 fb32 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c3d8:	2007      	movs	r0, #7
 800c3da:	f000 fba0 	bl	800cb1e <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 800c3de:	79bb      	ldrb	r3, [r7, #6]
 800c3e0:	330a      	adds	r3, #10
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	79fa      	ldrb	r2, [r7, #7]
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fb27 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c3ee:	2002      	movs	r0, #2
 800c3f0:	f000 fb95 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c3f4:	2002      	movs	r0, #2
 800c3f6:	f000 fb92 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c3fa:	480a      	ldr	r0, [pc, #40]	; (800c424 <printBlansiAraa+0x154>)
 800c3fc:	f000 fb9c 	bl	800cb38 <HD44780_PrintStr>
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20000030 	.word	0x20000030
 800c40c:	20000020 	.word	0x20000020
 800c410:	20000040 	.word	0x20000040
 800c414:	20000000 	.word	0x20000000
 800c418:	20000008 	.word	0x20000008
 800c41c:	20000038 	.word	0x20000038
 800c420:	20000070 	.word	0x20000070
 800c424:	080119c8 	.word	0x080119c8

0800c428 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	460a      	mov	r2, r1
 800c432:	71fb      	strb	r3, [r7, #7]
 800c434:	4613      	mov	r3, r2
 800c436:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c438:	f000 faea 	bl	800ca10 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 800c43c:	4959      	ldr	r1, [pc, #356]	; (800c5a4 <printMiadetBarati+0x17c>)
 800c43e:	2001      	movs	r0, #1
 800c440:	f000 fb44 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c444:	79fa      	ldrb	r2, [r7, #7]
 800c446:	79bb      	ldrb	r3, [r7, #6]
 800c448:	4611      	mov	r1, r2
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 faf6 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c450:	2001      	movs	r0, #1
 800c452:	f000 fb64 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800c456:	4954      	ldr	r1, [pc, #336]	; (800c5a8 <printMiadetBarati+0x180>)
 800c458:	2002      	movs	r0, #2
 800c45a:	f000 fb37 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c45e:	79bb      	ldrb	r3, [r7, #6]
 800c460:	3301      	adds	r3, #1
 800c462:	b2db      	uxtb	r3, r3
 800c464:	79fa      	ldrb	r2, [r7, #7]
 800c466:	4611      	mov	r1, r2
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fae7 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c46e:	2002      	movs	r0, #2
 800c470:	f000 fb55 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800c474:	494d      	ldr	r1, [pc, #308]	; (800c5ac <printMiadetBarati+0x184>)
 800c476:	2003      	movs	r0, #3
 800c478:	f000 fb28 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c47c:	79bb      	ldrb	r3, [r7, #6]
 800c47e:	3302      	adds	r3, #2
 800c480:	b2db      	uxtb	r3, r3
 800c482:	79fa      	ldrb	r2, [r7, #7]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fad8 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c48c:	2003      	movs	r0, #3
 800c48e:	f000 fb46 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 800c492:	4947      	ldr	r1, [pc, #284]	; (800c5b0 <printMiadetBarati+0x188>)
 800c494:	2004      	movs	r0, #4
 800c496:	f000 fb19 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c49a:	79bb      	ldrb	r3, [r7, #6]
 800c49c:	3303      	adds	r3, #3
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	79fa      	ldrb	r2, [r7, #7]
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 fac9 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c4aa:	2004      	movs	r0, #4
 800c4ac:	f000 fb37 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 800c4b0:	4940      	ldr	r1, [pc, #256]	; (800c5b4 <printMiadetBarati+0x18c>)
 800c4b2:	2005      	movs	r0, #5
 800c4b4:	f000 fb0a 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 800c4b8:	79bb      	ldrb	r3, [r7, #6]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	79fa      	ldrb	r2, [r7, #7]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 faba 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c4c8:	2005      	movs	r0, #5
 800c4ca:	f000 fb28 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 800c4ce:	493a      	ldr	r1, [pc, #232]	; (800c5b8 <printMiadetBarati+0x190>)
 800c4d0:	2006      	movs	r0, #6
 800c4d2:	f000 fafb 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c4d6:	79bb      	ldrb	r3, [r7, #6]
 800c4d8:	3305      	adds	r3, #5
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 faab 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c4e6:	2006      	movs	r0, #6
 800c4e8:	f000 fb19 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 800c4ec:	4933      	ldr	r1, [pc, #204]	; (800c5bc <printMiadetBarati+0x194>)
 800c4ee:	2007      	movs	r0, #7
 800c4f0:	f000 faec 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c4f4:	79bb      	ldrb	r3, [r7, #6]
 800c4f6:	3307      	adds	r3, #7
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	79fa      	ldrb	r2, [r7, #7]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fa9c 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c504:	2007      	movs	r0, #7
 800c506:	f000 fb0a 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 800c50a:	79bb      	ldrb	r3, [r7, #6]
 800c50c:	3308      	adds	r3, #8
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	79fa      	ldrb	r2, [r7, #7]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fa91 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c51a:	2003      	movs	r0, #3
 800c51c:	f000 faff 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 800c520:	4927      	ldr	r1, [pc, #156]	; (800c5c0 <printMiadetBarati+0x198>)
 800c522:	2008      	movs	r0, #8
 800c524:	f000 fad2 	bl	800cacc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c528:	79bb      	ldrb	r3, [r7, #6]
 800c52a:	3309      	adds	r3, #9
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	79fa      	ldrb	r2, [r7, #7]
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f000 fa82 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c538:	2008      	movs	r0, #8
 800c53a:	f000 faf0 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c53e:	79bb      	ldrb	r3, [r7, #6]
 800c540:	330a      	adds	r3, #10
 800c542:	b2db      	uxtb	r3, r3
 800c544:	79fa      	ldrb	r2, [r7, #7]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 fa77 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c54e:	2003      	movs	r0, #3
 800c550:	f000 fae5 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800c554:	79bb      	ldrb	r3, [r7, #6]
 800c556:	330b      	adds	r3, #11
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	79fa      	ldrb	r2, [r7, #7]
 800c55c:	4611      	mov	r1, r2
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fa6c 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c564:	2006      	movs	r0, #6
 800c566:	f000 fada 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 800c56a:	79bb      	ldrb	r3, [r7, #6]
 800c56c:	330c      	adds	r3, #12
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	79fa      	ldrb	r2, [r7, #7]
 800c572:	4611      	mov	r1, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f000 fa61 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c57a:	2002      	movs	r0, #2
 800c57c:	f000 facf 	bl	800cb1e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 800c580:	79bb      	ldrb	r3, [r7, #6]
 800c582:	3302      	adds	r3, #2
 800c584:	b2da      	uxtb	r2, r3
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	3301      	adds	r3, #1
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f000 fa54 	bl	800ca3c <HD44780_SetCursor>
		HD44780_PrintStr("0.18 GEL");
 800c594:	480b      	ldr	r0, [pc, #44]	; (800c5c4 <printMiadetBarati+0x19c>)
 800c596:	f000 facf 	bl	800cb38 <HD44780_PrintStr>


}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000060 	.word	0x20000060
 800c5a8:	20000038 	.word	0x20000038
 800c5ac:	20000020 	.word	0x20000020
 800c5b0:	20000018 	.word	0x20000018
 800c5b4:	20000078 	.word	0x20000078
 800c5b8:	20000058 	.word	0x20000058
 800c5bc:	20000030 	.word	0x20000030
 800c5c0:	20000070 	.word	0x20000070
 800c5c4:	080119d0 	.word	0x080119d0

0800c5c8 <printShecdoma>:
void printShecdoma(uint8_t row, uint8_t column){
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	71fb      	strb	r3, [r7, #7]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c5d8:	f000 fa1a 	bl	800ca10 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, SGeo);
 800c5dc:	493a      	ldr	r1, [pc, #232]	; (800c6c8 <printShecdoma+0x100>)
 800c5de:	2001      	movs	r0, #1
 800c5e0:	f000 fa74 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c5e4:	79fa      	ldrb	r2, [r7, #7]
 800c5e6:	79bb      	ldrb	r3, [r7, #6]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fa26 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	f000 fa94 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, eGeo);
 800c5f6:	4935      	ldr	r1, [pc, #212]	; (800c6cc <printShecdoma+0x104>)
 800c5f8:	2002      	movs	r0, #2
 800c5fa:	f000 fa67 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c5fe:	79bb      	ldrb	r3, [r7, #6]
 800c600:	3301      	adds	r3, #1
 800c602:	b2db      	uxtb	r3, r3
 800c604:	79fa      	ldrb	r2, [r7, #7]
 800c606:	4611      	mov	r1, r2
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 fa17 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c60e:	2002      	movs	r0, #2
 800c610:	f000 fa85 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, cGeo);
 800c614:	492e      	ldr	r1, [pc, #184]	; (800c6d0 <printShecdoma+0x108>)
 800c616:	2003      	movs	r0, #3
 800c618:	f000 fa58 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c61c:	79bb      	ldrb	r3, [r7, #6]
 800c61e:	3302      	adds	r3, #2
 800c620:	b2db      	uxtb	r3, r3
 800c622:	79fa      	ldrb	r2, [r7, #7]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fa08 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c62c:	2003      	movs	r0, #3
 800c62e:	f000 fa76 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, dGeo);
 800c632:	4928      	ldr	r1, [pc, #160]	; (800c6d4 <printShecdoma+0x10c>)
 800c634:	2004      	movs	r0, #4
 800c636:	f000 fa49 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c63a:	79bb      	ldrb	r3, [r7, #6]
 800c63c:	3303      	adds	r3, #3
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	79fa      	ldrb	r2, [r7, #7]
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f000 f9f9 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c64a:	2004      	movs	r0, #4
 800c64c:	f000 fa67 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, oGeo);
 800c650:	4921      	ldr	r1, [pc, #132]	; (800c6d8 <printShecdoma+0x110>)
 800c652:	2005      	movs	r0, #5
 800c654:	f000 fa3a 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c658:	79bb      	ldrb	r3, [r7, #6]
 800c65a:	3304      	adds	r3, #4
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	79fa      	ldrb	r2, [r7, #7]
 800c660:	4611      	mov	r1, r2
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f9ea 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c668:	2005      	movs	r0, #5
 800c66a:	f000 fa58 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, mGeo);
 800c66e:	491b      	ldr	r1, [pc, #108]	; (800c6dc <printShecdoma+0x114>)
 800c670:	2006      	movs	r0, #6
 800c672:	f000 fa2b 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c676:	79bb      	ldrb	r3, [r7, #6]
 800c678:	3305      	adds	r3, #5
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	79fa      	ldrb	r2, [r7, #7]
 800c67e:	4611      	mov	r1, r2
 800c680:	4618      	mov	r0, r3
 800c682:	f000 f9db 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c686:	2006      	movs	r0, #6
 800c688:	f000 fa49 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(7, aGeo);
 800c68c:	4914      	ldr	r1, [pc, #80]	; (800c6e0 <printShecdoma+0x118>)
 800c68e:	2007      	movs	r0, #7
 800c690:	f000 fa1c 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c694:	79bb      	ldrb	r3, [r7, #6]
 800c696:	3306      	adds	r3, #6
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	79fa      	ldrb	r2, [r7, #7]
 800c69c:	4611      	mov	r1, r2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 f9cc 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c6a4:	2007      	movs	r0, #7
 800c6a6:	f000 fa3a 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c6aa:	79bb      	ldrb	r3, [r7, #6]
 800c6ac:	3307      	adds	r3, #7
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	79fa      	ldrb	r2, [r7, #7]
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 f9c1 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintStr("!");
 800c6ba:	480a      	ldr	r0, [pc, #40]	; (800c6e4 <printShecdoma+0x11c>)
 800c6bc:	f000 fa3c 	bl	800cb38 <HD44780_PrintStr>
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20000028 	.word	0x20000028
 800c6cc:	20000078 	.word	0x20000078
 800c6d0:	20000048 	.word	0x20000048
 800c6d4:	20000018 	.word	0x20000018
 800c6d8:	20000050 	.word	0x20000050
 800c6dc:	20000060 	.word	0x20000060
 800c6e0:	20000020 	.word	0x20000020
 800c6e4:	080119c8 	.word	0x080119c8

0800c6e8 <printDaicadet>:

void printDaicadet(uint8_t row, uint8_t column){
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	460a      	mov	r2, r1
 800c6f2:	71fb      	strb	r3, [r7, #7]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c6f8:	f000 f98a 	bl	800ca10 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 800c6fc:	493a      	ldr	r1, [pc, #232]	; (800c7e8 <printDaicadet+0x100>)
 800c6fe:	2001      	movs	r0, #1
 800c700:	f000 f9e4 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c704:	79fa      	ldrb	r2, [r7, #7]
 800c706:	79bb      	ldrb	r3, [r7, #6]
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 f996 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c710:	2001      	movs	r0, #1
 800c712:	f000 fa04 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800c716:	4935      	ldr	r1, [pc, #212]	; (800c7ec <printDaicadet+0x104>)
 800c718:	2002      	movs	r0, #2
 800c71a:	f000 f9d7 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c71e:	79bb      	ldrb	r3, [r7, #6]
 800c720:	3301      	adds	r3, #1
 800c722:	b2db      	uxtb	r3, r3
 800c724:	79fa      	ldrb	r2, [r7, #7]
 800c726:	4611      	mov	r1, r2
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 f987 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c72e:	2002      	movs	r0, #2
 800c730:	f000 f9f5 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800c734:	492e      	ldr	r1, [pc, #184]	; (800c7f0 <printDaicadet+0x108>)
 800c736:	2003      	movs	r0, #3
 800c738:	f000 f9c8 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c73c:	79bb      	ldrb	r3, [r7, #6]
 800c73e:	3302      	adds	r3, #2
 800c740:	b2db      	uxtb	r3, r3
 800c742:	79fa      	ldrb	r2, [r7, #7]
 800c744:	4611      	mov	r1, r2
 800c746:	4618      	mov	r0, r3
 800c748:	f000 f978 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c74c:	2003      	movs	r0, #3
 800c74e:	f000 f9e6 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800c752:	4928      	ldr	r1, [pc, #160]	; (800c7f4 <printDaicadet+0x10c>)
 800c754:	2004      	movs	r0, #4
 800c756:	f000 f9b9 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c75a:	79bb      	ldrb	r3, [r7, #6]
 800c75c:	3303      	adds	r3, #3
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	79fa      	ldrb	r2, [r7, #7]
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f000 f969 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c76a:	2004      	movs	r0, #4
 800c76c:	f000 f9d7 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c770:	79bb      	ldrb	r3, [r7, #6]
 800c772:	3304      	adds	r3, #4
 800c774:	b2db      	uxtb	r3, r3
 800c776:	79fa      	ldrb	r2, [r7, #7]
 800c778:	4611      	mov	r1, r2
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 f95e 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c780:	2002      	movs	r0, #2
 800c782:	f000 f9cc 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c786:	79bb      	ldrb	r3, [r7, #6]
 800c788:	3305      	adds	r3, #5
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	79fa      	ldrb	r2, [r7, #7]
 800c78e:	4611      	mov	r1, r2
 800c790:	4618      	mov	r0, r3
 800c792:	f000 f953 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c796:	2001      	movs	r0, #1
 800c798:	f000 f9c1 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 800c79c:	4916      	ldr	r1, [pc, #88]	; (800c7f8 <printDaicadet+0x110>)
 800c79e:	2005      	movs	r0, #5
 800c7a0:	f000 f994 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c7a4:	79bb      	ldrb	r3, [r7, #6]
 800c7a6:	3306      	adds	r3, #6
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	79fa      	ldrb	r2, [r7, #7]
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 f944 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c7b4:	2005      	movs	r0, #5
 800c7b6:	f000 f9b2 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 800c7ba:	4910      	ldr	r1, [pc, #64]	; (800c7fc <printDaicadet+0x114>)
 800c7bc:	2006      	movs	r0, #6
 800c7be:	f000 f985 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800c7c2:	79bb      	ldrb	r3, [r7, #6]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	79fa      	ldrb	r2, [r7, #7]
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 f935 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c7d2:	2006      	movs	r0, #6
 800c7d4:	f000 f9a3 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c7d8:	4809      	ldr	r0, [pc, #36]	; (800c800 <printDaicadet+0x118>)
 800c7da:	f000 f9ad 	bl	800cb38 <HD44780_PrintStr>
}
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000018 	.word	0x20000018
 800c7ec:	20000020 	.word	0x20000020
 800c7f0:	20000038 	.word	0x20000038
 800c7f4:	20000048 	.word	0x20000048
 800c7f8:	20000078 	.word	0x20000078
 800c7fc:	20000058 	.word	0x20000058
 800c800:	080119c8 	.word	0x080119c8

0800c804 <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	460a      	mov	r2, r1
 800c80e:	71fb      	strb	r3, [r7, #7]
 800c810:	4613      	mov	r3, r2
 800c812:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800c814:	f000 f8fc 	bl	800ca10 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 800c818:	4934      	ldr	r1, [pc, #208]	; (800c8ec <printBalansi+0xe8>)
 800c81a:	2001      	movs	r0, #1
 800c81c:	f000 f956 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c820:	79fa      	ldrb	r2, [r7, #7]
 800c822:	79bb      	ldrb	r3, [r7, #6]
 800c824:	4611      	mov	r1, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f000 f908 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c82c:	2001      	movs	r0, #1
 800c82e:	f000 f976 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800c832:	492f      	ldr	r1, [pc, #188]	; (800c8f0 <printBalansi+0xec>)
 800c834:	2002      	movs	r0, #2
 800c836:	f000 f949 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c83a:	79bb      	ldrb	r3, [r7, #6]
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	79fa      	ldrb	r2, [r7, #7]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f000 f8f9 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c84a:	2002      	movs	r0, #2
 800c84c:	f000 f967 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 800c850:	4928      	ldr	r1, [pc, #160]	; (800c8f4 <printBalansi+0xf0>)
 800c852:	2003      	movs	r0, #3
 800c854:	f000 f93a 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c858:	79bb      	ldrb	r3, [r7, #6]
 800c85a:	3302      	adds	r3, #2
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	79fa      	ldrb	r2, [r7, #7]
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f8ea 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c868:	2003      	movs	r0, #3
 800c86a:	f000 f958 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c86e:	2002      	movs	r0, #2
 800c870:	f000 f955 	bl	800cb1e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800c874:	79bb      	ldrb	r3, [r7, #6]
 800c876:	3303      	adds	r3, #3
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	79fa      	ldrb	r2, [r7, #7]
 800c87c:	4611      	mov	r1, r2
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 f8dc 	bl	800ca3c <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 800c884:	491c      	ldr	r1, [pc, #112]	; (800c8f8 <printBalansi+0xf4>)
 800c886:	2005      	movs	r0, #5
 800c888:	f000 f920 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c88c:	79bb      	ldrb	r3, [r7, #6]
 800c88e:	3304      	adds	r3, #4
 800c890:	b2db      	uxtb	r3, r3
 800c892:	79fa      	ldrb	r2, [r7, #7]
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f8d0 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c89c:	2005      	movs	r0, #5
 800c89e:	f000 f93e 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 800c8a2:	4916      	ldr	r1, [pc, #88]	; (800c8fc <printBalansi+0xf8>)
 800c8a4:	2006      	movs	r0, #6
 800c8a6:	f000 f911 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c8aa:	79bb      	ldrb	r3, [r7, #6]
 800c8ac:	3305      	adds	r3, #5
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	79fa      	ldrb	r2, [r7, #7]
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f8c1 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c8ba:	2006      	movs	r0, #6
 800c8bc:	f000 f92f 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 800c8c0:	490f      	ldr	r1, [pc, #60]	; (800c900 <printBalansi+0xfc>)
 800c8c2:	2007      	movs	r0, #7
 800c8c4:	f000 f902 	bl	800cacc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c8c8:	79bb      	ldrb	r3, [r7, #6]
 800c8ca:	3306      	adds	r3, #6
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	79fa      	ldrb	r2, [r7, #7]
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 f8b2 	bl	800ca3c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c8d8:	2007      	movs	r0, #7
 800c8da:	f000 f920 	bl	800cb1e <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 800c8de:	4809      	ldr	r0, [pc, #36]	; (800c904 <printBalansi+0x100>)
 800c8e0:	f000 f92a 	bl	800cb38 <HD44780_PrintStr>
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	20000030 	.word	0x20000030
 800c8f0:	20000020 	.word	0x20000020
 800c8f4:	20000040 	.word	0x20000040
 800c8f8:	20000000 	.word	0x20000000
 800c8fc:	20000008 	.word	0x20000008
 800c900:	20000038 	.word	0x20000038
 800c904:	080119dc 	.word	0x080119dc

0800c908 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800c912:	4a38      	ldr	r2, [pc, #224]	; (800c9f4 <HD44780_Init+0xec>)
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800c918:	4b37      	ldr	r3, [pc, #220]	; (800c9f8 <HD44780_Init+0xf0>)
 800c91a:	2208      	movs	r2, #8
 800c91c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800c91e:	4b37      	ldr	r3, [pc, #220]	; (800c9fc <HD44780_Init+0xf4>)
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800c924:	4b33      	ldr	r3, [pc, #204]	; (800c9f4 <HD44780_Init+0xec>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d907      	bls.n	800c93c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800c92c:	4b33      	ldr	r3, [pc, #204]	; (800c9fc <HD44780_Init+0xf4>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f043 0308 	orr.w	r3, r3, #8
 800c934:	b2da      	uxtb	r2, r3
 800c936:	4b31      	ldr	r3, [pc, #196]	; (800c9fc <HD44780_Init+0xf4>)
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	e006      	b.n	800c94a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800c93c:	4b2f      	ldr	r3, [pc, #188]	; (800c9fc <HD44780_Init+0xf4>)
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	f043 0304 	orr.w	r3, r3, #4
 800c944:	b2da      	uxtb	r2, r3
 800c946:	4b2d      	ldr	r3, [pc, #180]	; (800c9fc <HD44780_Init+0xf4>)
 800c948:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800c94a:	f000 f993 	bl	800cc74 <DelayInit>
  HAL_Delay(50);
 800c94e:	2032      	movs	r0, #50	; 0x32
 800c950:	f001 fe4a 	bl	800e5e8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800c954:	4b28      	ldr	r3, [pc, #160]	; (800c9f8 <HD44780_Init+0xf0>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	4618      	mov	r0, r3
 800c95a:	f000 f951 	bl	800cc00 <ExpanderWrite>
  HAL_Delay(1000);
 800c95e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c962:	f001 fe41 	bl	800e5e8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800c966:	2030      	movs	r0, #48	; 0x30
 800c968:	f000 f938 	bl	800cbdc <Write4Bits>
  DelayUS(4500);
 800c96c:	f241 1094 	movw	r0, #4500	; 0x1194
 800c970:	f000 f9a8 	bl	800ccc4 <DelayUS>

  Write4Bits(0x03 << 4);
 800c974:	2030      	movs	r0, #48	; 0x30
 800c976:	f000 f931 	bl	800cbdc <Write4Bits>
  DelayUS(4500);
 800c97a:	f241 1094 	movw	r0, #4500	; 0x1194
 800c97e:	f000 f9a1 	bl	800ccc4 <DelayUS>

  Write4Bits(0x03 << 4);
 800c982:	2030      	movs	r0, #48	; 0x30
 800c984:	f000 f92a 	bl	800cbdc <Write4Bits>
  DelayUS(4500);
 800c988:	f241 1094 	movw	r0, #4500	; 0x1194
 800c98c:	f000 f99a 	bl	800ccc4 <DelayUS>

  Write4Bits(0x02 << 4);
 800c990:	2020      	movs	r0, #32
 800c992:	f000 f923 	bl	800cbdc <Write4Bits>
  DelayUS(100);
 800c996:	2064      	movs	r0, #100	; 0x64
 800c998:	f000 f994 	bl	800ccc4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800c99c:	4b17      	ldr	r3, [pc, #92]	; (800c9fc <HD44780_Init+0xf4>)
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	f043 0320 	orr.w	r3, r3, #32
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f8db 	bl	800cb62 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800c9ac:	4b14      	ldr	r3, [pc, #80]	; (800ca00 <HD44780_Init+0xf8>)
 800c9ae:	2204      	movs	r2, #4
 800c9b0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800c9b2:	f000 f875 	bl	800caa0 <HD44780_Display>
  HD44780_Clear();
 800c9b6:	f000 f82b 	bl	800ca10 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800c9ba:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <HD44780_Init+0xfc>)
 800c9bc:	2202      	movs	r2, #2
 800c9be:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800c9c0:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <HD44780_Init+0xfc>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	f043 0304 	orr.w	r3, r3, #4
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f8c9 	bl	800cb62 <SendCommand>
  DelayUS(4500);
 800c9d0:	f241 1094 	movw	r0, #4500	; 0x1194
 800c9d4:	f000 f976 	bl	800ccc4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800c9d8:	490b      	ldr	r1, [pc, #44]	; (800ca08 <HD44780_Init+0x100>)
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f000 f876 	bl	800cacc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800c9e0:	490a      	ldr	r1, [pc, #40]	; (800ca0c <HD44780_Init+0x104>)
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	f000 f872 	bl	800cacc <HD44780_CreateSpecialChar>

  HD44780_Home();
 800c9e8:	f000 f81d 	bl	800ca26 <HD44780_Home>
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20000153 	.word	0x20000153
 800c9f8:	20000154 	.word	0x20000154
 800c9fc:	20000150 	.word	0x20000150
 800ca00:	20000151 	.word	0x20000151
 800ca04:	20000152 	.word	0x20000152
 800ca08:	20000080 	.word	0x20000080
 800ca0c:	20000088 	.word	0x20000088

0800ca10 <HD44780_Clear>:

void HD44780_Clear()
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800ca14:	2001      	movs	r0, #1
 800ca16:	f000 f8a4 	bl	800cb62 <SendCommand>
  DelayUS(2000);
 800ca1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca1e:	f000 f951 	bl	800ccc4 <DelayUS>
}
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <HD44780_Home>:

void HD44780_Home()
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800ca2a:	2002      	movs	r0, #2
 800ca2c:	f000 f899 	bl	800cb62 <SendCommand>
  DelayUS(2000);
 800ca30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca34:	f000 f946 	bl	800ccc4 <DelayUS>
}
 800ca38:	bf00      	nop
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800ca3c:	b590      	push	{r4, r7, lr}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	4603      	mov	r3, r0
 800ca44:	460a      	mov	r2, r1
 800ca46:	71fb      	strb	r3, [r7, #7]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800ca4c:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <HD44780_SetCursor+0x5c>)
 800ca4e:	f107 0408 	add.w	r4, r7, #8
 800ca52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800ca58:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <HD44780_SetCursor+0x60>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	79ba      	ldrb	r2, [r7, #6]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d303      	bcc.n	800ca6a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800ca62:	4b0e      	ldr	r3, [pc, #56]	; (800ca9c <HD44780_SetCursor+0x60>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	3b01      	subs	r3, #1
 800ca68:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800ca6a:	79bb      	ldrb	r3, [r7, #6]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	3318      	adds	r3, #24
 800ca70:	443b      	add	r3, r7
 800ca72:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	b25b      	sxtb	r3, r3
 800ca80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca84:	b25b      	sxtb	r3, r3
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 f86a 	bl	800cb62 <SendCommand>
}
 800ca8e:	bf00      	nop
 800ca90:	371c      	adds	r7, #28
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd90      	pop	{r4, r7, pc}
 800ca96:	bf00      	nop
 800ca98:	080119e0 	.word	0x080119e0
 800ca9c:	20000153 	.word	0x20000153

0800caa0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800caa4:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <HD44780_Display+0x28>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	f043 0304 	orr.w	r3, r3, #4
 800caac:	b2da      	uxtb	r2, r3
 800caae:	4b06      	ldr	r3, [pc, #24]	; (800cac8 <HD44780_Display+0x28>)
 800cab0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800cab2:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <HD44780_Display+0x28>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	f043 0308 	orr.w	r3, r3, #8
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 f850 	bl	800cb62 <SendCommand>
}
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000151 	.word	0x20000151

0800cacc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	6039      	str	r1, [r7, #0]
 800cad6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	f003 0307 	and.w	r3, r3, #7
 800cade:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	b25b      	sxtb	r3, r3
 800cae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caea:	b25b      	sxtb	r3, r3
 800caec:	b2db      	uxtb	r3, r3
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f837 	bl	800cb62 <SendCommand>
  for (int i=0; i<8; i++)
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	e009      	b.n	800cb0e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	4413      	add	r3, r2
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 f83b 	bl	800cb7e <SendChar>
  for (int i=0; i<8; i++)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b07      	cmp	r3, #7
 800cb12:	ddf2      	ble.n	800cafa <HD44780_CreateSpecialChar+0x2e>
  }
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	4603      	mov	r3, r0
 800cb26:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 f827 	bl	800cb7e <SendChar>
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800cb40:	e006      	b.n	800cb50 <HD44780_PrintStr+0x18>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 f817 	bl	800cb7e <SendChar>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1f4      	bne.n	800cb42 <HD44780_PrintStr+0xa>
}
 800cb58:	bf00      	nop
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	4603      	mov	r3, r0
 800cb6a:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	2100      	movs	r1, #0
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 f812 	bl	800cb9a <Send>
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <SendChar>:

static void SendChar(uint8_t ch)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	4603      	mov	r3, r0
 800cb86:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f804 	bl	800cb9a <Send>
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	4603      	mov	r3, r0
 800cba2:	460a      	mov	r2, r1
 800cba4:	71fb      	strb	r3, [r7, #7]
 800cba6:	4613      	mov	r3, r2
 800cba8:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	f023 030f 	bic.w	r3, r3, #15
 800cbb0:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	011b      	lsls	r3, r3, #4
 800cbb6:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800cbb8:	7bfa      	ldrb	r2, [r7, #15]
 800cbba:	79bb      	ldrb	r3, [r7, #6]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 f80b 	bl	800cbdc <Write4Bits>
  Write4Bits((lownib)|mode);
 800cbc6:	7bba      	ldrb	r2, [r7, #14]
 800cbc8:	79bb      	ldrb	r3, [r7, #6]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 f804 	bl	800cbdc <Write4Bits>
}
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f000 f809 	bl	800cc00 <ExpanderWrite>
  PulseEnable(value);
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 f821 	bl	800cc38 <PulseEnable>
}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	4603      	mov	r3, r0
 800cc08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800cc0a:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <ExpanderWrite+0x30>)
 800cc0c:	781a      	ldrb	r2, [r3, #0]
 800cc0e:	79fb      	ldrb	r3, [r7, #7]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800cc16:	f107 020f 	add.w	r2, r7, #15
 800cc1a:	230a      	movs	r3, #10
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	2301      	movs	r3, #1
 800cc20:	214e      	movs	r1, #78	; 0x4e
 800cc22:	4804      	ldr	r0, [pc, #16]	; (800cc34 <ExpanderWrite+0x34>)
 800cc24:	f002 f9bc 	bl	800efa0 <HAL_I2C_Master_Transmit>
}
 800cc28:	bf00      	nop
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20000154 	.word	0x20000154
 800cc34:	20000350 	.word	0x20000350

0800cc38 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	f043 0304 	orr.w	r3, r3, #4
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff ffd8 	bl	800cc00 <ExpanderWrite>
  DelayUS(20);
 800cc50:	2014      	movs	r0, #20
 800cc52:	f000 f837 	bl	800ccc4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	f023 0304 	bic.w	r3, r3, #4
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff ffce 	bl	800cc00 <ExpanderWrite>
  DelayUS(20);
 800cc64:	2014      	movs	r0, #20
 800cc66:	f000 f82d 	bl	800ccc4 <DelayUS>
}
 800cc6a:	bf00      	nop
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
	...

0800cc74 <DelayInit>:

static void DelayInit(void)
{
 800cc74:	b480      	push	{r7}
 800cc76:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800cc78:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <DelayInit+0x48>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	4a0f      	ldr	r2, [pc, #60]	; (800ccbc <DelayInit+0x48>)
 800cc7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc82:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800cc84:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <DelayInit+0x48>)
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	4a0c      	ldr	r2, [pc, #48]	; (800ccbc <DelayInit+0x48>)
 800cc8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc8e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <DelayInit+0x4c>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a0a      	ldr	r2, [pc, #40]	; (800ccc0 <DelayInit+0x4c>)
 800cc96:	f023 0301 	bic.w	r3, r3, #1
 800cc9a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800cc9c:	4b08      	ldr	r3, [pc, #32]	; (800ccc0 <DelayInit+0x4c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a07      	ldr	r2, [pc, #28]	; (800ccc0 <DelayInit+0x4c>)
 800cca2:	f043 0301 	orr.w	r3, r3, #1
 800cca6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800cca8:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <DelayInit+0x4c>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800ccae:	bf00      	nop
  __ASM volatile ("NOP");
 800ccb0:	bf00      	nop
  __ASM volatile ("NOP");
 800ccb2:	bf00      	nop
}
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bc80      	pop	{r7}
 800ccba:	4770      	bx	lr
 800ccbc:	e000edf0 	.word	0xe000edf0
 800ccc0:	e0001000 	.word	0xe0001000

0800ccc4 <DelayUS>:

static void DelayUS(uint32_t us) {
 800ccc4:	b480      	push	{r7}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800cccc:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <DelayUS+0x40>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a0d      	ldr	r2, [pc, #52]	; (800cd08 <DelayUS+0x44>)
 800ccd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd6:	0c9a      	lsrs	r2, r3, #18
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	fb02 f303 	mul.w	r3, r2, r3
 800ccde:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <DelayUS+0x48>)
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800cce6:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <DelayUS+0x48>)
 800cce8:	685a      	ldr	r2, [r3, #4]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d8f6      	bhi.n	800cce6 <DelayUS+0x22>
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bc80      	pop	{r7}
 800cd02:	4770      	bx	lr
 800cd04:	200000c4 	.word	0x200000c4
 800cd08:	431bde83 	.word	0x431bde83
 800cd0c:	e0001000 	.word	0xe0001000

0800cd10 <HAL_UART_RxCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]

	if(count >= 124){
 800cd18:	4b11      	ldr	r3, [pc, #68]	; (800cd60 <HAL_UART_RxCpltCallback+0x50>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b7b      	cmp	r3, #123	; 0x7b
 800cd1e:	dd02      	ble.n	800cd26 <HAL_UART_RxCpltCallback+0x16>
		count = 0;
 800cd20:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <HAL_UART_RxCpltCallback+0x50>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
	}

	if(buffer[count] != '!'){
 800cd26:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <HAL_UART_RxCpltCallback+0x50>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a0e      	ldr	r2, [pc, #56]	; (800cd64 <HAL_UART_RxCpltCallback+0x54>)
 800cd2c:	5cd3      	ldrb	r3, [r2, r3]
 800cd2e:	2b21      	cmp	r3, #33	; 0x21
 800cd30:	d00e      	beq.n	800cd50 <HAL_UART_RxCpltCallback+0x40>

		count++;
 800cd32:	4b0b      	ldr	r3, [pc, #44]	; (800cd60 <HAL_UART_RxCpltCallback+0x50>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3301      	adds	r3, #1
 800cd38:	4a09      	ldr	r2, [pc, #36]	; (800cd60 <HAL_UART_RxCpltCallback+0x50>)
 800cd3a:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800cd3c:	4b08      	ldr	r3, [pc, #32]	; (800cd60 <HAL_UART_RxCpltCallback+0x50>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a08      	ldr	r2, [pc, #32]	; (800cd64 <HAL_UART_RxCpltCallback+0x54>)
 800cd42:	4413      	add	r3, r2
 800cd44:	2201      	movs	r2, #1
 800cd46:	4619      	mov	r1, r3
 800cd48:	4807      	ldr	r0, [pc, #28]	; (800cd68 <HAL_UART_RxCpltCallback+0x58>)
 800cd4a:	f003 fc8e 	bl	801066a <HAL_UART_Receive_IT>
	}
	else{
		readSatus = 1;
	}

}
 800cd4e:	e002      	b.n	800cd56 <HAL_UART_RxCpltCallback+0x46>
		readSatus = 1;
 800cd50:	4b06      	ldr	r3, [pc, #24]	; (800cd6c <HAL_UART_RxCpltCallback+0x5c>)
 800cd52:	2201      	movs	r2, #1
 800cd54:	701a      	strb	r2, [r3, #0]
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	2000034c 	.word	0x2000034c
 800cd64:	20000268 	.word	0x20000268
 800cd68:	200003fc 	.word	0x200003fc
 800cd6c:	20000164 	.word	0x20000164

0800cd70 <takeStatus>:
void readCardData(uint8_t* finalData);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);



int takeStatus(uint8_t* data, int length){
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =5; i< length; i++){
 800cd7a:	2305      	movs	r3, #5
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	e008      	b.n	800cd92 <takeStatus+0x22>
	  if(data[i] == '<')
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	4413      	add	r3, r2
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b3c      	cmp	r3, #60	; 0x3c
 800cd8a:	d007      	beq.n	800cd9c <takeStatus+0x2c>
	for(i =5; i< length; i++){
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	617b      	str	r3, [r7, #20]
 800cd92:	697a      	ldr	r2, [r7, #20]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	dbf2      	blt.n	800cd80 <takeStatus+0x10>
 800cd9a:	e000      	b.n	800cd9e <takeStatus+0x2e>
	  {
		  break;
 800cd9c:	bf00      	nop
	  }
	}
	STATUSSTR[0] = data[i+1];
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	3301      	adds	r3, #1
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	4413      	add	r3, r2
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	3302      	adds	r3, #2
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	3303      	adds	r3, #3
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	73bb      	strb	r3, [r7, #14]
	if(STATUSSTR[0] == 'E' && STATUSSTR[1] == 'R' && STATUSSTR[2] == 'A'){
 800cdc2:	7b3b      	ldrb	r3, [r7, #12]
 800cdc4:	2b45      	cmp	r3, #69	; 0x45
 800cdc6:	d109      	bne.n	800cddc <takeStatus+0x6c>
 800cdc8:	7b7b      	ldrb	r3, [r7, #13]
 800cdca:	2b52      	cmp	r3, #82	; 0x52
 800cdcc:	d106      	bne.n	800cddc <takeStatus+0x6c>
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	2b41      	cmp	r3, #65	; 0x41
 800cdd2:	d103      	bne.n	800cddc <takeStatus+0x6c>
		jumpToAddress(resetAddress);
 800cdd4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800cdd8:	f000 fc29 	bl	800d62e <jumpToAddress>
	}
	int Status = atoi((char*)STATUSSTR);
 800cddc:	f107 030c 	add.w	r3, r7, #12
 800cde0:	4618      	mov	r0, r3
 800cde2:	f004 f89b 	bl	8010f1c <atoi>
 800cde6:	6138      	str	r0, [r7, #16]
	return Status;
 800cde8:	693b      	ldr	r3, [r7, #16]

}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <takeData>:
void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b088      	sub	sp, #32
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	607a      	str	r2, [r7, #4]
	int i,j,l;
	for(i =5; i< length; i++){
 800cdfe:	2305      	movs	r3, #5
 800ce00:	61fb      	str	r3, [r7, #28]
 800ce02:	e008      	b.n	800ce16 <takeData+0x24>
	  if(data[i] == '<')
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	4413      	add	r3, r2
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b3c      	cmp	r3, #60	; 0x3c
 800ce0e:	d007      	beq.n	800ce20 <takeData+0x2e>
	for(i =5; i< length; i++){
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	3301      	adds	r3, #1
 800ce14:	61fb      	str	r3, [r7, #28]
 800ce16:	69fa      	ldr	r2, [r7, #28]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	dbf2      	blt.n	800ce04 <takeData+0x12>
 800ce1e:	e000      	b.n	800ce22 <takeData+0x30>
	  {
		  break;
 800ce20:	bf00      	nop
	  }
	}
	for(j = i; j< length; j++){
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	61bb      	str	r3, [r7, #24]
 800ce26:	e008      	b.n	800ce3a <takeData+0x48>
	  if(data[j] == ',')
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b2c      	cmp	r3, #44	; 0x2c
 800ce32:	d007      	beq.n	800ce44 <takeData+0x52>
	for(j = i; j< length; j++){
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	3301      	adds	r3, #1
 800ce38:	61bb      	str	r3, [r7, #24]
 800ce3a:	69ba      	ldr	r2, [r7, #24]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	dbf2      	blt.n	800ce28 <takeData+0x36>
 800ce42:	e000      	b.n	800ce46 <takeData+0x54>
		 {
			  break;
 800ce44:	bf00      	nop
		 }
	}

	for(l = j; l< length; l++){
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	e008      	b.n	800ce5e <takeData+0x6c>
	  if(data[l] == '!')
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	4413      	add	r3, r2
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b21      	cmp	r3, #33	; 0x21
 800ce56:	d007      	beq.n	800ce68 <takeData+0x76>
	for(l = j; l< length; l++){
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	617b      	str	r3, [r7, #20]
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	dbf2      	blt.n	800ce4c <takeData+0x5a>
 800ce66:	e000      	b.n	800ce6a <takeData+0x78>
		 {
			  break;
 800ce68:	bf00      	nop
		 }
	}

	strncpy((char *)dataToDisplay, (char *)data + j + 1, l - j - 1);
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	18d1      	adds	r1, r2, r3
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f004 f8b1 	bl	8010fe4 <strncpy>


}
 800ce82:	bf00      	nop
 800ce84:	3720      	adds	r7, #32
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b094      	sub	sp, #80	; 0x50
 800ce90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ce92:	b672      	cpsid	i
}
 800ce94:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x800C000;
 800ce96:	4bc0      	ldr	r3, [pc, #768]	; (800d198 <main+0x30c>)
 800ce98:	4ac0      	ldr	r2, [pc, #768]	; (800d19c <main+0x310>)
 800ce9a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800ce9c:	b662      	cpsie	i
}
 800ce9e:	bf00      	nop

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800cea0:	f001 fb22 	bl	800e4e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cea4:	f000 fa3e 	bl	800d324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cea8:	f000 fb3a 	bl	800d520 <MX_GPIO_Init>
  MX_I2C1_Init();
 800ceac:	f000 fa80 	bl	800d3b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800ceb0:	f000 faac 	bl	800d40c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800ceb4:	f000 fae0 	bl	800d478 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800ceb8:	f000 fb08 	bl	800d4cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800cebc:	2002      	movs	r0, #2
 800cebe:	f7ff fd23 	bl	800c908 <HD44780_Init>

  MFRC522_Init();
 800cec2:	f000 feea 	bl	800dc9a <MFRC522_Init>

	uint8_t cardRead = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int CardTime;


  	uint32_t version = *(__IO uint32_t *)versionAdress; // for version check
 800cecc:	4bb4      	ldr	r3, [pc, #720]	; (800d1a0 <main+0x314>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\""STR(currentTerminal)"\",\"firmwareVersion\":%ld}}", version);
 800ced2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ced4:	49b3      	ldr	r1, [pc, #716]	; (800d1a4 <main+0x318>)
 800ced6:	48b4      	ldr	r0, [pc, #720]	; (800d1a8 <main+0x31c>)
 800ced8:	f004 f864 	bl	8010fa4 <siprintf>


  	HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800cedc:	4bb3      	ldr	r3, [pc, #716]	; (800d1ac <main+0x320>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4ab3      	ldr	r2, [pc, #716]	; (800d1b0 <main+0x324>)
 800cee2:	4413      	add	r3, r2
 800cee4:	2201      	movs	r2, #1
 800cee6:	4619      	mov	r1, r3
 800cee8:	48b2      	ldr	r0, [pc, #712]	; (800d1b4 <main+0x328>)
 800ceea:	f003 fbbe 	bl	801066a <HAL_UART_Receive_IT>
  	T = HAL_GetTick();
 800ceee:	f001 fb71 	bl	800e5d4 <HAL_GetTick>
 800cef2:	4603      	mov	r3, r0
 800cef4:	4ab0      	ldr	r2, [pc, #704]	; (800d1b8 <main+0x32c>)
 800cef6:	6013      	str	r3, [r2, #0]
  	 printMiadetBarati(0, 2);
 800cef8:	2102      	movs	r1, #2
 800cefa:	2000      	movs	r0, #0
 800cefc:	f7ff fa94 	bl	800c428 <printMiadetBarati>
  	 led(1);
 800cf00:	2001      	movs	r0, #1
 800cf02:	f001 f875 	bl	800dff0 <led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cardRead == 1){
 800cf06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d117      	bne.n	800cf3e <main+0xb2>
		  if(HAL_GetTick() - CardTime >= 20000){
 800cf0e:	f001 fb61 	bl	800e5d4 <HAL_GetTick>
 800cf12:	4602      	mov	r2, r0
 800cf14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d90e      	bls.n	800cf3e <main+0xb2>
			  printShecdoma(0, 4);
 800cf20:	2104      	movs	r1, #4
 800cf22:	2000      	movs	r0, #0
 800cf24:	f7ff fb50 	bl	800c5c8 <printShecdoma>
			  HAL_Delay(3000);
 800cf28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800cf2c:	f001 fb5c 	bl	800e5e8 <HAL_Delay>
			  printMiadetBarati(0, 2);
 800cf30:	2102      	movs	r1, #2
 800cf32:	2000      	movs	r0, #0
 800cf34:	f7ff fa78 	bl	800c428 <printMiadetBarati>
			  cardRead = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }

	  }
	  if(HAL_GetTick() - T >= 2*(60000) && cardRead == 0){
 800cf3e:	f001 fb49 	bl	800e5d4 <HAL_GetTick>
 800cf42:	4602      	mov	r2, r0
 800cf44:	4b9c      	ldr	r3, [pc, #624]	; (800d1b8 <main+0x32c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	4a9c      	ldr	r2, [pc, #624]	; (800d1bc <main+0x330>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d927      	bls.n	800cfa0 <main+0x114>
 800cf50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d123      	bne.n	800cfa0 <main+0x114>

		  if(temp >= check)jumpToAddress(resetAddress); //restart
 800cf58:	4b99      	ldr	r3, [pc, #612]	; (800d1c0 <main+0x334>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	4b99      	ldr	r3, [pc, #612]	; (800d1c4 <main+0x338>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	db03      	blt.n	800cf6c <main+0xe0>
 800cf64:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800cf68:	f000 fb61 	bl	800d62e <jumpToAddress>
		  MQTTPubToTopic(strlen((char*)MQTT_CHECK_DATA));
 800cf6c:	488e      	ldr	r0, [pc, #568]	; (800d1a8 <main+0x31c>)
 800cf6e:	f7ff f8ed 	bl	800c14c <strlen>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 fb77 	bl	800d668 <MQTTPubToTopic>
		  HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
 800cf7a:	488b      	ldr	r0, [pc, #556]	; (800d1a8 <main+0x31c>)
 800cf7c:	f7ff f8e6 	bl	800c14c <strlen>
 800cf80:	4603      	mov	r3, r0
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	2332      	movs	r3, #50	; 0x32
 800cf86:	4988      	ldr	r1, [pc, #544]	; (800d1a8 <main+0x31c>)
 800cf88:	488a      	ldr	r0, [pc, #552]	; (800d1b4 <main+0x328>)
 800cf8a:	f003 fadc 	bl	8010546 <HAL_UART_Transmit>
		  T = HAL_GetTick();
 800cf8e:	f001 fb21 	bl	800e5d4 <HAL_GetTick>
 800cf92:	4603      	mov	r3, r0
 800cf94:	4a88      	ldr	r2, [pc, #544]	; (800d1b8 <main+0x32c>)
 800cf96:	6013      	str	r3, [r2, #0]
		  temp = check;
 800cf98:	4b8a      	ldr	r3, [pc, #552]	; (800d1c4 <main+0x338>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a88      	ldr	r2, [pc, #544]	; (800d1c0 <main+0x334>)
 800cf9e:	6013      	str	r3, [r2, #0]
	  }

	  if(readSatus){
 800cfa0:	4b89      	ldr	r3, [pc, #548]	; (800d1c8 <main+0x33c>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 8143 	beq.w	800d230 <main+0x3a4>
		  int Status = takeStatus(buffer, count);
 800cfaa:	4b80      	ldr	r3, [pc, #512]	; (800d1ac <main+0x320>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	487f      	ldr	r0, [pc, #508]	; (800d1b0 <main+0x324>)
 800cfb2:	f7ff fedd 	bl	800cd70 <takeStatus>
 800cfb6:	63b8      	str	r0, [r7, #56]	; 0x38
		  uint8_t dispData[50];

		  switch(Status){
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cfbe:	f280 8105 	bge.w	800d1cc <main+0x340>
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800cfc8:	dc06      	bgt.n	800cfd8 <main+0x14c>
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	2bc8      	cmp	r3, #200	; 0xc8
 800cfce:	d01f      	beq.n	800d010 <main+0x184>
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	2bc9      	cmp	r3, #201	; 0xc9
 800cfd4:	d025      	beq.n	800d022 <main+0x196>
 800cfd6:	e0f9      	b.n	800d1cc <main+0x340>
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800cfde:	2b08      	cmp	r3, #8
 800cfe0:	f200 80f4 	bhi.w	800d1cc <main+0x340>
 800cfe4:	a201      	add	r2, pc, #4	; (adr r2, 800cfec <main+0x160>)
 800cfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfea:	bf00      	nop
 800cfec:	0800d09f 	.word	0x0800d09f
 800cff0:	0800d1cd 	.word	0x0800d1cd
 800cff4:	0800d061 	.word	0x0800d061
 800cff8:	0800d1cd 	.word	0x0800d1cd
 800cffc:	0800d1cd 	.word	0x0800d1cd
 800d000:	0800d0dd 	.word	0x0800d0dd
 800d004:	0800d11b 	.word	0x0800d11b
 800d008:	0800d1cd 	.word	0x0800d1cd
 800d00c:	0800d159 	.word	0x0800d159
		  	  	case 200:
		  	  		//AppruveSound();
		  	  		led(2);
 800d010:	2002      	movs	r0, #2
 800d012:	f000 ffed 	bl	800dff0 <led>
		  	  		check++;
 800d016:	4b6b      	ldr	r3, [pc, #428]	; (800d1c4 <main+0x338>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3301      	adds	r3, #1
 800d01c:	4a69      	ldr	r2, [pc, #420]	; (800d1c4 <main+0x338>)
 800d01e:	6013      	str	r3, [r2, #0]
		  	  		break;
 800d020:	e0ec      	b.n	800d1fc <main+0x370>
		  	  	case 201:
					AppruveSound();
 800d022:	f001 f989 	bl	800e338 <AppruveSound>
					takeData(buffer, count, dispData);
 800d026:	4b61      	ldr	r3, [pc, #388]	; (800d1ac <main+0x320>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	1d3a      	adds	r2, r7, #4
 800d02c:	4619      	mov	r1, r3
 800d02e:	4860      	ldr	r0, [pc, #384]	; (800d1b0 <main+0x324>)
 800d030:	f7ff fedf 	bl	800cdf2 <takeData>
					printBalansi(0, 0);
 800d034:	2100      	movs	r1, #0
 800d036:	2000      	movs	r0, #0
 800d038:	f7ff fbe4 	bl	800c804 <printBalansi>
					HD44780_PrintStr((char*) dispData);
 800d03c:	1d3b      	adds	r3, r7, #4
 800d03e:	4618      	mov	r0, r3
 800d040:	f7ff fd7a 	bl	800cb38 <HD44780_PrintStr>
					RelaySwitch();
 800d044:	f001 f9a8 	bl	800e398 <RelaySwitch>
					HAL_Delay(2000);
 800d048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d04c:	f001 facc 	bl	800e5e8 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d050:	2102      	movs	r1, #2
 800d052:	2000      	movs	r0, #0
 800d054:	f7ff f9e8 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d05e:	e0cd      	b.n	800d1fc <main+0x370>
				case 293:
					takeData(buffer, count, dispData);
 800d060:	4b52      	ldr	r3, [pc, #328]	; (800d1ac <main+0x320>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	1d3a      	adds	r2, r7, #4
 800d066:	4619      	mov	r1, r3
 800d068:	4851      	ldr	r0, [pc, #324]	; (800d1b0 <main+0x324>)
 800d06a:	f7ff fec2 	bl	800cdf2 <takeData>
					HD44780_Clear();
 800d06e:	f7ff fccf 	bl	800ca10 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d072:	2100      	movs	r1, #0
 800d074:	2000      	movs	r0, #0
 800d076:	f7ff fce1 	bl	800ca3c <HD44780_SetCursor>
					printUcxoBaratia(0,0);
 800d07a:	2100      	movs	r1, #0
 800d07c:	2000      	movs	r0, #0
 800d07e:	f7ff f86d 	bl	800c15c <printUcxoBaratia>
					ErrorSound();
 800d082:	f001 f99b 	bl	800e3bc <ErrorSound>
					HAL_Delay(1000);
 800d086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d08a:	f001 faad 	bl	800e5e8 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d08e:	2102      	movs	r1, #2
 800d090:	2000      	movs	r0, #0
 800d092:	f7ff f9c9 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d09c:	e0ae      	b.n	800d1fc <main+0x370>
				case 291:
					takeData(buffer, count, dispData);
 800d09e:	4b43      	ldr	r3, [pc, #268]	; (800d1ac <main+0x320>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	1d3a      	adds	r2, r7, #4
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4842      	ldr	r0, [pc, #264]	; (800d1b0 <main+0x324>)
 800d0a8:	f7ff fea3 	bl	800cdf2 <takeData>
					HD44780_Clear();
 800d0ac:	f7ff fcb0 	bl	800ca10 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	f7ff fcc2 	bl	800ca3c <HD44780_SetCursor>
					printBlansiAraa(0, 0);
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	f7ff f908 	bl	800c2d0 <printBlansiAraa>
					ErrorSound();
 800d0c0:	f001 f97c 	bl	800e3bc <ErrorSound>
					HAL_Delay(1000);
 800d0c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0c8:	f001 fa8e 	bl	800e5e8 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d0cc:	2102      	movs	r1, #2
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f7ff f9aa 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d0da:	e08f      	b.n	800d1fc <main+0x370>
				case 296:
					takeData(buffer, count, dispData);
 800d0dc:	4b33      	ldr	r3, [pc, #204]	; (800d1ac <main+0x320>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	1d3a      	adds	r2, r7, #4
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4832      	ldr	r0, [pc, #200]	; (800d1b0 <main+0x324>)
 800d0e6:	f7ff fe84 	bl	800cdf2 <takeData>
					HD44780_Clear();
 800d0ea:	f7ff fc91 	bl	800ca10 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	f7ff fca3 	bl	800ca3c <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d0f6:	1d3b      	adds	r3, r7, #4
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff fd1d 	bl	800cb38 <HD44780_PrintStr>
					ErrorSound();
 800d0fe:	f001 f95d 	bl	800e3bc <ErrorSound>
					HAL_Delay(3000);
 800d102:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d106:	f001 fa6f 	bl	800e5e8 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d10a:	2102      	movs	r1, #2
 800d10c:	2000      	movs	r0, #0
 800d10e:	f7ff f98b 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d118:	e070      	b.n	800d1fc <main+0x370>
				case 297:
					takeData(buffer, count, dispData);
 800d11a:	4b24      	ldr	r3, [pc, #144]	; (800d1ac <main+0x320>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	1d3a      	adds	r2, r7, #4
 800d120:	4619      	mov	r1, r3
 800d122:	4823      	ldr	r0, [pc, #140]	; (800d1b0 <main+0x324>)
 800d124:	f7ff fe65 	bl	800cdf2 <takeData>
					HD44780_Clear();
 800d128:	f7ff fc72 	bl	800ca10 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d12c:	2100      	movs	r1, #0
 800d12e:	2000      	movs	r0, #0
 800d130:	f7ff fc84 	bl	800ca3c <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d134:	1d3b      	adds	r3, r7, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7ff fcfe 	bl	800cb38 <HD44780_PrintStr>
					ErrorSound();
 800d13c:	f001 f93e 	bl	800e3bc <ErrorSound>
					HAL_Delay(3000);
 800d140:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d144:	f001 fa50 	bl	800e5e8 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d148:	2102      	movs	r1, #2
 800d14a:	2000      	movs	r0, #0
 800d14c:	f7ff f96c 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d150:	2300      	movs	r3, #0
 800d152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d156:	e051      	b.n	800d1fc <main+0x370>
				case 299:
					takeData(buffer, count, dispData);
 800d158:	4b14      	ldr	r3, [pc, #80]	; (800d1ac <main+0x320>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	1d3a      	adds	r2, r7, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4813      	ldr	r0, [pc, #76]	; (800d1b0 <main+0x324>)
 800d162:	f7ff fe46 	bl	800cdf2 <takeData>
					HD44780_Clear();
 800d166:	f7ff fc53 	bl	800ca10 <HD44780_Clear>
					HD44780_SetCursor(0, 0);
 800d16a:	2100      	movs	r1, #0
 800d16c:	2000      	movs	r0, #0
 800d16e:	f7ff fc65 	bl	800ca3c <HD44780_SetCursor>
					HD44780_PrintStr((char*) dispData);
 800d172:	1d3b      	adds	r3, r7, #4
 800d174:	4618      	mov	r0, r3
 800d176:	f7ff fcdf 	bl	800cb38 <HD44780_PrintStr>
					ErrorSound();
 800d17a:	f001 f91f 	bl	800e3bc <ErrorSound>
					HAL_Delay(3000);
 800d17e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d182:	f001 fa31 	bl	800e5e8 <HAL_Delay>
					printMiadetBarati(0, 2);
 800d186:	2102      	movs	r1, #2
 800d188:	2000      	movs	r0, #0
 800d18a:	f7ff f94d 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 800d194:	e032      	b.n	800d1fc <main+0x370>
 800d196:	bf00      	nop
 800d198:	e000ed00 	.word	0xe000ed00
 800d19c:	0800c000 	.word	0x0800c000
 800d1a0:	0800bff0 	.word	0x0800bff0
 800d1a4:	08011a20 	.word	0x08011a20
 800d1a8:	200002e8 	.word	0x200002e8
 800d1ac:	2000034c 	.word	0x2000034c
 800d1b0:	20000268 	.word	0x20000268
 800d1b4:	200003fc 	.word	0x200003fc
 800d1b8:	20000158 	.word	0x20000158
 800d1bc:	0001d4bf 	.word	0x0001d4bf
 800d1c0:	2000015c 	.word	0x2000015c
 800d1c4:	20000090 	.word	0x20000090
 800d1c8:	20000164 	.word	0x20000164
				default:
					memset(buffer, 0, sizeof(buffer));
 800d1cc:	2280      	movs	r2, #128	; 0x80
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	484e      	ldr	r0, [pc, #312]	; (800d30c <main+0x480>)
 800d1d2:	f003 fedf 	bl	8010f94 <memset>
				    memset(dispData, 0, sizeof(dispData));
 800d1d6:	1d3b      	adds	r3, r7, #4
 800d1d8:	2232      	movs	r2, #50	; 0x32
 800d1da:	2100      	movs	r1, #0
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f003 fed9 	bl	8010f94 <memset>
					readSatus = 0;
 800d1e2:	4b4b      	ldr	r3, [pc, #300]	; (800d310 <main+0x484>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	701a      	strb	r2, [r3, #0]
					count = 0;
 800d1e8:	4b4a      	ldr	r3, [pc, #296]	; (800d314 <main+0x488>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
					printMiadetBarati(0, 2);
 800d1ee:	2102      	movs	r1, #2
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	f7ff f919 	bl	800c428 <printMiadetBarati>
					cardRead = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  }
		  memset(buffer, 0, sizeof(buffer));
 800d1fc:	2280      	movs	r2, #128	; 0x80
 800d1fe:	2100      	movs	r1, #0
 800d200:	4842      	ldr	r0, [pc, #264]	; (800d30c <main+0x480>)
 800d202:	f003 fec7 	bl	8010f94 <memset>
		  memset(dispData, 0, sizeof(dispData));
 800d206:	1d3b      	adds	r3, r7, #4
 800d208:	2232      	movs	r2, #50	; 0x32
 800d20a:	2100      	movs	r1, #0
 800d20c:	4618      	mov	r0, r3
 800d20e:	f003 fec1 	bl	8010f94 <memset>
		  readSatus = 0;
 800d212:	4b3f      	ldr	r3, [pc, #252]	; (800d310 <main+0x484>)
 800d214:	2200      	movs	r2, #0
 800d216:	701a      	strb	r2, [r3, #0]
		  count = 0;
 800d218:	4b3e      	ldr	r3, [pc, #248]	; (800d314 <main+0x488>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &buffer[count], 1);
 800d21e:	4b3d      	ldr	r3, [pc, #244]	; (800d314 <main+0x488>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a3a      	ldr	r2, [pc, #232]	; (800d30c <main+0x480>)
 800d224:	4413      	add	r3, r2
 800d226:	2201      	movs	r2, #1
 800d228:	4619      	mov	r1, r3
 800d22a:	483b      	ldr	r0, [pc, #236]	; (800d318 <main+0x48c>)
 800d22c:	f003 fa1d 	bl	801066a <HAL_UART_Receive_IT>
		 }

	 uint8_t catStat = cardOperationWithBlockedSector(postData);
 800d230:	483a      	ldr	r0, [pc, #232]	; (800d31c <main+0x490>)
 800d232:	f000 fd73 	bl	800dd1c <cardOperationWithBlockedSector>
 800d236:	4603      	mov	r3, r0
 800d238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if(catStat == 1 && cardRead == 0){
 800d23c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d240:	2b01      	cmp	r3, #1
 800d242:	f47f ae60 	bne.w	800cf06 <main+0x7a>
 800d246:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f47f ae5b 	bne.w	800cf06 <main+0x7a>
		 uint8_t bpundCount = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 uint8_t postEnable = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		 LENGTH = strlen((char*)postData);
 800d25c:	482f      	ldr	r0, [pc, #188]	; (800d31c <main+0x490>)
 800d25e:	f7fe ff75 	bl	800c14c <strlen>
 800d262:	4603      	mov	r3, r0
 800d264:	461a      	mov	r2, r3
 800d266:	4b2e      	ldr	r3, [pc, #184]	; (800d320 <main+0x494>)
 800d268:	601a      	str	r2, [r3, #0]

		 for(int i = 0; i< LENGTH+5; i++){
 800d26a:	2300      	movs	r3, #0
 800d26c:	643b      	str	r3, [r7, #64]	; 0x40
 800d26e:	e013      	b.n	800d298 <main+0x40c>

			 if(postData[i]== '{' || postData[i] == '}'){
 800d270:	4a2a      	ldr	r2, [pc, #168]	; (800d31c <main+0x490>)
 800d272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d274:	4413      	add	r3, r2
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b7b      	cmp	r3, #123	; 0x7b
 800d27a:	d005      	beq.n	800d288 <main+0x3fc>
 800d27c:	4a27      	ldr	r2, [pc, #156]	; (800d31c <main+0x490>)
 800d27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d280:	4413      	add	r3, r2
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b7d      	cmp	r3, #125	; 0x7d
 800d286:	d104      	bne.n	800d292 <main+0x406>
				 bpundCount++;
 800d288:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d28c:	3301      	adds	r3, #1
 800d28e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 for(int i = 0; i< LENGTH+5; i++){
 800d292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d294:	3301      	adds	r3, #1
 800d296:	643b      	str	r3, [r7, #64]	; 0x40
 800d298:	4b21      	ldr	r3, [pc, #132]	; (800d320 <main+0x494>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3304      	adds	r3, #4
 800d29e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	dde5      	ble.n	800d270 <main+0x3e4>
			 }

		 }
		 if(bpundCount != 4){
 800d2a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d2a8:	2b04      	cmp	r3, #4
 800d2aa:	d007      	beq.n	800d2bc <main+0x430>
		 	postEnable = 1;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		 	memset(postData, 0, sizeof(postData));
 800d2b2:	22ff      	movs	r2, #255	; 0xff
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4819      	ldr	r0, [pc, #100]	; (800d31c <main+0x490>)
 800d2b8:	f003 fe6c 	bl	8010f94 <memset>
		  }

		 if(postEnable == 0){
 800d2bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f47f ae20 	bne.w	800cf06 <main+0x7a>
			 CardReadSound();
 800d2c6:	f001 f89b 	bl	800e400 <CardReadSound>
			 printDaicadet(0, 3);
 800d2ca:	2103      	movs	r1, #3
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	f7ff fa0b 	bl	800c6e8 <printDaicadet>
			 MQTTPubToTopic(LENGTH);
 800d2d2:	4b13      	ldr	r3, [pc, #76]	; (800d320 <main+0x494>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f9c6 	bl	800d668 <MQTTPubToTopic>
			 HAL_Delay(50);
 800d2dc:	2032      	movs	r0, #50	; 0x32
 800d2de:	f001 f983 	bl	800e5e8 <HAL_Delay>

			 HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 800d2e2:	4b0f      	ldr	r3, [pc, #60]	; (800d320 <main+0x494>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	2364      	movs	r3, #100	; 0x64
 800d2ea:	490c      	ldr	r1, [pc, #48]	; (800d31c <main+0x490>)
 800d2ec:	480a      	ldr	r0, [pc, #40]	; (800d318 <main+0x48c>)
 800d2ee:	f003 f92a 	bl	8010546 <HAL_UART_Transmit>

			 memset(postData, 0, sizeof(postData));
 800d2f2:	22ff      	movs	r2, #255	; 0xff
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	4809      	ldr	r0, [pc, #36]	; (800d31c <main+0x490>)
 800d2f8:	f003 fe4c 	bl	8010f94 <memset>
			 cardRead = 1;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 CardTime = HAL_GetTick();
 800d302:	f001 f967 	bl	800e5d4 <HAL_GetTick>
 800d306:	4603      	mov	r3, r0
 800d308:	64bb      	str	r3, [r7, #72]	; 0x48
  {
 800d30a:	e5fc      	b.n	800cf06 <main+0x7a>
 800d30c:	20000268 	.word	0x20000268
 800d310:	20000164 	.word	0x20000164
 800d314:	2000034c 	.word	0x2000034c
 800d318:	200003fc 	.word	0x200003fc
 800d31c:	20000168 	.word	0x20000168
 800d320:	20000160 	.word	0x20000160

0800d324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b090      	sub	sp, #64	; 0x40
 800d328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d32a:	f107 0318 	add.w	r3, r7, #24
 800d32e:	2228      	movs	r2, #40	; 0x28
 800d330:	2100      	movs	r1, #0
 800d332:	4618      	mov	r0, r3
 800d334:	f003 fe2e 	bl	8010f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d338:	1d3b      	adds	r3, r7, #4
 800d33a:	2200      	movs	r2, #0
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	605a      	str	r2, [r3, #4]
 800d340:	609a      	str	r2, [r3, #8]
 800d342:	60da      	str	r2, [r3, #12]
 800d344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d346:	2301      	movs	r3, #1
 800d348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d34a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d34e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800d350:	2300      	movs	r3, #0
 800d352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d354:	2301      	movs	r3, #1
 800d356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d358:	2302      	movs	r3, #2
 800d35a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d35c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800d362:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d368:	f107 0318 	add.w	r3, r7, #24
 800d36c:	4618      	mov	r0, r3
 800d36e:	f002 f9b7 	bl	800f6e0 <HAL_RCC_OscConfig>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <SystemClock_Config+0x58>
  {
    Error_Handler();
 800d378:	f000 f954 	bl	800d624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d37c:	230f      	movs	r3, #15
 800d37e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d380:	2302      	movs	r3, #2
 800d382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d384:	2300      	movs	r3, #0
 800d386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d38c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d38e:	2300      	movs	r3, #0
 800d390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d392:	1d3b      	adds	r3, r7, #4
 800d394:	2102      	movs	r1, #2
 800d396:	4618      	mov	r0, r3
 800d398:	f002 fc24 	bl	800fbe4 <HAL_RCC_ClockConfig>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800d3a2:	f000 f93f 	bl	800d624 <Error_Handler>
  }
}
 800d3a6:	bf00      	nop
 800d3a8:	3740      	adds	r7, #64	; 0x40
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
	...

0800d3b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d3b4:	4b12      	ldr	r3, [pc, #72]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3b6:	4a13      	ldr	r2, [pc, #76]	; (800d404 <MX_I2C1_Init+0x54>)
 800d3b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d3ba:	4b11      	ldr	r3, [pc, #68]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3bc:	4a12      	ldr	r2, [pc, #72]	; (800d408 <MX_I2C1_Init+0x58>)
 800d3be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d3c0:	4b0f      	ldr	r3, [pc, #60]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d3c6:	4b0e      	ldr	r3, [pc, #56]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d3cc:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d3d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d3da:	4b09      	ldr	r3, [pc, #36]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d3e0:	4b07      	ldr	r3, [pc, #28]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d3e6:	4b06      	ldr	r3, [pc, #24]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d3ec:	4804      	ldr	r0, [pc, #16]	; (800d400 <MX_I2C1_Init+0x50>)
 800d3ee:	f001 fc93 	bl	800ed18 <HAL_I2C_Init>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d3f8:	f000 f914 	bl	800d624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d3fc:	bf00      	nop
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	20000350 	.word	0x20000350
 800d404:	40005400 	.word	0x40005400
 800d408:	000186a0 	.word	0x000186a0

0800d40c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d410:	4b17      	ldr	r3, [pc, #92]	; (800d470 <MX_SPI1_Init+0x64>)
 800d412:	4a18      	ldr	r2, [pc, #96]	; (800d474 <MX_SPI1_Init+0x68>)
 800d414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d416:	4b16      	ldr	r3, [pc, #88]	; (800d470 <MX_SPI1_Init+0x64>)
 800d418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d41c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d41e:	4b14      	ldr	r3, [pc, #80]	; (800d470 <MX_SPI1_Init+0x64>)
 800d420:	2200      	movs	r2, #0
 800d422:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d424:	4b12      	ldr	r3, [pc, #72]	; (800d470 <MX_SPI1_Init+0x64>)
 800d426:	2200      	movs	r2, #0
 800d428:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d42a:	4b11      	ldr	r3, [pc, #68]	; (800d470 <MX_SPI1_Init+0x64>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d430:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <MX_SPI1_Init+0x64>)
 800d432:	2200      	movs	r2, #0
 800d434:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d436:	4b0e      	ldr	r3, [pc, #56]	; (800d470 <MX_SPI1_Init+0x64>)
 800d438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d43c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d43e:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <MX_SPI1_Init+0x64>)
 800d440:	2218      	movs	r2, #24
 800d442:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d444:	4b0a      	ldr	r3, [pc, #40]	; (800d470 <MX_SPI1_Init+0x64>)
 800d446:	2200      	movs	r2, #0
 800d448:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <MX_SPI1_Init+0x64>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d450:	4b07      	ldr	r3, [pc, #28]	; (800d470 <MX_SPI1_Init+0x64>)
 800d452:	2200      	movs	r2, #0
 800d454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d456:	4b06      	ldr	r3, [pc, #24]	; (800d470 <MX_SPI1_Init+0x64>)
 800d458:	220a      	movs	r2, #10
 800d45a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d45c:	4804      	ldr	r0, [pc, #16]	; (800d470 <MX_SPI1_Init+0x64>)
 800d45e:	f002 fd59 	bl	800ff14 <HAL_SPI_Init>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d468:	f000 f8dc 	bl	800d624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d46c:	bf00      	nop
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	200003a4 	.word	0x200003a4
 800d474:	40013000 	.word	0x40013000

0800d478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d47c:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d47e:	4a12      	ldr	r2, [pc, #72]	; (800d4c8 <MX_USART1_UART_Init+0x50>)
 800d480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d482:	4b10      	ldr	r3, [pc, #64]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d48a:	4b0e      	ldr	r3, [pc, #56]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d490:	4b0c      	ldr	r3, [pc, #48]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d492:	2200      	movs	r2, #0
 800d494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d498:	2200      	movs	r2, #0
 800d49a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d49c:	4b09      	ldr	r3, [pc, #36]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d49e:	220c      	movs	r2, #12
 800d4a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4a2:	4b08      	ldr	r3, [pc, #32]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4a8:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d4ae:	4805      	ldr	r0, [pc, #20]	; (800d4c4 <MX_USART1_UART_Init+0x4c>)
 800d4b0:	f002 fffc 	bl	80104ac <HAL_UART_Init>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d4ba:	f000 f8b3 	bl	800d624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d4be:	bf00      	nop
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	200003fc 	.word	0x200003fc
 800d4c8:	40013800 	.word	0x40013800

0800d4cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d4d0:	4b11      	ldr	r3, [pc, #68]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4d2:	4a12      	ldr	r2, [pc, #72]	; (800d51c <MX_USART2_UART_Init+0x50>)
 800d4d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d4d6:	4b10      	ldr	r3, [pc, #64]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d4dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d4de:	4b0e      	ldr	r3, [pc, #56]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d4ea:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4f2:	220c      	movs	r2, #12
 800d4f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4f6:	4b08      	ldr	r3, [pc, #32]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4fc:	4b06      	ldr	r3, [pc, #24]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d502:	4805      	ldr	r0, [pc, #20]	; (800d518 <MX_USART2_UART_Init+0x4c>)
 800d504:	f002 ffd2 	bl	80104ac <HAL_UART_Init>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d50e:	f000 f889 	bl	800d624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d512:	bf00      	nop
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	20000440 	.word	0x20000440
 800d51c:	40004400 	.word	0x40004400

0800d520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d526:	f107 0310 	add.w	r3, r7, #16
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	605a      	str	r2, [r3, #4]
 800d530:	609a      	str	r2, [r3, #8]
 800d532:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d534:	4b37      	ldr	r3, [pc, #220]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d536:	699b      	ldr	r3, [r3, #24]
 800d538:	4a36      	ldr	r2, [pc, #216]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d53a:	f043 0310 	orr.w	r3, r3, #16
 800d53e:	6193      	str	r3, [r2, #24]
 800d540:	4b34      	ldr	r3, [pc, #208]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	f003 0310 	and.w	r3, r3, #16
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d54c:	4b31      	ldr	r3, [pc, #196]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	4a30      	ldr	r2, [pc, #192]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d552:	f043 0320 	orr.w	r3, r3, #32
 800d556:	6193      	str	r3, [r2, #24]
 800d558:	4b2e      	ldr	r3, [pc, #184]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	60bb      	str	r3, [r7, #8]
 800d562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d564:	4b2b      	ldr	r3, [pc, #172]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	4a2a      	ldr	r2, [pc, #168]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d56a:	f043 0304 	orr.w	r3, r3, #4
 800d56e:	6193      	str	r3, [r2, #24]
 800d570:	4b28      	ldr	r3, [pc, #160]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	f003 0304 	and.w	r3, r3, #4
 800d578:	607b      	str	r3, [r7, #4]
 800d57a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d57c:	4b25      	ldr	r3, [pc, #148]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	4a24      	ldr	r2, [pc, #144]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d582:	f043 0308 	orr.w	r3, r3, #8
 800d586:	6193      	str	r3, [r2, #24]
 800d588:	4b22      	ldr	r3, [pc, #136]	; (800d614 <MX_GPIO_Init+0xf4>)
 800d58a:	699b      	ldr	r3, [r3, #24]
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	603b      	str	r3, [r7, #0]
 800d592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d594:	2200      	movs	r2, #0
 800d596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d59a:	481f      	ldr	r0, [pc, #124]	; (800d618 <MX_GPIO_Init+0xf8>)
 800d59c:	f001 fb8a 	bl	800ecb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	2110      	movs	r1, #16
 800d5a4:	481d      	ldr	r0, [pc, #116]	; (800d61c <MX_GPIO_Init+0xfc>)
 800d5a6:	f001 fb85 	bl	800ecb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2103      	movs	r1, #3
 800d5ae:	481c      	ldr	r0, [pc, #112]	; (800d620 <MX_GPIO_Init+0x100>)
 800d5b0:	f001 fb80 	bl	800ecb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d5b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5c6:	f107 0310 	add.w	r3, r7, #16
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4812      	ldr	r0, [pc, #72]	; (800d618 <MX_GPIO_Init+0xf8>)
 800d5ce:	f001 f9ed 	bl	800e9ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d5d2:	2310      	movs	r3, #16
 800d5d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5de:	2302      	movs	r3, #2
 800d5e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5e2:	f107 0310 	add.w	r3, r7, #16
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	480c      	ldr	r0, [pc, #48]	; (800d61c <MX_GPIO_Init+0xfc>)
 800d5ea:	f001 f9df 	bl	800e9ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5fe:	f107 0310 	add.w	r3, r7, #16
 800d602:	4619      	mov	r1, r3
 800d604:	4806      	ldr	r0, [pc, #24]	; (800d620 <MX_GPIO_Init+0x100>)
 800d606:	f001 f9d1 	bl	800e9ac <HAL_GPIO_Init>

}
 800d60a:	bf00      	nop
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	40021000 	.word	0x40021000
 800d618:	40011000 	.word	0x40011000
 800d61c:	40010800 	.word	0x40010800
 800d620:	40010c00 	.word	0x40010c00

0800d624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d624:	b480      	push	{r7}
 800d626:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d628:	b672      	cpsid	i
}
 800d62a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d62c:	e7fe      	b.n	800d62c <Error_Handler+0x8>

0800d62e <jumpToAddress>:

	int Status = atoi((char*) statusString);
	return Status;

}
void jumpToAddress(uint32_t ADDRESSTOGO){
 800d62e:	b580      	push	{r7, lr}
 800d630:	b086      	sub	sp, #24
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
	  uint32_t addresstojump;

	  addresstojump = *((volatile uint32_t*)(ADDRESSTOGO + 4));
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	3304      	adds	r3, #4
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	617b      	str	r3, [r7, #20]
	  HAL_DeInit();
 800d63e:	f000 ff69 	bl	800e514 <HAL_DeInit>
	  HAL_RCC_DeInit();
 800d642:	f001 ffb3 	bl	800f5ac <HAL_RCC_DeInit>
	  void (*GoToApp)(void);
	  GoToApp = (void (*) (void))addresstojump;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d64a:	b672      	cpsid	i
}
 800d64c:	bf00      	nop
	  __disable_irq();
	  __set_MSP(*((volatile uint32_t*)ADDRESSTOGO));
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f383 8808 	msr	MSP, r3
}
 800d65a:	bf00      	nop
	  GoToApp();
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	4798      	blx	r3
}
 800d660:	bf00      	nop
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <MQTTPubToTopic>:
//			break;
//		}
//	}
}

void MQTTPubToTopic(int length){
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\""STR(backServer)"\",%d\r\n", (length));
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	4908      	ldr	r1, [pc, #32]	; (800d694 <MQTTPubToTopic+0x2c>)
 800d674:	4808      	ldr	r0, [pc, #32]	; (800d698 <MQTTPubToTopic+0x30>)
 800d676:	f003 fc95 	bl	8010fa4 <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800d67a:	2364      	movs	r3, #100	; 0x64
 800d67c:	222e      	movs	r2, #46	; 0x2e
 800d67e:	4906      	ldr	r1, [pc, #24]	; (800d698 <MQTTPubToTopic+0x30>)
 800d680:	4806      	ldr	r0, [pc, #24]	; (800d69c <MQTTPubToTopic+0x34>)
 800d682:	f002 ff60 	bl	8010546 <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800d686:	201e      	movs	r0, #30
 800d688:	f000 ffae 	bl	800e5e8 <HAL_Delay>

}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	08011ad0 	.word	0x08011ad0
 800d698:	20000094 	.word	0x20000094
 800d69c:	200003fc 	.word	0x200003fc

0800d6a0 <SPI1SendByte>:
extern void MFRC522_Halt(void);
extern void cardOperation(uint8_t* finalData, uint8_t* p);
extern void led(uint8_t n);
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);

uint8_t SPI1SendByte(uint8_t data) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af02      	add	r7, sp, #8
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800d6ae:	f107 0208 	add.w	r2, r7, #8
 800d6b2:	f107 010c 	add.w	r1, r7, #12
 800d6b6:	230a      	movs	r3, #10
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4803      	ldr	r0, [pc, #12]	; (800d6cc <SPI1SendByte+0x2c>)
 800d6be:	f002 fcad 	bl	801001c <HAL_SPI_TransmitReceive>
	return readValue[0];
 800d6c2:	7a3b      	ldrb	r3, [r7, #8]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	200003a4 	.word	0x200003a4

0800d6d0 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	460a      	mov	r2, r1
 800d6da:	71fb      	strb	r3, [r7, #7]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2110      	movs	r1, #16
 800d6e4:	4809      	ldr	r0, [pc, #36]	; (800d70c <SPI1_WriteReg+0x3c>)
 800d6e6:	f001 fae5 	bl	800ecb4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff ffd7 	bl	800d6a0 <SPI1SendByte>
	SPI1SendByte(value);
 800d6f2:	79bb      	ldrb	r3, [r7, #6]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff ffd3 	bl	800d6a0 <SPI1SendByte>
	cs_set();
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	2110      	movs	r1, #16
 800d6fe:	4803      	ldr	r0, [pc, #12]	; (800d70c <SPI1_WriteReg+0x3c>)
 800d700:	f001 fad8 	bl	800ecb4 <HAL_GPIO_WritePin>
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	40010800 	.word	0x40010800

0800d710 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800d71a:	2200      	movs	r2, #0
 800d71c:	2110      	movs	r1, #16
 800d71e:	480b      	ldr	r0, [pc, #44]	; (800d74c <SPI1_ReadReg+0x3c>)
 800d720:	f001 fac8 	bl	800ecb4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	4618      	mov	r0, r3
 800d728:	f7ff ffba 	bl	800d6a0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800d72c:	2000      	movs	r0, #0
 800d72e:	f7ff ffb7 	bl	800d6a0 <SPI1SendByte>
 800d732:	4603      	mov	r3, r0
 800d734:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800d736:	2201      	movs	r2, #1
 800d738:	2110      	movs	r1, #16
 800d73a:	4804      	ldr	r0, [pc, #16]	; (800d74c <SPI1_ReadReg+0x3c>)
 800d73c:	f001 faba 	bl	800ecb4 <HAL_GPIO_WritePin>
	return val;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	40010800 	.word	0x40010800

0800d750 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	460a      	mov	r2, r1
 800d75a:	71fb      	strb	r3, [r7, #7]
 800d75c:	4613      	mov	r3, r2
 800d75e:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	b2db      	uxtb	r3, r3
 800d766:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d76a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800d76c:	79ba      	ldrb	r2, [r7, #6]
 800d76e:	79fb      	ldrb	r3, [r7, #7]
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff ffac 	bl	800d6d0 <SPI1_WriteReg>
}
 800d778:	bf00      	nop
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800d78a:	79fb      	ldrb	r3, [r7, #7]
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	b25b      	sxtb	r3, r3
 800d790:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d794:	b25b      	sxtb	r3, r3
 800d796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d79a:	b25b      	sxtb	r3, r3
 800d79c:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7ff ffb5 	bl	800d710 <SPI1_ReadReg>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73fb      	strb	r3, [r7, #15]
	return val;	
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	460a      	mov	r2, r1
 800d7be:	71fb      	strb	r3, [r7, #7]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff ffda 	bl	800d780 <MFRC522_ReadRegister>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	79bb      	ldrb	r3, [r7, #6]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	4611      	mov	r1, r2
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7ff ffb8 	bl	800d750 <MFRC522_WriteRegister>
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	460a      	mov	r2, r1
 800d7f2:	71fb      	strb	r3, [r7, #7]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800d7f8:	79fb      	ldrb	r3, [r7, #7]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff ffc0 	bl	800d780 <MFRC522_ReadRegister>
 800d800:	4603      	mov	r3, r0
 800d802:	b25a      	sxtb	r2, r3
 800d804:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d808:	43db      	mvns	r3, r3
 800d80a:	b25b      	sxtb	r3, r3
 800d80c:	4013      	ands	r3, r2
 800d80e:	b25b      	sxtb	r3, r3
 800d810:	b2da      	uxtb	r2, r3
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff ff9a 	bl	800d750 <MFRC522_WriteRegister>
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af02      	add	r7, sp, #8
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800d830:	2107      	movs	r1, #7
 800d832:	200d      	movs	r0, #13
 800d834:	f7ff ff8c 	bl	800d750 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	79fa      	ldrb	r2, [r7, #7]
 800d83c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800d83e:	f107 030c 	add.w	r3, r7, #12
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2201      	movs	r2, #1
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	200c      	movs	r0, #12
 800d84c:	f000 f80f 	bl	800d86e <MFRC522_ToCard>
 800d850:	4603      	mov	r3, r0
 800d852:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800d854:	7bfb      	ldrb	r3, [r7, #15]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <MFRC522_Request+0x3c>
 800d85a:	89bb      	ldrh	r3, [r7, #12]
 800d85c:	2b10      	cmp	r3, #16
 800d85e:	d001      	beq.n	800d864 <MFRC522_Request+0x40>
 800d860:	2302      	movs	r3, #2
 800d862:	73fb      	strb	r3, [r7, #15]
	return status;
 800d864:	7bfb      	ldrb	r3, [r7, #15]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800d86e:	b590      	push	{r4, r7, lr}
 800d870:	b087      	sub	sp, #28
 800d872:	af00      	add	r7, sp, #0
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607b      	str	r3, [r7, #4]
 800d878:	4603      	mov	r3, r0
 800d87a:	73fb      	strb	r3, [r7, #15]
 800d87c:	4613      	mov	r3, r2
 800d87e:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800d880:	2302      	movs	r3, #2
 800d882:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800d884:	2300      	movs	r3, #0
 800d886:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800d888:	2300      	movs	r3, #0
 800d88a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	2b0c      	cmp	r3, #12
 800d890:	d006      	beq.n	800d8a0 <MFRC522_ToCard+0x32>
 800d892:	2b0e      	cmp	r3, #14
 800d894:	d109      	bne.n	800d8aa <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800d896:	2312      	movs	r3, #18
 800d898:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800d89a:	2310      	movs	r3, #16
 800d89c:	757b      	strb	r3, [r7, #21]
			break;
 800d89e:	e005      	b.n	800d8ac <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800d8a0:	2377      	movs	r3, #119	; 0x77
 800d8a2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800d8a4:	2330      	movs	r3, #48	; 0x30
 800d8a6:	757b      	strb	r3, [r7, #21]
			break;
 800d8a8:	e000      	b.n	800d8ac <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800d8aa:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800d8ac:	7dbb      	ldrb	r3, [r7, #22]
 800d8ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	2002      	movs	r0, #2
 800d8b8:	f7ff ff4a 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800d8bc:	2180      	movs	r1, #128	; 0x80
 800d8be:	2004      	movs	r0, #4
 800d8c0:	f7ff ff92 	bl	800d7e8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800d8c4:	2180      	movs	r1, #128	; 0x80
 800d8c6:	200a      	movs	r0, #10
 800d8c8:	f7ff ff74 	bl	800d7b4 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	f7ff ff3e 	bl	800d750 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	827b      	strh	r3, [r7, #18]
 800d8d8:	e00a      	b.n	800d8f0 <MFRC522_ToCard+0x82>
 800d8da:	8a7b      	ldrh	r3, [r7, #18]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	4413      	add	r3, r2
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	2009      	movs	r0, #9
 800d8e6:	f7ff ff33 	bl	800d750 <MFRC522_WriteRegister>
 800d8ea:	8a7b      	ldrh	r3, [r7, #18]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	827b      	strh	r3, [r7, #18]
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	8a7a      	ldrh	r2, [r7, #18]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d3ef      	bcc.n	800d8da <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	2001      	movs	r0, #1
 800d900:	f7ff ff26 	bl	800d750 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	2b0c      	cmp	r3, #12
 800d908:	d103      	bne.n	800d912 <MFRC522_ToCard+0xa4>
 800d90a:	2180      	movs	r1, #128	; 0x80
 800d90c:	200d      	movs	r0, #13
 800d90e:	f7ff ff51 	bl	800d7b4 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800d912:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d916:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800d918:	2004      	movs	r0, #4
 800d91a:	f7ff ff31 	bl	800d780 <MFRC522_ReadRegister>
 800d91e:	4603      	mov	r3, r0
 800d920:	753b      	strb	r3, [r7, #20]
		i--;
 800d922:	8a7b      	ldrh	r3, [r7, #18]
 800d924:	3b01      	subs	r3, #1
 800d926:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800d928:	8a7b      	ldrh	r3, [r7, #18]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <MFRC522_ToCard+0xd6>
 800d92e:	7d3b      	ldrb	r3, [r7, #20]
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	2b00      	cmp	r3, #0
 800d936:	d105      	bne.n	800d944 <MFRC522_ToCard+0xd6>
 800d938:	7d3a      	ldrb	r2, [r7, #20]
 800d93a:	7d7b      	ldrb	r3, [r7, #21]
 800d93c:	4013      	ands	r3, r2
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d0e9      	beq.n	800d918 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800d944:	2180      	movs	r1, #128	; 0x80
 800d946:	200d      	movs	r0, #13
 800d948:	f7ff ff4e 	bl	800d7e8 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800d94c:	8a7b      	ldrh	r3, [r7, #18]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d057      	beq.n	800da02 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800d952:	2006      	movs	r0, #6
 800d954:	f7ff ff14 	bl	800d780 <MFRC522_ReadRegister>
 800d958:	4603      	mov	r3, r0
 800d95a:	f003 031b 	and.w	r3, r3, #27
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d14d      	bne.n	800d9fe <MFRC522_ToCard+0x190>
			status = MI_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800d966:	7d3a      	ldrb	r2, [r7, #20]
 800d968:	7dbb      	ldrb	r3, [r7, #22]
 800d96a:	4013      	ands	r3, r2
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 0301 	and.w	r3, r3, #1
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <MFRC522_ToCard+0x10c>
 800d976:	2301      	movs	r3, #1
 800d978:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	2b0c      	cmp	r3, #12
 800d97e:	d140      	bne.n	800da02 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800d980:	200a      	movs	r0, #10
 800d982:	f7ff fefd 	bl	800d780 <MFRC522_ReadRegister>
 800d986:	4603      	mov	r3, r0
 800d988:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800d98a:	200c      	movs	r0, #12
 800d98c:	f7ff fef8 	bl	800d780 <MFRC522_ReadRegister>
 800d990:	4603      	mov	r3, r0
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800d998:	7c7b      	ldrb	r3, [r7, #17]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00b      	beq.n	800d9b6 <MFRC522_ToCard+0x148>
 800d99e:	7d3b      	ldrb	r3, [r7, #20]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	7c7b      	ldrb	r3, [r7, #17]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4413      	add	r3, r2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	801a      	strh	r2, [r3, #0]
 800d9b4:	e005      	b.n	800d9c2 <MFRC522_ToCard+0x154>
 800d9b6:	7d3b      	ldrb	r3, [r7, #20]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800d9c2:	7d3b      	ldrb	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d101      	bne.n	800d9cc <MFRC522_ToCard+0x15e>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800d9cc:	7d3b      	ldrb	r3, [r7, #20]
 800d9ce:	2b10      	cmp	r3, #16
 800d9d0:	d901      	bls.n	800d9d6 <MFRC522_ToCard+0x168>
 800d9d2:	2310      	movs	r3, #16
 800d9d4:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	827b      	strh	r3, [r7, #18]
 800d9da:	e00a      	b.n	800d9f2 <MFRC522_ToCard+0x184>
 800d9dc:	8a7b      	ldrh	r3, [r7, #18]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	18d4      	adds	r4, r2, r3
 800d9e2:	2009      	movs	r0, #9
 800d9e4:	f7ff fecc 	bl	800d780 <MFRC522_ReadRegister>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	7023      	strb	r3, [r4, #0]
 800d9ec:	8a7b      	ldrh	r3, [r7, #18]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	827b      	strh	r3, [r7, #18]
 800d9f2:	7d3b      	ldrb	r3, [r7, #20]
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	8a7a      	ldrh	r2, [r7, #18]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d3ef      	bcc.n	800d9dc <MFRC522_ToCard+0x16e>
 800d9fc:	e001      	b.n	800da02 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800d9fe:	2302      	movs	r3, #2
 800da00:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800da02:	7dfb      	ldrb	r3, [r7, #23]
}
 800da04:	4618      	mov	r0, r3
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd90      	pop	{r4, r7, pc}

0800da0c <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af02      	add	r7, sp, #8
 800da12:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800da18:	2100      	movs	r1, #0
 800da1a:	200d      	movs	r0, #13
 800da1c:	f7ff fe98 	bl	800d750 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2293      	movs	r2, #147	; 0x93
 800da24:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	3301      	adds	r3, #1
 800da2a:	2220      	movs	r2, #32
 800da2c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800da2e:	f107 030a 	add.w	r3, r7, #10
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2202      	movs	r2, #2
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	200c      	movs	r0, #12
 800da3c:	f7ff ff17 	bl	800d86e <MFRC522_ToCard>
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d118      	bne.n	800da7c <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800da4a:	2300      	movs	r3, #0
 800da4c:	73bb      	strb	r3, [r7, #14]
 800da4e:	e009      	b.n	800da64 <MFRC522_Anticoll+0x58>
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	4413      	add	r3, r2
 800da56:	781a      	ldrb	r2, [r3, #0]
 800da58:	7b7b      	ldrb	r3, [r7, #13]
 800da5a:	4053      	eors	r3, r2
 800da5c:	737b      	strb	r3, [r7, #13]
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	3301      	adds	r3, #1
 800da62:	73bb      	strb	r3, [r7, #14]
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	2b03      	cmp	r3, #3
 800da68:	d9f2      	bls.n	800da50 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	4413      	add	r3, r2
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	7b7a      	ldrb	r2, [r7, #13]
 800da74:	429a      	cmp	r2, r3
 800da76:	d001      	beq.n	800da7c <MFRC522_Anticoll+0x70>
 800da78:	2302      	movs	r3, #2
 800da7a:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800da86:	b590      	push	{r4, r7, lr}
 800da88:	b087      	sub	sp, #28
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	460b      	mov	r3, r1
 800da90:	607a      	str	r2, [r7, #4]
 800da92:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800da94:	2104      	movs	r1, #4
 800da96:	2005      	movs	r0, #5
 800da98:	f7ff fea6 	bl	800d7e8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800da9c:	2180      	movs	r1, #128	; 0x80
 800da9e:	200a      	movs	r0, #10
 800daa0:	f7ff fe88 	bl	800d7b4 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800daa4:	2300      	movs	r3, #0
 800daa6:	75fb      	strb	r3, [r7, #23]
 800daa8:	e00a      	b.n	800dac0 <MFRC522_CalculateCRC+0x3a>
 800daaa:	7dfb      	ldrb	r3, [r7, #23]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4413      	add	r3, r2
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	4619      	mov	r1, r3
 800dab4:	2009      	movs	r0, #9
 800dab6:	f7ff fe4b 	bl	800d750 <MFRC522_WriteRegister>
 800daba:	7dfb      	ldrb	r3, [r7, #23]
 800dabc:	3301      	adds	r3, #1
 800dabe:	75fb      	strb	r3, [r7, #23]
 800dac0:	7dfa      	ldrb	r2, [r7, #23]
 800dac2:	7afb      	ldrb	r3, [r7, #11]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d3f0      	bcc.n	800daaa <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800dac8:	2103      	movs	r1, #3
 800daca:	2001      	movs	r0, #1
 800dacc:	f7ff fe40 	bl	800d750 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800dad0:	23ff      	movs	r3, #255	; 0xff
 800dad2:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800dad4:	2005      	movs	r0, #5
 800dad6:	f7ff fe53 	bl	800d780 <MFRC522_ReadRegister>
 800dada:	4603      	mov	r3, r0
 800dadc:	75bb      	strb	r3, [r7, #22]
		i--;
 800dade:	7dfb      	ldrb	r3, [r7, #23]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 800dae4:	7dfb      	ldrb	r3, [r7, #23]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d004      	beq.n	800daf4 <MFRC522_CalculateCRC+0x6e>
 800daea:	7dbb      	ldrb	r3, [r7, #22]
 800daec:	f003 0304 	and.w	r3, r3, #4
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0ef      	beq.n	800dad4 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800daf4:	2022      	movs	r0, #34	; 0x22
 800daf6:	f7ff fe43 	bl	800d780 <MFRC522_ReadRegister>
 800dafa:	4603      	mov	r3, r0
 800dafc:	461a      	mov	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	1c5c      	adds	r4, r3, #1
 800db06:	2021      	movs	r0, #33	; 0x21
 800db08:	f7ff fe3a 	bl	800d780 <MFRC522_ReadRegister>
 800db0c:	4603      	mov	r3, r0
 800db0e:	7023      	strb	r3, [r4, #0]
}
 800db10:	bf00      	nop
 800db12:	371c      	adds	r7, #28
 800db14:	46bd      	mov	sp, r7
 800db16:	bd90      	pop	{r4, r7, pc}

0800db18 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af02      	add	r7, sp, #8
 800db1e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 800db20:	2393      	movs	r3, #147	; 0x93
 800db22:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 800db24:	2370      	movs	r3, #112	; 0x70
 800db26:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 800db28:	2300      	movs	r3, #0
 800db2a:	75fb      	strb	r3, [r7, #23]
 800db2c:	e00c      	b.n	800db48 <MFRC522_SelectTag+0x30>
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	441a      	add	r2, r3
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	3302      	adds	r3, #2
 800db38:	7812      	ldrb	r2, [r2, #0]
 800db3a:	3318      	adds	r3, #24
 800db3c:	443b      	add	r3, r7
 800db3e:	f803 2c10 	strb.w	r2, [r3, #-16]
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	3301      	adds	r3, #1
 800db46:	75fb      	strb	r3, [r7, #23]
 800db48:	7dfb      	ldrb	r3, [r7, #23]
 800db4a:	2b04      	cmp	r3, #4
 800db4c:	d9ef      	bls.n	800db2e <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	1dda      	adds	r2, r3, #7
 800db54:	f107 0308 	add.w	r3, r7, #8
 800db58:	2107      	movs	r1, #7
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff ff93 	bl	800da86 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800db60:	f107 0208 	add.w	r2, r7, #8
 800db64:	f107 0108 	add.w	r1, r7, #8
 800db68:	f107 0312 	add.w	r3, r7, #18
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	4613      	mov	r3, r2
 800db70:	2209      	movs	r2, #9
 800db72:	200c      	movs	r0, #12
 800db74:	f7ff fe7b 	bl	800d86e <MFRC522_ToCard>
 800db78:	4603      	mov	r3, r0
 800db7a:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 800db7c:	7d7b      	ldrb	r3, [r7, #21]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d105      	bne.n	800db8e <MFRC522_SelectTag+0x76>
 800db82:	8a7b      	ldrh	r3, [r7, #18]
 800db84:	2b18      	cmp	r3, #24
 800db86:	d102      	bne.n	800db8e <MFRC522_SelectTag+0x76>
 800db88:	7a3b      	ldrb	r3, [r7, #8]
 800db8a:	75bb      	strb	r3, [r7, #22]
 800db8c:	e001      	b.n	800db92 <MFRC522_SelectTag+0x7a>
 800db8e:	2300      	movs	r3, #0
 800db90:	75bb      	strb	r3, [r7, #22]
	return size;
 800db92:	7dbb      	ldrb	r3, [r7, #22]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08a      	sub	sp, #40	; 0x28
 800dba0:	af02      	add	r7, sp, #8
 800dba2:	60ba      	str	r2, [r7, #8]
 800dba4:	607b      	str	r3, [r7, #4]
 800dba6:	4603      	mov	r3, r0
 800dba8:	73fb      	strb	r3, [r7, #15]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
 800dbb0:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	77bb      	strb	r3, [r7, #30]
 800dbba:	e00c      	b.n	800dbd6 <MFRC522_Auth+0x3a>
 800dbbc:	7fbb      	ldrb	r3, [r7, #30]
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	441a      	add	r2, r3
 800dbc2:	7fbb      	ldrb	r3, [r7, #30]
 800dbc4:	3302      	adds	r3, #2
 800dbc6:	7812      	ldrb	r2, [r2, #0]
 800dbc8:	3320      	adds	r3, #32
 800dbca:	443b      	add	r3, r7
 800dbcc:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dbd0:	7fbb      	ldrb	r3, [r7, #30]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	77bb      	strb	r3, [r7, #30]
 800dbd6:	7fbb      	ldrb	r3, [r7, #30]
 800dbd8:	2b05      	cmp	r3, #5
 800dbda:	d9ef      	bls.n	800dbbc <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 800dbdc:	2300      	movs	r3, #0
 800dbde:	77bb      	strb	r3, [r7, #30]
 800dbe0:	e00c      	b.n	800dbfc <MFRC522_Auth+0x60>
 800dbe2:	7fbb      	ldrb	r3, [r7, #30]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	441a      	add	r2, r3
 800dbe8:	7fbb      	ldrb	r3, [r7, #30]
 800dbea:	3308      	adds	r3, #8
 800dbec:	7812      	ldrb	r2, [r2, #0]
 800dbee:	3320      	adds	r3, #32
 800dbf0:	443b      	add	r3, r7
 800dbf2:	f803 2c10 	strb.w	r2, [r3, #-16]
 800dbf6:	7fbb      	ldrb	r3, [r7, #30]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	77bb      	strb	r3, [r7, #30]
 800dbfc:	7fbb      	ldrb	r3, [r7, #30]
 800dbfe:	2b03      	cmp	r3, #3
 800dc00:	d9ef      	bls.n	800dbe2 <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800dc02:	f107 0210 	add.w	r2, r7, #16
 800dc06:	f107 0110 	add.w	r1, r7, #16
 800dc0a:	f107 031c 	add.w	r3, r7, #28
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	4613      	mov	r3, r2
 800dc12:	220c      	movs	r2, #12
 800dc14:	200e      	movs	r0, #14
 800dc16:	f7ff fe2a 	bl	800d86e <MFRC522_ToCard>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 800dc1e:	7ffb      	ldrb	r3, [r7, #31]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d107      	bne.n	800dc34 <MFRC522_Auth+0x98>
 800dc24:	2008      	movs	r0, #8
 800dc26:	f7ff fdab 	bl	800d780 <MFRC522_ReadRegister>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	f003 0308 	and.w	r3, r3, #8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <MFRC522_Auth+0x9c>
 800dc34:	2302      	movs	r3, #2
 800dc36:	77fb      	strb	r3, [r7, #31]
	return status;
 800dc38:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b086      	sub	sp, #24
 800dc46:	af02      	add	r7, sp, #8
 800dc48:	4603      	mov	r3, r0
 800dc4a:	6039      	str	r1, [r7, #0]
 800dc4c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2230      	movs	r2, #48	; 0x30
 800dc52:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	3301      	adds	r3, #1
 800dc58:	79fa      	ldrb	r2, [r7, #7]
 800dc5a:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	3302      	adds	r3, #2
 800dc60:	461a      	mov	r2, r3
 800dc62:	2102      	movs	r1, #2
 800dc64:	6838      	ldr	r0, [r7, #0]
 800dc66:	f7ff ff0e 	bl	800da86 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800dc6a:	f107 030c 	add.w	r3, r7, #12
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	2204      	movs	r2, #4
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	200c      	movs	r0, #12
 800dc78:	f7ff fdf9 	bl	800d86e <MFRC522_ToCard>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d102      	bne.n	800dc8c <MFRC522_Read+0x4a>
 800dc86:	89bb      	ldrh	r3, [r7, #12]
 800dc88:	2b90      	cmp	r3, #144	; 0x90
 800dc8a:	d001      	beq.n	800dc90 <MFRC522_Read+0x4e>
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	73fb      	strb	r3, [r7, #15]
	return status;
 800dc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800dc9e:	f000 f820 	bl	800dce2 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800dca2:	218d      	movs	r1, #141	; 0x8d
 800dca4:	202a      	movs	r0, #42	; 0x2a
 800dca6:	f7ff fd53 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800dcaa:	213e      	movs	r1, #62	; 0x3e
 800dcac:	202b      	movs	r0, #43	; 0x2b
 800dcae:	f7ff fd4f 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800dcb2:	211e      	movs	r1, #30
 800dcb4:	202d      	movs	r0, #45	; 0x2d
 800dcb6:	f7ff fd4b 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800dcba:	2100      	movs	r1, #0
 800dcbc:	202c      	movs	r0, #44	; 0x2c
 800dcbe:	f7ff fd47 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800dcc2:	2170      	movs	r1, #112	; 0x70
 800dcc4:	2026      	movs	r0, #38	; 0x26
 800dcc6:	f7ff fd43 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800dcca:	2140      	movs	r1, #64	; 0x40
 800dccc:	2015      	movs	r0, #21
 800dcce:	f7ff fd3f 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800dcd2:	213d      	movs	r1, #61	; 0x3d
 800dcd4:	2011      	movs	r0, #17
 800dcd6:	f7ff fd3b 	bl	800d750 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800dcda:	f000 f80a 	bl	800dcf2 <MFRC522_AntennaOn>
}
 800dcde:	bf00      	nop
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800dce2:	b580      	push	{r7, lr}
 800dce4:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800dce6:	210f      	movs	r1, #15
 800dce8:	2001      	movs	r0, #1
 800dcea:	f7ff fd31 	bl	800d750 <MFRC522_WriteRegister>
}
 800dcee:	bf00      	nop
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800dcf8:	2014      	movs	r0, #20
 800dcfa:	f7ff fd41 	bl	800d780 <MFRC522_ReadRegister>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	f003 0303 	and.w	r3, r3, #3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d103      	bne.n	800dd14 <MFRC522_AntennaOn+0x22>
 800dd0c:	2103      	movs	r1, #3
 800dd0e:	2014      	movs	r0, #20
 800dd10:	f7ff fd50 	bl	800d7b4 <MFRC522_SetBitMask>
}
 800dd14:	bf00      	nop
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 800dd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd1e:	b0f1      	sub	sp, #452	; 0x1c4
 800dd20:	af0e      	add	r7, sp, #56	; 0x38
 800dd22:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800dd26:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800dd2a:	6018      	str	r0, [r3, #0]
	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 800dd2c:	4aad      	ldr	r2, [pc, #692]	; (800dfe4 <cardOperationWithBlockedSector+0x2c8>)
 800dd2e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800dd32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd36:	6018      	str	r0, [r3, #0]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 800dd48:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d13b      	bne.n	800ddc8 <cardOperationWithBlockedSector+0xac>
	     MFRC522_Init();
 800dd50:	f7ff ffa3 	bl	800dc9a <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 800dd54:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dd58:	4619      	mov	r1, r3
 800dd5a:	2026      	movs	r0, #38	; 0x26
 800dd5c:	f7ff fd62 	bl	800d824 <MFRC522_Request>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d130      	bne.n	800ddc8 <cardOperationWithBlockedSector+0xac>
	       if (!MFRC522_Anticoll(str)) {
 800dd66:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7ff fe4e 	bl	800da0c <MFRC522_Anticoll>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d128      	bne.n	800ddc8 <cardOperationWithBlockedSector+0xac>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\""STR(currentTerminal)"\",\"cardID\":\"%x%x%x%x\",", str[0],str[1], str[2], str[3]);
 800dd76:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800dd80:	461c      	mov	r4, r3
 800dd82:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800dd86:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 800dd8a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800dd8e:	9201      	str	r2, [sp, #4]
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	4623      	mov	r3, r4
 800dd94:	460a      	mov	r2, r1
 800dd96:	4994      	ldr	r1, [pc, #592]	; (800dfe8 <cardOperationWithBlockedSector+0x2cc>)
 800dd98:	f003 f904 	bl	8010fa4 <siprintf>

	         l = strlen((char*)IDBuff);
 800dd9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe f9d3 	bl	800c14c <strlen>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 800ddac:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800ddb0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ddb4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800ddb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ddbc:	6818      	ldr	r0, [r3, #0]
 800ddbe:	f003 f8db 	bl	8010f78 <memcpy>

	         cardIDStatus = 1;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 800ddc8:	2014      	movs	r0, #20
 800ddca:	f000 fc0d 	bl	800e5e8 <HAL_Delay>
	  MFRC522_Init();
 800ddce:	f7ff ff64 	bl	800dc9a <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 800ddd2:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	f040 80ed 	bne.w	800dfb6 <cardOperationWithBlockedSector+0x29a>
 800dddc:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f040 80e8 	bne.w	800dfb6 <cardOperationWithBlockedSector+0x29a>
	    MFRC522_Init();
 800dde6:	f7ff ff58 	bl	800dc9a <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 800ddea:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800ddee:	4619      	mov	r1, r3
 800ddf0:	2026      	movs	r0, #38	; 0x26
 800ddf2:	f7ff fd17 	bl	800d824 <MFRC522_Request>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 800ddfc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800de00:	2b00      	cmp	r3, #0
 800de02:	f040 80ce 	bne.w	800dfa2 <cardOperationWithBlockedSector+0x286>
	      status = MFRC522_Anticoll(str);
 800de06:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff fdfe 	bl	800da0c <MFRC522_Anticoll>
 800de10:	4603      	mov	r3, r0
 800de12:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 800de16:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f040 80b7 	bne.w	800df8e <cardOperationWithBlockedSector+0x272>
	        status = MFRC522_SelectTag(str);
 800de20:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff fe77 	bl	800db18 <MFRC522_SelectTag>
 800de2a:	4603      	mov	r3, r0
 800de2c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 800de30:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 80a0 	beq.w	800df7a <cardOperationWithBlockedSector+0x25e>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 800de3a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de3e:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800de42:	2102      	movs	r1, #2
 800de44:	2061      	movs	r0, #97	; 0x61
 800de46:	f7ff fea9 	bl	800db9c <MFRC522_Auth>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 800de50:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800de54:	2b00      	cmp	r3, #0
 800de56:	f040 8086 	bne.w	800df66 <cardOperationWithBlockedSector+0x24a>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 800de5a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800de5e:	4619      	mov	r1, r3
 800de60:	2002      	movs	r0, #2
 800de62:	f7ff feee 	bl	800dc42 <MFRC522_Read>
 800de66:	4603      	mov	r3, r0
 800de68:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 800de6c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800de70:	2b00      	cmp	r3, #0
 800de72:	d16e      	bne.n	800df52 <cardOperationWithBlockedSector+0x236>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 800de74:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800de78:	469c      	mov	ip, r3
 800de7a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800de7e:	469e      	mov	lr, r3
 800de80:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800de84:	461c      	mov	r4, r3
 800de86:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800de8a:	461d      	mov	r5, r3
 800de8c:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800de90:	461e      	mov	r6, r3
 800de92:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800de96:	623b      	str	r3, [r7, #32]
 800de98:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800dea2:	61bb      	str	r3, [r7, #24]
 800dea4:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800deae:	613b      	str	r3, [r7, #16]
 800deb0:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800deb4:	60fb      	str	r3, [r7, #12]
 800deb6:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800deba:	60bb      	str	r3, [r7, #8]
 800debc:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800dec0:	607b      	str	r3, [r7, #4]
 800dec2:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800dec6:	4619      	mov	r1, r3
 800dec8:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800decc:	461a      	mov	r2, r3
 800dece:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800ded2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800ded6:	930d      	str	r3, [sp, #52]	; 0x34
 800ded8:	920c      	str	r2, [sp, #48]	; 0x30
 800deda:	910b      	str	r1, [sp, #44]	; 0x2c
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	920a      	str	r2, [sp, #40]	; 0x28
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	9209      	str	r2, [sp, #36]	; 0x24
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	9208      	str	r2, [sp, #32]
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	9207      	str	r2, [sp, #28]
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	9206      	str	r2, [sp, #24]
 800def0:	69ba      	ldr	r2, [r7, #24]
 800def2:	9205      	str	r2, [sp, #20]
 800def4:	69fa      	ldr	r2, [r7, #28]
 800def6:	9204      	str	r2, [sp, #16]
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	9303      	str	r3, [sp, #12]
 800defc:	9602      	str	r6, [sp, #8]
 800defe:	9501      	str	r5, [sp, #4]
 800df00:	9400      	str	r4, [sp, #0]
 800df02:	4673      	mov	r3, lr
 800df04:	4662      	mov	r2, ip
 800df06:	4939      	ldr	r1, [pc, #228]	; (800dfec <cardOperationWithBlockedSector+0x2d0>)
 800df08:	f003 f84c 	bl	8010fa4 <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800df0c:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800df10:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800df14:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800df18:	6812      	ldr	r2, [r2, #0]
 800df1a:	18d4      	adds	r4, r2, r3
 800df1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe f913 	bl	800c14c <strlen>
 800df26:	4602      	mov	r2, r0
 800df28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df2c:	4619      	mov	r1, r3
 800df2e:	4620      	mov	r0, r4
 800df30:	f003 f822 	bl	8010f78 <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 800df34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe f907 	bl	800c14c <strlen>
 800df3e:	4603      	mov	r3, r0
 800df40:	b2da      	uxtb	r2, r3
 800df42:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800df46:	4413      	add	r3, r2
 800df48:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 800df4c:	2301      	movs	r3, #1
 800df4e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 800df52:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df56:	2b02      	cmp	r3, #2
 800df58:	d105      	bne.n	800df66 <cardOperationWithBlockedSector+0x24a>
	              led(READ_ERR);
 800df5a:	2005      	movs	r0, #5
 800df5c:	f000 f848 	bl	800dff0 <led>
	              cardIDStatus = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800df66:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d005      	beq.n	800df7a <cardOperationWithBlockedSector+0x25e>
	            led(AUTH_ERR);
 800df6e:	2004      	movs	r0, #4
 800df70:	f000 f83e 	bl	800dff0 <led>
	            cardIDStatus = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800df7a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d005      	beq.n	800df8e <cardOperationWithBlockedSector+0x272>
	          led(TAG_SELECT_ERR);
 800df82:	2003      	movs	r0, #3
 800df84:	f000 f834 	bl	800dff0 <led>
	          cardIDStatus = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 800df8e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800df92:	2b00      	cmp	r3, #0
 800df94:	d005      	beq.n	800dfa2 <cardOperationWithBlockedSector+0x286>
	        led(ANTICOL_ERR);
 800df96:	2002      	movs	r0, #2
 800df98:	f000 f82a 	bl	800dff0 <led>
	        cardIDStatus = 0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 800dfa2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d005      	beq.n	800dfb6 <cardOperationWithBlockedSector+0x29a>
	      led(REQUEST_ERR);
 800dfaa:	2001      	movs	r0, #1
 800dfac:	f000 f820 	bl	800dff0 <led>
	      cardIDStatus = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800dfb6:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d10b      	bne.n	800dfd6 <cardOperationWithBlockedSector+0x2ba>
 800dfbe:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d107      	bne.n	800dfd6 <cardOperationWithBlockedSector+0x2ba>

	      cardIDStatus = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e000      	b.n	800dfd8 <cardOperationWithBlockedSector+0x2bc>
	    }
	  return 0;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	08011b9c 	.word	0x08011b9c
 800dfe8:	08011b10 	.word	0x08011b10
 800dfec:	08011b6c 	.word	0x08011b6c

0800dff0 <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	4603      	mov	r3, r0
 800dff8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
 800dffe:	e014      	b.n	800e02a <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800e000:	2200      	movs	r2, #0
 800e002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e006:	480d      	ldr	r0, [pc, #52]	; (800e03c <led+0x4c>)
 800e008:	f000 fe54 	bl	800ecb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e00c:	2064      	movs	r0, #100	; 0x64
 800e00e:	f000 faeb 	bl	800e5e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800e012:	2201      	movs	r2, #1
 800e014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e018:	4808      	ldr	r0, [pc, #32]	; (800e03c <led+0x4c>)
 800e01a:	f000 fe4b 	bl	800ecb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e01e:	2064      	movs	r0, #100	; 0x64
 800e020:	f000 fae2 	bl	800e5e8 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 800e024:	7bfb      	ldrb	r3, [r7, #15]
 800e026:	3301      	adds	r3, #1
 800e028:	73fb      	strb	r3, [r7, #15]
 800e02a:	7bfa      	ldrb	r2, [r7, #15]
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d3e6      	bcc.n	800e000 <led+0x10>
	}
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	40011000 	.word	0x40011000

0800e040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800e046:	4b15      	ldr	r3, [pc, #84]	; (800e09c <HAL_MspInit+0x5c>)
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	4a14      	ldr	r2, [pc, #80]	; (800e09c <HAL_MspInit+0x5c>)
 800e04c:	f043 0301 	orr.w	r3, r3, #1
 800e050:	6193      	str	r3, [r2, #24]
 800e052:	4b12      	ldr	r3, [pc, #72]	; (800e09c <HAL_MspInit+0x5c>)
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	60bb      	str	r3, [r7, #8]
 800e05c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e05e:	4b0f      	ldr	r3, [pc, #60]	; (800e09c <HAL_MspInit+0x5c>)
 800e060:	69db      	ldr	r3, [r3, #28]
 800e062:	4a0e      	ldr	r2, [pc, #56]	; (800e09c <HAL_MspInit+0x5c>)
 800e064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e068:	61d3      	str	r3, [r2, #28]
 800e06a:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <HAL_MspInit+0x5c>)
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e072:	607b      	str	r3, [r7, #4]
 800e074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800e076:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <HAL_MspInit+0x60>)
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e08a:	60fb      	str	r3, [r7, #12]
 800e08c:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <HAL_MspInit+0x60>)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e092:	bf00      	nop
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	bc80      	pop	{r7}
 800e09a:	4770      	bx	lr
 800e09c:	40021000 	.word	0x40021000
 800e0a0:	40010000 	.word	0x40010000

0800e0a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0ac:	f107 0310 	add.w	r3, r7, #16
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	605a      	str	r2, [r3, #4]
 800e0b6:	609a      	str	r2, [r3, #8]
 800e0b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a15      	ldr	r2, [pc, #84]	; (800e114 <HAL_I2C_MspInit+0x70>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d123      	bne.n	800e10c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e0c4:	4b14      	ldr	r3, [pc, #80]	; (800e118 <HAL_I2C_MspInit+0x74>)
 800e0c6:	699b      	ldr	r3, [r3, #24]
 800e0c8:	4a13      	ldr	r2, [pc, #76]	; (800e118 <HAL_I2C_MspInit+0x74>)
 800e0ca:	f043 0308 	orr.w	r3, r3, #8
 800e0ce:	6193      	str	r3, [r2, #24]
 800e0d0:	4b11      	ldr	r3, [pc, #68]	; (800e118 <HAL_I2C_MspInit+0x74>)
 800e0d2:	699b      	ldr	r3, [r3, #24]
 800e0d4:	f003 0308 	and.w	r3, r3, #8
 800e0d8:	60fb      	str	r3, [r7, #12]
 800e0da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e0dc:	23c0      	movs	r3, #192	; 0xc0
 800e0de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e0e0:	2312      	movs	r3, #18
 800e0e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e0e8:	f107 0310 	add.w	r3, r7, #16
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	480b      	ldr	r0, [pc, #44]	; (800e11c <HAL_I2C_MspInit+0x78>)
 800e0f0:	f000 fc5c 	bl	800e9ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e0f4:	4b08      	ldr	r3, [pc, #32]	; (800e118 <HAL_I2C_MspInit+0x74>)
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	4a07      	ldr	r2, [pc, #28]	; (800e118 <HAL_I2C_MspInit+0x74>)
 800e0fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0fe:	61d3      	str	r3, [r2, #28]
 800e100:	4b05      	ldr	r3, [pc, #20]	; (800e118 <HAL_I2C_MspInit+0x74>)
 800e102:	69db      	ldr	r3, [r3, #28]
 800e104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e108:	60bb      	str	r3, [r7, #8]
 800e10a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e10c:	bf00      	nop
 800e10e:	3720      	adds	r7, #32
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	40005400 	.word	0x40005400
 800e118:	40021000 	.word	0x40021000
 800e11c:	40010c00 	.word	0x40010c00

0800e120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e128:	f107 0310 	add.w	r3, r7, #16
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
 800e130:	605a      	str	r2, [r3, #4]
 800e132:	609a      	str	r2, [r3, #8]
 800e134:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a1b      	ldr	r2, [pc, #108]	; (800e1a8 <HAL_SPI_MspInit+0x88>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d12f      	bne.n	800e1a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e140:	4b1a      	ldr	r3, [pc, #104]	; (800e1ac <HAL_SPI_MspInit+0x8c>)
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	4a19      	ldr	r2, [pc, #100]	; (800e1ac <HAL_SPI_MspInit+0x8c>)
 800e146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e14a:	6193      	str	r3, [r2, #24]
 800e14c:	4b17      	ldr	r3, [pc, #92]	; (800e1ac <HAL_SPI_MspInit+0x8c>)
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e154:	60fb      	str	r3, [r7, #12]
 800e156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e158:	4b14      	ldr	r3, [pc, #80]	; (800e1ac <HAL_SPI_MspInit+0x8c>)
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	4a13      	ldr	r2, [pc, #76]	; (800e1ac <HAL_SPI_MspInit+0x8c>)
 800e15e:	f043 0304 	orr.w	r3, r3, #4
 800e162:	6193      	str	r3, [r2, #24]
 800e164:	4b11      	ldr	r3, [pc, #68]	; (800e1ac <HAL_SPI_MspInit+0x8c>)
 800e166:	699b      	ldr	r3, [r3, #24]
 800e168:	f003 0304 	and.w	r3, r3, #4
 800e16c:	60bb      	str	r3, [r7, #8]
 800e16e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800e170:	23a0      	movs	r3, #160	; 0xa0
 800e172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e174:	2302      	movs	r3, #2
 800e176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e178:	2303      	movs	r3, #3
 800e17a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e17c:	f107 0310 	add.w	r3, r7, #16
 800e180:	4619      	mov	r1, r3
 800e182:	480b      	ldr	r0, [pc, #44]	; (800e1b0 <HAL_SPI_MspInit+0x90>)
 800e184:	f000 fc12 	bl	800e9ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e18c:	2300      	movs	r3, #0
 800e18e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e190:	2300      	movs	r3, #0
 800e192:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e194:	f107 0310 	add.w	r3, r7, #16
 800e198:	4619      	mov	r1, r3
 800e19a:	4805      	ldr	r0, [pc, #20]	; (800e1b0 <HAL_SPI_MspInit+0x90>)
 800e19c:	f000 fc06 	bl	800e9ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e1a0:	bf00      	nop
 800e1a2:	3720      	adds	r7, #32
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	40013000 	.word	0x40013000
 800e1ac:	40021000 	.word	0x40021000
 800e1b0:	40010800 	.word	0x40010800

0800e1b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08a      	sub	sp, #40	; 0x28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1bc:	f107 0318 	add.w	r3, r7, #24
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	605a      	str	r2, [r3, #4]
 800e1c6:	609a      	str	r2, [r3, #8]
 800e1c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a3b      	ldr	r2, [pc, #236]	; (800e2bc <HAL_UART_MspInit+0x108>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d13a      	bne.n	800e24a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e1d4:	4b3a      	ldr	r3, [pc, #232]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	4a39      	ldr	r2, [pc, #228]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e1da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1de:	6193      	str	r3, [r2, #24]
 800e1e0:	4b37      	ldr	r3, [pc, #220]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1e8:	617b      	str	r3, [r7, #20]
 800e1ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1ec:	4b34      	ldr	r3, [pc, #208]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	4a33      	ldr	r2, [pc, #204]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e1f2:	f043 0304 	orr.w	r3, r3, #4
 800e1f6:	6193      	str	r3, [r2, #24]
 800e1f8:	4b31      	ldr	r3, [pc, #196]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	613b      	str	r3, [r7, #16]
 800e202:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e20a:	2302      	movs	r3, #2
 800e20c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e20e:	2303      	movs	r3, #3
 800e210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e212:	f107 0318 	add.w	r3, r7, #24
 800e216:	4619      	mov	r1, r3
 800e218:	482a      	ldr	r0, [pc, #168]	; (800e2c4 <HAL_UART_MspInit+0x110>)
 800e21a:	f000 fbc7 	bl	800e9ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e224:	2300      	movs	r3, #0
 800e226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e22c:	f107 0318 	add.w	r3, r7, #24
 800e230:	4619      	mov	r1, r3
 800e232:	4824      	ldr	r0, [pc, #144]	; (800e2c4 <HAL_UART_MspInit+0x110>)
 800e234:	f000 fbba 	bl	800e9ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e238:	2200      	movs	r2, #0
 800e23a:	2100      	movs	r1, #0
 800e23c:	2025      	movs	r0, #37	; 0x25
 800e23e:	f000 face 	bl	800e7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e242:	2025      	movs	r0, #37	; 0x25
 800e244:	f000 fae7 	bl	800e816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e248:	e034      	b.n	800e2b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a1e      	ldr	r2, [pc, #120]	; (800e2c8 <HAL_UART_MspInit+0x114>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d12f      	bne.n	800e2b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e254:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	4a19      	ldr	r2, [pc, #100]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e25e:	61d3      	str	r3, [r2, #28]
 800e260:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e262:	69db      	ldr	r3, [r3, #28]
 800e264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e26c:	4b14      	ldr	r3, [pc, #80]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	4a13      	ldr	r2, [pc, #76]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e272:	f043 0304 	orr.w	r3, r3, #4
 800e276:	6193      	str	r3, [r2, #24]
 800e278:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <HAL_UART_MspInit+0x10c>)
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	f003 0304 	and.w	r3, r3, #4
 800e280:	60bb      	str	r3, [r7, #8]
 800e282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e284:	2304      	movs	r3, #4
 800e286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e288:	2302      	movs	r3, #2
 800e28a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e28c:	2303      	movs	r3, #3
 800e28e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e290:	f107 0318 	add.w	r3, r7, #24
 800e294:	4619      	mov	r1, r3
 800e296:	480b      	ldr	r0, [pc, #44]	; (800e2c4 <HAL_UART_MspInit+0x110>)
 800e298:	f000 fb88 	bl	800e9ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e29c:	2308      	movs	r3, #8
 800e29e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2a8:	f107 0318 	add.w	r3, r7, #24
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4805      	ldr	r0, [pc, #20]	; (800e2c4 <HAL_UART_MspInit+0x110>)
 800e2b0:	f000 fb7c 	bl	800e9ac <HAL_GPIO_Init>
}
 800e2b4:	bf00      	nop
 800e2b6:	3728      	adds	r7, #40	; 0x28
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	40013800 	.word	0x40013800
 800e2c0:	40021000 	.word	0x40021000
 800e2c4:	40010800 	.word	0x40010800
 800e2c8:	40004400 	.word	0x40004400

0800e2cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e2d0:	e7fe      	b.n	800e2d0 <NMI_Handler+0x4>

0800e2d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	jumpToAddress(0x08000000);
 800e2d6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800e2da:	f7ff f9a8 	bl	800d62e <jumpToAddress>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e2de:	e7fe      	b.n	800e2de <HardFault_Handler+0xc>

0800e2e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e2e4:	e7fe      	b.n	800e2e4 <MemManage_Handler+0x4>

0800e2e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e2ea:	e7fe      	b.n	800e2ea <BusFault_Handler+0x4>

0800e2ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e2f0:	e7fe      	b.n	800e2f0 <UsageFault_Handler+0x4>

0800e2f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e2f6:	bf00      	nop
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bc80      	pop	{r7}
 800e2fc:	4770      	bx	lr

0800e2fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e2fe:	b480      	push	{r7}
 800e300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e302:	bf00      	nop
 800e304:	46bd      	mov	sp, r7
 800e306:	bc80      	pop	{r7}
 800e308:	4770      	bx	lr

0800e30a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e30a:	b480      	push	{r7}
 800e30c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e30e:	bf00      	nop
 800e310:	46bd      	mov	sp, r7
 800e312:	bc80      	pop	{r7}
 800e314:	4770      	bx	lr

0800e316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e31a:	f000 f949 	bl	800e5b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e31e:	bf00      	nop
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e328:	4802      	ldr	r0, [pc, #8]	; (800e334 <USART1_IRQHandler+0x10>)
 800e32a:	f002 f9cf 	bl	80106cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e32e:	bf00      	nop
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	200003fc 	.word	0x200003fc

0800e338 <AppruveSound>:

#include "stm32f1xx_hal.h"
#include "switchSounds.h"
#include "main.h"

void AppruveSound() {
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e33c:	2101      	movs	r1, #1
 800e33e:	4815      	ldr	r0, [pc, #84]	; (800e394 <AppruveSound+0x5c>)
 800e340:	f000 fcd0 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e344:	2050      	movs	r0, #80	; 0x50
 800e346:	f000 f94f 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e34a:	2101      	movs	r1, #1
 800e34c:	4811      	ldr	r0, [pc, #68]	; (800e394 <AppruveSound+0x5c>)
 800e34e:	f000 fcc9 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e352:	2050      	movs	r0, #80	; 0x50
 800e354:	f000 f948 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e358:	2101      	movs	r1, #1
 800e35a:	480e      	ldr	r0, [pc, #56]	; (800e394 <AppruveSound+0x5c>)
 800e35c:	f000 fcc2 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e360:	2050      	movs	r0, #80	; 0x50
 800e362:	f000 f941 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e366:	2101      	movs	r1, #1
 800e368:	480a      	ldr	r0, [pc, #40]	; (800e394 <AppruveSound+0x5c>)
 800e36a:	f000 fcbb 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e36e:	2050      	movs	r0, #80	; 0x50
 800e370:	f000 f93a 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e374:	2101      	movs	r1, #1
 800e376:	4807      	ldr	r0, [pc, #28]	; (800e394 <AppruveSound+0x5c>)
 800e378:	f000 fcb4 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e37c:	2050      	movs	r0, #80	; 0x50
 800e37e:	f000 f933 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e382:	2101      	movs	r1, #1
 800e384:	4803      	ldr	r0, [pc, #12]	; (800e394 <AppruveSound+0x5c>)
 800e386:	f000 fcad 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e38a:	2050      	movs	r0, #80	; 0x50
 800e38c:	f000 f92c 	bl	800e5e8 <HAL_Delay>
}
 800e390:	bf00      	nop
 800e392:	bd80      	pop	{r7, pc}
 800e394:	40010c00 	.word	0x40010c00

0800e398 <RelaySwitch>:
void RelaySwitch() {
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800e39c:	2102      	movs	r1, #2
 800e39e:	4806      	ldr	r0, [pc, #24]	; (800e3b8 <RelaySwitch+0x20>)
 800e3a0:	f000 fca0 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e3a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3a8:	f000 f91e 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800e3ac:	2102      	movs	r1, #2
 800e3ae:	4802      	ldr	r0, [pc, #8]	; (800e3b8 <RelaySwitch+0x20>)
 800e3b0:	f000 fc98 	bl	800ece4 <HAL_GPIO_TogglePin>

}
 800e3b4:	bf00      	nop
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	40010c00 	.word	0x40010c00

0800e3bc <ErrorSound>:
void ErrorSound() {
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	480e      	ldr	r0, [pc, #56]	; (800e3fc <ErrorSound+0x40>)
 800e3c4:	f000 fc8e 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e3c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3cc:	f000 f90c 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	480a      	ldr	r0, [pc, #40]	; (800e3fc <ErrorSound+0x40>)
 800e3d4:	f000 fc86 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800e3d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e3dc:	f000 f904 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	4806      	ldr	r0, [pc, #24]	; (800e3fc <ErrorSound+0x40>)
 800e3e4:	f000 fc7e 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e3e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3ec:	f000 f8fc 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	4802      	ldr	r0, [pc, #8]	; (800e3fc <ErrorSound+0x40>)
 800e3f4:	f000 fc76 	bl	800ece4 <HAL_GPIO_TogglePin>

}
 800e3f8:	bf00      	nop
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	40010c00 	.word	0x40010c00

0800e400 <CardReadSound>:
void CardReadSound() {
 800e400:	b580      	push	{r7, lr}
 800e402:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e404:	2101      	movs	r1, #1
 800e406:	4806      	ldr	r0, [pc, #24]	; (800e420 <CardReadSound+0x20>)
 800e408:	f000 fc6c 	bl	800ece4 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800e40c:	2032      	movs	r0, #50	; 0x32
 800e40e:	f000 f8eb 	bl	800e5e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e412:	2101      	movs	r1, #1
 800e414:	4802      	ldr	r0, [pc, #8]	; (800e420 <CardReadSound+0x20>)
 800e416:	f000 fc65 	bl	800ece4 <HAL_GPIO_TogglePin>

}
 800e41a:	bf00      	nop
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	40010c00 	.word	0x40010c00

0800e424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e42c:	4a14      	ldr	r2, [pc, #80]	; (800e480 <_sbrk+0x5c>)
 800e42e:	4b15      	ldr	r3, [pc, #84]	; (800e484 <_sbrk+0x60>)
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e438:	4b13      	ldr	r3, [pc, #76]	; (800e488 <_sbrk+0x64>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e440:	4b11      	ldr	r3, [pc, #68]	; (800e488 <_sbrk+0x64>)
 800e442:	4a12      	ldr	r2, [pc, #72]	; (800e48c <_sbrk+0x68>)
 800e444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e446:	4b10      	ldr	r3, [pc, #64]	; (800e488 <_sbrk+0x64>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4413      	add	r3, r2
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	429a      	cmp	r2, r3
 800e452:	d207      	bcs.n	800e464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e454:	f002 fd66 	bl	8010f24 <__errno>
 800e458:	4603      	mov	r3, r0
 800e45a:	220c      	movs	r2, #12
 800e45c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e45e:	f04f 33ff 	mov.w	r3, #4294967295
 800e462:	e009      	b.n	800e478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e464:	4b08      	ldr	r3, [pc, #32]	; (800e488 <_sbrk+0x64>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e46a:	4b07      	ldr	r3, [pc, #28]	; (800e488 <_sbrk+0x64>)
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4413      	add	r3, r2
 800e472:	4a05      	ldr	r2, [pc, #20]	; (800e488 <_sbrk+0x64>)
 800e474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e476:	68fb      	ldr	r3, [r7, #12]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	20005000 	.word	0x20005000
 800e484:	00000400 	.word	0x00000400
 800e488:	20000484 	.word	0x20000484
 800e48c:	200004a0 	.word	0x200004a0

0800e490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e490:	b480      	push	{r7}
 800e492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e494:	bf00      	nop
 800e496:	46bd      	mov	sp, r7
 800e498:	bc80      	pop	{r7}
 800e49a:	4770      	bx	lr

0800e49c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e49c:	480c      	ldr	r0, [pc, #48]	; (800e4d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e49e:	490d      	ldr	r1, [pc, #52]	; (800e4d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e4a0:	4a0d      	ldr	r2, [pc, #52]	; (800e4d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e4a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e4a4:	e002      	b.n	800e4ac <LoopCopyDataInit>

0800e4a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e4a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e4a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e4aa:	3304      	adds	r3, #4

0800e4ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e4ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e4ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e4b0:	d3f9      	bcc.n	800e4a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e4b2:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e4b4:	4c0a      	ldr	r4, [pc, #40]	; (800e4e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800e4b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e4b8:	e001      	b.n	800e4be <LoopFillZerobss>

0800e4ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e4ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e4bc:	3204      	adds	r2, #4

0800e4be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e4be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e4c0:	d3fb      	bcc.n	800e4ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e4c2:	f7ff ffe5 	bl	800e490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e4c6:	f002 fd33 	bl	8010f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e4ca:	f7fe fcdf 	bl	800ce8c <main>
  bx lr
 800e4ce:	4770      	bx	lr
  ldr r0, =_sdata
 800e4d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e4d4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800e4d8:	08011dc0 	.word	0x08011dc0
  ldr r2, =_sbss
 800e4dc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 800e4e0:	2000049c 	.word	0x2000049c

0800e4e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e4e4:	e7fe      	b.n	800e4e4 <ADC1_2_IRQHandler>
	...

0800e4e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e4ec:	4b08      	ldr	r3, [pc, #32]	; (800e510 <HAL_Init+0x28>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a07      	ldr	r2, [pc, #28]	; (800e510 <HAL_Init+0x28>)
 800e4f2:	f043 0310 	orr.w	r3, r3, #16
 800e4f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e4f8:	2003      	movs	r0, #3
 800e4fa:	f000 f965 	bl	800e7c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e4fe:	200f      	movs	r0, #15
 800e500:	f000 f826 	bl	800e550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e504:	f7ff fd9c 	bl	800e040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e508:	2300      	movs	r3, #0
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	40022000 	.word	0x40022000

0800e514 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800e518:	4b09      	ldr	r3, [pc, #36]	; (800e540 <HAL_DeInit+0x2c>)
 800e51a:	f04f 32ff 	mov.w	r2, #4294967295
 800e51e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 800e520:	4b07      	ldr	r3, [pc, #28]	; (800e540 <HAL_DeInit+0x2c>)
 800e522:	2200      	movs	r2, #0
 800e524:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800e526:	4b06      	ldr	r3, [pc, #24]	; (800e540 <HAL_DeInit+0x2c>)
 800e528:	f04f 32ff 	mov.w	r2, #4294967295
 800e52c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800e52e:	4b04      	ldr	r3, [pc, #16]	; (800e540 <HAL_DeInit+0x2c>)
 800e530:	2200      	movs	r2, #0
 800e532:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800e534:	f000 f806 	bl	800e544 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800e538:	2300      	movs	r3, #0
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	40021000 	.word	0x40021000

0800e544 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800e544:	b480      	push	{r7}
 800e546:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800e548:	bf00      	nop
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bc80      	pop	{r7}
 800e54e:	4770      	bx	lr

0800e550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e558:	4b12      	ldr	r3, [pc, #72]	; (800e5a4 <HAL_InitTick+0x54>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	4b12      	ldr	r3, [pc, #72]	; (800e5a8 <HAL_InitTick+0x58>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	4619      	mov	r1, r3
 800e562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e566:	fbb3 f3f1 	udiv	r3, r3, r1
 800e56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 f95f 	bl	800e832 <HAL_SYSTICK_Config>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	e00e      	b.n	800e59c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2b0f      	cmp	r3, #15
 800e582:	d80a      	bhi.n	800e59a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e584:	2200      	movs	r2, #0
 800e586:	6879      	ldr	r1, [r7, #4]
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	f000 f927 	bl	800e7de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e590:	4a06      	ldr	r2, [pc, #24]	; (800e5ac <HAL_InitTick+0x5c>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	e000      	b.n	800e59c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	200000c4 	.word	0x200000c4
 800e5a8:	200000cc 	.word	0x200000cc
 800e5ac:	200000c8 	.word	0x200000c8

0800e5b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <HAL_IncTick+0x1c>)
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <HAL_IncTick+0x20>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4413      	add	r3, r2
 800e5c0:	4a03      	ldr	r2, [pc, #12]	; (800e5d0 <HAL_IncTick+0x20>)
 800e5c2:	6013      	str	r3, [r2, #0]
}
 800e5c4:	bf00      	nop
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bc80      	pop	{r7}
 800e5ca:	4770      	bx	lr
 800e5cc:	200000cc 	.word	0x200000cc
 800e5d0:	20000488 	.word	0x20000488

0800e5d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	af00      	add	r7, sp, #0
  return uwTick;
 800e5d8:	4b02      	ldr	r3, [pc, #8]	; (800e5e4 <HAL_GetTick+0x10>)
 800e5da:	681b      	ldr	r3, [r3, #0]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bc80      	pop	{r7}
 800e5e2:	4770      	bx	lr
 800e5e4:	20000488 	.word	0x20000488

0800e5e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e5f0:	f7ff fff0 	bl	800e5d4 <HAL_GetTick>
 800e5f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e600:	d005      	beq.n	800e60e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e602:	4b0a      	ldr	r3, [pc, #40]	; (800e62c <HAL_Delay+0x44>)
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	4413      	add	r3, r2
 800e60c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e60e:	bf00      	nop
 800e610:	f7ff ffe0 	bl	800e5d4 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d8f7      	bhi.n	800e610 <HAL_Delay+0x28>
  {
  }
}
 800e620:	bf00      	nop
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	200000cc 	.word	0x200000cc

0800e630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f003 0307 	and.w	r3, r3, #7
 800e63e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e640:	4b0c      	ldr	r3, [pc, #48]	; (800e674 <__NVIC_SetPriorityGrouping+0x44>)
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e64c:	4013      	ands	r3, r2
 800e64e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e65c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e662:	4a04      	ldr	r2, [pc, #16]	; (800e674 <__NVIC_SetPriorityGrouping+0x44>)
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	60d3      	str	r3, [r2, #12]
}
 800e668:	bf00      	nop
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bc80      	pop	{r7}
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop
 800e674:	e000ed00 	.word	0xe000ed00

0800e678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e678:	b480      	push	{r7}
 800e67a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e67c:	4b04      	ldr	r3, [pc, #16]	; (800e690 <__NVIC_GetPriorityGrouping+0x18>)
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	0a1b      	lsrs	r3, r3, #8
 800e682:	f003 0307 	and.w	r3, r3, #7
}
 800e686:	4618      	mov	r0, r3
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc80      	pop	{r7}
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	e000ed00 	.word	0xe000ed00

0800e694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	4603      	mov	r3, r0
 800e69c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e69e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	db0b      	blt.n	800e6be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	f003 021f 	and.w	r2, r3, #31
 800e6ac:	4906      	ldr	r1, [pc, #24]	; (800e6c8 <__NVIC_EnableIRQ+0x34>)
 800e6ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6b2:	095b      	lsrs	r3, r3, #5
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	fa00 f202 	lsl.w	r2, r0, r2
 800e6ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e6be:	bf00      	nop
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bc80      	pop	{r7}
 800e6c6:	4770      	bx	lr
 800e6c8:	e000e100 	.word	0xe000e100

0800e6cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	6039      	str	r1, [r7, #0]
 800e6d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e6d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	db0a      	blt.n	800e6f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	490c      	ldr	r1, [pc, #48]	; (800e718 <__NVIC_SetPriority+0x4c>)
 800e6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ea:	0112      	lsls	r2, r2, #4
 800e6ec:	b2d2      	uxtb	r2, r2
 800e6ee:	440b      	add	r3, r1
 800e6f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e6f4:	e00a      	b.n	800e70c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	4908      	ldr	r1, [pc, #32]	; (800e71c <__NVIC_SetPriority+0x50>)
 800e6fc:	79fb      	ldrb	r3, [r7, #7]
 800e6fe:	f003 030f 	and.w	r3, r3, #15
 800e702:	3b04      	subs	r3, #4
 800e704:	0112      	lsls	r2, r2, #4
 800e706:	b2d2      	uxtb	r2, r2
 800e708:	440b      	add	r3, r1
 800e70a:	761a      	strb	r2, [r3, #24]
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	bc80      	pop	{r7}
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	e000e100 	.word	0xe000e100
 800e71c:	e000ed00 	.word	0xe000ed00

0800e720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e720:	b480      	push	{r7}
 800e722:	b089      	sub	sp, #36	; 0x24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f003 0307 	and.w	r3, r3, #7
 800e732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	f1c3 0307 	rsb	r3, r3, #7
 800e73a:	2b04      	cmp	r3, #4
 800e73c:	bf28      	it	cs
 800e73e:	2304      	movcs	r3, #4
 800e740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	3304      	adds	r3, #4
 800e746:	2b06      	cmp	r3, #6
 800e748:	d902      	bls.n	800e750 <NVIC_EncodePriority+0x30>
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	3b03      	subs	r3, #3
 800e74e:	e000      	b.n	800e752 <NVIC_EncodePriority+0x32>
 800e750:	2300      	movs	r3, #0
 800e752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e754:	f04f 32ff 	mov.w	r2, #4294967295
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	fa02 f303 	lsl.w	r3, r2, r3
 800e75e:	43da      	mvns	r2, r3
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	401a      	ands	r2, r3
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e768:	f04f 31ff 	mov.w	r1, #4294967295
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	fa01 f303 	lsl.w	r3, r1, r3
 800e772:	43d9      	mvns	r1, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e778:	4313      	orrs	r3, r2
         );
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3724      	adds	r7, #36	; 0x24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bc80      	pop	{r7}
 800e782:	4770      	bx	lr

0800e784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	3b01      	subs	r3, #1
 800e790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e794:	d301      	bcc.n	800e79a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e796:	2301      	movs	r3, #1
 800e798:	e00f      	b.n	800e7ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e79a:	4a0a      	ldr	r2, [pc, #40]	; (800e7c4 <SysTick_Config+0x40>)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e7a2:	210f      	movs	r1, #15
 800e7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a8:	f7ff ff90 	bl	800e6cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <SysTick_Config+0x40>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e7b2:	4b04      	ldr	r3, [pc, #16]	; (800e7c4 <SysTick_Config+0x40>)
 800e7b4:	2207      	movs	r2, #7
 800e7b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e7b8:	2300      	movs	r3, #0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	e000e010 	.word	0xe000e010

0800e7c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff ff2d 	bl	800e630 <__NVIC_SetPriorityGrouping>
}
 800e7d6:	bf00      	nop
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b086      	sub	sp, #24
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	60b9      	str	r1, [r7, #8]
 800e7e8:	607a      	str	r2, [r7, #4]
 800e7ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e7f0:	f7ff ff42 	bl	800e678 <__NVIC_GetPriorityGrouping>
 800e7f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	68b9      	ldr	r1, [r7, #8]
 800e7fa:	6978      	ldr	r0, [r7, #20]
 800e7fc:	f7ff ff90 	bl	800e720 <NVIC_EncodePriority>
 800e800:	4602      	mov	r2, r0
 800e802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e806:	4611      	mov	r1, r2
 800e808:	4618      	mov	r0, r3
 800e80a:	f7ff ff5f 	bl	800e6cc <__NVIC_SetPriority>
}
 800e80e:	bf00      	nop
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b082      	sub	sp, #8
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	4603      	mov	r3, r0
 800e81e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e824:	4618      	mov	r0, r3
 800e826:	f7ff ff35 	bl	800e694 <__NVIC_EnableIRQ>
}
 800e82a:	bf00      	nop
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff ffa2 	bl	800e784 <SysTick_Config>
 800e840:	4603      	mov	r3, r0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e84a:	b480      	push	{r7}
 800e84c:	b085      	sub	sp, #20
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d008      	beq.n	800e872 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2204      	movs	r2, #4
 800e864:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	e020      	b.n	800e8b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f022 020e 	bic.w	r2, r2, #14
 800e880:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f022 0201 	bic.w	r2, r2, #1
 800e890:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89a:	2101      	movs	r1, #1
 800e89c:	fa01 f202 	lsl.w	r2, r1, r2
 800e8a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3714      	adds	r7, #20
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bc80      	pop	{r7}
 800e8bc:	4770      	bx	lr
	...

0800e8c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	d005      	beq.n	800e8e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2204      	movs	r2, #4
 800e8da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	73fb      	strb	r3, [r7, #15]
 800e8e0:	e051      	b.n	800e986 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f022 020e 	bic.w	r2, r2, #14
 800e8f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f022 0201 	bic.w	r2, r2, #1
 800e900:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a22      	ldr	r2, [pc, #136]	; (800e990 <HAL_DMA_Abort_IT+0xd0>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d029      	beq.n	800e960 <HAL_DMA_Abort_IT+0xa0>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a20      	ldr	r2, [pc, #128]	; (800e994 <HAL_DMA_Abort_IT+0xd4>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d022      	beq.n	800e95c <HAL_DMA_Abort_IT+0x9c>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a1f      	ldr	r2, [pc, #124]	; (800e998 <HAL_DMA_Abort_IT+0xd8>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d01a      	beq.n	800e956 <HAL_DMA_Abort_IT+0x96>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a1d      	ldr	r2, [pc, #116]	; (800e99c <HAL_DMA_Abort_IT+0xdc>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d012      	beq.n	800e950 <HAL_DMA_Abort_IT+0x90>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a1c      	ldr	r2, [pc, #112]	; (800e9a0 <HAL_DMA_Abort_IT+0xe0>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d00a      	beq.n	800e94a <HAL_DMA_Abort_IT+0x8a>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a1a      	ldr	r2, [pc, #104]	; (800e9a4 <HAL_DMA_Abort_IT+0xe4>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d102      	bne.n	800e944 <HAL_DMA_Abort_IT+0x84>
 800e93e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e942:	e00e      	b.n	800e962 <HAL_DMA_Abort_IT+0xa2>
 800e944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e948:	e00b      	b.n	800e962 <HAL_DMA_Abort_IT+0xa2>
 800e94a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e94e:	e008      	b.n	800e962 <HAL_DMA_Abort_IT+0xa2>
 800e950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e954:	e005      	b.n	800e962 <HAL_DMA_Abort_IT+0xa2>
 800e956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e95a:	e002      	b.n	800e962 <HAL_DMA_Abort_IT+0xa2>
 800e95c:	2310      	movs	r3, #16
 800e95e:	e000      	b.n	800e962 <HAL_DMA_Abort_IT+0xa2>
 800e960:	2301      	movs	r3, #1
 800e962:	4a11      	ldr	r2, [pc, #68]	; (800e9a8 <HAL_DMA_Abort_IT+0xe8>)
 800e964:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2201      	movs	r2, #1
 800e96a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d003      	beq.n	800e986 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	4798      	blx	r3
    } 
  }
  return status;
 800e986:	7bfb      	ldrb	r3, [r7, #15]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3710      	adds	r7, #16
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	40020008 	.word	0x40020008
 800e994:	4002001c 	.word	0x4002001c
 800e998:	40020030 	.word	0x40020030
 800e99c:	40020044 	.word	0x40020044
 800e9a0:	40020058 	.word	0x40020058
 800e9a4:	4002006c 	.word	0x4002006c
 800e9a8:	40020000 	.word	0x40020000

0800e9ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b08b      	sub	sp, #44	; 0x2c
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e9be:	e169      	b.n	800ec94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	69fa      	ldr	r2, [r7, #28]
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	f040 8158 	bne.w	800ec8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	4a9a      	ldr	r2, [pc, #616]	; (800ec4c <HAL_GPIO_Init+0x2a0>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d05e      	beq.n	800eaa6 <HAL_GPIO_Init+0xfa>
 800e9e8:	4a98      	ldr	r2, [pc, #608]	; (800ec4c <HAL_GPIO_Init+0x2a0>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d875      	bhi.n	800eada <HAL_GPIO_Init+0x12e>
 800e9ee:	4a98      	ldr	r2, [pc, #608]	; (800ec50 <HAL_GPIO_Init+0x2a4>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d058      	beq.n	800eaa6 <HAL_GPIO_Init+0xfa>
 800e9f4:	4a96      	ldr	r2, [pc, #600]	; (800ec50 <HAL_GPIO_Init+0x2a4>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d86f      	bhi.n	800eada <HAL_GPIO_Init+0x12e>
 800e9fa:	4a96      	ldr	r2, [pc, #600]	; (800ec54 <HAL_GPIO_Init+0x2a8>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d052      	beq.n	800eaa6 <HAL_GPIO_Init+0xfa>
 800ea00:	4a94      	ldr	r2, [pc, #592]	; (800ec54 <HAL_GPIO_Init+0x2a8>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d869      	bhi.n	800eada <HAL_GPIO_Init+0x12e>
 800ea06:	4a94      	ldr	r2, [pc, #592]	; (800ec58 <HAL_GPIO_Init+0x2ac>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d04c      	beq.n	800eaa6 <HAL_GPIO_Init+0xfa>
 800ea0c:	4a92      	ldr	r2, [pc, #584]	; (800ec58 <HAL_GPIO_Init+0x2ac>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d863      	bhi.n	800eada <HAL_GPIO_Init+0x12e>
 800ea12:	4a92      	ldr	r2, [pc, #584]	; (800ec5c <HAL_GPIO_Init+0x2b0>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d046      	beq.n	800eaa6 <HAL_GPIO_Init+0xfa>
 800ea18:	4a90      	ldr	r2, [pc, #576]	; (800ec5c <HAL_GPIO_Init+0x2b0>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d85d      	bhi.n	800eada <HAL_GPIO_Init+0x12e>
 800ea1e:	2b12      	cmp	r3, #18
 800ea20:	d82a      	bhi.n	800ea78 <HAL_GPIO_Init+0xcc>
 800ea22:	2b12      	cmp	r3, #18
 800ea24:	d859      	bhi.n	800eada <HAL_GPIO_Init+0x12e>
 800ea26:	a201      	add	r2, pc, #4	; (adr r2, 800ea2c <HAL_GPIO_Init+0x80>)
 800ea28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2c:	0800eaa7 	.word	0x0800eaa7
 800ea30:	0800ea81 	.word	0x0800ea81
 800ea34:	0800ea93 	.word	0x0800ea93
 800ea38:	0800ead5 	.word	0x0800ead5
 800ea3c:	0800eadb 	.word	0x0800eadb
 800ea40:	0800eadb 	.word	0x0800eadb
 800ea44:	0800eadb 	.word	0x0800eadb
 800ea48:	0800eadb 	.word	0x0800eadb
 800ea4c:	0800eadb 	.word	0x0800eadb
 800ea50:	0800eadb 	.word	0x0800eadb
 800ea54:	0800eadb 	.word	0x0800eadb
 800ea58:	0800eadb 	.word	0x0800eadb
 800ea5c:	0800eadb 	.word	0x0800eadb
 800ea60:	0800eadb 	.word	0x0800eadb
 800ea64:	0800eadb 	.word	0x0800eadb
 800ea68:	0800eadb 	.word	0x0800eadb
 800ea6c:	0800eadb 	.word	0x0800eadb
 800ea70:	0800ea89 	.word	0x0800ea89
 800ea74:	0800ea9d 	.word	0x0800ea9d
 800ea78:	4a79      	ldr	r2, [pc, #484]	; (800ec60 <HAL_GPIO_Init+0x2b4>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d013      	beq.n	800eaa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ea7e:	e02c      	b.n	800eada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	623b      	str	r3, [r7, #32]
          break;
 800ea86:	e029      	b.n	800eadc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	623b      	str	r3, [r7, #32]
          break;
 800ea90:	e024      	b.n	800eadc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	3308      	adds	r3, #8
 800ea98:	623b      	str	r3, [r7, #32]
          break;
 800ea9a:	e01f      	b.n	800eadc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	330c      	adds	r3, #12
 800eaa2:	623b      	str	r3, [r7, #32]
          break;
 800eaa4:	e01a      	b.n	800eadc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d102      	bne.n	800eab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800eaae:	2304      	movs	r3, #4
 800eab0:	623b      	str	r3, [r7, #32]
          break;
 800eab2:	e013      	b.n	800eadc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d105      	bne.n	800eac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800eabc:	2308      	movs	r3, #8
 800eabe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	611a      	str	r2, [r3, #16]
          break;
 800eac6:	e009      	b.n	800eadc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800eac8:	2308      	movs	r3, #8
 800eaca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	615a      	str	r2, [r3, #20]
          break;
 800ead2:	e003      	b.n	800eadc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800ead4:	2300      	movs	r3, #0
 800ead6:	623b      	str	r3, [r7, #32]
          break;
 800ead8:	e000      	b.n	800eadc <HAL_GPIO_Init+0x130>
          break;
 800eada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	2bff      	cmp	r3, #255	; 0xff
 800eae0:	d801      	bhi.n	800eae6 <HAL_GPIO_Init+0x13a>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	e001      	b.n	800eaea <HAL_GPIO_Init+0x13e>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	3304      	adds	r3, #4
 800eaea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	2bff      	cmp	r3, #255	; 0xff
 800eaf0:	d802      	bhi.n	800eaf8 <HAL_GPIO_Init+0x14c>
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	e002      	b.n	800eafe <HAL_GPIO_Init+0x152>
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	3b08      	subs	r3, #8
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	210f      	movs	r1, #15
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	fa01 f303 	lsl.w	r3, r1, r3
 800eb0c:	43db      	mvns	r3, r3
 800eb0e:	401a      	ands	r2, r3
 800eb10:	6a39      	ldr	r1, [r7, #32]
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	fa01 f303 	lsl.w	r3, r1, r3
 800eb18:	431a      	orrs	r2, r3
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f000 80b1 	beq.w	800ec8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800eb2c:	4b4d      	ldr	r3, [pc, #308]	; (800ec64 <HAL_GPIO_Init+0x2b8>)
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	4a4c      	ldr	r2, [pc, #304]	; (800ec64 <HAL_GPIO_Init+0x2b8>)
 800eb32:	f043 0301 	orr.w	r3, r3, #1
 800eb36:	6193      	str	r3, [r2, #24]
 800eb38:	4b4a      	ldr	r3, [pc, #296]	; (800ec64 <HAL_GPIO_Init+0x2b8>)
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	60bb      	str	r3, [r7, #8]
 800eb42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800eb44:	4a48      	ldr	r2, [pc, #288]	; (800ec68 <HAL_GPIO_Init+0x2bc>)
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	089b      	lsrs	r3, r3, #2
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800eb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb54:	f003 0303 	and.w	r3, r3, #3
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	220f      	movs	r2, #15
 800eb5c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb60:	43db      	mvns	r3, r3
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	4013      	ands	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a40      	ldr	r2, [pc, #256]	; (800ec6c <HAL_GPIO_Init+0x2c0>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d013      	beq.n	800eb98 <HAL_GPIO_Init+0x1ec>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a3f      	ldr	r2, [pc, #252]	; (800ec70 <HAL_GPIO_Init+0x2c4>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d00d      	beq.n	800eb94 <HAL_GPIO_Init+0x1e8>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a3e      	ldr	r2, [pc, #248]	; (800ec74 <HAL_GPIO_Init+0x2c8>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d007      	beq.n	800eb90 <HAL_GPIO_Init+0x1e4>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a3d      	ldr	r2, [pc, #244]	; (800ec78 <HAL_GPIO_Init+0x2cc>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d101      	bne.n	800eb8c <HAL_GPIO_Init+0x1e0>
 800eb88:	2303      	movs	r3, #3
 800eb8a:	e006      	b.n	800eb9a <HAL_GPIO_Init+0x1ee>
 800eb8c:	2304      	movs	r3, #4
 800eb8e:	e004      	b.n	800eb9a <HAL_GPIO_Init+0x1ee>
 800eb90:	2302      	movs	r3, #2
 800eb92:	e002      	b.n	800eb9a <HAL_GPIO_Init+0x1ee>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e000      	b.n	800eb9a <HAL_GPIO_Init+0x1ee>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb9c:	f002 0203 	and.w	r2, r2, #3
 800eba0:	0092      	lsls	r2, r2, #2
 800eba2:	4093      	lsls	r3, r2
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	4313      	orrs	r3, r2
 800eba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800ebaa:	492f      	ldr	r1, [pc, #188]	; (800ec68 <HAL_GPIO_Init+0x2bc>)
 800ebac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebae:	089b      	lsrs	r3, r3, #2
 800ebb0:	3302      	adds	r3, #2
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d006      	beq.n	800ebd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ebc4:	4b2d      	ldr	r3, [pc, #180]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	492c      	ldr	r1, [pc, #176]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	600b      	str	r3, [r1, #0]
 800ebd0:	e006      	b.n	800ebe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ebd2:	4b2a      	ldr	r3, [pc, #168]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	43db      	mvns	r3, r3
 800ebda:	4928      	ldr	r1, [pc, #160]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebdc:	4013      	ands	r3, r2
 800ebde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d006      	beq.n	800ebfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ebec:	4b23      	ldr	r3, [pc, #140]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebee:	685a      	ldr	r2, [r3, #4]
 800ebf0:	4922      	ldr	r1, [pc, #136]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	604b      	str	r3, [r1, #4]
 800ebf8:	e006      	b.n	800ec08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ebfa:	4b20      	ldr	r3, [pc, #128]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ebfc:	685a      	ldr	r2, [r3, #4]
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	43db      	mvns	r3, r3
 800ec02:	491e      	ldr	r1, [pc, #120]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec04:	4013      	ands	r3, r2
 800ec06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d006      	beq.n	800ec22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800ec14:	4b19      	ldr	r3, [pc, #100]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	4918      	ldr	r1, [pc, #96]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	608b      	str	r3, [r1, #8]
 800ec20:	e006      	b.n	800ec30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800ec22:	4b16      	ldr	r3, [pc, #88]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec24:	689a      	ldr	r2, [r3, #8]
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	43db      	mvns	r3, r3
 800ec2a:	4914      	ldr	r1, [pc, #80]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d021      	beq.n	800ec80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800ec3c:	4b0f      	ldr	r3, [pc, #60]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec3e:	68da      	ldr	r2, [r3, #12]
 800ec40:	490e      	ldr	r1, [pc, #56]	; (800ec7c <HAL_GPIO_Init+0x2d0>)
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	60cb      	str	r3, [r1, #12]
 800ec48:	e021      	b.n	800ec8e <HAL_GPIO_Init+0x2e2>
 800ec4a:	bf00      	nop
 800ec4c:	10320000 	.word	0x10320000
 800ec50:	10310000 	.word	0x10310000
 800ec54:	10220000 	.word	0x10220000
 800ec58:	10210000 	.word	0x10210000
 800ec5c:	10120000 	.word	0x10120000
 800ec60:	10110000 	.word	0x10110000
 800ec64:	40021000 	.word	0x40021000
 800ec68:	40010000 	.word	0x40010000
 800ec6c:	40010800 	.word	0x40010800
 800ec70:	40010c00 	.word	0x40010c00
 800ec74:	40011000 	.word	0x40011000
 800ec78:	40011400 	.word	0x40011400
 800ec7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ec80:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <HAL_GPIO_Init+0x304>)
 800ec82:	68da      	ldr	r2, [r3, #12]
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	43db      	mvns	r3, r3
 800ec88:	4909      	ldr	r1, [pc, #36]	; (800ecb0 <HAL_GPIO_Init+0x304>)
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	3301      	adds	r3, #1
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f47f ae8e 	bne.w	800e9c0 <HAL_GPIO_Init+0x14>
  }
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
 800eca8:	372c      	adds	r7, #44	; 0x2c
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bc80      	pop	{r7}
 800ecae:	4770      	bx	lr
 800ecb0:	40010400 	.word	0x40010400

0800ecb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	807b      	strh	r3, [r7, #2]
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ecc4:	787b      	ldrb	r3, [r7, #1]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d003      	beq.n	800ecd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ecca:	887a      	ldrh	r2, [r7, #2]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800ecd0:	e003      	b.n	800ecda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800ecd2:	887b      	ldrh	r3, [r7, #2]
 800ecd4:	041a      	lsls	r2, r3, #16
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	611a      	str	r2, [r3, #16]
}
 800ecda:	bf00      	nop
 800ecdc:	370c      	adds	r7, #12
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bc80      	pop	{r7}
 800ece2:	4770      	bx	lr

0800ece4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ecf6:	887a      	ldrh	r2, [r7, #2]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	041a      	lsls	r2, r3, #16
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	43d9      	mvns	r1, r3
 800ed02:	887b      	ldrh	r3, [r7, #2]
 800ed04:	400b      	ands	r3, r1
 800ed06:	431a      	orrs	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	611a      	str	r2, [r3, #16]
}
 800ed0c:	bf00      	nop
 800ed0e:	3714      	adds	r7, #20
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bc80      	pop	{r7}
 800ed14:	4770      	bx	lr
	...

0800ed18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e12b      	b.n	800ef82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d106      	bne.n	800ed44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7ff f9b0 	bl	800e0a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2224      	movs	r2, #36	; 0x24
 800ed48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f022 0201 	bic.w	r2, r2, #1
 800ed5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ed7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ed7c:	f001 f884 	bl	800fe88 <HAL_RCC_GetPCLK1Freq>
 800ed80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	4a81      	ldr	r2, [pc, #516]	; (800ef8c <HAL_I2C_Init+0x274>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d807      	bhi.n	800ed9c <HAL_I2C_Init+0x84>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	4a80      	ldr	r2, [pc, #512]	; (800ef90 <HAL_I2C_Init+0x278>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	bf94      	ite	ls
 800ed94:	2301      	movls	r3, #1
 800ed96:	2300      	movhi	r3, #0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	e006      	b.n	800edaa <HAL_I2C_Init+0x92>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4a7d      	ldr	r2, [pc, #500]	; (800ef94 <HAL_I2C_Init+0x27c>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	bf94      	ite	ls
 800eda4:	2301      	movls	r3, #1
 800eda6:	2300      	movhi	r3, #0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800edae:	2301      	movs	r3, #1
 800edb0:	e0e7      	b.n	800ef82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	4a78      	ldr	r2, [pc, #480]	; (800ef98 <HAL_I2C_Init+0x280>)
 800edb6:	fba2 2303 	umull	r2, r3, r2, r3
 800edba:	0c9b      	lsrs	r3, r3, #18
 800edbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	430a      	orrs	r2, r1
 800edd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	6a1b      	ldr	r3, [r3, #32]
 800edd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	4a6a      	ldr	r2, [pc, #424]	; (800ef8c <HAL_I2C_Init+0x274>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d802      	bhi.n	800edec <HAL_I2C_Init+0xd4>
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	3301      	adds	r3, #1
 800edea:	e009      	b.n	800ee00 <HAL_I2C_Init+0xe8>
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800edf2:	fb02 f303 	mul.w	r3, r2, r3
 800edf6:	4a69      	ldr	r2, [pc, #420]	; (800ef9c <HAL_I2C_Init+0x284>)
 800edf8:	fba2 2303 	umull	r2, r3, r2, r3
 800edfc:	099b      	lsrs	r3, r3, #6
 800edfe:	3301      	adds	r3, #1
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	6812      	ldr	r2, [r2, #0]
 800ee04:	430b      	orrs	r3, r1
 800ee06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ee12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	495c      	ldr	r1, [pc, #368]	; (800ef8c <HAL_I2C_Init+0x274>)
 800ee1c:	428b      	cmp	r3, r1
 800ee1e:	d819      	bhi.n	800ee54 <HAL_I2C_Init+0x13c>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	1e59      	subs	r1, r3, #1
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee2e:	1c59      	adds	r1, r3, #1
 800ee30:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ee34:	400b      	ands	r3, r1
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00a      	beq.n	800ee50 <HAL_I2C_Init+0x138>
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	1e59      	subs	r1, r3, #1
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee48:	3301      	adds	r3, #1
 800ee4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee4e:	e051      	b.n	800eef4 <HAL_I2C_Init+0x1dc>
 800ee50:	2304      	movs	r3, #4
 800ee52:	e04f      	b.n	800eef4 <HAL_I2C_Init+0x1dc>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d111      	bne.n	800ee80 <HAL_I2C_Init+0x168>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	1e58      	subs	r0, r3, #1
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6859      	ldr	r1, [r3, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	440b      	add	r3, r1
 800ee6a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ee6e:	3301      	adds	r3, #1
 800ee70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	bf0c      	ite	eq
 800ee78:	2301      	moveq	r3, #1
 800ee7a:	2300      	movne	r3, #0
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	e012      	b.n	800eea6 <HAL_I2C_Init+0x18e>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	1e58      	subs	r0, r3, #1
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6859      	ldr	r1, [r3, #4]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	440b      	add	r3, r1
 800ee8e:	0099      	lsls	r1, r3, #2
 800ee90:	440b      	add	r3, r1
 800ee92:	fbb0 f3f3 	udiv	r3, r0, r3
 800ee96:	3301      	adds	r3, #1
 800ee98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	bf0c      	ite	eq
 800eea0:	2301      	moveq	r3, #1
 800eea2:	2300      	movne	r3, #0
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d001      	beq.n	800eeae <HAL_I2C_Init+0x196>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e022      	b.n	800eef4 <HAL_I2C_Init+0x1dc>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d10e      	bne.n	800eed4 <HAL_I2C_Init+0x1bc>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	1e58      	subs	r0, r3, #1
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6859      	ldr	r1, [r3, #4]
 800eebe:	460b      	mov	r3, r1
 800eec0:	005b      	lsls	r3, r3, #1
 800eec2:	440b      	add	r3, r1
 800eec4:	fbb0 f3f3 	udiv	r3, r0, r3
 800eec8:	3301      	adds	r3, #1
 800eeca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eed2:	e00f      	b.n	800eef4 <HAL_I2C_Init+0x1dc>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	1e58      	subs	r0, r3, #1
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6859      	ldr	r1, [r3, #4]
 800eedc:	460b      	mov	r3, r1
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	440b      	add	r3, r1
 800eee2:	0099      	lsls	r1, r3, #2
 800eee4:	440b      	add	r3, r1
 800eee6:	fbb0 f3f3 	udiv	r3, r0, r3
 800eeea:	3301      	adds	r3, #1
 800eeec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	6809      	ldr	r1, [r1, #0]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	69da      	ldr	r2, [r3, #28]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	431a      	orrs	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ef22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	6911      	ldr	r1, [r2, #16]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	68d2      	ldr	r2, [r2, #12]
 800ef2e:	4311      	orrs	r1, r2
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	6812      	ldr	r2, [r2, #0]
 800ef34:	430b      	orrs	r3, r1
 800ef36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	695a      	ldr	r2, [r3, #20]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	430a      	orrs	r2, r1
 800ef52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f042 0201 	orr.w	r2, r2, #1
 800ef62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2220      	movs	r2, #32
 800ef6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	000186a0 	.word	0x000186a0
 800ef90:	001e847f 	.word	0x001e847f
 800ef94:	003d08ff 	.word	0x003d08ff
 800ef98:	431bde83 	.word	0x431bde83
 800ef9c:	10624dd3 	.word	0x10624dd3

0800efa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b088      	sub	sp, #32
 800efa4:	af02      	add	r7, sp, #8
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	607a      	str	r2, [r7, #4]
 800efaa:	461a      	mov	r2, r3
 800efac:	460b      	mov	r3, r1
 800efae:	817b      	strh	r3, [r7, #10]
 800efb0:	4613      	mov	r3, r2
 800efb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800efb4:	f7ff fb0e 	bl	800e5d4 <HAL_GetTick>
 800efb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	2b20      	cmp	r3, #32
 800efc4:	f040 80e0 	bne.w	800f188 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	2319      	movs	r3, #25
 800efce:	2201      	movs	r2, #1
 800efd0:	4970      	ldr	r1, [pc, #448]	; (800f194 <HAL_I2C_Master_Transmit+0x1f4>)
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 f964 	bl	800f2a0 <I2C_WaitOnFlagUntilTimeout>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800efde:	2302      	movs	r3, #2
 800efe0:	e0d3      	b.n	800f18a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d101      	bne.n	800eff0 <HAL_I2C_Master_Transmit+0x50>
 800efec:	2302      	movs	r3, #2
 800efee:	e0cc      	b.n	800f18a <HAL_I2C_Master_Transmit+0x1ea>
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f003 0301 	and.w	r3, r3, #1
 800f002:	2b01      	cmp	r3, #1
 800f004:	d007      	beq.n	800f016 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f042 0201 	orr.w	r2, r2, #1
 800f014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f024:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2221      	movs	r2, #33	; 0x21
 800f02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2210      	movs	r2, #16
 800f032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2200      	movs	r2, #0
 800f03a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	893a      	ldrh	r2, [r7, #8]
 800f046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	4a50      	ldr	r2, [pc, #320]	; (800f198 <HAL_I2C_Master_Transmit+0x1f8>)
 800f056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f058:	8979      	ldrh	r1, [r7, #10]
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	6a3a      	ldr	r2, [r7, #32]
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f000 f89c 	bl	800f19c <I2C_MasterRequestWrite>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e08d      	b.n	800f18a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f06e:	2300      	movs	r3, #0
 800f070:	613b      	str	r3, [r7, #16]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	613b      	str	r3, [r7, #16]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	613b      	str	r3, [r7, #16]
 800f082:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f084:	e066      	b.n	800f154 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	6a39      	ldr	r1, [r7, #32]
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f000 f9de 	bl	800f44c <I2C_WaitOnTXEFlagUntilTimeout>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00d      	beq.n	800f0b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09a:	2b04      	cmp	r3, #4
 800f09c:	d107      	bne.n	800f0ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e06b      	b.n	800f18a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b6:	781a      	ldrb	r2, [r3, #0]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	695b      	ldr	r3, [r3, #20]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d11b      	bne.n	800f128 <HAL_I2C_Master_Transmit+0x188>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d017      	beq.n	800f128 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	781a      	ldrb	r2, [r3, #0]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f112:	b29b      	uxth	r3, r3
 800f114:	3b01      	subs	r3, #1
 800f116:	b29a      	uxth	r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f120:	3b01      	subs	r3, #1
 800f122:	b29a      	uxth	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f128:	697a      	ldr	r2, [r7, #20]
 800f12a:	6a39      	ldr	r1, [r7, #32]
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f000 f9ce 	bl	800f4ce <I2C_WaitOnBTFFlagUntilTimeout>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00d      	beq.n	800f154 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	d107      	bne.n	800f150 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f14e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	e01a      	b.n	800f18a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d194      	bne.n	800f086 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f16a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2220      	movs	r2, #32
 800f170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f184:	2300      	movs	r3, #0
 800f186:	e000      	b.n	800f18a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f188:	2302      	movs	r3, #2
  }
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3718      	adds	r7, #24
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	00100002 	.word	0x00100002
 800f198:	ffff0000 	.word	0xffff0000

0800f19c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af02      	add	r7, sp, #8
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	607a      	str	r2, [r7, #4]
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2b08      	cmp	r3, #8
 800f1b6:	d006      	beq.n	800f1c6 <I2C_MasterRequestWrite+0x2a>
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d003      	beq.n	800f1c6 <I2C_MasterRequestWrite+0x2a>
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f1c4:	d108      	bne.n	800f1d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	e00b      	b.n	800f1f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1dc:	2b12      	cmp	r3, #18
 800f1de:	d107      	bne.n	800f1f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f000 f84f 	bl	800f2a0 <I2C_WaitOnFlagUntilTimeout>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00d      	beq.n	800f224 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f216:	d103      	bne.n	800f220 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f21e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f220:	2303      	movs	r3, #3
 800f222:	e035      	b.n	800f290 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f22c:	d108      	bne.n	800f240 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f22e:	897b      	ldrh	r3, [r7, #10]
 800f230:	b2db      	uxtb	r3, r3
 800f232:	461a      	mov	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f23c:	611a      	str	r2, [r3, #16]
 800f23e:	e01b      	b.n	800f278 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f240:	897b      	ldrh	r3, [r7, #10]
 800f242:	11db      	asrs	r3, r3, #7
 800f244:	b2db      	uxtb	r3, r3
 800f246:	f003 0306 	and.w	r3, r3, #6
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	f063 030f 	orn	r3, r3, #15
 800f250:	b2da      	uxtb	r2, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	490e      	ldr	r1, [pc, #56]	; (800f298 <I2C_MasterRequestWrite+0xfc>)
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f000 f875 	bl	800f34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	e010      	b.n	800f290 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f26e:	897b      	ldrh	r3, [r7, #10]
 800f270:	b2da      	uxtb	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	4907      	ldr	r1, [pc, #28]	; (800f29c <I2C_MasterRequestWrite+0x100>)
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f000 f865 	bl	800f34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800f28a:	2301      	movs	r3, #1
 800f28c:	e000      	b.n	800f290 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	00010008 	.word	0x00010008
 800f29c:	00010002 	.word	0x00010002

0800f2a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	603b      	str	r3, [r7, #0]
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f2b0:	e025      	b.n	800f2fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b8:	d021      	beq.n	800f2fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2ba:	f7ff f98b 	bl	800e5d4 <HAL_GetTick>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d302      	bcc.n	800f2d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d116      	bne.n	800f2fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2220      	movs	r2, #32
 800f2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ea:	f043 0220 	orr.w	r2, r3, #32
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e023      	b.n	800f346 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	0c1b      	lsrs	r3, r3, #16
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b01      	cmp	r3, #1
 800f306:	d10d      	bne.n	800f324 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	695b      	ldr	r3, [r3, #20]
 800f30e:	43da      	mvns	r2, r3
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	4013      	ands	r3, r2
 800f314:	b29b      	uxth	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	bf0c      	ite	eq
 800f31a:	2301      	moveq	r3, #1
 800f31c:	2300      	movne	r3, #0
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	461a      	mov	r2, r3
 800f322:	e00c      	b.n	800f33e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	699b      	ldr	r3, [r3, #24]
 800f32a:	43da      	mvns	r2, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	4013      	ands	r3, r2
 800f330:	b29b      	uxth	r3, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	bf0c      	ite	eq
 800f336:	2301      	moveq	r3, #1
 800f338:	2300      	movne	r3, #0
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	461a      	mov	r2, r3
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	429a      	cmp	r2, r3
 800f342:	d0b6      	beq.n	800f2b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f34e:	b580      	push	{r7, lr}
 800f350:	b084      	sub	sp, #16
 800f352:	af00      	add	r7, sp, #0
 800f354:	60f8      	str	r0, [r7, #12]
 800f356:	60b9      	str	r1, [r7, #8]
 800f358:	607a      	str	r2, [r7, #4]
 800f35a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f35c:	e051      	b.n	800f402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f36c:	d123      	bne.n	800f3b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f37c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f386:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2220      	movs	r2, #32
 800f392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2200      	movs	r2, #0
 800f39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a2:	f043 0204 	orr.w	r2, r3, #4
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e046      	b.n	800f444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3bc:	d021      	beq.n	800f402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3be:	f7ff f909 	bl	800e5d4 <HAL_GetTick>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d302      	bcc.n	800f3d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d116      	bne.n	800f402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2220      	movs	r2, #32
 800f3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ee:	f043 0220 	orr.w	r2, r3, #32
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	e020      	b.n	800f444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	0c1b      	lsrs	r3, r3, #16
 800f406:	b2db      	uxtb	r3, r3
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d10c      	bne.n	800f426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	43da      	mvns	r2, r3
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	4013      	ands	r3, r2
 800f418:	b29b      	uxth	r3, r3
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	bf14      	ite	ne
 800f41e:	2301      	movne	r3, #1
 800f420:	2300      	moveq	r3, #0
 800f422:	b2db      	uxtb	r3, r3
 800f424:	e00b      	b.n	800f43e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	43da      	mvns	r2, r3
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	4013      	ands	r3, r2
 800f432:	b29b      	uxth	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	bf14      	ite	ne
 800f438:	2301      	movne	r3, #1
 800f43a:	2300      	moveq	r3, #0
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d18d      	bne.n	800f35e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f442:	2300      	movs	r3, #0
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f458:	e02d      	b.n	800f4b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f000 f878 	bl	800f550 <I2C_IsAcknowledgeFailed>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e02d      	b.n	800f4c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f470:	d021      	beq.n	800f4b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f472:	f7ff f8af 	bl	800e5d4 <HAL_GetTick>
 800f476:	4602      	mov	r2, r0
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d302      	bcc.n	800f488 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d116      	bne.n	800f4b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2200      	movs	r2, #0
 800f48c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2220      	movs	r2, #32
 800f492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2200      	movs	r2, #0
 800f49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a2:	f043 0220 	orr.w	r2, r3, #32
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e007      	b.n	800f4c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4c0:	2b80      	cmp	r3, #128	; 0x80
 800f4c2:	d1ca      	bne.n	800f45a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f4c4:	2300      	movs	r3, #0
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b084      	sub	sp, #16
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	60f8      	str	r0, [r7, #12]
 800f4d6:	60b9      	str	r1, [r7, #8]
 800f4d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f4da:	e02d      	b.n	800f538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f4dc:	68f8      	ldr	r0, [r7, #12]
 800f4de:	f000 f837 	bl	800f550 <I2C_IsAcknowledgeFailed>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e02d      	b.n	800f548 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f2:	d021      	beq.n	800f538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4f4:	f7ff f86e 	bl	800e5d4 <HAL_GetTick>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	429a      	cmp	r2, r3
 800f502:	d302      	bcc.n	800f50a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d116      	bne.n	800f538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2200      	movs	r2, #0
 800f50e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2220      	movs	r2, #32
 800f514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f524:	f043 0220 	orr.w	r2, r3, #32
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	e007      	b.n	800f548 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	695b      	ldr	r3, [r3, #20]
 800f53e:	f003 0304 	and.w	r3, r3, #4
 800f542:	2b04      	cmp	r3, #4
 800f544:	d1ca      	bne.n	800f4dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f546:	2300      	movs	r3, #0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f566:	d11b      	bne.n	800f5a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2220      	movs	r2, #32
 800f57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58c:	f043 0204 	orr.w	r2, r3, #4
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f59c:	2301      	movs	r3, #1
 800f59e:	e000      	b.n	800f5a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bc80      	pop	{r7}
 800f5aa:	4770      	bx	lr

0800f5ac <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f5b2:	f7ff f80f 	bl	800e5d4 <HAL_GetTick>
 800f5b6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800f5b8:	4b45      	ldr	r3, [pc, #276]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a44      	ldr	r2, [pc, #272]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f5be:	f043 0301 	orr.w	r3, r3, #1
 800f5c2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800f5c4:	e008      	b.n	800f5d8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f5c6:	f7ff f805 	bl	800e5d4 <HAL_GetTick>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	1ad3      	subs	r3, r2, r3
 800f5d0:	2b02      	cmp	r3, #2
 800f5d2:	d901      	bls.n	800f5d8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	e077      	b.n	800f6c8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800f5d8:	4b3d      	ldr	r3, [pc, #244]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f003 0302 	and.w	r3, r3, #2
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d0f0      	beq.n	800f5c6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800f5e4:	4b3a      	ldr	r3, [pc, #232]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f5ec:	4a38      	ldr	r2, [pc, #224]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f5f4:	f7fe ffee 	bl	800e5d4 <HAL_GetTick>
 800f5f8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800f5fa:	4b35      	ldr	r3, [pc, #212]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800f600:	e00a      	b.n	800f618 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f602:	f7fe ffe7 	bl	800e5d4 <HAL_GetTick>
 800f606:	4602      	mov	r2, r0
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f610:	4293      	cmp	r3, r2
 800f612:	d901      	bls.n	800f618 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800f614:	2303      	movs	r3, #3
 800f616:	e057      	b.n	800f6c8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800f618:	4b2d      	ldr	r3, [pc, #180]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	f003 030c 	and.w	r3, r3, #12
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1ee      	bne.n	800f602 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800f624:	4b2b      	ldr	r3, [pc, #172]	; (800f6d4 <HAL_RCC_DeInit+0x128>)
 800f626:	4a2c      	ldr	r2, [pc, #176]	; (800f6d8 <HAL_RCC_DeInit+0x12c>)
 800f628:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800f62a:	4b2c      	ldr	r3, [pc, #176]	; (800f6dc <HAL_RCC_DeInit+0x130>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe ff8e 	bl	800e550 <HAL_InitTick>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e044      	b.n	800f6c8 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f63e:	f7fe ffc9 	bl	800e5d4 <HAL_GetTick>
 800f642:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f644:	4b22      	ldr	r3, [pc, #136]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a21      	ldr	r2, [pc, #132]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f64a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f64e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800f650:	e008      	b.n	800f664 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f652:	f7fe ffbf 	bl	800e5d4 <HAL_GetTick>
 800f656:	4602      	mov	r2, r0
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	d901      	bls.n	800f664 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800f660:	2303      	movs	r3, #3
 800f662:	e031      	b.n	800f6c8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800f664:	4b1a      	ldr	r3, [pc, #104]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1f0      	bne.n	800f652 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800f670:	4b17      	ldr	r3, [pc, #92]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f672:	2200      	movs	r2, #0
 800f674:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800f676:	f7fe ffad 	bl	800e5d4 <HAL_GetTick>
 800f67a:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800f67c:	4b14      	ldr	r3, [pc, #80]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a13      	ldr	r2, [pc, #76]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f682:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f686:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800f688:	e008      	b.n	800f69c <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f68a:	f7fe ffa3 	bl	800e5d4 <HAL_GetTick>
 800f68e:	4602      	mov	r2, r0
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	2b64      	cmp	r3, #100	; 0x64
 800f696:	d901      	bls.n	800f69c <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800f698:	2303      	movs	r3, #3
 800f69a:	e015      	b.n	800f6c8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800f69c:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1f0      	bne.n	800f68a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800f6a8:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a08      	ldr	r2, [pc, #32]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f6ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f6b2:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800f6b4:	4b06      	ldr	r3, [pc, #24]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b8:	4a05      	ldr	r2, [pc, #20]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f6ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f6be:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800f6c0:	4b03      	ldr	r3, [pc, #12]	; (800f6d0 <HAL_RCC_DeInit+0x124>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	40021000 	.word	0x40021000
 800f6d4:	200000c4 	.word	0x200000c4
 800f6d8:	007a1200 	.word	0x007a1200
 800f6dc:	200000c8 	.word	0x200000c8

0800f6e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d101      	bne.n	800f6f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	e272      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f000 8087 	beq.w	800f80e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f700:	4b92      	ldr	r3, [pc, #584]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	f003 030c 	and.w	r3, r3, #12
 800f708:	2b04      	cmp	r3, #4
 800f70a:	d00c      	beq.n	800f726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800f70c:	4b8f      	ldr	r3, [pc, #572]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	f003 030c 	and.w	r3, r3, #12
 800f714:	2b08      	cmp	r3, #8
 800f716:	d112      	bne.n	800f73e <HAL_RCC_OscConfig+0x5e>
 800f718:	4b8c      	ldr	r3, [pc, #560]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f724:	d10b      	bne.n	800f73e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f726:	4b89      	ldr	r3, [pc, #548]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d06c      	beq.n	800f80c <HAL_RCC_OscConfig+0x12c>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d168      	bne.n	800f80c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e24c      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f746:	d106      	bne.n	800f756 <HAL_RCC_OscConfig+0x76>
 800f748:	4b80      	ldr	r3, [pc, #512]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a7f      	ldr	r2, [pc, #508]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f74e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	e02e      	b.n	800f7b4 <HAL_RCC_OscConfig+0xd4>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d10c      	bne.n	800f778 <HAL_RCC_OscConfig+0x98>
 800f75e:	4b7b      	ldr	r3, [pc, #492]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4a7a      	ldr	r2, [pc, #488]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f768:	6013      	str	r3, [r2, #0]
 800f76a:	4b78      	ldr	r3, [pc, #480]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	4a77      	ldr	r2, [pc, #476]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f774:	6013      	str	r3, [r2, #0]
 800f776:	e01d      	b.n	800f7b4 <HAL_RCC_OscConfig+0xd4>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f780:	d10c      	bne.n	800f79c <HAL_RCC_OscConfig+0xbc>
 800f782:	4b72      	ldr	r3, [pc, #456]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a71      	ldr	r2, [pc, #452]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f78c:	6013      	str	r3, [r2, #0]
 800f78e:	4b6f      	ldr	r3, [pc, #444]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a6e      	ldr	r2, [pc, #440]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f798:	6013      	str	r3, [r2, #0]
 800f79a:	e00b      	b.n	800f7b4 <HAL_RCC_OscConfig+0xd4>
 800f79c:	4b6b      	ldr	r3, [pc, #428]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a6a      	ldr	r2, [pc, #424]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f7a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f7a6:	6013      	str	r3, [r2, #0]
 800f7a8:	4b68      	ldr	r3, [pc, #416]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a67      	ldr	r2, [pc, #412]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f7ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f7b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d013      	beq.n	800f7e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f7bc:	f7fe ff0a 	bl	800e5d4 <HAL_GetTick>
 800f7c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f7c2:	e008      	b.n	800f7d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7c4:	f7fe ff06 	bl	800e5d4 <HAL_GetTick>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	2b64      	cmp	r3, #100	; 0x64
 800f7d0:	d901      	bls.n	800f7d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800f7d2:	2303      	movs	r3, #3
 800f7d4:	e200      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f7d6:	4b5d      	ldr	r3, [pc, #372]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0f0      	beq.n	800f7c4 <HAL_RCC_OscConfig+0xe4>
 800f7e2:	e014      	b.n	800f80e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f7e4:	f7fe fef6 	bl	800e5d4 <HAL_GetTick>
 800f7e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f7ea:	e008      	b.n	800f7fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7ec:	f7fe fef2 	bl	800e5d4 <HAL_GetTick>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	1ad3      	subs	r3, r2, r3
 800f7f6:	2b64      	cmp	r3, #100	; 0x64
 800f7f8:	d901      	bls.n	800f7fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800f7fa:	2303      	movs	r3, #3
 800f7fc:	e1ec      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f7fe:	4b53      	ldr	r3, [pc, #332]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1f0      	bne.n	800f7ec <HAL_RCC_OscConfig+0x10c>
 800f80a:	e000      	b.n	800f80e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f80c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f003 0302 	and.w	r3, r3, #2
 800f816:	2b00      	cmp	r3, #0
 800f818:	d063      	beq.n	800f8e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f81a:	4b4c      	ldr	r3, [pc, #304]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	f003 030c 	and.w	r3, r3, #12
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00b      	beq.n	800f83e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800f826:	4b49      	ldr	r3, [pc, #292]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	f003 030c 	and.w	r3, r3, #12
 800f82e:	2b08      	cmp	r3, #8
 800f830:	d11c      	bne.n	800f86c <HAL_RCC_OscConfig+0x18c>
 800f832:	4b46      	ldr	r3, [pc, #280]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d116      	bne.n	800f86c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f83e:	4b43      	ldr	r3, [pc, #268]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f003 0302 	and.w	r3, r3, #2
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <HAL_RCC_OscConfig+0x176>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d001      	beq.n	800f856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800f852:	2301      	movs	r3, #1
 800f854:	e1c0      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f856:	4b3d      	ldr	r3, [pc, #244]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	00db      	lsls	r3, r3, #3
 800f864:	4939      	ldr	r1, [pc, #228]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f866:	4313      	orrs	r3, r2
 800f868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f86a:	e03a      	b.n	800f8e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	691b      	ldr	r3, [r3, #16]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d020      	beq.n	800f8b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f874:	4b36      	ldr	r3, [pc, #216]	; (800f950 <HAL_RCC_OscConfig+0x270>)
 800f876:	2201      	movs	r2, #1
 800f878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f87a:	f7fe feab 	bl	800e5d4 <HAL_GetTick>
 800f87e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f880:	e008      	b.n	800f894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f882:	f7fe fea7 	bl	800e5d4 <HAL_GetTick>
 800f886:	4602      	mov	r2, r0
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	2b02      	cmp	r3, #2
 800f88e:	d901      	bls.n	800f894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800f890:	2303      	movs	r3, #3
 800f892:	e1a1      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f894:	4b2d      	ldr	r3, [pc, #180]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f003 0302 	and.w	r3, r3, #2
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d0f0      	beq.n	800f882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f8a0:	4b2a      	ldr	r3, [pc, #168]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	695b      	ldr	r3, [r3, #20]
 800f8ac:	00db      	lsls	r3, r3, #3
 800f8ae:	4927      	ldr	r1, [pc, #156]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	600b      	str	r3, [r1, #0]
 800f8b4:	e015      	b.n	800f8e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f8b6:	4b26      	ldr	r3, [pc, #152]	; (800f950 <HAL_RCC_OscConfig+0x270>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f8bc:	f7fe fe8a 	bl	800e5d4 <HAL_GetTick>
 800f8c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f8c2:	e008      	b.n	800f8d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f8c4:	f7fe fe86 	bl	800e5d4 <HAL_GetTick>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d901      	bls.n	800f8d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800f8d2:	2303      	movs	r3, #3
 800f8d4:	e180      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f8d6:	4b1d      	ldr	r3, [pc, #116]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f003 0302 	and.w	r3, r3, #2
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1f0      	bne.n	800f8c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f003 0308 	and.w	r3, r3, #8
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d03a      	beq.n	800f964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d019      	beq.n	800f92a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f8f6:	4b17      	ldr	r3, [pc, #92]	; (800f954 <HAL_RCC_OscConfig+0x274>)
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8fc:	f7fe fe6a 	bl	800e5d4 <HAL_GetTick>
 800f900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f902:	e008      	b.n	800f916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f904:	f7fe fe66 	bl	800e5d4 <HAL_GetTick>
 800f908:	4602      	mov	r2, r0
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d901      	bls.n	800f916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800f912:	2303      	movs	r3, #3
 800f914:	e160      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f916:	4b0d      	ldr	r3, [pc, #52]	; (800f94c <HAL_RCC_OscConfig+0x26c>)
 800f918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91a:	f003 0302 	and.w	r3, r3, #2
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0f0      	beq.n	800f904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800f922:	2001      	movs	r0, #1
 800f924:	f000 fad8 	bl	800fed8 <RCC_Delay>
 800f928:	e01c      	b.n	800f964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f92a:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <HAL_RCC_OscConfig+0x274>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f930:	f7fe fe50 	bl	800e5d4 <HAL_GetTick>
 800f934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f936:	e00f      	b.n	800f958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f938:	f7fe fe4c 	bl	800e5d4 <HAL_GetTick>
 800f93c:	4602      	mov	r2, r0
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	2b02      	cmp	r3, #2
 800f944:	d908      	bls.n	800f958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800f946:	2303      	movs	r3, #3
 800f948:	e146      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
 800f94a:	bf00      	nop
 800f94c:	40021000 	.word	0x40021000
 800f950:	42420000 	.word	0x42420000
 800f954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f958:	4b92      	ldr	r3, [pc, #584]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95c:	f003 0302 	and.w	r3, r3, #2
 800f960:	2b00      	cmp	r3, #0
 800f962:	d1e9      	bne.n	800f938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	f000 80a6 	beq.w	800fabe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f972:	2300      	movs	r3, #0
 800f974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f976:	4b8b      	ldr	r3, [pc, #556]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f978:	69db      	ldr	r3, [r3, #28]
 800f97a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10d      	bne.n	800f99e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f982:	4b88      	ldr	r3, [pc, #544]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f984:	69db      	ldr	r3, [r3, #28]
 800f986:	4a87      	ldr	r2, [pc, #540]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f98c:	61d3      	str	r3, [r2, #28]
 800f98e:	4b85      	ldr	r3, [pc, #532]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f990:	69db      	ldr	r3, [r3, #28]
 800f992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f996:	60bb      	str	r3, [r7, #8]
 800f998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f99a:	2301      	movs	r3, #1
 800f99c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f99e:	4b82      	ldr	r3, [pc, #520]	; (800fba8 <HAL_RCC_OscConfig+0x4c8>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d118      	bne.n	800f9dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f9aa:	4b7f      	ldr	r3, [pc, #508]	; (800fba8 <HAL_RCC_OscConfig+0x4c8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a7e      	ldr	r2, [pc, #504]	; (800fba8 <HAL_RCC_OscConfig+0x4c8>)
 800f9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f9b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f9b6:	f7fe fe0d 	bl	800e5d4 <HAL_GetTick>
 800f9ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f9bc:	e008      	b.n	800f9d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f9be:	f7fe fe09 	bl	800e5d4 <HAL_GetTick>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	2b64      	cmp	r3, #100	; 0x64
 800f9ca:	d901      	bls.n	800f9d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	e103      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f9d0:	4b75      	ldr	r3, [pc, #468]	; (800fba8 <HAL_RCC_OscConfig+0x4c8>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d0f0      	beq.n	800f9be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d106      	bne.n	800f9f2 <HAL_RCC_OscConfig+0x312>
 800f9e4:	4b6f      	ldr	r3, [pc, #444]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f9e6:	6a1b      	ldr	r3, [r3, #32]
 800f9e8:	4a6e      	ldr	r2, [pc, #440]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f9ea:	f043 0301 	orr.w	r3, r3, #1
 800f9ee:	6213      	str	r3, [r2, #32]
 800f9f0:	e02d      	b.n	800fa4e <HAL_RCC_OscConfig+0x36e>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10c      	bne.n	800fa14 <HAL_RCC_OscConfig+0x334>
 800f9fa:	4b6a      	ldr	r3, [pc, #424]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	4a69      	ldr	r2, [pc, #420]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa00:	f023 0301 	bic.w	r3, r3, #1
 800fa04:	6213      	str	r3, [r2, #32]
 800fa06:	4b67      	ldr	r3, [pc, #412]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	4a66      	ldr	r2, [pc, #408]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa0c:	f023 0304 	bic.w	r3, r3, #4
 800fa10:	6213      	str	r3, [r2, #32]
 800fa12:	e01c      	b.n	800fa4e <HAL_RCC_OscConfig+0x36e>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	2b05      	cmp	r3, #5
 800fa1a:	d10c      	bne.n	800fa36 <HAL_RCC_OscConfig+0x356>
 800fa1c:	4b61      	ldr	r3, [pc, #388]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa1e:	6a1b      	ldr	r3, [r3, #32]
 800fa20:	4a60      	ldr	r2, [pc, #384]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa22:	f043 0304 	orr.w	r3, r3, #4
 800fa26:	6213      	str	r3, [r2, #32]
 800fa28:	4b5e      	ldr	r3, [pc, #376]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa2a:	6a1b      	ldr	r3, [r3, #32]
 800fa2c:	4a5d      	ldr	r2, [pc, #372]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	6213      	str	r3, [r2, #32]
 800fa34:	e00b      	b.n	800fa4e <HAL_RCC_OscConfig+0x36e>
 800fa36:	4b5b      	ldr	r3, [pc, #364]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	4a5a      	ldr	r2, [pc, #360]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa3c:	f023 0301 	bic.w	r3, r3, #1
 800fa40:	6213      	str	r3, [r2, #32]
 800fa42:	4b58      	ldr	r3, [pc, #352]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa44:	6a1b      	ldr	r3, [r3, #32]
 800fa46:	4a57      	ldr	r2, [pc, #348]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa48:	f023 0304 	bic.w	r3, r3, #4
 800fa4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d015      	beq.n	800fa82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fa56:	f7fe fdbd 	bl	800e5d4 <HAL_GetTick>
 800fa5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa5c:	e00a      	b.n	800fa74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa5e:	f7fe fdb9 	bl	800e5d4 <HAL_GetTick>
 800fa62:	4602      	mov	r2, r0
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d901      	bls.n	800fa74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800fa70:	2303      	movs	r3, #3
 800fa72:	e0b1      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa74:	4b4b      	ldr	r3, [pc, #300]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	f003 0302 	and.w	r3, r3, #2
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d0ee      	beq.n	800fa5e <HAL_RCC_OscConfig+0x37e>
 800fa80:	e014      	b.n	800faac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fa82:	f7fe fda7 	bl	800e5d4 <HAL_GetTick>
 800fa86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fa88:	e00a      	b.n	800faa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa8a:	f7fe fda3 	bl	800e5d4 <HAL_GetTick>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d901      	bls.n	800faa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e09b      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800faa0:	4b40      	ldr	r3, [pc, #256]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	f003 0302 	and.w	r3, r3, #2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1ee      	bne.n	800fa8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800faac:	7dfb      	ldrb	r3, [r7, #23]
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d105      	bne.n	800fabe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fab2:	4b3c      	ldr	r3, [pc, #240]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fab4:	69db      	ldr	r3, [r3, #28]
 800fab6:	4a3b      	ldr	r2, [pc, #236]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fabc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	69db      	ldr	r3, [r3, #28]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f000 8087 	beq.w	800fbd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fac8:	4b36      	ldr	r3, [pc, #216]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	f003 030c 	and.w	r3, r3, #12
 800fad0:	2b08      	cmp	r3, #8
 800fad2:	d061      	beq.n	800fb98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	69db      	ldr	r3, [r3, #28]
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d146      	bne.n	800fb6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fadc:	4b33      	ldr	r3, [pc, #204]	; (800fbac <HAL_RCC_OscConfig+0x4cc>)
 800fade:	2200      	movs	r2, #0
 800fae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fae2:	f7fe fd77 	bl	800e5d4 <HAL_GetTick>
 800fae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fae8:	e008      	b.n	800fafc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800faea:	f7fe fd73 	bl	800e5d4 <HAL_GetTick>
 800faee:	4602      	mov	r2, r0
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d901      	bls.n	800fafc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800faf8:	2303      	movs	r3, #3
 800fafa:	e06d      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fafc:	4b29      	ldr	r3, [pc, #164]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1f0      	bne.n	800faea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6a1b      	ldr	r3, [r3, #32]
 800fb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb10:	d108      	bne.n	800fb24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800fb12:	4b24      	ldr	r3, [pc, #144]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	4921      	ldr	r1, [pc, #132]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fb20:	4313      	orrs	r3, r2
 800fb22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fb24:	4b1f      	ldr	r3, [pc, #124]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a19      	ldr	r1, [r3, #32]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb34:	430b      	orrs	r3, r1
 800fb36:	491b      	ldr	r1, [pc, #108]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fb3c:	4b1b      	ldr	r3, [pc, #108]	; (800fbac <HAL_RCC_OscConfig+0x4cc>)
 800fb3e:	2201      	movs	r2, #1
 800fb40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb42:	f7fe fd47 	bl	800e5d4 <HAL_GetTick>
 800fb46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800fb48:	e008      	b.n	800fb5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb4a:	f7fe fd43 	bl	800e5d4 <HAL_GetTick>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	2b02      	cmp	r3, #2
 800fb56:	d901      	bls.n	800fb5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800fb58:	2303      	movs	r3, #3
 800fb5a:	e03d      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800fb5c:	4b11      	ldr	r3, [pc, #68]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0f0      	beq.n	800fb4a <HAL_RCC_OscConfig+0x46a>
 800fb68:	e035      	b.n	800fbd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb6a:	4b10      	ldr	r3, [pc, #64]	; (800fbac <HAL_RCC_OscConfig+0x4cc>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb70:	f7fe fd30 	bl	800e5d4 <HAL_GetTick>
 800fb74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fb76:	e008      	b.n	800fb8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb78:	f7fe fd2c 	bl	800e5d4 <HAL_GetTick>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	2b02      	cmp	r3, #2
 800fb84:	d901      	bls.n	800fb8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800fb86:	2303      	movs	r3, #3
 800fb88:	e026      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fb8a:	4b06      	ldr	r3, [pc, #24]	; (800fba4 <HAL_RCC_OscConfig+0x4c4>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1f0      	bne.n	800fb78 <HAL_RCC_OscConfig+0x498>
 800fb96:	e01e      	b.n	800fbd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	69db      	ldr	r3, [r3, #28]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d107      	bne.n	800fbb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800fba0:	2301      	movs	r3, #1
 800fba2:	e019      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
 800fba4:	40021000 	.word	0x40021000
 800fba8:	40007000 	.word	0x40007000
 800fbac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800fbb0:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <HAL_RCC_OscConfig+0x500>)
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6a1b      	ldr	r3, [r3, #32]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d106      	bne.n	800fbd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d001      	beq.n	800fbd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e000      	b.n	800fbd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	40021000 	.word	0x40021000

0800fbe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d101      	bne.n	800fbf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e0d0      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fbf8:	4b6a      	ldr	r3, [pc, #424]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f003 0307 	and.w	r3, r3, #7
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d910      	bls.n	800fc28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc06:	4b67      	ldr	r3, [pc, #412]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f023 0207 	bic.w	r2, r3, #7
 800fc0e:	4965      	ldr	r1, [pc, #404]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc16:	4b63      	ldr	r3, [pc, #396]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	f003 0307 	and.w	r3, r3, #7
 800fc1e:	683a      	ldr	r2, [r7, #0]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d001      	beq.n	800fc28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800fc24:	2301      	movs	r3, #1
 800fc26:	e0b8      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f003 0302 	and.w	r3, r3, #2
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d020      	beq.n	800fc76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f003 0304 	and.w	r3, r3, #4
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d005      	beq.n	800fc4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fc40:	4b59      	ldr	r3, [pc, #356]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	4a58      	ldr	r2, [pc, #352]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800fc4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f003 0308 	and.w	r3, r3, #8
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d005      	beq.n	800fc64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fc58:	4b53      	ldr	r3, [pc, #332]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	4a52      	ldr	r2, [pc, #328]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800fc62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fc64:	4b50      	ldr	r3, [pc, #320]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	494d      	ldr	r1, [pc, #308]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc72:	4313      	orrs	r3, r2
 800fc74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d040      	beq.n	800fd04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d107      	bne.n	800fc9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc8a:	4b47      	ldr	r3, [pc, #284]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d115      	bne.n	800fcc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fc96:	2301      	movs	r3, #1
 800fc98:	e07f      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d107      	bne.n	800fcb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fca2:	4b41      	ldr	r3, [pc, #260]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d109      	bne.n	800fcc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e073      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fcb2:	4b3d      	ldr	r3, [pc, #244]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f003 0302 	and.w	r3, r3, #2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d101      	bne.n	800fcc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e06b      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fcc2:	4b39      	ldr	r3, [pc, #228]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	f023 0203 	bic.w	r2, r3, #3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	4936      	ldr	r1, [pc, #216]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fcd4:	f7fe fc7e 	bl	800e5d4 <HAL_GetTick>
 800fcd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fcda:	e00a      	b.n	800fcf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fcdc:	f7fe fc7a 	bl	800e5d4 <HAL_GetTick>
 800fce0:	4602      	mov	r2, r0
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	f241 3288 	movw	r2, #5000	; 0x1388
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d901      	bls.n	800fcf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e053      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fcf2:	4b2d      	ldr	r3, [pc, #180]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	f003 020c 	and.w	r2, r3, #12
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d1eb      	bne.n	800fcdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fd04:	4b27      	ldr	r3, [pc, #156]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 0307 	and.w	r3, r3, #7
 800fd0c:	683a      	ldr	r2, [r7, #0]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d210      	bcs.n	800fd34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd12:	4b24      	ldr	r3, [pc, #144]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f023 0207 	bic.w	r2, r3, #7
 800fd1a:	4922      	ldr	r1, [pc, #136]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd22:	4b20      	ldr	r3, [pc, #128]	; (800fda4 <HAL_RCC_ClockConfig+0x1c0>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f003 0307 	and.w	r3, r3, #7
 800fd2a:	683a      	ldr	r2, [r7, #0]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d001      	beq.n	800fd34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800fd30:	2301      	movs	r3, #1
 800fd32:	e032      	b.n	800fd9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f003 0304 	and.w	r3, r3, #4
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d008      	beq.n	800fd52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fd40:	4b19      	ldr	r3, [pc, #100]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	4916      	ldr	r1, [pc, #88]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f003 0308 	and.w	r3, r3, #8
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d009      	beq.n	800fd72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800fd5e:	4b12      	ldr	r3, [pc, #72]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	691b      	ldr	r3, [r3, #16]
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	490e      	ldr	r1, [pc, #56]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800fd72:	f000 f821 	bl	800fdb8 <HAL_RCC_GetSysClockFreq>
 800fd76:	4602      	mov	r2, r0
 800fd78:	4b0b      	ldr	r3, [pc, #44]	; (800fda8 <HAL_RCC_ClockConfig+0x1c4>)
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	091b      	lsrs	r3, r3, #4
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	490a      	ldr	r1, [pc, #40]	; (800fdac <HAL_RCC_ClockConfig+0x1c8>)
 800fd84:	5ccb      	ldrb	r3, [r1, r3]
 800fd86:	fa22 f303 	lsr.w	r3, r2, r3
 800fd8a:	4a09      	ldr	r2, [pc, #36]	; (800fdb0 <HAL_RCC_ClockConfig+0x1cc>)
 800fd8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800fd8e:	4b09      	ldr	r3, [pc, #36]	; (800fdb4 <HAL_RCC_ClockConfig+0x1d0>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fe fbdc 	bl	800e550 <HAL_InitTick>

  return HAL_OK;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	40022000 	.word	0x40022000
 800fda8:	40021000 	.word	0x40021000
 800fdac:	08011c6c 	.word	0x08011c6c
 800fdb0:	200000c4 	.word	0x200000c4
 800fdb4:	200000c8 	.word	0x200000c8

0800fdb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fdb8:	b490      	push	{r4, r7}
 800fdba:	b08a      	sub	sp, #40	; 0x28
 800fdbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800fdbe:	4b29      	ldr	r3, [pc, #164]	; (800fe64 <HAL_RCC_GetSysClockFreq+0xac>)
 800fdc0:	1d3c      	adds	r4, r7, #4
 800fdc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800fdc8:	f240 2301 	movw	r3, #513	; 0x201
 800fdcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	61fb      	str	r3, [r7, #28]
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	61bb      	str	r3, [r7, #24]
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	627b      	str	r3, [r7, #36]	; 0x24
 800fdda:	2300      	movs	r3, #0
 800fddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800fdde:	2300      	movs	r3, #0
 800fde0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800fde2:	4b21      	ldr	r3, [pc, #132]	; (800fe68 <HAL_RCC_GetSysClockFreq+0xb0>)
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	f003 030c 	and.w	r3, r3, #12
 800fdee:	2b04      	cmp	r3, #4
 800fdf0:	d002      	beq.n	800fdf8 <HAL_RCC_GetSysClockFreq+0x40>
 800fdf2:	2b08      	cmp	r3, #8
 800fdf4:	d003      	beq.n	800fdfe <HAL_RCC_GetSysClockFreq+0x46>
 800fdf6:	e02b      	b.n	800fe50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800fdf8:	4b1c      	ldr	r3, [pc, #112]	; (800fe6c <HAL_RCC_GetSysClockFreq+0xb4>)
 800fdfa:	623b      	str	r3, [r7, #32]
      break;
 800fdfc:	e02b      	b.n	800fe56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	0c9b      	lsrs	r3, r3, #18
 800fe02:	f003 030f 	and.w	r3, r3, #15
 800fe06:	3328      	adds	r3, #40	; 0x28
 800fe08:	443b      	add	r3, r7
 800fe0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800fe0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d012      	beq.n	800fe40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800fe1a:	4b13      	ldr	r3, [pc, #76]	; (800fe68 <HAL_RCC_GetSysClockFreq+0xb0>)
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	0c5b      	lsrs	r3, r3, #17
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	3328      	adds	r3, #40	; 0x28
 800fe26:	443b      	add	r3, r7
 800fe28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800fe2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	4a0e      	ldr	r2, [pc, #56]	; (800fe6c <HAL_RCC_GetSysClockFreq+0xb4>)
 800fe32:	fb03 f202 	mul.w	r2, r3, r2
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe3c:	627b      	str	r3, [r7, #36]	; 0x24
 800fe3e:	e004      	b.n	800fe4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	4a0b      	ldr	r2, [pc, #44]	; (800fe70 <HAL_RCC_GetSysClockFreq+0xb8>)
 800fe44:	fb02 f303 	mul.w	r3, r2, r3
 800fe48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	623b      	str	r3, [r7, #32]
      break;
 800fe4e:	e002      	b.n	800fe56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800fe50:	4b06      	ldr	r3, [pc, #24]	; (800fe6c <HAL_RCC_GetSysClockFreq+0xb4>)
 800fe52:	623b      	str	r3, [r7, #32]
      break;
 800fe54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fe56:	6a3b      	ldr	r3, [r7, #32]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3728      	adds	r7, #40	; 0x28
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bc90      	pop	{r4, r7}
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	08011c5c 	.word	0x08011c5c
 800fe68:	40021000 	.word	0x40021000
 800fe6c:	007a1200 	.word	0x007a1200
 800fe70:	003d0900 	.word	0x003d0900

0800fe74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe74:	b480      	push	{r7}
 800fe76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fe78:	4b02      	ldr	r3, [pc, #8]	; (800fe84 <HAL_RCC_GetHCLKFreq+0x10>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bc80      	pop	{r7}
 800fe82:	4770      	bx	lr
 800fe84:	200000c4 	.word	0x200000c4

0800fe88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800fe8c:	f7ff fff2 	bl	800fe74 <HAL_RCC_GetHCLKFreq>
 800fe90:	4602      	mov	r2, r0
 800fe92:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	0a1b      	lsrs	r3, r3, #8
 800fe98:	f003 0307 	and.w	r3, r3, #7
 800fe9c:	4903      	ldr	r1, [pc, #12]	; (800feac <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe9e:	5ccb      	ldrb	r3, [r1, r3]
 800fea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	40021000 	.word	0x40021000
 800feac:	08011c7c 	.word	0x08011c7c

0800feb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800feb4:	f7ff ffde 	bl	800fe74 <HAL_RCC_GetHCLKFreq>
 800feb8:	4602      	mov	r2, r0
 800feba:	4b05      	ldr	r3, [pc, #20]	; (800fed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	0adb      	lsrs	r3, r3, #11
 800fec0:	f003 0307 	and.w	r3, r3, #7
 800fec4:	4903      	ldr	r1, [pc, #12]	; (800fed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fec6:	5ccb      	ldrb	r3, [r1, r3]
 800fec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fecc:	4618      	mov	r0, r3
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	40021000 	.word	0x40021000
 800fed4:	08011c7c 	.word	0x08011c7c

0800fed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800fee0:	4b0a      	ldr	r3, [pc, #40]	; (800ff0c <RCC_Delay+0x34>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a0a      	ldr	r2, [pc, #40]	; (800ff10 <RCC_Delay+0x38>)
 800fee6:	fba2 2303 	umull	r2, r3, r2, r3
 800feea:	0a5b      	lsrs	r3, r3, #9
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	fb02 f303 	mul.w	r3, r2, r3
 800fef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800fef4:	bf00      	nop
  }
  while (Delay --);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	1e5a      	subs	r2, r3, #1
 800fefa:	60fa      	str	r2, [r7, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1f9      	bne.n	800fef4 <RCC_Delay+0x1c>
}
 800ff00:	bf00      	nop
 800ff02:	bf00      	nop
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bc80      	pop	{r7}
 800ff0a:	4770      	bx	lr
 800ff0c:	200000c4 	.word	0x200000c4
 800ff10:	10624dd3 	.word	0x10624dd3

0800ff14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ff22:	2301      	movs	r3, #1
 800ff24:	e076      	b.n	8010014 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d108      	bne.n	800ff40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff36:	d009      	beq.n	800ff4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	61da      	str	r2, [r3, #28]
 800ff3e:	e005      	b.n	800ff4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7fe f8da 	bl	800e120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2202      	movs	r2, #2
 800ff70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ff94:	431a      	orrs	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff9e:	431a      	orrs	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	691b      	ldr	r3, [r3, #16]
 800ffa4:	f003 0302 	and.w	r3, r3, #2
 800ffa8:	431a      	orrs	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	695b      	ldr	r3, [r3, #20]
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	431a      	orrs	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	699b      	ldr	r3, [r3, #24]
 800ffb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ffbc:	431a      	orrs	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ffc6:	431a      	orrs	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a1b      	ldr	r3, [r3, #32]
 800ffcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffd0:	ea42 0103 	orr.w	r1, r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	430a      	orrs	r2, r1
 800ffe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	699b      	ldr	r3, [r3, #24]
 800ffe8:	0c1a      	lsrs	r2, r3, #16
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f002 0204 	and.w	r2, r2, #4
 800fff2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	69da      	ldr	r2, [r3, #28]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010002:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b08c      	sub	sp, #48	; 0x30
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801002a:	2301      	movs	r3, #1
 801002c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801003a:	2b01      	cmp	r3, #1
 801003c:	d101      	bne.n	8010042 <HAL_SPI_TransmitReceive+0x26>
 801003e:	2302      	movs	r3, #2
 8010040:	e18a      	b.n	8010358 <HAL_SPI_TransmitReceive+0x33c>
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801004a:	f7fe fac3 	bl	800e5d4 <HAL_GetTick>
 801004e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010060:	887b      	ldrh	r3, [r7, #2]
 8010062:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010068:	2b01      	cmp	r3, #1
 801006a:	d00f      	beq.n	801008c <HAL_SPI_TransmitReceive+0x70>
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010072:	d107      	bne.n	8010084 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d103      	bne.n	8010084 <HAL_SPI_TransmitReceive+0x68>
 801007c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010080:	2b04      	cmp	r3, #4
 8010082:	d003      	beq.n	801008c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010084:	2302      	movs	r3, #2
 8010086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801008a:	e15b      	b.n	8010344 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d005      	beq.n	801009e <HAL_SPI_TransmitReceive+0x82>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <HAL_SPI_TransmitReceive+0x82>
 8010098:	887b      	ldrh	r3, [r7, #2]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d103      	bne.n	80100a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801009e:	2301      	movs	r3, #1
 80100a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80100a4:	e14e      	b.n	8010344 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	2b04      	cmp	r3, #4
 80100b0:	d003      	beq.n	80100ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2205      	movs	r2, #5
 80100b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2200      	movs	r2, #0
 80100be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	887a      	ldrh	r2, [r7, #2]
 80100ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	887a      	ldrh	r2, [r7, #2]
 80100d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	68ba      	ldr	r2, [r7, #8]
 80100d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	887a      	ldrh	r2, [r7, #2]
 80100dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	887a      	ldrh	r2, [r7, #2]
 80100e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2200      	movs	r2, #0
 80100e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100fa:	2b40      	cmp	r3, #64	; 0x40
 80100fc:	d007      	beq.n	801010e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801010c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010116:	d178      	bne.n	801020a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <HAL_SPI_TransmitReceive+0x10a>
 8010120:	8b7b      	ldrh	r3, [r7, #26]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d166      	bne.n	80101f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012a:	881a      	ldrh	r2, [r3, #0]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010136:	1c9a      	adds	r2, r3, #2
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010140:	b29b      	uxth	r3, r3
 8010142:	3b01      	subs	r3, #1
 8010144:	b29a      	uxth	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801014a:	e053      	b.n	80101f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	689b      	ldr	r3, [r3, #8]
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	2b02      	cmp	r3, #2
 8010158:	d11b      	bne.n	8010192 <HAL_SPI_TransmitReceive+0x176>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801015e:	b29b      	uxth	r3, r3
 8010160:	2b00      	cmp	r3, #0
 8010162:	d016      	beq.n	8010192 <HAL_SPI_TransmitReceive+0x176>
 8010164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010166:	2b01      	cmp	r3, #1
 8010168:	d113      	bne.n	8010192 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801016e:	881a      	ldrh	r2, [r3, #0]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017a:	1c9a      	adds	r2, r3, #2
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010184:	b29b      	uxth	r3, r3
 8010186:	3b01      	subs	r3, #1
 8010188:	b29a      	uxth	r2, r3
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801018e:	2300      	movs	r3, #0
 8010190:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b01      	cmp	r3, #1
 801019e:	d119      	bne.n	80101d4 <HAL_SPI_TransmitReceive+0x1b8>
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d014      	beq.n	80101d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	68da      	ldr	r2, [r3, #12]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b4:	b292      	uxth	r2, r2
 80101b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101bc:	1c9a      	adds	r2, r3, #2
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	3b01      	subs	r3, #1
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80101d0:	2301      	movs	r3, #1
 80101d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80101d4:	f7fe f9fe 	bl	800e5d4 <HAL_GetTick>
 80101d8:	4602      	mov	r2, r0
 80101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d807      	bhi.n	80101f4 <HAL_SPI_TransmitReceive+0x1d8>
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ea:	d003      	beq.n	80101f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80101ec:	2303      	movs	r3, #3
 80101ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80101f2:	e0a7      	b.n	8010344 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1a6      	bne.n	801014c <HAL_SPI_TransmitReceive+0x130>
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010202:	b29b      	uxth	r3, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1a1      	bne.n	801014c <HAL_SPI_TransmitReceive+0x130>
 8010208:	e07c      	b.n	8010304 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <HAL_SPI_TransmitReceive+0x1fc>
 8010212:	8b7b      	ldrh	r3, [r7, #26]
 8010214:	2b01      	cmp	r3, #1
 8010216:	d16b      	bne.n	80102f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	330c      	adds	r3, #12
 8010222:	7812      	ldrb	r2, [r2, #0]
 8010224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801022a:	1c5a      	adds	r2, r3, #1
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010234:	b29b      	uxth	r3, r3
 8010236:	3b01      	subs	r3, #1
 8010238:	b29a      	uxth	r2, r3
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801023e:	e057      	b.n	80102f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	f003 0302 	and.w	r3, r3, #2
 801024a:	2b02      	cmp	r3, #2
 801024c:	d11c      	bne.n	8010288 <HAL_SPI_TransmitReceive+0x26c>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010252:	b29b      	uxth	r3, r3
 8010254:	2b00      	cmp	r3, #0
 8010256:	d017      	beq.n	8010288 <HAL_SPI_TransmitReceive+0x26c>
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	2b01      	cmp	r3, #1
 801025c:	d114      	bne.n	8010288 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	330c      	adds	r3, #12
 8010268:	7812      	ldrb	r2, [r2, #0]
 801026a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801027a:	b29b      	uxth	r3, r3
 801027c:	3b01      	subs	r3, #1
 801027e:	b29a      	uxth	r2, r3
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010284:	2300      	movs	r3, #0
 8010286:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	f003 0301 	and.w	r3, r3, #1
 8010292:	2b01      	cmp	r3, #1
 8010294:	d119      	bne.n	80102ca <HAL_SPI_TransmitReceive+0x2ae>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801029a:	b29b      	uxth	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d014      	beq.n	80102ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	68da      	ldr	r2, [r3, #12]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102aa:	b2d2      	uxtb	r2, r2
 80102ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102b2:	1c5a      	adds	r2, r3, #1
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102bc:	b29b      	uxth	r3, r3
 80102be:	3b01      	subs	r3, #1
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80102c6:	2301      	movs	r3, #1
 80102c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80102ca:	f7fe f983 	bl	800e5d4 <HAL_GetTick>
 80102ce:	4602      	mov	r2, r0
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d803      	bhi.n	80102e2 <HAL_SPI_TransmitReceive+0x2c6>
 80102da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e0:	d102      	bne.n	80102e8 <HAL_SPI_TransmitReceive+0x2cc>
 80102e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d103      	bne.n	80102f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80102e8:	2303      	movs	r3, #3
 80102ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80102ee:	e029      	b.n	8010344 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1a2      	bne.n	8010240 <HAL_SPI_TransmitReceive+0x224>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102fe:	b29b      	uxth	r3, r3
 8010300:	2b00      	cmp	r3, #0
 8010302:	d19d      	bne.n	8010240 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f000 f8b1 	bl	8010470 <SPI_EndRxTxTransaction>
 801030e:	4603      	mov	r3, r0
 8010310:	2b00      	cmp	r3, #0
 8010312:	d006      	beq.n	8010322 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010314:	2301      	movs	r3, #1
 8010316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2220      	movs	r2, #32
 801031e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010320:	e010      	b.n	8010344 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10b      	bne.n	8010342 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801032a:	2300      	movs	r3, #0
 801032c:	617b      	str	r3, [r7, #20]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	617b      	str	r3, [r7, #20]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	617b      	str	r3, [r7, #20]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	e000      	b.n	8010344 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2201      	movs	r2, #1
 8010348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010354:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010358:	4618      	mov	r0, r3
 801035a:	3730      	adds	r7, #48	; 0x30
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b088      	sub	sp, #32
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	603b      	str	r3, [r7, #0]
 801036c:	4613      	mov	r3, r2
 801036e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010370:	f7fe f930 	bl	800e5d4 <HAL_GetTick>
 8010374:	4602      	mov	r2, r0
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	1a9b      	subs	r3, r3, r2
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	4413      	add	r3, r2
 801037e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010380:	f7fe f928 	bl	800e5d4 <HAL_GetTick>
 8010384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010386:	4b39      	ldr	r3, [pc, #228]	; (801046c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	015b      	lsls	r3, r3, #5
 801038c:	0d1b      	lsrs	r3, r3, #20
 801038e:	69fa      	ldr	r2, [r7, #28]
 8010390:	fb02 f303 	mul.w	r3, r2, r3
 8010394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010396:	e054      	b.n	8010442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039e:	d050      	beq.n	8010442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80103a0:	f7fe f918 	bl	800e5d4 <HAL_GetTick>
 80103a4:	4602      	mov	r2, r0
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	69fa      	ldr	r2, [r7, #28]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d902      	bls.n	80103b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d13d      	bne.n	8010432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80103c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80103ce:	d111      	bne.n	80103f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103d8:	d004      	beq.n	80103e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103e2:	d107      	bne.n	80103f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80103f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80103fc:	d10f      	bne.n	801041e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801040c:	601a      	str	r2, [r3, #0]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801041c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2201      	movs	r2, #1
 8010422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2200      	movs	r2, #0
 801042a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801042e:	2303      	movs	r3, #3
 8010430:	e017      	b.n	8010462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d101      	bne.n	801043c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010438:	2300      	movs	r3, #0
 801043a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	3b01      	subs	r3, #1
 8010440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	689a      	ldr	r2, [r3, #8]
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	4013      	ands	r3, r2
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	429a      	cmp	r2, r3
 8010450:	bf0c      	ite	eq
 8010452:	2301      	moveq	r3, #1
 8010454:	2300      	movne	r3, #0
 8010456:	b2db      	uxtb	r3, r3
 8010458:	461a      	mov	r2, r3
 801045a:	79fb      	ldrb	r3, [r7, #7]
 801045c:	429a      	cmp	r2, r3
 801045e:	d19b      	bne.n	8010398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3720      	adds	r7, #32
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	200000c4 	.word	0x200000c4

08010470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af02      	add	r7, sp, #8
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2200      	movs	r2, #0
 8010484:	2180      	movs	r1, #128	; 0x80
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7ff ff6a 	bl	8010360 <SPI_WaitFlagStateUntilTimeout>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d007      	beq.n	80104a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010496:	f043 0220 	orr.w	r2, r3, #32
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 801049e:	2303      	movs	r3, #3
 80104a0:	e000      	b.n	80104a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80104a2:	2300      	movs	r3, #0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d101      	bne.n	80104be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e03f      	b.n	801053e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d106      	bne.n	80104d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7fd fe6e 	bl	800e1b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2224      	movs	r2, #36	; 0x24
 80104dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68da      	ldr	r2, [r3, #12]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80104ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 fc85 	bl	8010e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	691a      	ldr	r2, [r3, #16]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	695a      	ldr	r2, [r3, #20]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	68da      	ldr	r2, [r3, #12]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2220      	movs	r2, #32
 8010530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2220      	movs	r2, #32
 8010538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b08a      	sub	sp, #40	; 0x28
 801054a:	af02      	add	r7, sp, #8
 801054c:	60f8      	str	r0, [r7, #12]
 801054e:	60b9      	str	r1, [r7, #8]
 8010550:	603b      	str	r3, [r7, #0]
 8010552:	4613      	mov	r3, r2
 8010554:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010556:	2300      	movs	r3, #0
 8010558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b20      	cmp	r3, #32
 8010564:	d17c      	bne.n	8010660 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <HAL_UART_Transmit+0x2c>
 801056c:	88fb      	ldrh	r3, [r7, #6]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d101      	bne.n	8010576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e075      	b.n	8010662 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801057c:	2b01      	cmp	r3, #1
 801057e:	d101      	bne.n	8010584 <HAL_UART_Transmit+0x3e>
 8010580:	2302      	movs	r3, #2
 8010582:	e06e      	b.n	8010662 <HAL_UART_Transmit+0x11c>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2200      	movs	r2, #0
 8010590:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2221      	movs	r2, #33	; 0x21
 8010596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801059a:	f7fe f81b 	bl	800e5d4 <HAL_GetTick>
 801059e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	88fa      	ldrh	r2, [r7, #6]
 80105a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	88fa      	ldrh	r2, [r7, #6]
 80105aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105b4:	d108      	bne.n	80105c8 <HAL_UART_Transmit+0x82>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d104      	bne.n	80105c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80105be:	2300      	movs	r3, #0
 80105c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	61bb      	str	r3, [r7, #24]
 80105c6:	e003      	b.n	80105d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80105cc:	2300      	movs	r3, #0
 80105ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80105d8:	e02a      	b.n	8010630 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	2200      	movs	r2, #0
 80105e2:	2180      	movs	r1, #128	; 0x80
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f000 fa38 	bl	8010a5a <UART_WaitOnFlagUntilTimeout>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80105f0:	2303      	movs	r3, #3
 80105f2:	e036      	b.n	8010662 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d10b      	bne.n	8010612 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	461a      	mov	r2, r3
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	3302      	adds	r3, #2
 801060e:	61bb      	str	r3, [r7, #24]
 8010610:	e007      	b.n	8010622 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	781a      	ldrb	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	3301      	adds	r3, #1
 8010620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010626:	b29b      	uxth	r3, r3
 8010628:	3b01      	subs	r3, #1
 801062a:	b29a      	uxth	r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010634:	b29b      	uxth	r3, r3
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1cf      	bne.n	80105da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2200      	movs	r2, #0
 8010642:	2140      	movs	r1, #64	; 0x40
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f000 fa08 	bl	8010a5a <UART_WaitOnFlagUntilTimeout>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d001      	beq.n	8010654 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010650:	2303      	movs	r3, #3
 8010652:	e006      	b.n	8010662 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2220      	movs	r2, #32
 8010658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801065c:	2300      	movs	r3, #0
 801065e:	e000      	b.n	8010662 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010660:	2302      	movs	r3, #2
  }
}
 8010662:	4618      	mov	r0, r3
 8010664:	3720      	adds	r7, #32
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801066a:	b580      	push	{r7, lr}
 801066c:	b084      	sub	sp, #16
 801066e:	af00      	add	r7, sp, #0
 8010670:	60f8      	str	r0, [r7, #12]
 8010672:	60b9      	str	r1, [r7, #8]
 8010674:	4613      	mov	r3, r2
 8010676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b20      	cmp	r3, #32
 8010682:	d11d      	bne.n	80106c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d002      	beq.n	8010690 <HAL_UART_Receive_IT+0x26>
 801068a:	88fb      	ldrh	r3, [r7, #6]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d101      	bne.n	8010694 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	e016      	b.n	80106c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801069a:	2b01      	cmp	r3, #1
 801069c:	d101      	bne.n	80106a2 <HAL_UART_Receive_IT+0x38>
 801069e:	2302      	movs	r3, #2
 80106a0:	e00f      	b.n	80106c2 <HAL_UART_Receive_IT+0x58>
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2201      	movs	r2, #1
 80106a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2200      	movs	r2, #0
 80106ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80106b0:	88fb      	ldrh	r3, [r7, #6]
 80106b2:	461a      	mov	r2, r3
 80106b4:	68b9      	ldr	r1, [r7, #8]
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f000 fa19 	bl	8010aee <UART_Start_Receive_IT>
 80106bc:	4603      	mov	r3, r0
 80106be:	e000      	b.n	80106c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80106c0:	2302      	movs	r3, #2
  }
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
	...

080106cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08a      	sub	sp, #40	; 0x28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	695b      	ldr	r3, [r3, #20]
 80106ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80106ec:	2300      	movs	r3, #0
 80106ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80106f0:	2300      	movs	r3, #0
 80106f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80106f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f6:	f003 030f 	and.w	r3, r3, #15
 80106fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d10d      	bne.n	801071e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010704:	f003 0320 	and.w	r3, r3, #32
 8010708:	2b00      	cmp	r3, #0
 801070a:	d008      	beq.n	801071e <HAL_UART_IRQHandler+0x52>
 801070c:	6a3b      	ldr	r3, [r7, #32]
 801070e:	f003 0320 	and.w	r3, r3, #32
 8010712:	2b00      	cmp	r3, #0
 8010714:	d003      	beq.n	801071e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 fac9 	bl	8010cae <UART_Receive_IT>
      return;
 801071c:	e17b      	b.n	8010a16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 80b1 	beq.w	8010888 <HAL_UART_IRQHandler+0x1bc>
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d105      	bne.n	801073c <HAL_UART_IRQHandler+0x70>
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010736:	2b00      	cmp	r3, #0
 8010738:	f000 80a6 	beq.w	8010888 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073e:	f003 0301 	and.w	r3, r3, #1
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00a      	beq.n	801075c <HAL_UART_IRQHandler+0x90>
 8010746:	6a3b      	ldr	r3, [r7, #32]
 8010748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010754:	f043 0201 	orr.w	r2, r3, #1
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075e:	f003 0304 	and.w	r3, r3, #4
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00a      	beq.n	801077c <HAL_UART_IRQHandler+0xb0>
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	f003 0301 	and.w	r3, r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	d005      	beq.n	801077c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010774:	f043 0202 	orr.w	r2, r3, #2
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077e:	f003 0302 	and.w	r3, r3, #2
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00a      	beq.n	801079c <HAL_UART_IRQHandler+0xd0>
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	2b00      	cmp	r3, #0
 801078e:	d005      	beq.n	801079c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010794:	f043 0204 	orr.w	r2, r3, #4
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079e:	f003 0308 	and.w	r3, r3, #8
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00f      	beq.n	80107c6 <HAL_UART_IRQHandler+0xfa>
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	f003 0320 	and.w	r3, r3, #32
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d104      	bne.n	80107ba <HAL_UART_IRQHandler+0xee>
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	f003 0301 	and.w	r3, r3, #1
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d005      	beq.n	80107c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107be:	f043 0208 	orr.w	r2, r3, #8
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f000 811e 	beq.w	8010a0c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80107d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d2:	f003 0320 	and.w	r3, r3, #32
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d007      	beq.n	80107ea <HAL_UART_IRQHandler+0x11e>
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	f003 0320 	and.w	r3, r3, #32
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 fa62 	bl	8010cae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	695b      	ldr	r3, [r3, #20]
 80107f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	bf14      	ite	ne
 80107f8:	2301      	movne	r3, #1
 80107fa:	2300      	moveq	r3, #0
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010804:	f003 0308 	and.w	r3, r3, #8
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <HAL_UART_IRQHandler+0x146>
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d031      	beq.n	8010876 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f9a4 	bl	8010b60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	695b      	ldr	r3, [r3, #20]
 801081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010822:	2b00      	cmp	r3, #0
 8010824:	d023      	beq.n	801086e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	695a      	ldr	r2, [r3, #20]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010834:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801083a:	2b00      	cmp	r3, #0
 801083c:	d013      	beq.n	8010866 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010842:	4a76      	ldr	r2, [pc, #472]	; (8010a1c <HAL_UART_IRQHandler+0x350>)
 8010844:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801084a:	4618      	mov	r0, r3
 801084c:	f7fe f838 	bl	800e8c0 <HAL_DMA_Abort_IT>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d016      	beq.n	8010884 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801085a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010860:	4610      	mov	r0, r2
 8010862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010864:	e00e      	b.n	8010884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f8e3 	bl	8010a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801086c:	e00a      	b.n	8010884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 f8df 	bl	8010a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010874:	e006      	b.n	8010884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 f8db 	bl	8010a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010882:	e0c3      	b.n	8010a0c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010884:	bf00      	nop
    return;
 8010886:	e0c1      	b.n	8010a0c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801088c:	2b01      	cmp	r3, #1
 801088e:	f040 80a1 	bne.w	80109d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	f003 0310 	and.w	r3, r3, #16
 8010898:	2b00      	cmp	r3, #0
 801089a:	f000 809b 	beq.w	80109d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	f003 0310 	and.w	r3, r3, #16
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f000 8095 	beq.w	80109d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80108aa:	2300      	movs	r3, #0
 80108ac:	60fb      	str	r3, [r7, #12]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	60fb      	str	r3, [r7, #12]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	60fb      	str	r3, [r7, #12]
 80108be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	695b      	ldr	r3, [r3, #20]
 80108c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d04e      	beq.n	801096c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80108d8:	8a3b      	ldrh	r3, [r7, #16]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 8098 	beq.w	8010a10 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80108e4:	8a3a      	ldrh	r2, [r7, #16]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	f080 8092 	bcs.w	8010a10 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	8a3a      	ldrh	r2, [r7, #16]
 80108f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108f6:	699b      	ldr	r3, [r3, #24]
 80108f8:	2b20      	cmp	r3, #32
 80108fa:	d02b      	beq.n	8010954 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68da      	ldr	r2, [r3, #12]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801090a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	695a      	ldr	r2, [r3, #20]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f022 0201 	bic.w	r2, r2, #1
 801091a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	695a      	ldr	r2, [r3, #20]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801092a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2220      	movs	r2, #32
 8010930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68da      	ldr	r2, [r3, #12]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f022 0210 	bic.w	r2, r2, #16
 8010948:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801094e:	4618      	mov	r0, r3
 8010950:	f7fd ff7b 	bl	800e84a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801095c:	b29b      	uxth	r3, r3
 801095e:	1ad3      	subs	r3, r2, r3
 8010960:	b29b      	uxth	r3, r3
 8010962:	4619      	mov	r1, r3
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 f86d 	bl	8010a44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801096a:	e051      	b.n	8010a10 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010974:	b29b      	uxth	r3, r3
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801097e:	b29b      	uxth	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	d047      	beq.n	8010a14 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8010984:	8a7b      	ldrh	r3, [r7, #18]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d044      	beq.n	8010a14 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	68da      	ldr	r2, [r3, #12]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010998:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	695a      	ldr	r2, [r3, #20]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 0201 	bic.w	r2, r2, #1
 80109a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2220      	movs	r2, #32
 80109ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68da      	ldr	r2, [r3, #12]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f022 0210 	bic.w	r2, r2, #16
 80109c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80109c8:	8a7b      	ldrh	r3, [r7, #18]
 80109ca:	4619      	mov	r1, r3
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 f839 	bl	8010a44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80109d2:	e01f      	b.n	8010a14 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d008      	beq.n	80109f0 <HAL_UART_IRQHandler+0x324>
 80109de:	6a3b      	ldr	r3, [r7, #32]
 80109e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d003      	beq.n	80109f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f8f9 	bl	8010be0 <UART_Transmit_IT>
    return;
 80109ee:	e012      	b.n	8010a16 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80109f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00d      	beq.n	8010a16 <HAL_UART_IRQHandler+0x34a>
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d008      	beq.n	8010a16 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 f93a 	bl	8010c7e <UART_EndTransmit_IT>
    return;
 8010a0a:	e004      	b.n	8010a16 <HAL_UART_IRQHandler+0x34a>
    return;
 8010a0c:	bf00      	nop
 8010a0e:	e002      	b.n	8010a16 <HAL_UART_IRQHandler+0x34a>
      return;
 8010a10:	bf00      	nop
 8010a12:	e000      	b.n	8010a16 <HAL_UART_IRQHandler+0x34a>
      return;
 8010a14:	bf00      	nop
  }
}
 8010a16:	3728      	adds	r7, #40	; 0x28
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	08010bb9 	.word	0x08010bb9

08010a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010a28:	bf00      	nop
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bc80      	pop	{r7}
 8010a30:	4770      	bx	lr

08010a32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010a32:	b480      	push	{r7}
 8010a34:	b083      	sub	sp, #12
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010a3a:	bf00      	nop
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bc80      	pop	{r7}
 8010a42:	4770      	bx	lr

08010a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bc80      	pop	{r7}
 8010a58:	4770      	bx	lr

08010a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b084      	sub	sp, #16
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	60f8      	str	r0, [r7, #12]
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	603b      	str	r3, [r7, #0]
 8010a66:	4613      	mov	r3, r2
 8010a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a6a:	e02c      	b.n	8010ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a72:	d028      	beq.n	8010ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d007      	beq.n	8010a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8010a7a:	f7fd fdab 	bl	800e5d4 <HAL_GetTick>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	69ba      	ldr	r2, [r7, #24]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d21d      	bcs.n	8010ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68da      	ldr	r2, [r3, #12]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	695a      	ldr	r2, [r3, #20]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f022 0201 	bic.w	r2, r2, #1
 8010aa8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2220      	movs	r2, #32
 8010aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2220      	movs	r2, #32
 8010ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2200      	movs	r2, #0
 8010abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010ac2:	2303      	movs	r3, #3
 8010ac4:	e00f      	b.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	681a      	ldr	r2, [r3, #0]
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	4013      	ands	r3, r2
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	bf0c      	ite	eq
 8010ad6:	2301      	moveq	r3, #1
 8010ad8:	2300      	movne	r3, #0
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	461a      	mov	r2, r3
 8010ade:	79fb      	ldrb	r3, [r7, #7]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d0c3      	beq.n	8010a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010ae4:	2300      	movs	r3, #0
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b085      	sub	sp, #20
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	60f8      	str	r0, [r7, #12]
 8010af6:	60b9      	str	r1, [r7, #8]
 8010af8:	4613      	mov	r3, r2
 8010afa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	88fa      	ldrh	r2, [r7, #6]
 8010b06:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	88fa      	ldrh	r2, [r7, #6]
 8010b0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2200      	movs	r2, #0
 8010b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2222      	movs	r2, #34	; 0x22
 8010b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b32:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	695a      	ldr	r2, [r3, #20]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f042 0201 	orr.w	r2, r2, #1
 8010b42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	68da      	ldr	r2, [r3, #12]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f042 0220 	orr.w	r2, r2, #32
 8010b52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bc80      	pop	{r7}
 8010b5e:	4770      	bx	lr

08010b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b083      	sub	sp, #12
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68da      	ldr	r2, [r3, #12]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	695a      	ldr	r2, [r3, #20]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f022 0201 	bic.w	r2, r2, #1
 8010b86:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d107      	bne.n	8010ba0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	68da      	ldr	r2, [r3, #12]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f022 0210 	bic.w	r2, r2, #16
 8010b9e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2220      	movs	r2, #32
 8010ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010bae:	bf00      	nop
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bc80      	pop	{r7}
 8010bb6:	4770      	bx	lr

08010bb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f7ff ff2d 	bl	8010a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bd8:	bf00      	nop
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	2b21      	cmp	r3, #33	; 0x21
 8010bf2:	d13e      	bne.n	8010c72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bfc:	d114      	bne.n	8010c28 <UART_Transmit_IT+0x48>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	691b      	ldr	r3, [r3, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d110      	bne.n	8010c28 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6a1b      	ldr	r3, [r3, #32]
 8010c0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	461a      	mov	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6a1b      	ldr	r3, [r3, #32]
 8010c20:	1c9a      	adds	r2, r3, #2
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	621a      	str	r2, [r3, #32]
 8010c26:	e008      	b.n	8010c3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6a1b      	ldr	r3, [r3, #32]
 8010c2c:	1c59      	adds	r1, r3, #1
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	6211      	str	r1, [r2, #32]
 8010c32:	781a      	ldrb	r2, [r3, #0]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	3b01      	subs	r3, #1
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	4619      	mov	r1, r3
 8010c48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10f      	bne.n	8010c6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	68da      	ldr	r2, [r3, #12]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68da      	ldr	r2, [r3, #12]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e000      	b.n	8010c74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010c72:	2302      	movs	r3, #2
  }
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3714      	adds	r7, #20
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bc80      	pop	{r7}
 8010c7c:	4770      	bx	lr

08010c7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b082      	sub	sp, #8
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68da      	ldr	r2, [r3, #12]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2220      	movs	r2, #32
 8010c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7ff febe 	bl	8010a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3708      	adds	r7, #8
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}

08010cae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b086      	sub	sp, #24
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b22      	cmp	r3, #34	; 0x22
 8010cc0:	f040 8099 	bne.w	8010df6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ccc:	d117      	bne.n	8010cfe <UART_Receive_IT+0x50>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	691b      	ldr	r3, [r3, #16]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d113      	bne.n	8010cfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cde:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cf6:	1c9a      	adds	r2, r3, #2
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8010cfc:	e026      	b.n	8010d4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d02:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8010d04:	2300      	movs	r3, #0
 8010d06:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d10:	d007      	beq.n	8010d22 <UART_Receive_IT+0x74>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	689b      	ldr	r3, [r3, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10a      	bne.n	8010d30 <UART_Receive_IT+0x82>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	691b      	ldr	r3, [r3, #16]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d106      	bne.n	8010d30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	e008      	b.n	8010d42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d46:	1c5a      	adds	r2, r3, #1
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	3b01      	subs	r3, #1
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	4619      	mov	r1, r3
 8010d5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d148      	bne.n	8010df2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	68da      	ldr	r2, [r3, #12]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f022 0220 	bic.w	r2, r2, #32
 8010d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	68da      	ldr	r2, [r3, #12]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	695a      	ldr	r2, [r3, #20]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f022 0201 	bic.w	r2, r2, #1
 8010d8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2220      	movs	r2, #32
 8010d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d123      	bne.n	8010de8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	68da      	ldr	r2, [r3, #12]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f022 0210 	bic.w	r2, r2, #16
 8010db4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f003 0310 	and.w	r3, r3, #16
 8010dc0:	2b10      	cmp	r3, #16
 8010dc2:	d10a      	bne.n	8010dda <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	60fb      	str	r3, [r7, #12]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	60fb      	str	r3, [r7, #12]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	60fb      	str	r3, [r7, #12]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7ff fe2f 	bl	8010a44 <HAL_UARTEx_RxEventCallback>
 8010de6:	e002      	b.n	8010dee <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f7fb ff91 	bl	800cd10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010dee:	2300      	movs	r3, #0
 8010df0:	e002      	b.n	8010df8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	e000      	b.n	8010df8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8010df6:	2302      	movs	r3, #2
  }
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3718      	adds	r7, #24
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68da      	ldr	r2, [r3, #12]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	430a      	orrs	r2, r1
 8010e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	689a      	ldr	r2, [r3, #8]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	431a      	orrs	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010e3a:	f023 030c 	bic.w	r3, r3, #12
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	6812      	ldr	r2, [r2, #0]
 8010e42:	68b9      	ldr	r1, [r7, #8]
 8010e44:	430b      	orrs	r3, r1
 8010e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	695b      	ldr	r3, [r3, #20]
 8010e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	699a      	ldr	r2, [r3, #24]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	430a      	orrs	r2, r1
 8010e5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a2c      	ldr	r2, [pc, #176]	; (8010f14 <UART_SetConfig+0x114>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d103      	bne.n	8010e70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010e68:	f7ff f822 	bl	800feb0 <HAL_RCC_GetPCLK2Freq>
 8010e6c:	60f8      	str	r0, [r7, #12]
 8010e6e:	e002      	b.n	8010e76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8010e70:	f7ff f80a 	bl	800fe88 <HAL_RCC_GetPCLK1Freq>
 8010e74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	4413      	add	r3, r2
 8010e7e:	009a      	lsls	r2, r3, #2
 8010e80:	441a      	add	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e8c:	4a22      	ldr	r2, [pc, #136]	; (8010f18 <UART_SetConfig+0x118>)
 8010e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e92:	095b      	lsrs	r3, r3, #5
 8010e94:	0119      	lsls	r1, r3, #4
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	4613      	mov	r3, r2
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	4413      	add	r3, r2
 8010e9e:	009a      	lsls	r2, r3, #2
 8010ea0:	441a      	add	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8010eac:	4b1a      	ldr	r3, [pc, #104]	; (8010f18 <UART_SetConfig+0x118>)
 8010eae:	fba3 0302 	umull	r0, r3, r3, r2
 8010eb2:	095b      	lsrs	r3, r3, #5
 8010eb4:	2064      	movs	r0, #100	; 0x64
 8010eb6:	fb00 f303 	mul.w	r3, r0, r3
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	011b      	lsls	r3, r3, #4
 8010ebe:	3332      	adds	r3, #50	; 0x32
 8010ec0:	4a15      	ldr	r2, [pc, #84]	; (8010f18 <UART_SetConfig+0x118>)
 8010ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ec6:	095b      	lsrs	r3, r3, #5
 8010ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ecc:	4419      	add	r1, r3
 8010ece:	68fa      	ldr	r2, [r7, #12]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	4413      	add	r3, r2
 8010ed6:	009a      	lsls	r2, r3, #2
 8010ed8:	441a      	add	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	; (8010f18 <UART_SetConfig+0x118>)
 8010ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8010eea:	095b      	lsrs	r3, r3, #5
 8010eec:	2064      	movs	r0, #100	; 0x64
 8010eee:	fb00 f303 	mul.w	r3, r0, r3
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	011b      	lsls	r3, r3, #4
 8010ef6:	3332      	adds	r3, #50	; 0x32
 8010ef8:	4a07      	ldr	r2, [pc, #28]	; (8010f18 <UART_SetConfig+0x118>)
 8010efa:	fba2 2303 	umull	r2, r3, r2, r3
 8010efe:	095b      	lsrs	r3, r3, #5
 8010f00:	f003 020f 	and.w	r2, r3, #15
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	440a      	add	r2, r1
 8010f0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8010f0c:	bf00      	nop
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	40013800 	.word	0x40013800
 8010f18:	51eb851f 	.word	0x51eb851f

08010f1c <atoi>:
 8010f1c:	220a      	movs	r2, #10
 8010f1e:	2100      	movs	r1, #0
 8010f20:	f000 b8f0 	b.w	8011104 <strtol>

08010f24 <__errno>:
 8010f24:	4b01      	ldr	r3, [pc, #4]	; (8010f2c <__errno+0x8>)
 8010f26:	6818      	ldr	r0, [r3, #0]
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	200000d0 	.word	0x200000d0

08010f30 <__libc_init_array>:
 8010f30:	b570      	push	{r4, r5, r6, lr}
 8010f32:	2600      	movs	r6, #0
 8010f34:	4d0c      	ldr	r5, [pc, #48]	; (8010f68 <__libc_init_array+0x38>)
 8010f36:	4c0d      	ldr	r4, [pc, #52]	; (8010f6c <__libc_init_array+0x3c>)
 8010f38:	1b64      	subs	r4, r4, r5
 8010f3a:	10a4      	asrs	r4, r4, #2
 8010f3c:	42a6      	cmp	r6, r4
 8010f3e:	d109      	bne.n	8010f54 <__libc_init_array+0x24>
 8010f40:	f000 fd36 	bl	80119b0 <_init>
 8010f44:	2600      	movs	r6, #0
 8010f46:	4d0a      	ldr	r5, [pc, #40]	; (8010f70 <__libc_init_array+0x40>)
 8010f48:	4c0a      	ldr	r4, [pc, #40]	; (8010f74 <__libc_init_array+0x44>)
 8010f4a:	1b64      	subs	r4, r4, r5
 8010f4c:	10a4      	asrs	r4, r4, #2
 8010f4e:	42a6      	cmp	r6, r4
 8010f50:	d105      	bne.n	8010f5e <__libc_init_array+0x2e>
 8010f52:	bd70      	pop	{r4, r5, r6, pc}
 8010f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f58:	4798      	blx	r3
 8010f5a:	3601      	adds	r6, #1
 8010f5c:	e7ee      	b.n	8010f3c <__libc_init_array+0xc>
 8010f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f62:	4798      	blx	r3
 8010f64:	3601      	adds	r6, #1
 8010f66:	e7f2      	b.n	8010f4e <__libc_init_array+0x1e>
 8010f68:	08011db8 	.word	0x08011db8
 8010f6c:	08011db8 	.word	0x08011db8
 8010f70:	08011db8 	.word	0x08011db8
 8010f74:	08011dbc 	.word	0x08011dbc

08010f78 <memcpy>:
 8010f78:	440a      	add	r2, r1
 8010f7a:	4291      	cmp	r1, r2
 8010f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f80:	d100      	bne.n	8010f84 <memcpy+0xc>
 8010f82:	4770      	bx	lr
 8010f84:	b510      	push	{r4, lr}
 8010f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f8a:	4291      	cmp	r1, r2
 8010f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f90:	d1f9      	bne.n	8010f86 <memcpy+0xe>
 8010f92:	bd10      	pop	{r4, pc}

08010f94 <memset>:
 8010f94:	4603      	mov	r3, r0
 8010f96:	4402      	add	r2, r0
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d100      	bne.n	8010f9e <memset+0xa>
 8010f9c:	4770      	bx	lr
 8010f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8010fa2:	e7f9      	b.n	8010f98 <memset+0x4>

08010fa4 <siprintf>:
 8010fa4:	b40e      	push	{r1, r2, r3}
 8010fa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010faa:	b500      	push	{lr}
 8010fac:	b09c      	sub	sp, #112	; 0x70
 8010fae:	ab1d      	add	r3, sp, #116	; 0x74
 8010fb0:	9002      	str	r0, [sp, #8]
 8010fb2:	9006      	str	r0, [sp, #24]
 8010fb4:	9107      	str	r1, [sp, #28]
 8010fb6:	9104      	str	r1, [sp, #16]
 8010fb8:	4808      	ldr	r0, [pc, #32]	; (8010fdc <siprintf+0x38>)
 8010fba:	4909      	ldr	r1, [pc, #36]	; (8010fe0 <siprintf+0x3c>)
 8010fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fc0:	9105      	str	r1, [sp, #20]
 8010fc2:	6800      	ldr	r0, [r0, #0]
 8010fc4:	a902      	add	r1, sp, #8
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	f000 f902 	bl	80111d0 <_svfiprintf_r>
 8010fcc:	2200      	movs	r2, #0
 8010fce:	9b02      	ldr	r3, [sp, #8]
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	b01c      	add	sp, #112	; 0x70
 8010fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fd8:	b003      	add	sp, #12
 8010fda:	4770      	bx	lr
 8010fdc:	200000d0 	.word	0x200000d0
 8010fe0:	ffff0208 	.word	0xffff0208

08010fe4 <strncpy>:
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	b510      	push	{r4, lr}
 8010fe8:	3901      	subs	r1, #1
 8010fea:	b132      	cbz	r2, 8010ffa <strncpy+0x16>
 8010fec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ff0:	3a01      	subs	r2, #1
 8010ff2:	f803 4b01 	strb.w	r4, [r3], #1
 8010ff6:	2c00      	cmp	r4, #0
 8010ff8:	d1f7      	bne.n	8010fea <strncpy+0x6>
 8010ffa:	2100      	movs	r1, #0
 8010ffc:	441a      	add	r2, r3
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d100      	bne.n	8011004 <strncpy+0x20>
 8011002:	bd10      	pop	{r4, pc}
 8011004:	f803 1b01 	strb.w	r1, [r3], #1
 8011008:	e7f9      	b.n	8010ffe <strncpy+0x1a>
	...

0801100c <_strtol_l.constprop.0>:
 801100c:	2b01      	cmp	r3, #1
 801100e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011012:	4680      	mov	r8, r0
 8011014:	d001      	beq.n	801101a <_strtol_l.constprop.0+0xe>
 8011016:	2b24      	cmp	r3, #36	; 0x24
 8011018:	d906      	bls.n	8011028 <_strtol_l.constprop.0+0x1c>
 801101a:	f7ff ff83 	bl	8010f24 <__errno>
 801101e:	2316      	movs	r3, #22
 8011020:	6003      	str	r3, [r0, #0]
 8011022:	2000      	movs	r0, #0
 8011024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011028:	460d      	mov	r5, r1
 801102a:	4f35      	ldr	r7, [pc, #212]	; (8011100 <_strtol_l.constprop.0+0xf4>)
 801102c:	4628      	mov	r0, r5
 801102e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011032:	5de6      	ldrb	r6, [r4, r7]
 8011034:	f016 0608 	ands.w	r6, r6, #8
 8011038:	d1f8      	bne.n	801102c <_strtol_l.constprop.0+0x20>
 801103a:	2c2d      	cmp	r4, #45	; 0x2d
 801103c:	d12f      	bne.n	801109e <_strtol_l.constprop.0+0x92>
 801103e:	2601      	movs	r6, #1
 8011040:	782c      	ldrb	r4, [r5, #0]
 8011042:	1c85      	adds	r5, r0, #2
 8011044:	2b00      	cmp	r3, #0
 8011046:	d057      	beq.n	80110f8 <_strtol_l.constprop.0+0xec>
 8011048:	2b10      	cmp	r3, #16
 801104a:	d109      	bne.n	8011060 <_strtol_l.constprop.0+0x54>
 801104c:	2c30      	cmp	r4, #48	; 0x30
 801104e:	d107      	bne.n	8011060 <_strtol_l.constprop.0+0x54>
 8011050:	7828      	ldrb	r0, [r5, #0]
 8011052:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011056:	2858      	cmp	r0, #88	; 0x58
 8011058:	d149      	bne.n	80110ee <_strtol_l.constprop.0+0xe2>
 801105a:	2310      	movs	r3, #16
 801105c:	786c      	ldrb	r4, [r5, #1]
 801105e:	3502      	adds	r5, #2
 8011060:	2700      	movs	r7, #0
 8011062:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8011066:	f10e 3eff 	add.w	lr, lr, #4294967295
 801106a:	fbbe f9f3 	udiv	r9, lr, r3
 801106e:	4638      	mov	r0, r7
 8011070:	fb03 ea19 	mls	sl, r3, r9, lr
 8011074:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011078:	f1bc 0f09 	cmp.w	ip, #9
 801107c:	d814      	bhi.n	80110a8 <_strtol_l.constprop.0+0x9c>
 801107e:	4664      	mov	r4, ip
 8011080:	42a3      	cmp	r3, r4
 8011082:	dd22      	ble.n	80110ca <_strtol_l.constprop.0+0xbe>
 8011084:	2f00      	cmp	r7, #0
 8011086:	db1d      	blt.n	80110c4 <_strtol_l.constprop.0+0xb8>
 8011088:	4581      	cmp	r9, r0
 801108a:	d31b      	bcc.n	80110c4 <_strtol_l.constprop.0+0xb8>
 801108c:	d101      	bne.n	8011092 <_strtol_l.constprop.0+0x86>
 801108e:	45a2      	cmp	sl, r4
 8011090:	db18      	blt.n	80110c4 <_strtol_l.constprop.0+0xb8>
 8011092:	2701      	movs	r7, #1
 8011094:	fb00 4003 	mla	r0, r0, r3, r4
 8011098:	f815 4b01 	ldrb.w	r4, [r5], #1
 801109c:	e7ea      	b.n	8011074 <_strtol_l.constprop.0+0x68>
 801109e:	2c2b      	cmp	r4, #43	; 0x2b
 80110a0:	bf04      	itt	eq
 80110a2:	782c      	ldrbeq	r4, [r5, #0]
 80110a4:	1c85      	addeq	r5, r0, #2
 80110a6:	e7cd      	b.n	8011044 <_strtol_l.constprop.0+0x38>
 80110a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80110ac:	f1bc 0f19 	cmp.w	ip, #25
 80110b0:	d801      	bhi.n	80110b6 <_strtol_l.constprop.0+0xaa>
 80110b2:	3c37      	subs	r4, #55	; 0x37
 80110b4:	e7e4      	b.n	8011080 <_strtol_l.constprop.0+0x74>
 80110b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80110ba:	f1bc 0f19 	cmp.w	ip, #25
 80110be:	d804      	bhi.n	80110ca <_strtol_l.constprop.0+0xbe>
 80110c0:	3c57      	subs	r4, #87	; 0x57
 80110c2:	e7dd      	b.n	8011080 <_strtol_l.constprop.0+0x74>
 80110c4:	f04f 37ff 	mov.w	r7, #4294967295
 80110c8:	e7e6      	b.n	8011098 <_strtol_l.constprop.0+0x8c>
 80110ca:	2f00      	cmp	r7, #0
 80110cc:	da07      	bge.n	80110de <_strtol_l.constprop.0+0xd2>
 80110ce:	2322      	movs	r3, #34	; 0x22
 80110d0:	4670      	mov	r0, lr
 80110d2:	f8c8 3000 	str.w	r3, [r8]
 80110d6:	2a00      	cmp	r2, #0
 80110d8:	d0a4      	beq.n	8011024 <_strtol_l.constprop.0+0x18>
 80110da:	1e69      	subs	r1, r5, #1
 80110dc:	e005      	b.n	80110ea <_strtol_l.constprop.0+0xde>
 80110de:	b106      	cbz	r6, 80110e2 <_strtol_l.constprop.0+0xd6>
 80110e0:	4240      	negs	r0, r0
 80110e2:	2a00      	cmp	r2, #0
 80110e4:	d09e      	beq.n	8011024 <_strtol_l.constprop.0+0x18>
 80110e6:	2f00      	cmp	r7, #0
 80110e8:	d1f7      	bne.n	80110da <_strtol_l.constprop.0+0xce>
 80110ea:	6011      	str	r1, [r2, #0]
 80110ec:	e79a      	b.n	8011024 <_strtol_l.constprop.0+0x18>
 80110ee:	2430      	movs	r4, #48	; 0x30
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1b5      	bne.n	8011060 <_strtol_l.constprop.0+0x54>
 80110f4:	2308      	movs	r3, #8
 80110f6:	e7b3      	b.n	8011060 <_strtol_l.constprop.0+0x54>
 80110f8:	2c30      	cmp	r4, #48	; 0x30
 80110fa:	d0a9      	beq.n	8011050 <_strtol_l.constprop.0+0x44>
 80110fc:	230a      	movs	r3, #10
 80110fe:	e7af      	b.n	8011060 <_strtol_l.constprop.0+0x54>
 8011100:	08011c85 	.word	0x08011c85

08011104 <strtol>:
 8011104:	4613      	mov	r3, r2
 8011106:	460a      	mov	r2, r1
 8011108:	4601      	mov	r1, r0
 801110a:	4802      	ldr	r0, [pc, #8]	; (8011114 <strtol+0x10>)
 801110c:	6800      	ldr	r0, [r0, #0]
 801110e:	f7ff bf7d 	b.w	801100c <_strtol_l.constprop.0>
 8011112:	bf00      	nop
 8011114:	200000d0 	.word	0x200000d0

08011118 <__ssputs_r>:
 8011118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801111c:	688e      	ldr	r6, [r1, #8]
 801111e:	4682      	mov	sl, r0
 8011120:	429e      	cmp	r6, r3
 8011122:	460c      	mov	r4, r1
 8011124:	4690      	mov	r8, r2
 8011126:	461f      	mov	r7, r3
 8011128:	d838      	bhi.n	801119c <__ssputs_r+0x84>
 801112a:	898a      	ldrh	r2, [r1, #12]
 801112c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011130:	d032      	beq.n	8011198 <__ssputs_r+0x80>
 8011132:	6825      	ldr	r5, [r4, #0]
 8011134:	6909      	ldr	r1, [r1, #16]
 8011136:	3301      	adds	r3, #1
 8011138:	eba5 0901 	sub.w	r9, r5, r1
 801113c:	6965      	ldr	r5, [r4, #20]
 801113e:	444b      	add	r3, r9
 8011140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011148:	106d      	asrs	r5, r5, #1
 801114a:	429d      	cmp	r5, r3
 801114c:	bf38      	it	cc
 801114e:	461d      	movcc	r5, r3
 8011150:	0553      	lsls	r3, r2, #21
 8011152:	d531      	bpl.n	80111b8 <__ssputs_r+0xa0>
 8011154:	4629      	mov	r1, r5
 8011156:	f000 fb61 	bl	801181c <_malloc_r>
 801115a:	4606      	mov	r6, r0
 801115c:	b950      	cbnz	r0, 8011174 <__ssputs_r+0x5c>
 801115e:	230c      	movs	r3, #12
 8011160:	f04f 30ff 	mov.w	r0, #4294967295
 8011164:	f8ca 3000 	str.w	r3, [sl]
 8011168:	89a3      	ldrh	r3, [r4, #12]
 801116a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801116e:	81a3      	strh	r3, [r4, #12]
 8011170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011174:	464a      	mov	r2, r9
 8011176:	6921      	ldr	r1, [r4, #16]
 8011178:	f7ff fefe 	bl	8010f78 <memcpy>
 801117c:	89a3      	ldrh	r3, [r4, #12]
 801117e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011186:	81a3      	strh	r3, [r4, #12]
 8011188:	6126      	str	r6, [r4, #16]
 801118a:	444e      	add	r6, r9
 801118c:	6026      	str	r6, [r4, #0]
 801118e:	463e      	mov	r6, r7
 8011190:	6165      	str	r5, [r4, #20]
 8011192:	eba5 0509 	sub.w	r5, r5, r9
 8011196:	60a5      	str	r5, [r4, #8]
 8011198:	42be      	cmp	r6, r7
 801119a:	d900      	bls.n	801119e <__ssputs_r+0x86>
 801119c:	463e      	mov	r6, r7
 801119e:	4632      	mov	r2, r6
 80111a0:	4641      	mov	r1, r8
 80111a2:	6820      	ldr	r0, [r4, #0]
 80111a4:	f000 fab8 	bl	8011718 <memmove>
 80111a8:	68a3      	ldr	r3, [r4, #8]
 80111aa:	2000      	movs	r0, #0
 80111ac:	1b9b      	subs	r3, r3, r6
 80111ae:	60a3      	str	r3, [r4, #8]
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	4433      	add	r3, r6
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	e7db      	b.n	8011170 <__ssputs_r+0x58>
 80111b8:	462a      	mov	r2, r5
 80111ba:	f000 fba3 	bl	8011904 <_realloc_r>
 80111be:	4606      	mov	r6, r0
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d1e1      	bne.n	8011188 <__ssputs_r+0x70>
 80111c4:	4650      	mov	r0, sl
 80111c6:	6921      	ldr	r1, [r4, #16]
 80111c8:	f000 fac0 	bl	801174c <_free_r>
 80111cc:	e7c7      	b.n	801115e <__ssputs_r+0x46>
	...

080111d0 <_svfiprintf_r>:
 80111d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d4:	4698      	mov	r8, r3
 80111d6:	898b      	ldrh	r3, [r1, #12]
 80111d8:	4607      	mov	r7, r0
 80111da:	061b      	lsls	r3, r3, #24
 80111dc:	460d      	mov	r5, r1
 80111de:	4614      	mov	r4, r2
 80111e0:	b09d      	sub	sp, #116	; 0x74
 80111e2:	d50e      	bpl.n	8011202 <_svfiprintf_r+0x32>
 80111e4:	690b      	ldr	r3, [r1, #16]
 80111e6:	b963      	cbnz	r3, 8011202 <_svfiprintf_r+0x32>
 80111e8:	2140      	movs	r1, #64	; 0x40
 80111ea:	f000 fb17 	bl	801181c <_malloc_r>
 80111ee:	6028      	str	r0, [r5, #0]
 80111f0:	6128      	str	r0, [r5, #16]
 80111f2:	b920      	cbnz	r0, 80111fe <_svfiprintf_r+0x2e>
 80111f4:	230c      	movs	r3, #12
 80111f6:	603b      	str	r3, [r7, #0]
 80111f8:	f04f 30ff 	mov.w	r0, #4294967295
 80111fc:	e0d1      	b.n	80113a2 <_svfiprintf_r+0x1d2>
 80111fe:	2340      	movs	r3, #64	; 0x40
 8011200:	616b      	str	r3, [r5, #20]
 8011202:	2300      	movs	r3, #0
 8011204:	9309      	str	r3, [sp, #36]	; 0x24
 8011206:	2320      	movs	r3, #32
 8011208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801120c:	2330      	movs	r3, #48	; 0x30
 801120e:	f04f 0901 	mov.w	r9, #1
 8011212:	f8cd 800c 	str.w	r8, [sp, #12]
 8011216:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80113bc <_svfiprintf_r+0x1ec>
 801121a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801121e:	4623      	mov	r3, r4
 8011220:	469a      	mov	sl, r3
 8011222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011226:	b10a      	cbz	r2, 801122c <_svfiprintf_r+0x5c>
 8011228:	2a25      	cmp	r2, #37	; 0x25
 801122a:	d1f9      	bne.n	8011220 <_svfiprintf_r+0x50>
 801122c:	ebba 0b04 	subs.w	fp, sl, r4
 8011230:	d00b      	beq.n	801124a <_svfiprintf_r+0x7a>
 8011232:	465b      	mov	r3, fp
 8011234:	4622      	mov	r2, r4
 8011236:	4629      	mov	r1, r5
 8011238:	4638      	mov	r0, r7
 801123a:	f7ff ff6d 	bl	8011118 <__ssputs_r>
 801123e:	3001      	adds	r0, #1
 8011240:	f000 80aa 	beq.w	8011398 <_svfiprintf_r+0x1c8>
 8011244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011246:	445a      	add	r2, fp
 8011248:	9209      	str	r2, [sp, #36]	; 0x24
 801124a:	f89a 3000 	ldrb.w	r3, [sl]
 801124e:	2b00      	cmp	r3, #0
 8011250:	f000 80a2 	beq.w	8011398 <_svfiprintf_r+0x1c8>
 8011254:	2300      	movs	r3, #0
 8011256:	f04f 32ff 	mov.w	r2, #4294967295
 801125a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801125e:	f10a 0a01 	add.w	sl, sl, #1
 8011262:	9304      	str	r3, [sp, #16]
 8011264:	9307      	str	r3, [sp, #28]
 8011266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801126a:	931a      	str	r3, [sp, #104]	; 0x68
 801126c:	4654      	mov	r4, sl
 801126e:	2205      	movs	r2, #5
 8011270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011274:	4851      	ldr	r0, [pc, #324]	; (80113bc <_svfiprintf_r+0x1ec>)
 8011276:	f000 fa41 	bl	80116fc <memchr>
 801127a:	9a04      	ldr	r2, [sp, #16]
 801127c:	b9d8      	cbnz	r0, 80112b6 <_svfiprintf_r+0xe6>
 801127e:	06d0      	lsls	r0, r2, #27
 8011280:	bf44      	itt	mi
 8011282:	2320      	movmi	r3, #32
 8011284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011288:	0711      	lsls	r1, r2, #28
 801128a:	bf44      	itt	mi
 801128c:	232b      	movmi	r3, #43	; 0x2b
 801128e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011292:	f89a 3000 	ldrb.w	r3, [sl]
 8011296:	2b2a      	cmp	r3, #42	; 0x2a
 8011298:	d015      	beq.n	80112c6 <_svfiprintf_r+0xf6>
 801129a:	4654      	mov	r4, sl
 801129c:	2000      	movs	r0, #0
 801129e:	f04f 0c0a 	mov.w	ip, #10
 80112a2:	9a07      	ldr	r2, [sp, #28]
 80112a4:	4621      	mov	r1, r4
 80112a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112aa:	3b30      	subs	r3, #48	; 0x30
 80112ac:	2b09      	cmp	r3, #9
 80112ae:	d94e      	bls.n	801134e <_svfiprintf_r+0x17e>
 80112b0:	b1b0      	cbz	r0, 80112e0 <_svfiprintf_r+0x110>
 80112b2:	9207      	str	r2, [sp, #28]
 80112b4:	e014      	b.n	80112e0 <_svfiprintf_r+0x110>
 80112b6:	eba0 0308 	sub.w	r3, r0, r8
 80112ba:	fa09 f303 	lsl.w	r3, r9, r3
 80112be:	4313      	orrs	r3, r2
 80112c0:	46a2      	mov	sl, r4
 80112c2:	9304      	str	r3, [sp, #16]
 80112c4:	e7d2      	b.n	801126c <_svfiprintf_r+0x9c>
 80112c6:	9b03      	ldr	r3, [sp, #12]
 80112c8:	1d19      	adds	r1, r3, #4
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	9103      	str	r1, [sp, #12]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	bfbb      	ittet	lt
 80112d2:	425b      	neglt	r3, r3
 80112d4:	f042 0202 	orrlt.w	r2, r2, #2
 80112d8:	9307      	strge	r3, [sp, #28]
 80112da:	9307      	strlt	r3, [sp, #28]
 80112dc:	bfb8      	it	lt
 80112de:	9204      	strlt	r2, [sp, #16]
 80112e0:	7823      	ldrb	r3, [r4, #0]
 80112e2:	2b2e      	cmp	r3, #46	; 0x2e
 80112e4:	d10c      	bne.n	8011300 <_svfiprintf_r+0x130>
 80112e6:	7863      	ldrb	r3, [r4, #1]
 80112e8:	2b2a      	cmp	r3, #42	; 0x2a
 80112ea:	d135      	bne.n	8011358 <_svfiprintf_r+0x188>
 80112ec:	9b03      	ldr	r3, [sp, #12]
 80112ee:	3402      	adds	r4, #2
 80112f0:	1d1a      	adds	r2, r3, #4
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	9203      	str	r2, [sp, #12]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bfb8      	it	lt
 80112fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80112fe:	9305      	str	r3, [sp, #20]
 8011300:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80113c0 <_svfiprintf_r+0x1f0>
 8011304:	2203      	movs	r2, #3
 8011306:	4650      	mov	r0, sl
 8011308:	7821      	ldrb	r1, [r4, #0]
 801130a:	f000 f9f7 	bl	80116fc <memchr>
 801130e:	b140      	cbz	r0, 8011322 <_svfiprintf_r+0x152>
 8011310:	2340      	movs	r3, #64	; 0x40
 8011312:	eba0 000a 	sub.w	r0, r0, sl
 8011316:	fa03 f000 	lsl.w	r0, r3, r0
 801131a:	9b04      	ldr	r3, [sp, #16]
 801131c:	3401      	adds	r4, #1
 801131e:	4303      	orrs	r3, r0
 8011320:	9304      	str	r3, [sp, #16]
 8011322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011326:	2206      	movs	r2, #6
 8011328:	4826      	ldr	r0, [pc, #152]	; (80113c4 <_svfiprintf_r+0x1f4>)
 801132a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801132e:	f000 f9e5 	bl	80116fc <memchr>
 8011332:	2800      	cmp	r0, #0
 8011334:	d038      	beq.n	80113a8 <_svfiprintf_r+0x1d8>
 8011336:	4b24      	ldr	r3, [pc, #144]	; (80113c8 <_svfiprintf_r+0x1f8>)
 8011338:	bb1b      	cbnz	r3, 8011382 <_svfiprintf_r+0x1b2>
 801133a:	9b03      	ldr	r3, [sp, #12]
 801133c:	3307      	adds	r3, #7
 801133e:	f023 0307 	bic.w	r3, r3, #7
 8011342:	3308      	adds	r3, #8
 8011344:	9303      	str	r3, [sp, #12]
 8011346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011348:	4433      	add	r3, r6
 801134a:	9309      	str	r3, [sp, #36]	; 0x24
 801134c:	e767      	b.n	801121e <_svfiprintf_r+0x4e>
 801134e:	460c      	mov	r4, r1
 8011350:	2001      	movs	r0, #1
 8011352:	fb0c 3202 	mla	r2, ip, r2, r3
 8011356:	e7a5      	b.n	80112a4 <_svfiprintf_r+0xd4>
 8011358:	2300      	movs	r3, #0
 801135a:	f04f 0c0a 	mov.w	ip, #10
 801135e:	4619      	mov	r1, r3
 8011360:	3401      	adds	r4, #1
 8011362:	9305      	str	r3, [sp, #20]
 8011364:	4620      	mov	r0, r4
 8011366:	f810 2b01 	ldrb.w	r2, [r0], #1
 801136a:	3a30      	subs	r2, #48	; 0x30
 801136c:	2a09      	cmp	r2, #9
 801136e:	d903      	bls.n	8011378 <_svfiprintf_r+0x1a8>
 8011370:	2b00      	cmp	r3, #0
 8011372:	d0c5      	beq.n	8011300 <_svfiprintf_r+0x130>
 8011374:	9105      	str	r1, [sp, #20]
 8011376:	e7c3      	b.n	8011300 <_svfiprintf_r+0x130>
 8011378:	4604      	mov	r4, r0
 801137a:	2301      	movs	r3, #1
 801137c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011380:	e7f0      	b.n	8011364 <_svfiprintf_r+0x194>
 8011382:	ab03      	add	r3, sp, #12
 8011384:	9300      	str	r3, [sp, #0]
 8011386:	462a      	mov	r2, r5
 8011388:	4638      	mov	r0, r7
 801138a:	4b10      	ldr	r3, [pc, #64]	; (80113cc <_svfiprintf_r+0x1fc>)
 801138c:	a904      	add	r1, sp, #16
 801138e:	f3af 8000 	nop.w
 8011392:	1c42      	adds	r2, r0, #1
 8011394:	4606      	mov	r6, r0
 8011396:	d1d6      	bne.n	8011346 <_svfiprintf_r+0x176>
 8011398:	89ab      	ldrh	r3, [r5, #12]
 801139a:	065b      	lsls	r3, r3, #25
 801139c:	f53f af2c 	bmi.w	80111f8 <_svfiprintf_r+0x28>
 80113a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113a2:	b01d      	add	sp, #116	; 0x74
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	ab03      	add	r3, sp, #12
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	462a      	mov	r2, r5
 80113ae:	4638      	mov	r0, r7
 80113b0:	4b06      	ldr	r3, [pc, #24]	; (80113cc <_svfiprintf_r+0x1fc>)
 80113b2:	a904      	add	r1, sp, #16
 80113b4:	f000 f87c 	bl	80114b0 <_printf_i>
 80113b8:	e7eb      	b.n	8011392 <_svfiprintf_r+0x1c2>
 80113ba:	bf00      	nop
 80113bc:	08011d85 	.word	0x08011d85
 80113c0:	08011d8b 	.word	0x08011d8b
 80113c4:	08011d8f 	.word	0x08011d8f
 80113c8:	00000000 	.word	0x00000000
 80113cc:	08011119 	.word	0x08011119

080113d0 <_printf_common>:
 80113d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d4:	4616      	mov	r6, r2
 80113d6:	4699      	mov	r9, r3
 80113d8:	688a      	ldr	r2, [r1, #8]
 80113da:	690b      	ldr	r3, [r1, #16]
 80113dc:	4607      	mov	r7, r0
 80113de:	4293      	cmp	r3, r2
 80113e0:	bfb8      	it	lt
 80113e2:	4613      	movlt	r3, r2
 80113e4:	6033      	str	r3, [r6, #0]
 80113e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113ea:	460c      	mov	r4, r1
 80113ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113f0:	b10a      	cbz	r2, 80113f6 <_printf_common+0x26>
 80113f2:	3301      	adds	r3, #1
 80113f4:	6033      	str	r3, [r6, #0]
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	0699      	lsls	r1, r3, #26
 80113fa:	bf42      	ittt	mi
 80113fc:	6833      	ldrmi	r3, [r6, #0]
 80113fe:	3302      	addmi	r3, #2
 8011400:	6033      	strmi	r3, [r6, #0]
 8011402:	6825      	ldr	r5, [r4, #0]
 8011404:	f015 0506 	ands.w	r5, r5, #6
 8011408:	d106      	bne.n	8011418 <_printf_common+0x48>
 801140a:	f104 0a19 	add.w	sl, r4, #25
 801140e:	68e3      	ldr	r3, [r4, #12]
 8011410:	6832      	ldr	r2, [r6, #0]
 8011412:	1a9b      	subs	r3, r3, r2
 8011414:	42ab      	cmp	r3, r5
 8011416:	dc28      	bgt.n	801146a <_printf_common+0x9a>
 8011418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801141c:	1e13      	subs	r3, r2, #0
 801141e:	6822      	ldr	r2, [r4, #0]
 8011420:	bf18      	it	ne
 8011422:	2301      	movne	r3, #1
 8011424:	0692      	lsls	r2, r2, #26
 8011426:	d42d      	bmi.n	8011484 <_printf_common+0xb4>
 8011428:	4649      	mov	r1, r9
 801142a:	4638      	mov	r0, r7
 801142c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011430:	47c0      	blx	r8
 8011432:	3001      	adds	r0, #1
 8011434:	d020      	beq.n	8011478 <_printf_common+0xa8>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	68e5      	ldr	r5, [r4, #12]
 801143a:	f003 0306 	and.w	r3, r3, #6
 801143e:	2b04      	cmp	r3, #4
 8011440:	bf18      	it	ne
 8011442:	2500      	movne	r5, #0
 8011444:	6832      	ldr	r2, [r6, #0]
 8011446:	f04f 0600 	mov.w	r6, #0
 801144a:	68a3      	ldr	r3, [r4, #8]
 801144c:	bf08      	it	eq
 801144e:	1aad      	subeq	r5, r5, r2
 8011450:	6922      	ldr	r2, [r4, #16]
 8011452:	bf08      	it	eq
 8011454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011458:	4293      	cmp	r3, r2
 801145a:	bfc4      	itt	gt
 801145c:	1a9b      	subgt	r3, r3, r2
 801145e:	18ed      	addgt	r5, r5, r3
 8011460:	341a      	adds	r4, #26
 8011462:	42b5      	cmp	r5, r6
 8011464:	d11a      	bne.n	801149c <_printf_common+0xcc>
 8011466:	2000      	movs	r0, #0
 8011468:	e008      	b.n	801147c <_printf_common+0xac>
 801146a:	2301      	movs	r3, #1
 801146c:	4652      	mov	r2, sl
 801146e:	4649      	mov	r1, r9
 8011470:	4638      	mov	r0, r7
 8011472:	47c0      	blx	r8
 8011474:	3001      	adds	r0, #1
 8011476:	d103      	bne.n	8011480 <_printf_common+0xb0>
 8011478:	f04f 30ff 	mov.w	r0, #4294967295
 801147c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011480:	3501      	adds	r5, #1
 8011482:	e7c4      	b.n	801140e <_printf_common+0x3e>
 8011484:	2030      	movs	r0, #48	; 0x30
 8011486:	18e1      	adds	r1, r4, r3
 8011488:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801148c:	1c5a      	adds	r2, r3, #1
 801148e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011492:	4422      	add	r2, r4
 8011494:	3302      	adds	r3, #2
 8011496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801149a:	e7c5      	b.n	8011428 <_printf_common+0x58>
 801149c:	2301      	movs	r3, #1
 801149e:	4622      	mov	r2, r4
 80114a0:	4649      	mov	r1, r9
 80114a2:	4638      	mov	r0, r7
 80114a4:	47c0      	blx	r8
 80114a6:	3001      	adds	r0, #1
 80114a8:	d0e6      	beq.n	8011478 <_printf_common+0xa8>
 80114aa:	3601      	adds	r6, #1
 80114ac:	e7d9      	b.n	8011462 <_printf_common+0x92>
	...

080114b0 <_printf_i>:
 80114b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114b4:	7e0f      	ldrb	r7, [r1, #24]
 80114b6:	4691      	mov	r9, r2
 80114b8:	2f78      	cmp	r7, #120	; 0x78
 80114ba:	4680      	mov	r8, r0
 80114bc:	460c      	mov	r4, r1
 80114be:	469a      	mov	sl, r3
 80114c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80114c6:	d807      	bhi.n	80114d8 <_printf_i+0x28>
 80114c8:	2f62      	cmp	r7, #98	; 0x62
 80114ca:	d80a      	bhi.n	80114e2 <_printf_i+0x32>
 80114cc:	2f00      	cmp	r7, #0
 80114ce:	f000 80d9 	beq.w	8011684 <_printf_i+0x1d4>
 80114d2:	2f58      	cmp	r7, #88	; 0x58
 80114d4:	f000 80a4 	beq.w	8011620 <_printf_i+0x170>
 80114d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114e0:	e03a      	b.n	8011558 <_printf_i+0xa8>
 80114e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114e6:	2b15      	cmp	r3, #21
 80114e8:	d8f6      	bhi.n	80114d8 <_printf_i+0x28>
 80114ea:	a101      	add	r1, pc, #4	; (adr r1, 80114f0 <_printf_i+0x40>)
 80114ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114f0:	08011549 	.word	0x08011549
 80114f4:	0801155d 	.word	0x0801155d
 80114f8:	080114d9 	.word	0x080114d9
 80114fc:	080114d9 	.word	0x080114d9
 8011500:	080114d9 	.word	0x080114d9
 8011504:	080114d9 	.word	0x080114d9
 8011508:	0801155d 	.word	0x0801155d
 801150c:	080114d9 	.word	0x080114d9
 8011510:	080114d9 	.word	0x080114d9
 8011514:	080114d9 	.word	0x080114d9
 8011518:	080114d9 	.word	0x080114d9
 801151c:	0801166b 	.word	0x0801166b
 8011520:	0801158d 	.word	0x0801158d
 8011524:	0801164d 	.word	0x0801164d
 8011528:	080114d9 	.word	0x080114d9
 801152c:	080114d9 	.word	0x080114d9
 8011530:	0801168d 	.word	0x0801168d
 8011534:	080114d9 	.word	0x080114d9
 8011538:	0801158d 	.word	0x0801158d
 801153c:	080114d9 	.word	0x080114d9
 8011540:	080114d9 	.word	0x080114d9
 8011544:	08011655 	.word	0x08011655
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	1d1a      	adds	r2, r3, #4
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	602a      	str	r2, [r5, #0]
 8011550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011558:	2301      	movs	r3, #1
 801155a:	e0a4      	b.n	80116a6 <_printf_i+0x1f6>
 801155c:	6820      	ldr	r0, [r4, #0]
 801155e:	6829      	ldr	r1, [r5, #0]
 8011560:	0606      	lsls	r6, r0, #24
 8011562:	f101 0304 	add.w	r3, r1, #4
 8011566:	d50a      	bpl.n	801157e <_printf_i+0xce>
 8011568:	680e      	ldr	r6, [r1, #0]
 801156a:	602b      	str	r3, [r5, #0]
 801156c:	2e00      	cmp	r6, #0
 801156e:	da03      	bge.n	8011578 <_printf_i+0xc8>
 8011570:	232d      	movs	r3, #45	; 0x2d
 8011572:	4276      	negs	r6, r6
 8011574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011578:	230a      	movs	r3, #10
 801157a:	485e      	ldr	r0, [pc, #376]	; (80116f4 <_printf_i+0x244>)
 801157c:	e019      	b.n	80115b2 <_printf_i+0x102>
 801157e:	680e      	ldr	r6, [r1, #0]
 8011580:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011584:	602b      	str	r3, [r5, #0]
 8011586:	bf18      	it	ne
 8011588:	b236      	sxthne	r6, r6
 801158a:	e7ef      	b.n	801156c <_printf_i+0xbc>
 801158c:	682b      	ldr	r3, [r5, #0]
 801158e:	6820      	ldr	r0, [r4, #0]
 8011590:	1d19      	adds	r1, r3, #4
 8011592:	6029      	str	r1, [r5, #0]
 8011594:	0601      	lsls	r1, r0, #24
 8011596:	d501      	bpl.n	801159c <_printf_i+0xec>
 8011598:	681e      	ldr	r6, [r3, #0]
 801159a:	e002      	b.n	80115a2 <_printf_i+0xf2>
 801159c:	0646      	lsls	r6, r0, #25
 801159e:	d5fb      	bpl.n	8011598 <_printf_i+0xe8>
 80115a0:	881e      	ldrh	r6, [r3, #0]
 80115a2:	2f6f      	cmp	r7, #111	; 0x6f
 80115a4:	bf0c      	ite	eq
 80115a6:	2308      	moveq	r3, #8
 80115a8:	230a      	movne	r3, #10
 80115aa:	4852      	ldr	r0, [pc, #328]	; (80116f4 <_printf_i+0x244>)
 80115ac:	2100      	movs	r1, #0
 80115ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115b2:	6865      	ldr	r5, [r4, #4]
 80115b4:	2d00      	cmp	r5, #0
 80115b6:	bfa8      	it	ge
 80115b8:	6821      	ldrge	r1, [r4, #0]
 80115ba:	60a5      	str	r5, [r4, #8]
 80115bc:	bfa4      	itt	ge
 80115be:	f021 0104 	bicge.w	r1, r1, #4
 80115c2:	6021      	strge	r1, [r4, #0]
 80115c4:	b90e      	cbnz	r6, 80115ca <_printf_i+0x11a>
 80115c6:	2d00      	cmp	r5, #0
 80115c8:	d04d      	beq.n	8011666 <_printf_i+0x1b6>
 80115ca:	4615      	mov	r5, r2
 80115cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80115d0:	fb03 6711 	mls	r7, r3, r1, r6
 80115d4:	5dc7      	ldrb	r7, [r0, r7]
 80115d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80115da:	4637      	mov	r7, r6
 80115dc:	42bb      	cmp	r3, r7
 80115de:	460e      	mov	r6, r1
 80115e0:	d9f4      	bls.n	80115cc <_printf_i+0x11c>
 80115e2:	2b08      	cmp	r3, #8
 80115e4:	d10b      	bne.n	80115fe <_printf_i+0x14e>
 80115e6:	6823      	ldr	r3, [r4, #0]
 80115e8:	07de      	lsls	r6, r3, #31
 80115ea:	d508      	bpl.n	80115fe <_printf_i+0x14e>
 80115ec:	6923      	ldr	r3, [r4, #16]
 80115ee:	6861      	ldr	r1, [r4, #4]
 80115f0:	4299      	cmp	r1, r3
 80115f2:	bfde      	ittt	le
 80115f4:	2330      	movle	r3, #48	; 0x30
 80115f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80115fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80115fe:	1b52      	subs	r2, r2, r5
 8011600:	6122      	str	r2, [r4, #16]
 8011602:	464b      	mov	r3, r9
 8011604:	4621      	mov	r1, r4
 8011606:	4640      	mov	r0, r8
 8011608:	f8cd a000 	str.w	sl, [sp]
 801160c:	aa03      	add	r2, sp, #12
 801160e:	f7ff fedf 	bl	80113d0 <_printf_common>
 8011612:	3001      	adds	r0, #1
 8011614:	d14c      	bne.n	80116b0 <_printf_i+0x200>
 8011616:	f04f 30ff 	mov.w	r0, #4294967295
 801161a:	b004      	add	sp, #16
 801161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011620:	4834      	ldr	r0, [pc, #208]	; (80116f4 <_printf_i+0x244>)
 8011622:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011626:	6829      	ldr	r1, [r5, #0]
 8011628:	6823      	ldr	r3, [r4, #0]
 801162a:	f851 6b04 	ldr.w	r6, [r1], #4
 801162e:	6029      	str	r1, [r5, #0]
 8011630:	061d      	lsls	r5, r3, #24
 8011632:	d514      	bpl.n	801165e <_printf_i+0x1ae>
 8011634:	07df      	lsls	r7, r3, #31
 8011636:	bf44      	itt	mi
 8011638:	f043 0320 	orrmi.w	r3, r3, #32
 801163c:	6023      	strmi	r3, [r4, #0]
 801163e:	b91e      	cbnz	r6, 8011648 <_printf_i+0x198>
 8011640:	6823      	ldr	r3, [r4, #0]
 8011642:	f023 0320 	bic.w	r3, r3, #32
 8011646:	6023      	str	r3, [r4, #0]
 8011648:	2310      	movs	r3, #16
 801164a:	e7af      	b.n	80115ac <_printf_i+0xfc>
 801164c:	6823      	ldr	r3, [r4, #0]
 801164e:	f043 0320 	orr.w	r3, r3, #32
 8011652:	6023      	str	r3, [r4, #0]
 8011654:	2378      	movs	r3, #120	; 0x78
 8011656:	4828      	ldr	r0, [pc, #160]	; (80116f8 <_printf_i+0x248>)
 8011658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801165c:	e7e3      	b.n	8011626 <_printf_i+0x176>
 801165e:	0659      	lsls	r1, r3, #25
 8011660:	bf48      	it	mi
 8011662:	b2b6      	uxthmi	r6, r6
 8011664:	e7e6      	b.n	8011634 <_printf_i+0x184>
 8011666:	4615      	mov	r5, r2
 8011668:	e7bb      	b.n	80115e2 <_printf_i+0x132>
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	6826      	ldr	r6, [r4, #0]
 801166e:	1d18      	adds	r0, r3, #4
 8011670:	6961      	ldr	r1, [r4, #20]
 8011672:	6028      	str	r0, [r5, #0]
 8011674:	0635      	lsls	r5, r6, #24
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	d501      	bpl.n	801167e <_printf_i+0x1ce>
 801167a:	6019      	str	r1, [r3, #0]
 801167c:	e002      	b.n	8011684 <_printf_i+0x1d4>
 801167e:	0670      	lsls	r0, r6, #25
 8011680:	d5fb      	bpl.n	801167a <_printf_i+0x1ca>
 8011682:	8019      	strh	r1, [r3, #0]
 8011684:	2300      	movs	r3, #0
 8011686:	4615      	mov	r5, r2
 8011688:	6123      	str	r3, [r4, #16]
 801168a:	e7ba      	b.n	8011602 <_printf_i+0x152>
 801168c:	682b      	ldr	r3, [r5, #0]
 801168e:	2100      	movs	r1, #0
 8011690:	1d1a      	adds	r2, r3, #4
 8011692:	602a      	str	r2, [r5, #0]
 8011694:	681d      	ldr	r5, [r3, #0]
 8011696:	6862      	ldr	r2, [r4, #4]
 8011698:	4628      	mov	r0, r5
 801169a:	f000 f82f 	bl	80116fc <memchr>
 801169e:	b108      	cbz	r0, 80116a4 <_printf_i+0x1f4>
 80116a0:	1b40      	subs	r0, r0, r5
 80116a2:	6060      	str	r0, [r4, #4]
 80116a4:	6863      	ldr	r3, [r4, #4]
 80116a6:	6123      	str	r3, [r4, #16]
 80116a8:	2300      	movs	r3, #0
 80116aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116ae:	e7a8      	b.n	8011602 <_printf_i+0x152>
 80116b0:	462a      	mov	r2, r5
 80116b2:	4649      	mov	r1, r9
 80116b4:	4640      	mov	r0, r8
 80116b6:	6923      	ldr	r3, [r4, #16]
 80116b8:	47d0      	blx	sl
 80116ba:	3001      	adds	r0, #1
 80116bc:	d0ab      	beq.n	8011616 <_printf_i+0x166>
 80116be:	6823      	ldr	r3, [r4, #0]
 80116c0:	079b      	lsls	r3, r3, #30
 80116c2:	d413      	bmi.n	80116ec <_printf_i+0x23c>
 80116c4:	68e0      	ldr	r0, [r4, #12]
 80116c6:	9b03      	ldr	r3, [sp, #12]
 80116c8:	4298      	cmp	r0, r3
 80116ca:	bfb8      	it	lt
 80116cc:	4618      	movlt	r0, r3
 80116ce:	e7a4      	b.n	801161a <_printf_i+0x16a>
 80116d0:	2301      	movs	r3, #1
 80116d2:	4632      	mov	r2, r6
 80116d4:	4649      	mov	r1, r9
 80116d6:	4640      	mov	r0, r8
 80116d8:	47d0      	blx	sl
 80116da:	3001      	adds	r0, #1
 80116dc:	d09b      	beq.n	8011616 <_printf_i+0x166>
 80116de:	3501      	adds	r5, #1
 80116e0:	68e3      	ldr	r3, [r4, #12]
 80116e2:	9903      	ldr	r1, [sp, #12]
 80116e4:	1a5b      	subs	r3, r3, r1
 80116e6:	42ab      	cmp	r3, r5
 80116e8:	dcf2      	bgt.n	80116d0 <_printf_i+0x220>
 80116ea:	e7eb      	b.n	80116c4 <_printf_i+0x214>
 80116ec:	2500      	movs	r5, #0
 80116ee:	f104 0619 	add.w	r6, r4, #25
 80116f2:	e7f5      	b.n	80116e0 <_printf_i+0x230>
 80116f4:	08011d96 	.word	0x08011d96
 80116f8:	08011da7 	.word	0x08011da7

080116fc <memchr>:
 80116fc:	4603      	mov	r3, r0
 80116fe:	b510      	push	{r4, lr}
 8011700:	b2c9      	uxtb	r1, r1
 8011702:	4402      	add	r2, r0
 8011704:	4293      	cmp	r3, r2
 8011706:	4618      	mov	r0, r3
 8011708:	d101      	bne.n	801170e <memchr+0x12>
 801170a:	2000      	movs	r0, #0
 801170c:	e003      	b.n	8011716 <memchr+0x1a>
 801170e:	7804      	ldrb	r4, [r0, #0]
 8011710:	3301      	adds	r3, #1
 8011712:	428c      	cmp	r4, r1
 8011714:	d1f6      	bne.n	8011704 <memchr+0x8>
 8011716:	bd10      	pop	{r4, pc}

08011718 <memmove>:
 8011718:	4288      	cmp	r0, r1
 801171a:	b510      	push	{r4, lr}
 801171c:	eb01 0402 	add.w	r4, r1, r2
 8011720:	d902      	bls.n	8011728 <memmove+0x10>
 8011722:	4284      	cmp	r4, r0
 8011724:	4623      	mov	r3, r4
 8011726:	d807      	bhi.n	8011738 <memmove+0x20>
 8011728:	1e43      	subs	r3, r0, #1
 801172a:	42a1      	cmp	r1, r4
 801172c:	d008      	beq.n	8011740 <memmove+0x28>
 801172e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011732:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011736:	e7f8      	b.n	801172a <memmove+0x12>
 8011738:	4601      	mov	r1, r0
 801173a:	4402      	add	r2, r0
 801173c:	428a      	cmp	r2, r1
 801173e:	d100      	bne.n	8011742 <memmove+0x2a>
 8011740:	bd10      	pop	{r4, pc}
 8011742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801174a:	e7f7      	b.n	801173c <memmove+0x24>

0801174c <_free_r>:
 801174c:	b538      	push	{r3, r4, r5, lr}
 801174e:	4605      	mov	r5, r0
 8011750:	2900      	cmp	r1, #0
 8011752:	d040      	beq.n	80117d6 <_free_r+0x8a>
 8011754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011758:	1f0c      	subs	r4, r1, #4
 801175a:	2b00      	cmp	r3, #0
 801175c:	bfb8      	it	lt
 801175e:	18e4      	addlt	r4, r4, r3
 8011760:	f000 f910 	bl	8011984 <__malloc_lock>
 8011764:	4a1c      	ldr	r2, [pc, #112]	; (80117d8 <_free_r+0x8c>)
 8011766:	6813      	ldr	r3, [r2, #0]
 8011768:	b933      	cbnz	r3, 8011778 <_free_r+0x2c>
 801176a:	6063      	str	r3, [r4, #4]
 801176c:	6014      	str	r4, [r2, #0]
 801176e:	4628      	mov	r0, r5
 8011770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011774:	f000 b90c 	b.w	8011990 <__malloc_unlock>
 8011778:	42a3      	cmp	r3, r4
 801177a:	d908      	bls.n	801178e <_free_r+0x42>
 801177c:	6820      	ldr	r0, [r4, #0]
 801177e:	1821      	adds	r1, r4, r0
 8011780:	428b      	cmp	r3, r1
 8011782:	bf01      	itttt	eq
 8011784:	6819      	ldreq	r1, [r3, #0]
 8011786:	685b      	ldreq	r3, [r3, #4]
 8011788:	1809      	addeq	r1, r1, r0
 801178a:	6021      	streq	r1, [r4, #0]
 801178c:	e7ed      	b.n	801176a <_free_r+0x1e>
 801178e:	461a      	mov	r2, r3
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	b10b      	cbz	r3, 8011798 <_free_r+0x4c>
 8011794:	42a3      	cmp	r3, r4
 8011796:	d9fa      	bls.n	801178e <_free_r+0x42>
 8011798:	6811      	ldr	r1, [r2, #0]
 801179a:	1850      	adds	r0, r2, r1
 801179c:	42a0      	cmp	r0, r4
 801179e:	d10b      	bne.n	80117b8 <_free_r+0x6c>
 80117a0:	6820      	ldr	r0, [r4, #0]
 80117a2:	4401      	add	r1, r0
 80117a4:	1850      	adds	r0, r2, r1
 80117a6:	4283      	cmp	r3, r0
 80117a8:	6011      	str	r1, [r2, #0]
 80117aa:	d1e0      	bne.n	801176e <_free_r+0x22>
 80117ac:	6818      	ldr	r0, [r3, #0]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	4401      	add	r1, r0
 80117b2:	6011      	str	r1, [r2, #0]
 80117b4:	6053      	str	r3, [r2, #4]
 80117b6:	e7da      	b.n	801176e <_free_r+0x22>
 80117b8:	d902      	bls.n	80117c0 <_free_r+0x74>
 80117ba:	230c      	movs	r3, #12
 80117bc:	602b      	str	r3, [r5, #0]
 80117be:	e7d6      	b.n	801176e <_free_r+0x22>
 80117c0:	6820      	ldr	r0, [r4, #0]
 80117c2:	1821      	adds	r1, r4, r0
 80117c4:	428b      	cmp	r3, r1
 80117c6:	bf01      	itttt	eq
 80117c8:	6819      	ldreq	r1, [r3, #0]
 80117ca:	685b      	ldreq	r3, [r3, #4]
 80117cc:	1809      	addeq	r1, r1, r0
 80117ce:	6021      	streq	r1, [r4, #0]
 80117d0:	6063      	str	r3, [r4, #4]
 80117d2:	6054      	str	r4, [r2, #4]
 80117d4:	e7cb      	b.n	801176e <_free_r+0x22>
 80117d6:	bd38      	pop	{r3, r4, r5, pc}
 80117d8:	2000048c 	.word	0x2000048c

080117dc <sbrk_aligned>:
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	4e0e      	ldr	r6, [pc, #56]	; (8011818 <sbrk_aligned+0x3c>)
 80117e0:	460c      	mov	r4, r1
 80117e2:	6831      	ldr	r1, [r6, #0]
 80117e4:	4605      	mov	r5, r0
 80117e6:	b911      	cbnz	r1, 80117ee <sbrk_aligned+0x12>
 80117e8:	f000 f8bc 	bl	8011964 <_sbrk_r>
 80117ec:	6030      	str	r0, [r6, #0]
 80117ee:	4621      	mov	r1, r4
 80117f0:	4628      	mov	r0, r5
 80117f2:	f000 f8b7 	bl	8011964 <_sbrk_r>
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	d00a      	beq.n	8011810 <sbrk_aligned+0x34>
 80117fa:	1cc4      	adds	r4, r0, #3
 80117fc:	f024 0403 	bic.w	r4, r4, #3
 8011800:	42a0      	cmp	r0, r4
 8011802:	d007      	beq.n	8011814 <sbrk_aligned+0x38>
 8011804:	1a21      	subs	r1, r4, r0
 8011806:	4628      	mov	r0, r5
 8011808:	f000 f8ac 	bl	8011964 <_sbrk_r>
 801180c:	3001      	adds	r0, #1
 801180e:	d101      	bne.n	8011814 <sbrk_aligned+0x38>
 8011810:	f04f 34ff 	mov.w	r4, #4294967295
 8011814:	4620      	mov	r0, r4
 8011816:	bd70      	pop	{r4, r5, r6, pc}
 8011818:	20000490 	.word	0x20000490

0801181c <_malloc_r>:
 801181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011820:	1ccd      	adds	r5, r1, #3
 8011822:	f025 0503 	bic.w	r5, r5, #3
 8011826:	3508      	adds	r5, #8
 8011828:	2d0c      	cmp	r5, #12
 801182a:	bf38      	it	cc
 801182c:	250c      	movcc	r5, #12
 801182e:	2d00      	cmp	r5, #0
 8011830:	4607      	mov	r7, r0
 8011832:	db01      	blt.n	8011838 <_malloc_r+0x1c>
 8011834:	42a9      	cmp	r1, r5
 8011836:	d905      	bls.n	8011844 <_malloc_r+0x28>
 8011838:	230c      	movs	r3, #12
 801183a:	2600      	movs	r6, #0
 801183c:	603b      	str	r3, [r7, #0]
 801183e:	4630      	mov	r0, r6
 8011840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011844:	4e2e      	ldr	r6, [pc, #184]	; (8011900 <_malloc_r+0xe4>)
 8011846:	f000 f89d 	bl	8011984 <__malloc_lock>
 801184a:	6833      	ldr	r3, [r6, #0]
 801184c:	461c      	mov	r4, r3
 801184e:	bb34      	cbnz	r4, 801189e <_malloc_r+0x82>
 8011850:	4629      	mov	r1, r5
 8011852:	4638      	mov	r0, r7
 8011854:	f7ff ffc2 	bl	80117dc <sbrk_aligned>
 8011858:	1c43      	adds	r3, r0, #1
 801185a:	4604      	mov	r4, r0
 801185c:	d14d      	bne.n	80118fa <_malloc_r+0xde>
 801185e:	6834      	ldr	r4, [r6, #0]
 8011860:	4626      	mov	r6, r4
 8011862:	2e00      	cmp	r6, #0
 8011864:	d140      	bne.n	80118e8 <_malloc_r+0xcc>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	4631      	mov	r1, r6
 801186a:	4638      	mov	r0, r7
 801186c:	eb04 0803 	add.w	r8, r4, r3
 8011870:	f000 f878 	bl	8011964 <_sbrk_r>
 8011874:	4580      	cmp	r8, r0
 8011876:	d13a      	bne.n	80118ee <_malloc_r+0xd2>
 8011878:	6821      	ldr	r1, [r4, #0]
 801187a:	3503      	adds	r5, #3
 801187c:	1a6d      	subs	r5, r5, r1
 801187e:	f025 0503 	bic.w	r5, r5, #3
 8011882:	3508      	adds	r5, #8
 8011884:	2d0c      	cmp	r5, #12
 8011886:	bf38      	it	cc
 8011888:	250c      	movcc	r5, #12
 801188a:	4638      	mov	r0, r7
 801188c:	4629      	mov	r1, r5
 801188e:	f7ff ffa5 	bl	80117dc <sbrk_aligned>
 8011892:	3001      	adds	r0, #1
 8011894:	d02b      	beq.n	80118ee <_malloc_r+0xd2>
 8011896:	6823      	ldr	r3, [r4, #0]
 8011898:	442b      	add	r3, r5
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	e00e      	b.n	80118bc <_malloc_r+0xa0>
 801189e:	6822      	ldr	r2, [r4, #0]
 80118a0:	1b52      	subs	r2, r2, r5
 80118a2:	d41e      	bmi.n	80118e2 <_malloc_r+0xc6>
 80118a4:	2a0b      	cmp	r2, #11
 80118a6:	d916      	bls.n	80118d6 <_malloc_r+0xba>
 80118a8:	1961      	adds	r1, r4, r5
 80118aa:	42a3      	cmp	r3, r4
 80118ac:	6025      	str	r5, [r4, #0]
 80118ae:	bf18      	it	ne
 80118b0:	6059      	strne	r1, [r3, #4]
 80118b2:	6863      	ldr	r3, [r4, #4]
 80118b4:	bf08      	it	eq
 80118b6:	6031      	streq	r1, [r6, #0]
 80118b8:	5162      	str	r2, [r4, r5]
 80118ba:	604b      	str	r3, [r1, #4]
 80118bc:	4638      	mov	r0, r7
 80118be:	f104 060b 	add.w	r6, r4, #11
 80118c2:	f000 f865 	bl	8011990 <__malloc_unlock>
 80118c6:	f026 0607 	bic.w	r6, r6, #7
 80118ca:	1d23      	adds	r3, r4, #4
 80118cc:	1af2      	subs	r2, r6, r3
 80118ce:	d0b6      	beq.n	801183e <_malloc_r+0x22>
 80118d0:	1b9b      	subs	r3, r3, r6
 80118d2:	50a3      	str	r3, [r4, r2]
 80118d4:	e7b3      	b.n	801183e <_malloc_r+0x22>
 80118d6:	6862      	ldr	r2, [r4, #4]
 80118d8:	42a3      	cmp	r3, r4
 80118da:	bf0c      	ite	eq
 80118dc:	6032      	streq	r2, [r6, #0]
 80118de:	605a      	strne	r2, [r3, #4]
 80118e0:	e7ec      	b.n	80118bc <_malloc_r+0xa0>
 80118e2:	4623      	mov	r3, r4
 80118e4:	6864      	ldr	r4, [r4, #4]
 80118e6:	e7b2      	b.n	801184e <_malloc_r+0x32>
 80118e8:	4634      	mov	r4, r6
 80118ea:	6876      	ldr	r6, [r6, #4]
 80118ec:	e7b9      	b.n	8011862 <_malloc_r+0x46>
 80118ee:	230c      	movs	r3, #12
 80118f0:	4638      	mov	r0, r7
 80118f2:	603b      	str	r3, [r7, #0]
 80118f4:	f000 f84c 	bl	8011990 <__malloc_unlock>
 80118f8:	e7a1      	b.n	801183e <_malloc_r+0x22>
 80118fa:	6025      	str	r5, [r4, #0]
 80118fc:	e7de      	b.n	80118bc <_malloc_r+0xa0>
 80118fe:	bf00      	nop
 8011900:	2000048c 	.word	0x2000048c

08011904 <_realloc_r>:
 8011904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011908:	4680      	mov	r8, r0
 801190a:	4614      	mov	r4, r2
 801190c:	460e      	mov	r6, r1
 801190e:	b921      	cbnz	r1, 801191a <_realloc_r+0x16>
 8011910:	4611      	mov	r1, r2
 8011912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011916:	f7ff bf81 	b.w	801181c <_malloc_r>
 801191a:	b92a      	cbnz	r2, 8011928 <_realloc_r+0x24>
 801191c:	f7ff ff16 	bl	801174c <_free_r>
 8011920:	4625      	mov	r5, r4
 8011922:	4628      	mov	r0, r5
 8011924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011928:	f000 f838 	bl	801199c <_malloc_usable_size_r>
 801192c:	4284      	cmp	r4, r0
 801192e:	4607      	mov	r7, r0
 8011930:	d802      	bhi.n	8011938 <_realloc_r+0x34>
 8011932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011936:	d812      	bhi.n	801195e <_realloc_r+0x5a>
 8011938:	4621      	mov	r1, r4
 801193a:	4640      	mov	r0, r8
 801193c:	f7ff ff6e 	bl	801181c <_malloc_r>
 8011940:	4605      	mov	r5, r0
 8011942:	2800      	cmp	r0, #0
 8011944:	d0ed      	beq.n	8011922 <_realloc_r+0x1e>
 8011946:	42bc      	cmp	r4, r7
 8011948:	4622      	mov	r2, r4
 801194a:	4631      	mov	r1, r6
 801194c:	bf28      	it	cs
 801194e:	463a      	movcs	r2, r7
 8011950:	f7ff fb12 	bl	8010f78 <memcpy>
 8011954:	4631      	mov	r1, r6
 8011956:	4640      	mov	r0, r8
 8011958:	f7ff fef8 	bl	801174c <_free_r>
 801195c:	e7e1      	b.n	8011922 <_realloc_r+0x1e>
 801195e:	4635      	mov	r5, r6
 8011960:	e7df      	b.n	8011922 <_realloc_r+0x1e>
	...

08011964 <_sbrk_r>:
 8011964:	b538      	push	{r3, r4, r5, lr}
 8011966:	2300      	movs	r3, #0
 8011968:	4d05      	ldr	r5, [pc, #20]	; (8011980 <_sbrk_r+0x1c>)
 801196a:	4604      	mov	r4, r0
 801196c:	4608      	mov	r0, r1
 801196e:	602b      	str	r3, [r5, #0]
 8011970:	f7fc fd58 	bl	800e424 <_sbrk>
 8011974:	1c43      	adds	r3, r0, #1
 8011976:	d102      	bne.n	801197e <_sbrk_r+0x1a>
 8011978:	682b      	ldr	r3, [r5, #0]
 801197a:	b103      	cbz	r3, 801197e <_sbrk_r+0x1a>
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	bd38      	pop	{r3, r4, r5, pc}
 8011980:	20000494 	.word	0x20000494

08011984 <__malloc_lock>:
 8011984:	4801      	ldr	r0, [pc, #4]	; (801198c <__malloc_lock+0x8>)
 8011986:	f000 b811 	b.w	80119ac <__retarget_lock_acquire_recursive>
 801198a:	bf00      	nop
 801198c:	20000498 	.word	0x20000498

08011990 <__malloc_unlock>:
 8011990:	4801      	ldr	r0, [pc, #4]	; (8011998 <__malloc_unlock+0x8>)
 8011992:	f000 b80c 	b.w	80119ae <__retarget_lock_release_recursive>
 8011996:	bf00      	nop
 8011998:	20000498 	.word	0x20000498

0801199c <_malloc_usable_size_r>:
 801199c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119a0:	1f18      	subs	r0, r3, #4
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	bfbc      	itt	lt
 80119a6:	580b      	ldrlt	r3, [r1, r0]
 80119a8:	18c0      	addlt	r0, r0, r3
 80119aa:	4770      	bx	lr

080119ac <__retarget_lock_acquire_recursive>:
 80119ac:	4770      	bx	lr

080119ae <__retarget_lock_release_recursive>:
 80119ae:	4770      	bx	lr

080119b0 <_init>:
 80119b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b2:	bf00      	nop
 80119b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119b6:	bc08      	pop	{r3}
 80119b8:	469e      	mov	lr, r3
 80119ba:	4770      	bx	lr

080119bc <_fini>:
 80119bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119be:	bf00      	nop
 80119c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119c2:	bc08      	pop	{r3}
 80119c4:	469e      	mov	lr, r3
 80119c6:	4770      	bx	lr
